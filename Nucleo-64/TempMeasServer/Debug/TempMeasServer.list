
TempMeasServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016374  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  080164b8  080164b8  000264b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016e68  08016e68  00026e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016e70  08016e70  00026e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016e74  08016e74  00026e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000008  08016e78  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000088  08016ef8  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000098c  2000009c  08016f09  0003009c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000a28  08016f09  00030a28  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  00030b5a  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  00040000  2**2
                  ALLOC
 13 .MB_MEM2      00000a76  200300e4  08016f09  000300e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .comment      00006a9a  00000000  00000000  00030b8e  2**0
                  CONTENTS, READONLY
 15 .iar.rtmodel  00000288  00000000  00000000  00037628  2**0
                  CONTENTS, READONLY
 16 .iar_vfe_header 00000030  00000000  00000000  000378b0  2**2
                  CONTENTS, READONLY
 17 .debug_info   00044fc3  00000000  00000000  000378e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007b0a  00000000  00000000  0007c8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 0000397c  00000000  00000000  000843b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000021a6  00000000  00000000  00087d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002e170  00000000  00000000  00089ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00036769  00000000  00000000  000b8042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0011004d  00000000  00000000  000ee7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000d924  00000000  00000000  001fe7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000053  00000000  00000000  0020c11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00002887  00000000  00000000  0020c16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000665  00000000  00000000  0020e9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    00005d96  00000000  00000000  0020f05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 000014d2  00000000  00000000  00214df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000048  00000000  00000000  002162c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000009c 	.word	0x2000009c
 800015c:	00000000 	.word	0x00000000
 8000160:	0801649c 	.word	0x0801649c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a0 	.word	0x200000a0
 800017c:	0801649c 	.word	0x0801649c

08000180 <ZbZclAppendInteger>:
 8000180:	b4f0      	push	{r4, r5, r6, r7}
 8000182:	0004      	movs	r4, r0
 8000184:	000d      	movs	r5, r1
 8000186:	9904      	ldr	r1, [sp, #16]
 8000188:	2700      	movs	r7, #0
 800018a:	2600      	movs	r6, #0
 800018c:	0010      	movs	r0, r2
 800018e:	b2c0      	uxtb	r0, r0
 8000190:	2808      	cmp	r0, #8
 8000192:	f000 80b2 	beq.w	80002fa <??ZbZclAppendInteger_0>
 8000196:	2809      	cmp	r0, #9
 8000198:	f000 80a4 	beq.w	80002e4 <??ZbZclAppendInteger_1>
 800019c:	280a      	cmp	r0, #10
 800019e:	f000 8096 	beq.w	80002ce <??ZbZclAppendInteger_2>
 80001a2:	280b      	cmp	r0, #11
 80001a4:	f000 8088 	beq.w	80002b8 <??ZbZclAppendInteger_3>
 80001a8:	280c      	cmp	r0, #12
 80001aa:	d07a      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 80001ac:	280d      	cmp	r0, #13
 80001ae:	d06d      	beq.n	800028c <??ZbZclAppendInteger_5>
 80001b0:	280e      	cmp	r0, #14
 80001b2:	d060      	beq.n	8000276 <??ZbZclAppendInteger_6>
 80001b4:	280f      	cmp	r0, #15
 80001b6:	d053      	beq.n	8000260 <??ZbZclAppendInteger_7>
 80001b8:	2810      	cmp	r0, #16
 80001ba:	d042      	beq.n	8000242 <??ZbZclAppendInteger_8>
 80001bc:	2818      	cmp	r0, #24
 80001be:	f000 809c 	beq.w	80002fa <??ZbZclAppendInteger_0>
 80001c2:	2819      	cmp	r0, #25
 80001c4:	f000 808e 	beq.w	80002e4 <??ZbZclAppendInteger_1>
 80001c8:	281a      	cmp	r0, #26
 80001ca:	f000 8080 	beq.w	80002ce <??ZbZclAppendInteger_2>
 80001ce:	281b      	cmp	r0, #27
 80001d0:	d072      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 80001d2:	281c      	cmp	r0, #28
 80001d4:	d065      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 80001d6:	281d      	cmp	r0, #29
 80001d8:	d058      	beq.n	800028c <??ZbZclAppendInteger_5>
 80001da:	281e      	cmp	r0, #30
 80001dc:	d04b      	beq.n	8000276 <??ZbZclAppendInteger_6>
 80001de:	281f      	cmp	r0, #31
 80001e0:	d03e      	beq.n	8000260 <??ZbZclAppendInteger_7>
 80001e2:	2820      	cmp	r0, #32
 80001e4:	f000 8089 	beq.w	80002fa <??ZbZclAppendInteger_0>
 80001e8:	2821      	cmp	r0, #33	; 0x21
 80001ea:	d07b      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 80001ec:	2822      	cmp	r0, #34	; 0x22
 80001ee:	d06e      	beq.n	80002ce <??ZbZclAppendInteger_2>
 80001f0:	2823      	cmp	r0, #35	; 0x23
 80001f2:	d061      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 80001f4:	2824      	cmp	r0, #36	; 0x24
 80001f6:	d054      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 80001f8:	2825      	cmp	r0, #37	; 0x25
 80001fa:	d047      	beq.n	800028c <??ZbZclAppendInteger_5>
 80001fc:	2826      	cmp	r0, #38	; 0x26
 80001fe:	d03a      	beq.n	8000276 <??ZbZclAppendInteger_6>
 8000200:	2827      	cmp	r0, #39	; 0x27
 8000202:	d02d      	beq.n	8000260 <??ZbZclAppendInteger_7>
 8000204:	2828      	cmp	r0, #40	; 0x28
 8000206:	d078      	beq.n	80002fa <??ZbZclAppendInteger_0>
 8000208:	2829      	cmp	r0, #41	; 0x29
 800020a:	d06b      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 800020c:	282a      	cmp	r0, #42	; 0x2a
 800020e:	d05e      	beq.n	80002ce <??ZbZclAppendInteger_2>
 8000210:	282b      	cmp	r0, #43	; 0x2b
 8000212:	d051      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 8000214:	282c      	cmp	r0, #44	; 0x2c
 8000216:	d044      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 8000218:	282d      	cmp	r0, #45	; 0x2d
 800021a:	d037      	beq.n	800028c <??ZbZclAppendInteger_5>
 800021c:	282e      	cmp	r0, #46	; 0x2e
 800021e:	d02a      	beq.n	8000276 <??ZbZclAppendInteger_6>
 8000220:	282f      	cmp	r0, #47	; 0x2f
 8000222:	d01d      	beq.n	8000260 <??ZbZclAppendInteger_7>
 8000224:	2830      	cmp	r0, #48	; 0x30
 8000226:	d068      	beq.n	80002fa <??ZbZclAppendInteger_0>
 8000228:	2831      	cmp	r0, #49	; 0x31
 800022a:	d05b      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 800022c:	28e2      	cmp	r0, #226	; 0xe2
 800022e:	d043      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 8000230:	28e8      	cmp	r0, #232	; 0xe8
 8000232:	d057      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 8000234:	28e9      	cmp	r0, #233	; 0xe9
 8000236:	d055      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 8000238:	28ea      	cmp	r0, #234	; 0xea
 800023a:	d03d      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 800023c:	28f0      	cmp	r0, #240	; 0xf0
 800023e:	d00f      	beq.n	8000260 <??ZbZclAppendInteger_7>
 8000240:	e064      	b.n	800030c <??ZbZclAppendInteger_9>

08000242 <??ZbZclAppendInteger_8>:
 8000242:	2900      	cmp	r1, #0
 8000244:	d102      	bne.n	800024c <??ZbZclAppendInteger_10>
 8000246:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800024a:	e061      	b.n	8000310 <??ZbZclAppendInteger_11>

0800024c <??ZbZclAppendInteger_10>:
 800024c:	2d00      	cmp	r5, #0
 800024e:	d101      	bne.n	8000254 <??ZbZclAppendInteger_12>
 8000250:	2c00      	cmp	r4, #0
 8000252:	d001      	beq.n	8000258 <??ZbZclAppendInteger_13>

08000254 <??ZbZclAppendInteger_12>:
 8000254:	2001      	movs	r0, #1
 8000256:	e000      	b.n	800025a <??ZbZclAppendInteger_14>

08000258 <??ZbZclAppendInteger_13>:
 8000258:	2000      	movs	r0, #0

0800025a <??ZbZclAppendInteger_14>:
 800025a:	7018      	strb	r0, [r3, #0]
 800025c:	2001      	movs	r0, #1
 800025e:	e057      	b.n	8000310 <??ZbZclAppendInteger_11>

08000260 <??ZbZclAppendInteger_7>:
 8000260:	428f      	cmp	r7, r1
 8000262:	d302      	bcc.n	800026a <??ZbZclAppendInteger_15>
 8000264:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8000268:	e052      	b.n	8000310 <??ZbZclAppendInteger_11>

0800026a <??ZbZclAppendInteger_15>:
 800026a:	55dc      	strb	r4, [r3, r7]
 800026c:	1c7f      	adds	r7, r7, #1
 800026e:	0a24      	lsrs	r4, r4, #8
 8000270:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8000274:	0a2d      	lsrs	r5, r5, #8

08000276 <??ZbZclAppendInteger_6>:
 8000276:	428f      	cmp	r7, r1
 8000278:	d302      	bcc.n	8000280 <??ZbZclAppendInteger_16>
 800027a:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800027e:	e047      	b.n	8000310 <??ZbZclAppendInteger_11>

08000280 <??ZbZclAppendInteger_16>:
 8000280:	55dc      	strb	r4, [r3, r7]
 8000282:	1c7f      	adds	r7, r7, #1
 8000284:	0a24      	lsrs	r4, r4, #8
 8000286:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800028a:	0a2d      	lsrs	r5, r5, #8

0800028c <??ZbZclAppendInteger_5>:
 800028c:	428f      	cmp	r7, r1
 800028e:	d302      	bcc.n	8000296 <??ZbZclAppendInteger_17>
 8000290:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8000294:	e03c      	b.n	8000310 <??ZbZclAppendInteger_11>

08000296 <??ZbZclAppendInteger_17>:
 8000296:	55dc      	strb	r4, [r3, r7]
 8000298:	1c7f      	adds	r7, r7, #1
 800029a:	0a24      	lsrs	r4, r4, #8
 800029c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002a0:	0a2d      	lsrs	r5, r5, #8

080002a2 <??ZbZclAppendInteger_4>:
 80002a2:	428f      	cmp	r7, r1
 80002a4:	d302      	bcc.n	80002ac <??ZbZclAppendInteger_18>
 80002a6:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80002aa:	e031      	b.n	8000310 <??ZbZclAppendInteger_11>

080002ac <??ZbZclAppendInteger_18>:
 80002ac:	55dc      	strb	r4, [r3, r7]
 80002ae:	1c7f      	adds	r7, r7, #1
 80002b0:	0a24      	lsrs	r4, r4, #8
 80002b2:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002b6:	0a2d      	lsrs	r5, r5, #8

080002b8 <??ZbZclAppendInteger_3>:
 80002b8:	428f      	cmp	r7, r1
 80002ba:	d302      	bcc.n	80002c2 <??ZbZclAppendInteger_19>
 80002bc:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80002c0:	e026      	b.n	8000310 <??ZbZclAppendInteger_11>

080002c2 <??ZbZclAppendInteger_19>:
 80002c2:	55dc      	strb	r4, [r3, r7]
 80002c4:	1c7f      	adds	r7, r7, #1
 80002c6:	0a24      	lsrs	r4, r4, #8
 80002c8:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002cc:	0a2d      	lsrs	r5, r5, #8

080002ce <??ZbZclAppendInteger_2>:
 80002ce:	428f      	cmp	r7, r1
 80002d0:	d302      	bcc.n	80002d8 <??ZbZclAppendInteger_20>
 80002d2:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80002d6:	e01b      	b.n	8000310 <??ZbZclAppendInteger_11>

080002d8 <??ZbZclAppendInteger_20>:
 80002d8:	55dc      	strb	r4, [r3, r7]
 80002da:	1c7f      	adds	r7, r7, #1
 80002dc:	0a24      	lsrs	r4, r4, #8
 80002de:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002e2:	0a2d      	lsrs	r5, r5, #8

080002e4 <??ZbZclAppendInteger_1>:
 80002e4:	428f      	cmp	r7, r1
 80002e6:	d302      	bcc.n	80002ee <??ZbZclAppendInteger_21>
 80002e8:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80002ec:	e010      	b.n	8000310 <??ZbZclAppendInteger_11>

080002ee <??ZbZclAppendInteger_21>:
 80002ee:	55dc      	strb	r4, [r3, r7]
 80002f0:	1c7f      	adds	r7, r7, #1
 80002f2:	0a24      	lsrs	r4, r4, #8
 80002f4:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002f8:	0a2d      	lsrs	r5, r5, #8

080002fa <??ZbZclAppendInteger_0>:
 80002fa:	428f      	cmp	r7, r1
 80002fc:	d302      	bcc.n	8000304 <??ZbZclAppendInteger_22>
 80002fe:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8000302:	e005      	b.n	8000310 <??ZbZclAppendInteger_11>

08000304 <??ZbZclAppendInteger_22>:
 8000304:	55dc      	strb	r4, [r3, r7]
 8000306:	1c7f      	adds	r7, r7, #1
 8000308:	0038      	movs	r0, r7
 800030a:	e001      	b.n	8000310 <??ZbZclAppendInteger_11>

0800030c <??ZbZclAppendInteger_9>:
 800030c:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff

08000310 <??ZbZclAppendInteger_11>:
 8000310:	bcf0      	pop	{r4, r5, r6, r7}
 8000312:	4770      	bx	lr

08000314 <ZbZclParseInteger>:
 8000314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000318:	4683      	mov	fp, r0
 800031a:	000e      	movs	r6, r1
 800031c:	4692      	mov	sl, r2
 800031e:	2700      	movs	r7, #0
 8000320:	2400      	movs	r4, #0
 8000322:	2500      	movs	r5, #0
 8000324:	f05f 0800 	movs.w	r8, #0
 8000328:	f05f 0900 	movs.w	r9, #0
 800032c:	4658      	mov	r0, fp
 800032e:	b2c0      	uxtb	r0, r0
 8000330:	f000 f91e 	bl	8000570 <ZbZclAttrIsInteger>
 8000334:	2800      	cmp	r0, #0
 8000336:	d105      	bne.n	8000344 <??ZbZclParseInteger_0>
 8000338:	208d      	movs	r0, #141	; 0x8d
 800033a:	f88a 0000 	strb.w	r0, [sl]
 800033e:	2000      	movs	r0, #0
 8000340:	2100      	movs	r1, #0
 8000342:	e113      	b.n	800056c <??ZbZclParseInteger_1>

08000344 <??ZbZclParseInteger_0>:
 8000344:	2000      	movs	r0, #0
 8000346:	f88a 0000 	strb.w	r0, [sl]
 800034a:	4658      	mov	r0, fp
 800034c:	b2c0      	uxtb	r0, r0
 800034e:	2808      	cmp	r0, #8
 8000350:	f000 8097 	beq.w	8000482 <??ZbZclParseInteger_2>
 8000354:	2809      	cmp	r0, #9
 8000356:	f000 808a 	beq.w	800046e <??ZbZclParseInteger_3>
 800035a:	280a      	cmp	r0, #10
 800035c:	d07d      	beq.n	800045a <??ZbZclParseInteger_4>
 800035e:	280b      	cmp	r0, #11
 8000360:	d071      	beq.n	8000446 <??ZbZclParseInteger_5>
 8000362:	280c      	cmp	r0, #12
 8000364:	d065      	beq.n	8000432 <??ZbZclParseInteger_6>
 8000366:	280d      	cmp	r0, #13
 8000368:	d059      	beq.n	800041e <??ZbZclParseInteger_7>
 800036a:	280e      	cmp	r0, #14
 800036c:	d04d      	beq.n	800040a <??ZbZclParseInteger_8>
 800036e:	280f      	cmp	r0, #15
 8000370:	d046      	beq.n	8000400 <??ZbZclParseInteger_9>
 8000372:	2810      	cmp	r0, #16
 8000374:	f000 8085 	beq.w	8000482 <??ZbZclParseInteger_2>
 8000378:	2818      	cmp	r0, #24
 800037a:	f000 8082 	beq.w	8000482 <??ZbZclParseInteger_2>
 800037e:	2819      	cmp	r0, #25
 8000380:	d075      	beq.n	800046e <??ZbZclParseInteger_3>
 8000382:	281a      	cmp	r0, #26
 8000384:	d069      	beq.n	800045a <??ZbZclParseInteger_4>
 8000386:	281b      	cmp	r0, #27
 8000388:	d05d      	beq.n	8000446 <??ZbZclParseInteger_5>
 800038a:	281c      	cmp	r0, #28
 800038c:	d051      	beq.n	8000432 <??ZbZclParseInteger_6>
 800038e:	281d      	cmp	r0, #29
 8000390:	d045      	beq.n	800041e <??ZbZclParseInteger_7>
 8000392:	281e      	cmp	r0, #30
 8000394:	d039      	beq.n	800040a <??ZbZclParseInteger_8>
 8000396:	281f      	cmp	r0, #31
 8000398:	d032      	beq.n	8000400 <??ZbZclParseInteger_9>
 800039a:	2820      	cmp	r0, #32
 800039c:	d071      	beq.n	8000482 <??ZbZclParseInteger_2>
 800039e:	2821      	cmp	r0, #33	; 0x21
 80003a0:	d065      	beq.n	800046e <??ZbZclParseInteger_3>
 80003a2:	2822      	cmp	r0, #34	; 0x22
 80003a4:	d059      	beq.n	800045a <??ZbZclParseInteger_4>
 80003a6:	2823      	cmp	r0, #35	; 0x23
 80003a8:	d04d      	beq.n	8000446 <??ZbZclParseInteger_5>
 80003aa:	2824      	cmp	r0, #36	; 0x24
 80003ac:	d041      	beq.n	8000432 <??ZbZclParseInteger_6>
 80003ae:	2825      	cmp	r0, #37	; 0x25
 80003b0:	d035      	beq.n	800041e <??ZbZclParseInteger_7>
 80003b2:	2826      	cmp	r0, #38	; 0x26
 80003b4:	d029      	beq.n	800040a <??ZbZclParseInteger_8>
 80003b6:	2827      	cmp	r0, #39	; 0x27
 80003b8:	d022      	beq.n	8000400 <??ZbZclParseInteger_9>
 80003ba:	2828      	cmp	r0, #40	; 0x28
 80003bc:	f000 80ac 	beq.w	8000518 <??ZbZclParseInteger_10>
 80003c0:	2829      	cmp	r0, #41	; 0x29
 80003c2:	f000 809f 	beq.w	8000504 <??ZbZclParseInteger_11>
 80003c6:	282a      	cmp	r0, #42	; 0x2a
 80003c8:	f000 8092 	beq.w	80004f0 <??ZbZclParseInteger_12>
 80003cc:	282b      	cmp	r0, #43	; 0x2b
 80003ce:	f000 8085 	beq.w	80004dc <??ZbZclParseInteger_13>
 80003d2:	282c      	cmp	r0, #44	; 0x2c
 80003d4:	d078      	beq.n	80004c8 <??ZbZclParseInteger_14>
 80003d6:	282d      	cmp	r0, #45	; 0x2d
 80003d8:	d06c      	beq.n	80004b4 <??ZbZclParseInteger_15>
 80003da:	282e      	cmp	r0, #46	; 0x2e
 80003dc:	d060      	beq.n	80004a0 <??ZbZclParseInteger_16>
 80003de:	282f      	cmp	r0, #47	; 0x2f
 80003e0:	d059      	beq.n	8000496 <??ZbZclParseInteger_17>
 80003e2:	2830      	cmp	r0, #48	; 0x30
 80003e4:	d04d      	beq.n	8000482 <??ZbZclParseInteger_2>
 80003e6:	2831      	cmp	r0, #49	; 0x31
 80003e8:	d041      	beq.n	800046e <??ZbZclParseInteger_3>
 80003ea:	28e2      	cmp	r0, #226	; 0xe2
 80003ec:	d02b      	beq.n	8000446 <??ZbZclParseInteger_5>
 80003ee:	28e8      	cmp	r0, #232	; 0xe8
 80003f0:	d03d      	beq.n	800046e <??ZbZclParseInteger_3>
 80003f2:	28e9      	cmp	r0, #233	; 0xe9
 80003f4:	d03b      	beq.n	800046e <??ZbZclParseInteger_3>
 80003f6:	28ea      	cmp	r0, #234	; 0xea
 80003f8:	d025      	beq.n	8000446 <??ZbZclParseInteger_5>
 80003fa:	28f0      	cmp	r0, #240	; 0xf0
 80003fc:	f040 80b1 	bne.w	8000562 <??ZbZclParseInteger_18>

08000400 <??ZbZclParseInteger_9>:
 8000400:	5df0      	ldrb	r0, [r6, r7]
 8000402:	2100      	movs	r1, #0
 8000404:	4304      	orrs	r4, r0
 8000406:	430d      	orrs	r5, r1
 8000408:	1c7f      	adds	r7, r7, #1

0800040a <??ZbZclParseInteger_8>:
 800040a:	5df0      	ldrb	r0, [r6, r7]
 800040c:	2100      	movs	r1, #0
 800040e:	003a      	movs	r2, r7
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	00d2      	lsls	r2, r2, #3
 8000414:	f005 fc7c 	bl	8005d10 <__aeabi_llsl>
 8000418:	4304      	orrs	r4, r0
 800041a:	430d      	orrs	r5, r1
 800041c:	1c7f      	adds	r7, r7, #1

0800041e <??ZbZclParseInteger_7>:
 800041e:	5df0      	ldrb	r0, [r6, r7]
 8000420:	2100      	movs	r1, #0
 8000422:	003a      	movs	r2, r7
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	00d2      	lsls	r2, r2, #3
 8000428:	f005 fc72 	bl	8005d10 <__aeabi_llsl>
 800042c:	4304      	orrs	r4, r0
 800042e:	430d      	orrs	r5, r1
 8000430:	1c7f      	adds	r7, r7, #1

08000432 <??ZbZclParseInteger_6>:
 8000432:	5df0      	ldrb	r0, [r6, r7]
 8000434:	2100      	movs	r1, #0
 8000436:	003a      	movs	r2, r7
 8000438:	b2d2      	uxtb	r2, r2
 800043a:	00d2      	lsls	r2, r2, #3
 800043c:	f005 fc68 	bl	8005d10 <__aeabi_llsl>
 8000440:	4304      	orrs	r4, r0
 8000442:	430d      	orrs	r5, r1
 8000444:	1c7f      	adds	r7, r7, #1

08000446 <??ZbZclParseInteger_5>:
 8000446:	5df0      	ldrb	r0, [r6, r7]
 8000448:	2100      	movs	r1, #0
 800044a:	003a      	movs	r2, r7
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	00d2      	lsls	r2, r2, #3
 8000450:	f005 fc5e 	bl	8005d10 <__aeabi_llsl>
 8000454:	4304      	orrs	r4, r0
 8000456:	430d      	orrs	r5, r1
 8000458:	1c7f      	adds	r7, r7, #1

0800045a <??ZbZclParseInteger_4>:
 800045a:	5df0      	ldrb	r0, [r6, r7]
 800045c:	2100      	movs	r1, #0
 800045e:	003a      	movs	r2, r7
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	00d2      	lsls	r2, r2, #3
 8000464:	f005 fc54 	bl	8005d10 <__aeabi_llsl>
 8000468:	4304      	orrs	r4, r0
 800046a:	430d      	orrs	r5, r1
 800046c:	1c7f      	adds	r7, r7, #1

0800046e <??ZbZclParseInteger_3>:
 800046e:	5df0      	ldrb	r0, [r6, r7]
 8000470:	2100      	movs	r1, #0
 8000472:	003a      	movs	r2, r7
 8000474:	b2d2      	uxtb	r2, r2
 8000476:	00d2      	lsls	r2, r2, #3
 8000478:	f005 fc4a 	bl	8005d10 <__aeabi_llsl>
 800047c:	4304      	orrs	r4, r0
 800047e:	430d      	orrs	r5, r1
 8000480:	1c7f      	adds	r7, r7, #1

08000482 <??ZbZclParseInteger_2>:
 8000482:	5df0      	ldrb	r0, [r6, r7]
 8000484:	2100      	movs	r1, #0
 8000486:	003a      	movs	r2, r7
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	00d2      	lsls	r2, r2, #3
 800048c:	f005 fc40 	bl	8005d10 <__aeabi_llsl>
 8000490:	4320      	orrs	r0, r4
 8000492:	4329      	orrs	r1, r5
 8000494:	e06a      	b.n	800056c <??ZbZclParseInteger_1>

08000496 <??ZbZclParseInteger_17>:
 8000496:	5df0      	ldrb	r0, [r6, r7]
 8000498:	2100      	movs	r1, #0
 800049a:	4304      	orrs	r4, r0
 800049c:	430d      	orrs	r5, r1
 800049e:	1c7f      	adds	r7, r7, #1

080004a0 <??ZbZclParseInteger_16>:
 80004a0:	5df0      	ldrb	r0, [r6, r7]
 80004a2:	2100      	movs	r1, #0
 80004a4:	003a      	movs	r2, r7
 80004a6:	b2d2      	uxtb	r2, r2
 80004a8:	00d2      	lsls	r2, r2, #3
 80004aa:	f005 fc31 	bl	8005d10 <__aeabi_llsl>
 80004ae:	4304      	orrs	r4, r0
 80004b0:	430d      	orrs	r5, r1
 80004b2:	1c7f      	adds	r7, r7, #1

080004b4 <??ZbZclParseInteger_15>:
 80004b4:	5df0      	ldrb	r0, [r6, r7]
 80004b6:	2100      	movs	r1, #0
 80004b8:	003a      	movs	r2, r7
 80004ba:	b2d2      	uxtb	r2, r2
 80004bc:	00d2      	lsls	r2, r2, #3
 80004be:	f005 fc27 	bl	8005d10 <__aeabi_llsl>
 80004c2:	4304      	orrs	r4, r0
 80004c4:	430d      	orrs	r5, r1
 80004c6:	1c7f      	adds	r7, r7, #1

080004c8 <??ZbZclParseInteger_14>:
 80004c8:	5df0      	ldrb	r0, [r6, r7]
 80004ca:	2100      	movs	r1, #0
 80004cc:	003a      	movs	r2, r7
 80004ce:	b2d2      	uxtb	r2, r2
 80004d0:	00d2      	lsls	r2, r2, #3
 80004d2:	f005 fc1d 	bl	8005d10 <__aeabi_llsl>
 80004d6:	4304      	orrs	r4, r0
 80004d8:	430d      	orrs	r5, r1
 80004da:	1c7f      	adds	r7, r7, #1

080004dc <??ZbZclParseInteger_13>:
 80004dc:	5df0      	ldrb	r0, [r6, r7]
 80004de:	2100      	movs	r1, #0
 80004e0:	003a      	movs	r2, r7
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	f005 fc13 	bl	8005d10 <__aeabi_llsl>
 80004ea:	4304      	orrs	r4, r0
 80004ec:	430d      	orrs	r5, r1
 80004ee:	1c7f      	adds	r7, r7, #1

080004f0 <??ZbZclParseInteger_12>:
 80004f0:	5df0      	ldrb	r0, [r6, r7]
 80004f2:	2100      	movs	r1, #0
 80004f4:	003a      	movs	r2, r7
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	00d2      	lsls	r2, r2, #3
 80004fa:	f005 fc09 	bl	8005d10 <__aeabi_llsl>
 80004fe:	4304      	orrs	r4, r0
 8000500:	430d      	orrs	r5, r1
 8000502:	1c7f      	adds	r7, r7, #1

08000504 <??ZbZclParseInteger_11>:
 8000504:	5df0      	ldrb	r0, [r6, r7]
 8000506:	2100      	movs	r1, #0
 8000508:	003a      	movs	r2, r7
 800050a:	b2d2      	uxtb	r2, r2
 800050c:	00d2      	lsls	r2, r2, #3
 800050e:	f005 fbff 	bl	8005d10 <__aeabi_llsl>
 8000512:	4304      	orrs	r4, r0
 8000514:	430d      	orrs	r5, r1
 8000516:	1c7f      	adds	r7, r7, #1

08000518 <??ZbZclParseInteger_10>:
 8000518:	5df0      	ldrb	r0, [r6, r7]
 800051a:	2100      	movs	r1, #0
 800051c:	003a      	movs	r2, r7
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	00d2      	lsls	r2, r2, #3
 8000522:	f005 fbf5 	bl	8005d10 <__aeabi_llsl>
 8000526:	4320      	orrs	r0, r4
 8000528:	4329      	orrs	r1, r5
 800052a:	003a      	movs	r2, r7
 800052c:	1c57      	adds	r7, r2, #1
 800052e:	5cb2      	ldrb	r2, [r6, r2]
 8000530:	0612      	lsls	r2, r2, #24
 8000532:	d515      	bpl.n	8000560 <??ZbZclParseInteger_19>
 8000534:	2f08      	cmp	r7, #8
 8000536:	d213      	bcs.n	8000560 <??ZbZclParseInteger_19>
 8000538:	0004      	movs	r4, r0
 800053a:	000d      	movs	r5, r1
 800053c:	2001      	movs	r0, #1
 800053e:	2100      	movs	r1, #0
 8000540:	f1d7 0208 	rsbs	r2, r7, #8
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	00d2      	lsls	r2, r2, #3
 8000548:	f005 fbe2 	bl	8005d10 <__aeabi_llsl>
 800054c:	1e40      	subs	r0, r0, #1
 800054e:	f171 0100 	sbcs.w	r1, r1, #0
 8000552:	003a      	movs	r2, r7
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	00d2      	lsls	r2, r2, #3
 8000558:	f005 fbda 	bl	8005d10 <__aeabi_llsl>
 800055c:	4320      	orrs	r0, r4
 800055e:	4329      	orrs	r1, r5

08000560 <??ZbZclParseInteger_19>:
 8000560:	e004      	b.n	800056c <??ZbZclParseInteger_1>

08000562 <??ZbZclParseInteger_18>:
 8000562:	208d      	movs	r0, #141	; 0x8d
 8000564:	f88a 0000 	strb.w	r0, [sl]
 8000568:	2000      	movs	r0, #0
 800056a:	2100      	movs	r1, #0

0800056c <??ZbZclParseInteger_1>:
 800056c:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000570 <ZbZclAttrIsInteger>:
 8000570:	0001      	movs	r1, r0
 8000572:	2200      	movs	r2, #0
 8000574:	0008      	movs	r0, r1
 8000576:	b2c0      	uxtb	r0, r0
 8000578:	3808      	subs	r0, #8
 800057a:	2808      	cmp	r0, #8
 800057c:	d909      	bls.n	8000592 <??ZbZclAttrIsInteger_0>
 800057e:	3810      	subs	r0, #16
 8000580:	2819      	cmp	r0, #25
 8000582:	d906      	bls.n	8000592 <??ZbZclAttrIsInteger_0>
 8000584:	38ca      	subs	r0, #202	; 0xca
 8000586:	d004      	beq.n	8000592 <??ZbZclAttrIsInteger_0>
 8000588:	1f80      	subs	r0, r0, #6
 800058a:	2802      	cmp	r0, #2
 800058c:	d901      	bls.n	8000592 <??ZbZclAttrIsInteger_0>
 800058e:	3808      	subs	r0, #8
 8000590:	d101      	bne.n	8000596 <??ZbZclAttrIsInteger_1>

08000592 <??ZbZclAttrIsInteger_0>:
 8000592:	2001      	movs	r0, #1
 8000594:	e000      	b.n	8000598 <??ZbZclAttrIsInteger_2>

08000596 <??ZbZclAttrIsInteger_1>:
 8000596:	2000      	movs	r0, #0

08000598 <??ZbZclAttrIsInteger_2>:
 8000598:	b2c0      	uxtb	r0, r0
 800059a:	4770      	bx	lr

0800059c <ZbZclAttrIntegerRangeCheck>:
 800059c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80005a0:	0004      	movs	r4, r0
 80005a2:	000d      	movs	r5, r1
 80005a4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80005a8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80005ac:	0010      	movs	r0, r2
 80005ae:	b2c0      	uxtb	r0, r0
 80005b0:	2810      	cmp	r0, #16
 80005b2:	d045      	beq.n	8000640 <??ZbZclAttrIntegerRangeCheck_0>
 80005b4:	2818      	cmp	r0, #24
 80005b6:	d051      	beq.n	800065c <??ZbZclAttrIntegerRangeCheck_1>
 80005b8:	2819      	cmp	r0, #25
 80005ba:	d060      	beq.n	800067e <??ZbZclAttrIntegerRangeCheck_2>
 80005bc:	281a      	cmp	r0, #26
 80005be:	d072      	beq.n	80006a6 <??ZbZclAttrIntegerRangeCheck_3>
 80005c0:	281b      	cmp	r0, #27
 80005c2:	f000 8086 	beq.w	80006d2 <??ZbZclAttrIntegerRangeCheck_4>
 80005c6:	281c      	cmp	r0, #28
 80005c8:	f000 8098 	beq.w	80006fc <??ZbZclAttrIntegerRangeCheck_5>
 80005cc:	281d      	cmp	r0, #29
 80005ce:	f000 80a7 	beq.w	8000720 <??ZbZclAttrIntegerRangeCheck_6>
 80005d2:	281e      	cmp	r0, #30
 80005d4:	f000 80b9 	beq.w	800074a <??ZbZclAttrIntegerRangeCheck_7>
 80005d8:	281f      	cmp	r0, #31
 80005da:	f000 80cd 	beq.w	8000778 <??ZbZclAttrIntegerRangeCheck_8>
 80005de:	2820      	cmp	r0, #32
 80005e0:	d03c      	beq.n	800065c <??ZbZclAttrIntegerRangeCheck_1>
 80005e2:	2821      	cmp	r0, #33	; 0x21
 80005e4:	d04b      	beq.n	800067e <??ZbZclAttrIntegerRangeCheck_2>
 80005e6:	2822      	cmp	r0, #34	; 0x22
 80005e8:	d05d      	beq.n	80006a6 <??ZbZclAttrIntegerRangeCheck_3>
 80005ea:	2823      	cmp	r0, #35	; 0x23
 80005ec:	d071      	beq.n	80006d2 <??ZbZclAttrIntegerRangeCheck_4>
 80005ee:	2824      	cmp	r0, #36	; 0x24
 80005f0:	f000 8084 	beq.w	80006fc <??ZbZclAttrIntegerRangeCheck_5>
 80005f4:	2825      	cmp	r0, #37	; 0x25
 80005f6:	f000 8093 	beq.w	8000720 <??ZbZclAttrIntegerRangeCheck_6>
 80005fa:	2826      	cmp	r0, #38	; 0x26
 80005fc:	f000 80a5 	beq.w	800074a <??ZbZclAttrIntegerRangeCheck_7>
 8000600:	2827      	cmp	r0, #39	; 0x27
 8000602:	f000 80b9 	beq.w	8000778 <??ZbZclAttrIntegerRangeCheck_8>
 8000606:	2828      	cmp	r0, #40	; 0x28
 8000608:	f000 80c1 	beq.w	800078e <??ZbZclAttrIntegerRangeCheck_9>
 800060c:	2829      	cmp	r0, #41	; 0x29
 800060e:	f000 80d9 	beq.w	80007c4 <??ZbZclAttrIntegerRangeCheck_10>
 8000612:	282a      	cmp	r0, #42	; 0x2a
 8000614:	f000 80f0 	beq.w	80007f8 <??ZbZclAttrIntegerRangeCheck_11>
 8000618:	282b      	cmp	r0, #43	; 0x2b
 800061a:	f000 8107 	beq.w	800082c <??ZbZclAttrIntegerRangeCheck_12>
 800061e:	282c      	cmp	r0, #44	; 0x2c
 8000620:	f000 8120 	beq.w	8000864 <??ZbZclAttrIntegerRangeCheck_13>
 8000624:	282d      	cmp	r0, #45	; 0x2d
 8000626:	f000 8136 	beq.w	8000896 <??ZbZclAttrIntegerRangeCheck_14>
 800062a:	282e      	cmp	r0, #46	; 0x2e
 800062c:	f000 814b 	beq.w	80008c6 <??ZbZclAttrIntegerRangeCheck_15>
 8000630:	282f      	cmp	r0, #47	; 0x2f
 8000632:	f000 8160 	beq.w	80008f6 <??ZbZclAttrIntegerRangeCheck_16>
 8000636:	2830      	cmp	r0, #48	; 0x30
 8000638:	d010      	beq.n	800065c <??ZbZclAttrIntegerRangeCheck_1>
 800063a:	2831      	cmp	r0, #49	; 0x31
 800063c:	d01f      	beq.n	800067e <??ZbZclAttrIntegerRangeCheck_2>
 800063e:	e164      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000640 <??ZbZclAttrIntegerRangeCheck_0>:
 8000640:	2d00      	cmp	r5, #0
 8000642:	d103      	bne.n	800064c <??ZbZclAttrIntegerRangeCheck_18>
 8000644:	2cff      	cmp	r4, #255	; 0xff
 8000646:	d101      	bne.n	800064c <??ZbZclAttrIntegerRangeCheck_18>
 8000648:	2001      	movs	r0, #1
 800064a:	e176      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800064c <??ZbZclAttrIntegerRangeCheck_18>:
 800064c:	2d00      	cmp	r5, #0
 800064e:	db04      	blt.n	800065a <??ZbZclAttrIntegerRangeCheck_20>
 8000650:	dc01      	bgt.n	8000656 <??ZbZclAttrIntegerRangeCheck_21>
 8000652:	2c02      	cmp	r4, #2
 8000654:	d301      	bcc.n	800065a <??ZbZclAttrIntegerRangeCheck_20>

08000656 <??ZbZclAttrIntegerRangeCheck_21>:
 8000656:	2000      	movs	r0, #0
 8000658:	e16f      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800065a <??ZbZclAttrIntegerRangeCheck_20>:
 800065a:	e156      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800065c <??ZbZclAttrIntegerRangeCheck_1>:
 800065c:	2d00      	cmp	r5, #0
 800065e:	d103      	bne.n	8000668 <??ZbZclAttrIntegerRangeCheck_23>
 8000660:	2cff      	cmp	r4, #255	; 0xff
 8000662:	d101      	bne.n	8000668 <??ZbZclAttrIntegerRangeCheck_23>
 8000664:	2001      	movs	r0, #1
 8000666:	e168      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000668 <??ZbZclAttrIntegerRangeCheck_23>:
 8000668:	2d00      	cmp	r5, #0
 800066a:	d405      	bmi.n	8000678 <??ZbZclAttrIntegerRangeCheck_24>
 800066c:	2d00      	cmp	r5, #0
 800066e:	db05      	blt.n	800067c <??ZbZclAttrIntegerRangeCheck_25>
 8000670:	dc02      	bgt.n	8000678 <??ZbZclAttrIntegerRangeCheck_24>
 8000672:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8000676:	d301      	bcc.n	800067c <??ZbZclAttrIntegerRangeCheck_25>

08000678 <??ZbZclAttrIntegerRangeCheck_24>:
 8000678:	2000      	movs	r0, #0
 800067a:	e15e      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800067c <??ZbZclAttrIntegerRangeCheck_25>:
 800067c:	e145      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800067e <??ZbZclAttrIntegerRangeCheck_2>:
 800067e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000682:	2100      	movs	r1, #0
 8000684:	428d      	cmp	r5, r1
 8000686:	d103      	bne.n	8000690 <??ZbZclAttrIntegerRangeCheck_27>
 8000688:	4284      	cmp	r4, r0
 800068a:	d101      	bne.n	8000690 <??ZbZclAttrIntegerRangeCheck_27>
 800068c:	2001      	movs	r0, #1
 800068e:	e154      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000690 <??ZbZclAttrIntegerRangeCheck_27>:
 8000690:	2d00      	cmp	r5, #0
 8000692:	d405      	bmi.n	80006a0 <??ZbZclAttrIntegerRangeCheck_28>
 8000694:	2d00      	cmp	r5, #0
 8000696:	db05      	blt.n	80006a4 <??ZbZclAttrIntegerRangeCheck_29>
 8000698:	dc02      	bgt.n	80006a0 <??ZbZclAttrIntegerRangeCheck_28>
 800069a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800069e:	d301      	bcc.n	80006a4 <??ZbZclAttrIntegerRangeCheck_29>

080006a0 <??ZbZclAttrIntegerRangeCheck_28>:
 80006a0:	2000      	movs	r0, #0
 80006a2:	e14a      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006a4 <??ZbZclAttrIntegerRangeCheck_29>:
 80006a4:	e131      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080006a6 <??ZbZclAttrIntegerRangeCheck_3>:
 80006a6:	f07f 407f 	mvns.w	r0, #4278190080	; 0xff000000
 80006aa:	2100      	movs	r1, #0
 80006ac:	428d      	cmp	r5, r1
 80006ae:	d103      	bne.n	80006b8 <??ZbZclAttrIntegerRangeCheck_31>
 80006b0:	4284      	cmp	r4, r0
 80006b2:	d101      	bne.n	80006b8 <??ZbZclAttrIntegerRangeCheck_31>
 80006b4:	2001      	movs	r0, #1
 80006b6:	e140      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006b8 <??ZbZclAttrIntegerRangeCheck_31>:
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d407      	bmi.n	80006cc <??ZbZclAttrIntegerRangeCheck_32>
 80006bc:	f05f 7080 	movs.w	r0, #16777216	; 0x1000000
 80006c0:	2100      	movs	r1, #0
 80006c2:	428d      	cmp	r5, r1
 80006c4:	db04      	blt.n	80006d0 <??ZbZclAttrIntegerRangeCheck_33>
 80006c6:	dc01      	bgt.n	80006cc <??ZbZclAttrIntegerRangeCheck_32>
 80006c8:	4284      	cmp	r4, r0
 80006ca:	d301      	bcc.n	80006d0 <??ZbZclAttrIntegerRangeCheck_33>

080006cc <??ZbZclAttrIntegerRangeCheck_32>:
 80006cc:	2000      	movs	r0, #0
 80006ce:	e134      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006d0 <??ZbZclAttrIntegerRangeCheck_33>:
 80006d0:	e11b      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080006d2 <??ZbZclAttrIntegerRangeCheck_4>:
 80006d2:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80006d6:	2100      	movs	r1, #0
 80006d8:	428d      	cmp	r5, r1
 80006da:	d103      	bne.n	80006e4 <??ZbZclAttrIntegerRangeCheck_35>
 80006dc:	4284      	cmp	r4, r0
 80006de:	d101      	bne.n	80006e4 <??ZbZclAttrIntegerRangeCheck_35>
 80006e0:	2001      	movs	r0, #1
 80006e2:	e12a      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006e4 <??ZbZclAttrIntegerRangeCheck_35>:
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d406      	bmi.n	80006f6 <??ZbZclAttrIntegerRangeCheck_36>
 80006e8:	2000      	movs	r0, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	428d      	cmp	r5, r1
 80006ee:	db04      	blt.n	80006fa <??ZbZclAttrIntegerRangeCheck_37>
 80006f0:	dc01      	bgt.n	80006f6 <??ZbZclAttrIntegerRangeCheck_36>
 80006f2:	4284      	cmp	r4, r0
 80006f4:	d301      	bcc.n	80006fa <??ZbZclAttrIntegerRangeCheck_37>

080006f6 <??ZbZclAttrIntegerRangeCheck_36>:
 80006f6:	2000      	movs	r0, #0
 80006f8:	e11f      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006fa <??ZbZclAttrIntegerRangeCheck_37>:
 80006fa:	e106      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080006fc <??ZbZclAttrIntegerRangeCheck_5>:
 80006fc:	2dff      	cmp	r5, #255	; 0xff
 80006fe:	d104      	bne.n	800070a <??ZbZclAttrIntegerRangeCheck_39>
 8000700:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000704:	d101      	bne.n	800070a <??ZbZclAttrIntegerRangeCheck_39>
 8000706:	2001      	movs	r0, #1
 8000708:	e117      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800070a <??ZbZclAttrIntegerRangeCheck_39>:
 800070a:	2d00      	cmp	r5, #0
 800070c:	d405      	bmi.n	800071a <??ZbZclAttrIntegerRangeCheck_40>
 800070e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000712:	db04      	blt.n	800071e <??ZbZclAttrIntegerRangeCheck_41>
 8000714:	dc01      	bgt.n	800071a <??ZbZclAttrIntegerRangeCheck_40>
 8000716:	2c00      	cmp	r4, #0
 8000718:	d301      	bcc.n	800071e <??ZbZclAttrIntegerRangeCheck_41>

0800071a <??ZbZclAttrIntegerRangeCheck_40>:
 800071a:	2000      	movs	r0, #0
 800071c:	e10d      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800071e <??ZbZclAttrIntegerRangeCheck_41>:
 800071e:	e0f4      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000720 <??ZbZclAttrIntegerRangeCheck_6>:
 8000720:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8000724:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000728:	428d      	cmp	r5, r1
 800072a:	d103      	bne.n	8000734 <??ZbZclAttrIntegerRangeCheck_43>
 800072c:	4284      	cmp	r4, r0
 800072e:	d101      	bne.n	8000734 <??ZbZclAttrIntegerRangeCheck_43>
 8000730:	2001      	movs	r0, #1
 8000732:	e102      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000734 <??ZbZclAttrIntegerRangeCheck_43>:
 8000734:	2d00      	cmp	r5, #0
 8000736:	d405      	bmi.n	8000744 <??ZbZclAttrIntegerRangeCheck_44>
 8000738:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800073c:	db04      	blt.n	8000748 <??ZbZclAttrIntegerRangeCheck_45>
 800073e:	dc01      	bgt.n	8000744 <??ZbZclAttrIntegerRangeCheck_44>
 8000740:	2c00      	cmp	r4, #0
 8000742:	d301      	bcc.n	8000748 <??ZbZclAttrIntegerRangeCheck_45>

08000744 <??ZbZclAttrIntegerRangeCheck_44>:
 8000744:	2000      	movs	r0, #0
 8000746:	e0f8      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000748 <??ZbZclAttrIntegerRangeCheck_45>:
 8000748:	e0df      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800074a <??ZbZclAttrIntegerRangeCheck_7>:
 800074a:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800074e:	f07f 417f 	mvns.w	r1, #4278190080	; 0xff000000
 8000752:	428d      	cmp	r5, r1
 8000754:	d103      	bne.n	800075e <??ZbZclAttrIntegerRangeCheck_47>
 8000756:	4284      	cmp	r4, r0
 8000758:	d101      	bne.n	800075e <??ZbZclAttrIntegerRangeCheck_47>
 800075a:	2001      	movs	r0, #1
 800075c:	e0ed      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800075e <??ZbZclAttrIntegerRangeCheck_47>:
 800075e:	2d00      	cmp	r5, #0
 8000760:	d407      	bmi.n	8000772 <??ZbZclAttrIntegerRangeCheck_48>
 8000762:	2000      	movs	r0, #0
 8000764:	f05f 7180 	movs.w	r1, #16777216	; 0x1000000
 8000768:	428d      	cmp	r5, r1
 800076a:	db04      	blt.n	8000776 <??ZbZclAttrIntegerRangeCheck_49>
 800076c:	dc01      	bgt.n	8000772 <??ZbZclAttrIntegerRangeCheck_48>
 800076e:	4284      	cmp	r4, r0
 8000770:	d301      	bcc.n	8000776 <??ZbZclAttrIntegerRangeCheck_49>

08000772 <??ZbZclAttrIntegerRangeCheck_48>:
 8000772:	2000      	movs	r0, #0
 8000774:	e0e1      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000776 <??ZbZclAttrIntegerRangeCheck_49>:
 8000776:	e0c8      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000778 <??ZbZclAttrIntegerRangeCheck_8>:
 8000778:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800077c:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8000780:	428d      	cmp	r5, r1
 8000782:	d103      	bne.n	800078c <??ZbZclAttrIntegerRangeCheck_51>
 8000784:	4284      	cmp	r4, r0
 8000786:	d101      	bne.n	800078c <??ZbZclAttrIntegerRangeCheck_51>
 8000788:	2001      	movs	r0, #1
 800078a:	e0d6      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800078c <??ZbZclAttrIntegerRangeCheck_51>:
 800078c:	e0bd      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800078e <??ZbZclAttrIntegerRangeCheck_9>:
 800078e:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 8000792:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8000796:	428d      	cmp	r5, r1
 8000798:	d103      	bne.n	80007a2 <??ZbZclAttrIntegerRangeCheck_52>
 800079a:	4284      	cmp	r4, r0
 800079c:	d101      	bne.n	80007a2 <??ZbZclAttrIntegerRangeCheck_52>
 800079e:	2001      	movs	r0, #1
 80007a0:	e0cb      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007a2 <??ZbZclAttrIntegerRangeCheck_52>:
 80007a2:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 80007a6:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 80007aa:	428d      	cmp	r5, r1
 80007ac:	db07      	blt.n	80007be <??ZbZclAttrIntegerRangeCheck_53>
 80007ae:	dc01      	bgt.n	80007b4 <??ZbZclAttrIntegerRangeCheck_54>
 80007b0:	4284      	cmp	r4, r0
 80007b2:	d304      	bcc.n	80007be <??ZbZclAttrIntegerRangeCheck_53>

080007b4 <??ZbZclAttrIntegerRangeCheck_54>:
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	db04      	blt.n	80007c2 <??ZbZclAttrIntegerRangeCheck_55>
 80007b8:	dc01      	bgt.n	80007be <??ZbZclAttrIntegerRangeCheck_53>
 80007ba:	2c80      	cmp	r4, #128	; 0x80
 80007bc:	d301      	bcc.n	80007c2 <??ZbZclAttrIntegerRangeCheck_55>

080007be <??ZbZclAttrIntegerRangeCheck_53>:
 80007be:	2000      	movs	r0, #0
 80007c0:	e0bb      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007c2 <??ZbZclAttrIntegerRangeCheck_55>:
 80007c2:	e0a2      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080007c4 <??ZbZclAttrIntegerRangeCheck_10>:
 80007c4:	485e      	ldr	r0, [pc, #376]	; (8000940 <??DataTable1>)
 80007c6:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 80007ca:	428d      	cmp	r5, r1
 80007cc:	d103      	bne.n	80007d6 <??ZbZclAttrIntegerRangeCheck_57>
 80007ce:	4284      	cmp	r4, r0
 80007d0:	d101      	bne.n	80007d6 <??ZbZclAttrIntegerRangeCheck_57>
 80007d2:	2001      	movs	r0, #1
 80007d4:	e0b1      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007d6 <??ZbZclAttrIntegerRangeCheck_57>:
 80007d6:	485a      	ldr	r0, [pc, #360]	; (8000940 <??DataTable1>)
 80007d8:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 80007dc:	428d      	cmp	r5, r1
 80007de:	db08      	blt.n	80007f2 <??ZbZclAttrIntegerRangeCheck_58>
 80007e0:	dc01      	bgt.n	80007e6 <??ZbZclAttrIntegerRangeCheck_59>
 80007e2:	4284      	cmp	r4, r0
 80007e4:	d305      	bcc.n	80007f2 <??ZbZclAttrIntegerRangeCheck_58>

080007e6 <??ZbZclAttrIntegerRangeCheck_59>:
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	db05      	blt.n	80007f6 <??ZbZclAttrIntegerRangeCheck_60>
 80007ea:	dc02      	bgt.n	80007f2 <??ZbZclAttrIntegerRangeCheck_58>
 80007ec:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80007f0:	d301      	bcc.n	80007f6 <??ZbZclAttrIntegerRangeCheck_60>

080007f2 <??ZbZclAttrIntegerRangeCheck_58>:
 80007f2:	2000      	movs	r0, #0
 80007f4:	e0a1      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007f6 <??ZbZclAttrIntegerRangeCheck_60>:
 80007f6:	e088      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080007f8 <??ZbZclAttrIntegerRangeCheck_11>:
 80007f8:	4852      	ldr	r0, [pc, #328]	; (8000944 <??DataTable1_1>)
 80007fa:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 80007fe:	428d      	cmp	r5, r1
 8000800:	d103      	bne.n	800080a <??ZbZclAttrIntegerRangeCheck_62>
 8000802:	4284      	cmp	r4, r0
 8000804:	d101      	bne.n	800080a <??ZbZclAttrIntegerRangeCheck_62>
 8000806:	2001      	movs	r0, #1
 8000808:	e097      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800080a <??ZbZclAttrIntegerRangeCheck_62>:
 800080a:	484e      	ldr	r0, [pc, #312]	; (8000944 <??DataTable1_1>)
 800080c:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8000810:	428d      	cmp	r5, r1
 8000812:	db08      	blt.n	8000826 <??ZbZclAttrIntegerRangeCheck_63>
 8000814:	dc01      	bgt.n	800081a <??ZbZclAttrIntegerRangeCheck_64>
 8000816:	4284      	cmp	r4, r0
 8000818:	d305      	bcc.n	8000826 <??ZbZclAttrIntegerRangeCheck_63>

0800081a <??ZbZclAttrIntegerRangeCheck_64>:
 800081a:	2d00      	cmp	r5, #0
 800081c:	db05      	blt.n	800082a <??ZbZclAttrIntegerRangeCheck_65>
 800081e:	dc02      	bgt.n	8000826 <??ZbZclAttrIntegerRangeCheck_63>
 8000820:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8000824:	d301      	bcc.n	800082a <??ZbZclAttrIntegerRangeCheck_65>

08000826 <??ZbZclAttrIntegerRangeCheck_63>:
 8000826:	2000      	movs	r0, #0
 8000828:	e087      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800082a <??ZbZclAttrIntegerRangeCheck_65>:
 800082a:	e06e      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800082c <??ZbZclAttrIntegerRangeCheck_12>:
 800082c:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8000830:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8000834:	428d      	cmp	r5, r1
 8000836:	d103      	bne.n	8000840 <??ZbZclAttrIntegerRangeCheck_67>
 8000838:	4284      	cmp	r4, r0
 800083a:	d101      	bne.n	8000840 <??ZbZclAttrIntegerRangeCheck_67>
 800083c:	2001      	movs	r0, #1
 800083e:	e07c      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000840 <??ZbZclAttrIntegerRangeCheck_67>:
 8000840:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8000844:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8000848:	428d      	cmp	r5, r1
 800084a:	db08      	blt.n	800085e <??ZbZclAttrIntegerRangeCheck_68>
 800084c:	dc01      	bgt.n	8000852 <??ZbZclAttrIntegerRangeCheck_69>
 800084e:	4284      	cmp	r4, r0
 8000850:	d305      	bcc.n	800085e <??ZbZclAttrIntegerRangeCheck_68>

08000852 <??ZbZclAttrIntegerRangeCheck_69>:
 8000852:	2d00      	cmp	r5, #0
 8000854:	db05      	blt.n	8000862 <??ZbZclAttrIntegerRangeCheck_70>
 8000856:	dc02      	bgt.n	800085e <??ZbZclAttrIntegerRangeCheck_68>
 8000858:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800085c:	d301      	bcc.n	8000862 <??ZbZclAttrIntegerRangeCheck_70>

0800085e <??ZbZclAttrIntegerRangeCheck_68>:
 800085e:	2000      	movs	r0, #0
 8000860:	e06b      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000862 <??ZbZclAttrIntegerRangeCheck_70>:
 8000862:	e052      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000864 <??ZbZclAttrIntegerRangeCheck_13>:
 8000864:	2000      	movs	r0, #0
 8000866:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 800086a:	428d      	cmp	r5, r1
 800086c:	d103      	bne.n	8000876 <??ZbZclAttrIntegerRangeCheck_72>
 800086e:	4284      	cmp	r4, r0
 8000870:	d101      	bne.n	8000876 <??ZbZclAttrIntegerRangeCheck_72>
 8000872:	2001      	movs	r0, #1
 8000874:	e061      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000876 <??ZbZclAttrIntegerRangeCheck_72>:
 8000876:	2000      	movs	r0, #0
 8000878:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 800087c:	428d      	cmp	r5, r1
 800087e:	db07      	blt.n	8000890 <??ZbZclAttrIntegerRangeCheck_73>
 8000880:	dc01      	bgt.n	8000886 <??ZbZclAttrIntegerRangeCheck_74>
 8000882:	4284      	cmp	r4, r0
 8000884:	d304      	bcc.n	8000890 <??ZbZclAttrIntegerRangeCheck_73>

08000886 <??ZbZclAttrIntegerRangeCheck_74>:
 8000886:	2d80      	cmp	r5, #128	; 0x80
 8000888:	db04      	blt.n	8000894 <??ZbZclAttrIntegerRangeCheck_75>
 800088a:	dc01      	bgt.n	8000890 <??ZbZclAttrIntegerRangeCheck_73>
 800088c:	2c00      	cmp	r4, #0
 800088e:	d301      	bcc.n	8000894 <??ZbZclAttrIntegerRangeCheck_75>

08000890 <??ZbZclAttrIntegerRangeCheck_73>:
 8000890:	2000      	movs	r0, #0
 8000892:	e052      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000894 <??ZbZclAttrIntegerRangeCheck_75>:
 8000894:	e039      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000896 <??ZbZclAttrIntegerRangeCheck_14>:
 8000896:	2000      	movs	r0, #0
 8000898:	4929      	ldr	r1, [pc, #164]	; (8000940 <??DataTable1>)
 800089a:	428d      	cmp	r5, r1
 800089c:	d103      	bne.n	80008a6 <??ZbZclAttrIntegerRangeCheck_77>
 800089e:	4284      	cmp	r4, r0
 80008a0:	d101      	bne.n	80008a6 <??ZbZclAttrIntegerRangeCheck_77>
 80008a2:	2001      	movs	r0, #1
 80008a4:	e049      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008a6 <??ZbZclAttrIntegerRangeCheck_77>:
 80008a6:	2000      	movs	r0, #0
 80008a8:	4925      	ldr	r1, [pc, #148]	; (8000940 <??DataTable1>)
 80008aa:	428d      	cmp	r5, r1
 80008ac:	db08      	blt.n	80008c0 <??ZbZclAttrIntegerRangeCheck_78>
 80008ae:	dc01      	bgt.n	80008b4 <??ZbZclAttrIntegerRangeCheck_79>
 80008b0:	4284      	cmp	r4, r0
 80008b2:	d305      	bcc.n	80008c0 <??ZbZclAttrIntegerRangeCheck_78>

080008b4 <??ZbZclAttrIntegerRangeCheck_79>:
 80008b4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80008b8:	db04      	blt.n	80008c4 <??ZbZclAttrIntegerRangeCheck_80>
 80008ba:	dc01      	bgt.n	80008c0 <??ZbZclAttrIntegerRangeCheck_78>
 80008bc:	2c00      	cmp	r4, #0
 80008be:	d301      	bcc.n	80008c4 <??ZbZclAttrIntegerRangeCheck_80>

080008c0 <??ZbZclAttrIntegerRangeCheck_78>:
 80008c0:	2000      	movs	r0, #0
 80008c2:	e03a      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008c4 <??ZbZclAttrIntegerRangeCheck_80>:
 80008c4:	e021      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080008c6 <??ZbZclAttrIntegerRangeCheck_15>:
 80008c6:	2000      	movs	r0, #0
 80008c8:	491e      	ldr	r1, [pc, #120]	; (8000944 <??DataTable1_1>)
 80008ca:	428d      	cmp	r5, r1
 80008cc:	d103      	bne.n	80008d6 <??ZbZclAttrIntegerRangeCheck_82>
 80008ce:	4284      	cmp	r4, r0
 80008d0:	d101      	bne.n	80008d6 <??ZbZclAttrIntegerRangeCheck_82>
 80008d2:	2001      	movs	r0, #1
 80008d4:	e031      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008d6 <??ZbZclAttrIntegerRangeCheck_82>:
 80008d6:	2000      	movs	r0, #0
 80008d8:	491a      	ldr	r1, [pc, #104]	; (8000944 <??DataTable1_1>)
 80008da:	428d      	cmp	r5, r1
 80008dc:	db08      	blt.n	80008f0 <??ZbZclAttrIntegerRangeCheck_83>
 80008de:	dc01      	bgt.n	80008e4 <??ZbZclAttrIntegerRangeCheck_84>
 80008e0:	4284      	cmp	r4, r0
 80008e2:	d305      	bcc.n	80008f0 <??ZbZclAttrIntegerRangeCheck_83>

080008e4 <??ZbZclAttrIntegerRangeCheck_84>:
 80008e4:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 80008e8:	db04      	blt.n	80008f4 <??ZbZclAttrIntegerRangeCheck_85>
 80008ea:	dc01      	bgt.n	80008f0 <??ZbZclAttrIntegerRangeCheck_83>
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d301      	bcc.n	80008f4 <??ZbZclAttrIntegerRangeCheck_85>

080008f0 <??ZbZclAttrIntegerRangeCheck_83>:
 80008f0:	2000      	movs	r0, #0
 80008f2:	e022      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008f4 <??ZbZclAttrIntegerRangeCheck_85>:
 80008f4:	e009      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080008f6 <??ZbZclAttrIntegerRangeCheck_16>:
 80008f6:	2000      	movs	r0, #0
 80008f8:	f05f 4100 	movs.w	r1, #2147483648	; 0x80000000
 80008fc:	428d      	cmp	r5, r1
 80008fe:	d103      	bne.n	8000908 <??ZbZclAttrIntegerRangeCheck_87>
 8000900:	4284      	cmp	r4, r0
 8000902:	d101      	bne.n	8000908 <??ZbZclAttrIntegerRangeCheck_87>
 8000904:	2001      	movs	r0, #1
 8000906:	e018      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000908 <??ZbZclAttrIntegerRangeCheck_87>:
 8000908:	e7ff      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800090a <??ZbZclAttrIntegerRangeCheck_17>:
 800090a:	ea56 0008 	orrs.w	r0, r6, r8
 800090e:	ea57 0109 	orrs.w	r1, r7, r9
 8000912:	2900      	cmp	r1, #0
 8000914:	d103      	bne.n	800091e <??ZbZclAttrIntegerRangeCheck_88>
 8000916:	2800      	cmp	r0, #0
 8000918:	d101      	bne.n	800091e <??ZbZclAttrIntegerRangeCheck_88>
 800091a:	2001      	movs	r0, #1
 800091c:	e00d      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800091e <??ZbZclAttrIntegerRangeCheck_88>:
 800091e:	42bd      	cmp	r5, r7
 8000920:	db09      	blt.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>
 8000922:	dc01      	bgt.n	8000928 <??ZbZclAttrIntegerRangeCheck_90>
 8000924:	42b4      	cmp	r4, r6
 8000926:	d306      	bcc.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>

08000928 <??ZbZclAttrIntegerRangeCheck_90>:
 8000928:	45a9      	cmp	r9, r5
 800092a:	db04      	blt.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>
 800092c:	dc01      	bgt.n	8000932 <??ZbZclAttrIntegerRangeCheck_91>
 800092e:	45a0      	cmp	r8, r4
 8000930:	d301      	bcc.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>

08000932 <??ZbZclAttrIntegerRangeCheck_91>:
 8000932:	2001      	movs	r0, #1
 8000934:	e000      	b.n	8000938 <??ZbZclAttrIntegerRangeCheck_92>

08000936 <??ZbZclAttrIntegerRangeCheck_89>:
 8000936:	2000      	movs	r0, #0

08000938 <??ZbZclAttrIntegerRangeCheck_92>:
 8000938:	b2c0      	uxtb	r0, r0

0800093a <??ZbZclAttrIntegerRangeCheck_19>:
 800093a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800093e:	4770      	bx	lr

08000940 <??DataTable1>:
 8000940:	8000 ffff                                   ....

08000944 <??DataTable1_1>:
 8000944:	0000 ff80                                   ....

08000948 <ZbZclAttrIntegerRead>:
 8000948:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800094c:	b085      	sub	sp, #20
 800094e:	0006      	movs	r6, r0
 8000950:	000f      	movs	r7, r1
 8000952:	0015      	movs	r5, r2
 8000954:	001c      	movs	r4, r3
 8000956:	2000      	movs	r0, #0
 8000958:	f88d 0009 	strb.w	r0, [sp, #9]
 800095c:	f05f 0808 	movs.w	r8, #8
 8000960:	f05f 0900 	movs.w	r9, #0
 8000964:	f10d 0a0c 	add.w	sl, sp, #12
 8000968:	464a      	mov	r2, r9
 800096a:	4641      	mov	r1, r8
 800096c:	4650      	mov	r0, sl
 800096e:	f005 f932 	bl	8005bd6 <__aeabi_memset>
 8000972:	2000      	movs	r0, #0
 8000974:	9001      	str	r0, [sp, #4]
 8000976:	2008      	movs	r0, #8
 8000978:	9000      	str	r0, [sp, #0]
 800097a:	ab03      	add	r3, sp, #12
 800097c:	f10d 0209 	add.w	r2, sp, #9
 8000980:	0039      	movs	r1, r7
 8000982:	b289      	uxth	r1, r1
 8000984:	0030      	movs	r0, r6
 8000986:	f001 faf8 	bl	8001f7a <ZbZclAttrRead>
 800098a:	f88d 0008 	strb.w	r0, [sp, #8]
 800098e:	2c00      	cmp	r4, #0
 8000990:	d002      	beq.n	8000998 <??ZbZclAttrIntegerRead_0>
 8000992:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000996:	7020      	strb	r0, [r4, #0]

08000998 <??ZbZclAttrIntegerRead_0>:
 8000998:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800099c:	2800      	cmp	r0, #0
 800099e:	d002      	beq.n	80009a6 <??ZbZclAttrIntegerRead_1>
 80009a0:	2000      	movs	r0, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	e01a      	b.n	80009dc <??ZbZclAttrIntegerRead_2>

080009a6 <??ZbZclAttrIntegerRead_1>:
 80009a6:	aa02      	add	r2, sp, #8
 80009a8:	a903      	add	r1, sp, #12
 80009aa:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80009ae:	f7ff fcb1 	bl	8000314 <ZbZclParseInteger>
 80009b2:	0002      	movs	r2, r0
 80009b4:	000b      	movs	r3, r1
 80009b6:	2c00      	cmp	r4, #0
 80009b8:	d002      	beq.n	80009c0 <??ZbZclAttrIntegerRead_3>
 80009ba:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80009be:	7020      	strb	r0, [r4, #0]

080009c0 <??ZbZclAttrIntegerRead_3>:
 80009c0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d002      	beq.n	80009ce <??ZbZclAttrIntegerRead_4>
 80009c8:	2000      	movs	r0, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	e006      	b.n	80009dc <??ZbZclAttrIntegerRead_2>

080009ce <??ZbZclAttrIntegerRead_4>:
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d002      	beq.n	80009d8 <??ZbZclAttrIntegerRead_5>
 80009d2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80009d6:	7028      	strb	r0, [r5, #0]

080009d8 <??ZbZclAttrIntegerRead_5>:
 80009d8:	0010      	movs	r0, r2
 80009da:	0019      	movs	r1, r3

080009dc <??ZbZclAttrIntegerRead_2>:
 80009dc:	b006      	add	sp, #24
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080009e2 <ZbZclAttrIntegerWrite>:
 80009e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009e6:	b087      	sub	sp, #28
 80009e8:	4680      	mov	r8, r0
 80009ea:	4689      	mov	r9, r1
 80009ec:	0014      	movs	r4, r2
 80009ee:	001d      	movs	r5, r3
 80009f0:	f1b8 0f00 	cmp.w	r8, #0
 80009f4:	d101      	bne.n	80009fa <??ZbZclAttrIntegerWrite_0>
 80009f6:	2087      	movs	r0, #135	; 0x87
 80009f8:	e042      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

080009fa <??ZbZclAttrIntegerWrite_0>:
 80009fa:	ab04      	add	r3, sp, #16
 80009fc:	f10d 0211 	add.w	r2, sp, #17
 8000a00:	4649      	mov	r1, r9
 8000a02:	b289      	uxth	r1, r1
 8000a04:	4640      	mov	r0, r8
 8000a06:	f7ff ff9f 	bl	8000948 <ZbZclAttrIntegerRead>
 8000a0a:	0006      	movs	r6, r0
 8000a0c:	000f      	movs	r7, r1
 8000a0e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d002      	beq.n	8000a1c <??ZbZclAttrIntegerWrite_2>
 8000a16:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a1a:	e031      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a1c <??ZbZclAttrIntegerWrite_2>:
 8000a1c:	42af      	cmp	r7, r5
 8000a1e:	d103      	bne.n	8000a28 <??ZbZclAttrIntegerWrite_3>
 8000a20:	42a6      	cmp	r6, r4
 8000a22:	d101      	bne.n	8000a28 <??ZbZclAttrIntegerWrite_3>
 8000a24:	2000      	movs	r0, #0
 8000a26:	e02b      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a28 <??ZbZclAttrIntegerWrite_3>:
 8000a28:	2000      	movs	r0, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000a30:	2000      	movs	r0, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	e9cd 0100 	strd	r0, r1, [sp]
 8000a38:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	0029      	movs	r1, r5
 8000a40:	f7ff fdac 	bl	800059c <ZbZclAttrIntegerRangeCheck>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d101      	bne.n	8000a4c <??ZbZclAttrIntegerWrite_4>
 8000a48:	2087      	movs	r0, #135	; 0x87
 8000a4a:	e019      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a4c <??ZbZclAttrIntegerWrite_4>:
 8000a4c:	0022      	movs	r2, r4
 8000a4e:	002b      	movs	r3, r5
 8000a50:	a805      	add	r0, sp, #20
 8000a52:	f001 f94f 	bl	8001cf4 <putle64>
 8000a56:	2002      	movs	r0, #2
 8000a58:	9001      	str	r0, [sp, #4]
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	9000      	str	r0, [sp, #0]
 8000a5e:	ab05      	add	r3, sp, #20
 8000a60:	464a      	mov	r2, r9
 8000a62:	b292      	uxth	r2, r2
 8000a64:	2100      	movs	r1, #0
 8000a66:	4640      	mov	r0, r8
 8000a68:	f001 fbd9 	bl	800221e <ZbZclAttrWrite>
 8000a6c:	f88d 0010 	strb.w	r0, [sp, #16]
 8000a70:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d002      	beq.n	8000a7e <??ZbZclAttrIntegerWrite_5>
 8000a78:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a7c:	e000      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a7e <??ZbZclAttrIntegerWrite_5>:
 8000a7e:	2000      	movs	r0, #0

08000a80 <??ZbZclAttrIntegerWrite_1>:
 8000a80:	b007      	add	sp, #28
 8000a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a86 <ZbZclAttrIntegerIncrement>:
 8000a86:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	468b      	mov	fp, r1
 8000a8e:	0016      	movs	r6, r2
 8000a90:	001f      	movs	r7, r3
 8000a92:	f05f 0a00 	movs.w	sl, #0
 8000a96:	466b      	mov	r3, sp
 8000a98:	f10d 0201 	add.w	r2, sp, #1
 8000a9c:	4659      	mov	r1, fp
 8000a9e:	b289      	uxth	r1, r1
 8000aa0:	9804      	ldr	r0, [sp, #16]
 8000aa2:	f7ff ff51 	bl	8000948 <ZbZclAttrIntegerRead>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	000b      	movs	r3, r1
 8000aaa:	f89d 0000 	ldrb.w	r0, [sp]
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d002      	beq.n	8000ab8 <??ZbZclAttrIntegerIncrement_0>
 8000ab2:	f89d 0000 	ldrb.w	r0, [sp]
 8000ab6:	e03e      	b.n	8000b36 <??ZbZclAttrIntegerIncrement_1>

08000ab8 <??ZbZclAttrIntegerIncrement_0>:
 8000ab8:	eb12 0806 	adds.w	r8, r2, r6
 8000abc:	eb53 0907 	adcs.w	r9, r3, r7
 8000ac0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000ac4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8000ac8:	f001 fff4 	bl	8002ab4 <ZbZclAttrTypeLength>
 8000acc:	9001      	str	r0, [sp, #4]
 8000ace:	9801      	ldr	r0, [sp, #4]
 8000ad0:	2801      	cmp	r0, #1
 8000ad2:	d017      	beq.n	8000b04 <??ZbZclAttrIntegerIncrement_2>
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d00b      	beq.n	8000af0 <??ZbZclAttrIntegerIncrement_3>
 8000ad8:	2804      	cmp	r0, #4
 8000ada:	d002      	beq.n	8000ae2 <??ZbZclAttrIntegerIncrement_4>
 8000adc:	2808      	cmp	r0, #8
 8000ade:	d118      	bne.n	8000b12 <??ZbZclAttrIntegerIncrement_5>

08000ae0 <??ZbZclAttrIntegerIncrement_6>:
 8000ae0:	e019      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000ae2 <??ZbZclAttrIntegerIncrement_4>:
 8000ae2:	f038 0000 	bics.w	r0, r8, #0
 8000ae6:	f039 31ff 	bics.w	r1, r9, #4294967295	; 0xffffffff
 8000aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000aee:	e012      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000af0 <??ZbZclAttrIntegerIncrement_3>:
 8000af0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000af4:	2100      	movs	r1, #0
 8000af6:	ea18 0000 	ands.w	r0, r8, r0
 8000afa:	ea19 0101 	ands.w	r1, r9, r1
 8000afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000b02:	e008      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000b04 <??ZbZclAttrIntegerIncrement_2>:
 8000b04:	f018 00ff 	ands.w	r0, r8, #255	; 0xff
 8000b08:	f019 0100 	ands.w	r1, r9, #0
 8000b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000b10:	e001      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000b12 <??ZbZclAttrIntegerIncrement_5>:
 8000b12:	2001      	movs	r0, #1
 8000b14:	4682      	mov	sl, r0

08000b16 <??ZbZclAttrIntegerIncrement_7>:
 8000b16:	4650      	mov	r0, sl
 8000b18:	b2c0      	uxtb	r0, r0
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d001      	beq.n	8000b22 <??ZbZclAttrIntegerIncrement_8>
 8000b1e:	2086      	movs	r0, #134	; 0x86
 8000b20:	e009      	b.n	8000b36 <??ZbZclAttrIntegerIncrement_1>

08000b22 <??ZbZclAttrIntegerIncrement_8>:
 8000b22:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8000b26:	0022      	movs	r2, r4
 8000b28:	002b      	movs	r3, r5
 8000b2a:	4659      	mov	r1, fp
 8000b2c:	b289      	uxth	r1, r1
 8000b2e:	9804      	ldr	r0, [sp, #16]
 8000b30:	f7ff ff57 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8000b34:	2000      	movs	r0, #0

08000b36 <??ZbZclAttrIntegerIncrement_1>:
 8000b36:	b005      	add	sp, #20
 8000b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b3c <ZbZclAttrEuiRead>:
 8000b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	0005      	movs	r5, r0
 8000b44:	000e      	movs	r6, r1
 8000b46:	0014      	movs	r4, r2
 8000b48:	f05f 0808 	movs.w	r8, #8
 8000b4c:	f05f 0900 	movs.w	r9, #0
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	464a      	mov	r2, r9
 8000b54:	4641      	mov	r1, r8
 8000b56:	0038      	movs	r0, r7
 8000b58:	f005 f83d 	bl	8005bd6 <__aeabi_memset>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	9001      	str	r0, [sp, #4]
 8000b60:	2008      	movs	r0, #8
 8000b62:	9000      	str	r0, [sp, #0]
 8000b64:	ab02      	add	r3, sp, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	0031      	movs	r1, r6
 8000b6a:	b289      	uxth	r1, r1
 8000b6c:	0028      	movs	r0, r5
 8000b6e:	f001 fa04 	bl	8001f7a <ZbZclAttrRead>
 8000b72:	0007      	movs	r7, r0
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d000      	beq.n	8000b7a <??ZbZclAttrEuiRead_0>
 8000b78:	7027      	strb	r7, [r4, #0]

08000b7a <??ZbZclAttrEuiRead_0>:
 8000b7a:	0038      	movs	r0, r7
 8000b7c:	b2c0      	uxtb	r0, r0
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d002      	beq.n	8000b88 <??ZbZclAttrEuiRead_1>
 8000b82:	2000      	movs	r0, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	e002      	b.n	8000b8e <??ZbZclAttrEuiRead_2>

08000b88 <??ZbZclAttrEuiRead_1>:
 8000b88:	a802      	add	r0, sp, #8
 8000b8a:	f001 f860 	bl	8001c4e <pletoh64>

08000b8e <??ZbZclAttrEuiRead_2>:
 8000b8e:	b005      	add	sp, #20
 8000b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000b94 <ZbZclAttrEuiWrite>:
 8000b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	4680      	mov	r8, r0
 8000b9c:	4689      	mov	r9, r1
 8000b9e:	0014      	movs	r4, r2
 8000ba0:	001d      	movs	r5, r3
 8000ba2:	f1b8 0f00 	cmp.w	r8, #0
 8000ba6:	d101      	bne.n	8000bac <??ZbZclAttrEuiWrite_0>
 8000ba8:	2087      	movs	r0, #135	; 0x87
 8000baa:	e02e      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000bac <??ZbZclAttrEuiWrite_0>:
 8000bac:	aa02      	add	r2, sp, #8
 8000bae:	4649      	mov	r1, r9
 8000bb0:	b289      	uxth	r1, r1
 8000bb2:	4640      	mov	r0, r8
 8000bb4:	f7ff ffc2 	bl	8000b3c <ZbZclAttrEuiRead>
 8000bb8:	0006      	movs	r6, r0
 8000bba:	000f      	movs	r7, r1
 8000bbc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d002      	beq.n	8000bca <??ZbZclAttrEuiWrite_2>
 8000bc4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000bc8:	e01f      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000bca <??ZbZclAttrEuiWrite_2>:
 8000bca:	42af      	cmp	r7, r5
 8000bcc:	d103      	bne.n	8000bd6 <??ZbZclAttrEuiWrite_3>
 8000bce:	42a6      	cmp	r6, r4
 8000bd0:	d101      	bne.n	8000bd6 <??ZbZclAttrEuiWrite_3>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	e019      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000bd6 <??ZbZclAttrEuiWrite_3>:
 8000bd6:	0022      	movs	r2, r4
 8000bd8:	002b      	movs	r3, r5
 8000bda:	a803      	add	r0, sp, #12
 8000bdc:	f001 f88a 	bl	8001cf4 <putle64>
 8000be0:	2002      	movs	r0, #2
 8000be2:	9001      	str	r0, [sp, #4]
 8000be4:	2008      	movs	r0, #8
 8000be6:	9000      	str	r0, [sp, #0]
 8000be8:	ab03      	add	r3, sp, #12
 8000bea:	464a      	mov	r2, r9
 8000bec:	b292      	uxth	r2, r2
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	f001 fb14 	bl	800221e <ZbZclAttrWrite>
 8000bf6:	f88d 0008 	strb.w	r0, [sp, #8]
 8000bfa:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d002      	beq.n	8000c08 <??ZbZclAttrEuiWrite_4>
 8000c02:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c06:	e000      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000c08 <??ZbZclAttrEuiWrite_4>:
 8000c08:	2000      	movs	r0, #0

08000c0a <??ZbZclAttrEuiWrite_1>:
 8000c0a:	b005      	add	sp, #20
 8000c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c10 <ZbZclClusterGetEndpoint>:
 8000c10:	7b80      	ldrb	r0, [r0, #14]
 8000c12:	4770      	bx	lr

08000c14 <ZbZclClusterSetCallbackArg>:
 8000c14:	6541      	str	r1, [r0, #84]	; 0x54
 8000c16:	4770      	bx	lr

08000c18 <ZbZclClusterSetMfrCode>:
 8000c18:	8201      	strh	r1, [r0, #16]
 8000c1a:	4770      	bx	lr

08000c1c <ZbZclClusterGetClusterId>:
 8000c1c:	8980      	ldrh	r0, [r0, #12]
 8000c1e:	4770      	bx	lr

08000c20 <ZbZclClusterSetProfileId>:
 8000c20:	b538      	push	{r3, r4, r5, lr}
 8000c22:	0004      	movs	r4, r0
 8000c24:	000d      	movs	r5, r1
 8000c26:	82a5      	strh	r5, [r4, #20]
 8000c28:	7ba0      	ldrb	r0, [r4, #14]
 8000c2a:	28ff      	cmp	r0, #255	; 0xff
 8000c2c:	d008      	beq.n	8000c40 <??ZbZclClusterSetProfileId_0>
 8000c2e:	0020      	movs	r0, r4
 8000c30:	f011 fc66 	bl	8012500 <ZbZclClusterUnbind>
 8000c34:	7f23      	ldrb	r3, [r4, #28]
 8000c36:	8aa2      	ldrh	r2, [r4, #20]
 8000c38:	7ba1      	ldrb	r1, [r4, #14]
 8000c3a:	0020      	movs	r0, r4
 8000c3c:	f011 fc1d 	bl	801247a <ZbZclClusterBind>

08000c40 <??ZbZclClusterSetProfileId_0>:
 8000c40:	bd31      	pop	{r0, r4, r5, pc}

08000c42 <ZbZclClusterGetProfileId>:
 8000c42:	b510      	push	{r4, lr}
 8000c44:	0004      	movs	r4, r0
 8000c46:	7ba1      	ldrb	r1, [r4, #14]
 8000c48:	68a0      	ldr	r0, [r4, #8]
 8000c4a:	f010 ff48 	bl	8011ade <ZbApsEndpointProfile>
 8000c4e:	0001      	movs	r1, r0
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	b289      	uxth	r1, r1
 8000c56:	4291      	cmp	r1, r2
 8000c58:	d101      	bne.n	8000c5e <??ZbZclClusterGetProfileId_0>
 8000c5a:	8aa1      	ldrh	r1, [r4, #20]
 8000c5c:	0008      	movs	r0, r1

08000c5e <??ZbZclClusterGetProfileId_0>:
 8000c5e:	b280      	uxth	r0, r0
 8000c60:	bd10      	pop	{r4, pc}

08000c62 <ZbZclClusterSetMinSecurity>:
 8000c62:	b430      	push	{r4, r5}
 8000c64:	0003      	movs	r3, r0
 8000c66:	2001      	movs	r0, #1
 8000c68:	7d9a      	ldrb	r2, [r3, #22]
 8000c6a:	f012 0203 	ands.w	r2, r2, #3
 8000c6e:	2a01      	cmp	r2, #1
 8000c70:	d101      	bne.n	8000c76 <??ZbZclClusterSetMinSecurity_0>
 8000c72:	2401      	movs	r4, #1
 8000c74:	e000      	b.n	8000c78 <??ZbZclClusterSetMinSecurity_1>

08000c76 <??ZbZclClusterSetMinSecurity_0>:
 8000c76:	2400      	movs	r4, #0

08000c78 <??ZbZclClusterSetMinSecurity_1>:
 8000c78:	000a      	movs	r2, r1
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	2aab      	cmp	r2, #171	; 0xab
 8000c7e:	d01d      	beq.n	8000cbc <??ZbZclClusterSetMinSecurity_2>
 8000c80:	2aac      	cmp	r2, #172	; 0xac
 8000c82:	d00f      	beq.n	8000ca4 <??ZbZclClusterSetMinSecurity_3>
 8000c84:	2aaf      	cmp	r2, #175	; 0xaf
 8000c86:	d123      	bne.n	8000cd0 <??ZbZclClusterSetMinSecurity_4>

08000c88 <??ZbZclClusterSetMinSecurity_5>:
 8000c88:	8add      	ldrh	r5, [r3, #22]
 8000c8a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000c8e:	4015      	ands	r5, r2
 8000c90:	82dd      	strh	r5, [r3, #22]
 8000c92:	8add      	ldrh	r5, [r3, #22]
 8000c94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c98:	4015      	ands	r5, r2
 8000c9a:	82dd      	strh	r5, [r3, #22]
 8000c9c:	0022      	movs	r2, r4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	2a00      	cmp	r2, #0

08000ca2 <??ZbZclClusterSetMinSecurity_6>:
 8000ca2:	e017      	b.n	8000cd4 <??ZbZclClusterSetMinSecurity_7>

08000ca4 <??ZbZclClusterSetMinSecurity_3>:
 8000ca4:	8ada      	ldrh	r2, [r3, #22]
 8000ca6:	f052 0202 	orrs.w	r2, r2, #2
 8000caa:	82da      	strh	r2, [r3, #22]
 8000cac:	8ada      	ldrh	r2, [r3, #22]
 8000cae:	f052 0201 	orrs.w	r2, r2, #1
 8000cb2:	82da      	strh	r2, [r3, #22]
 8000cb4:	0022      	movs	r2, r4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	2a00      	cmp	r2, #0

08000cba <??ZbZclClusterSetMinSecurity_8>:
 8000cba:	e00b      	b.n	8000cd4 <??ZbZclClusterSetMinSecurity_7>

08000cbc <??ZbZclClusterSetMinSecurity_2>:
 8000cbc:	8add      	ldrh	r5, [r3, #22]
 8000cbe:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000cc2:	4015      	ands	r5, r2
 8000cc4:	82dd      	strh	r5, [r3, #22]
 8000cc6:	8ada      	ldrh	r2, [r3, #22]
 8000cc8:	f052 0201 	orrs.w	r2, r2, #1
 8000ccc:	82da      	strh	r2, [r3, #22]
 8000cce:	e001      	b.n	8000cd4 <??ZbZclClusterSetMinSecurity_7>

08000cd0 <??ZbZclClusterSetMinSecurity_4>:
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	0010      	movs	r0, r2

08000cd4 <??ZbZclClusterSetMinSecurity_7>:
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d000      	beq.n	8000cde <??ZbZclClusterSetMinSecurity_9>
 8000cdc:	7499      	strb	r1, [r3, #18]

08000cde <??ZbZclClusterSetMinSecurity_9>:
 8000cde:	b2c0      	uxtb	r0, r0
 8000ce0:	bc30      	pop	{r4, r5}
 8000ce2:	4770      	bx	lr

08000ce4 <ZbZclClusterCheckMinSecurity>:
 8000ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce8:	0004      	movs	r4, r0
 8000cea:	000d      	movs	r5, r1
 8000cec:	0016      	movs	r6, r2
 8000cee:	2700      	movs	r7, #0
 8000cf0:	7ca0      	ldrb	r0, [r4, #18]
 8000cf2:	28af      	cmp	r0, #175	; 0xaf
 8000cf4:	d102      	bne.n	8000cfc <??ZbZclClusterCheckMinSecurity_0>
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e073      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000cfc <??ZbZclClusterCheckMinSecurity_0>:
 8000cfc:	7ca0      	ldrb	r0, [r4, #18]
 8000cfe:	28ac      	cmp	r0, #172	; 0xac
 8000d00:	d10a      	bne.n	8000d18 <??ZbZclClusterCheckMinSecurity_2>
 8000d02:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d06:	28ac      	cmp	r0, #172	; 0xac
 8000d08:	d003      	beq.n	8000d12 <??ZbZclClusterCheckMinSecurity_3>
 8000d0a:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d0e:	28ab      	cmp	r0, #171	; 0xab
 8000d10:	d101      	bne.n	8000d16 <??ZbZclClusterCheckMinSecurity_4>

08000d12 <??ZbZclClusterCheckMinSecurity_3>:
 8000d12:	2001      	movs	r0, #1
 8000d14:	0007      	movs	r7, r0

08000d16 <??ZbZclClusterCheckMinSecurity_4>:
 8000d16:	e065      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d18 <??ZbZclClusterCheckMinSecurity_2>:
 8000d18:	7ca0      	ldrb	r0, [r4, #18]
 8000d1a:	28ab      	cmp	r0, #171	; 0xab
 8000d1c:	d162      	bne.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>
 8000d1e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d22:	28ab      	cmp	r0, #171	; 0xab
 8000d24:	d102      	bne.n	8000d2c <??ZbZclClusterCheckMinSecurity_6>
 8000d26:	2001      	movs	r0, #1
 8000d28:	0007      	movs	r7, r0
 8000d2a:	e05b      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d2c <??ZbZclClusterCheckMinSecurity_6>:
 8000d2c:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d30:	28ac      	cmp	r0, #172	; 0xac
 8000d32:	d157      	bne.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d34 <??ZbZclClusterCheckMinSecurity_7>:
 8000d34:	89a0      	ldrh	r0, [r4, #12]
 8000d36:	2819      	cmp	r0, #25
 8000d38:	d114      	bne.n	8000d64 <??ZbZclClusterCheckMinSecurity_8>
 8000d3a:	7f20      	ldrb	r0, [r4, #28]
 8000d3c:	2801      	cmp	r0, #1
 8000d3e:	d111      	bne.n	8000d64 <??ZbZclClusterCheckMinSecurity_8>
 8000d40:	0028      	movs	r0, r5
 8000d42:	f010 feff 	bl	8011b44 <ZbApsAddrIsBcast>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d00b      	beq.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d4a:	7830      	ldrb	r0, [r6, #0]
 8000d4c:	2801      	cmp	r0, #1
 8000d4e:	d108      	bne.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d50:	78b0      	ldrb	r0, [r6, #2]
 8000d52:	2801      	cmp	r0, #1
 8000d54:	d105      	bne.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d56:	79f0      	ldrb	r0, [r6, #7]
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d102      	bne.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	0007      	movs	r7, r0
 8000d60:	e040      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d62 <??ZbZclClusterCheckMinSecurity_9>:
 8000d62:	e03f      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d64 <??ZbZclClusterCheckMinSecurity_8>:
 8000d64:	f240 7802 	movw	r8, #1794	; 0x702
 8000d68:	89a0      	ldrh	r0, [r4, #12]
 8000d6a:	4540      	cmp	r0, r8
 8000d6c:	d11a      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d6e:	7f20      	ldrb	r0, [r4, #28]
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d117      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d74:	7830      	ldrb	r0, [r6, #0]
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d114      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d7a:	79f0      	ldrb	r0, [r6, #7]
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d111      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d80:	78b0      	ldrb	r0, [r6, #2]
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10e      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d86:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8000d88:	2802      	cmp	r0, #2
 8000d8a:	d30b      	bcc.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d8c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000d8e:	f000 ff20 	bl	8001bd2 <pletoh16>
 8000d92:	0001      	movs	r1, r0
 8000d94:	f240 3206 	movw	r2, #774	; 0x306
 8000d98:	b289      	uxth	r1, r1
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d102      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d9e:	2101      	movs	r1, #1
 8000da0:	000f      	movs	r7, r1
 8000da2:	e01f      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000da4 <??ZbZclClusterCheckMinSecurity_10>:
 8000da4:	89a0      	ldrh	r0, [r4, #12]
 8000da6:	4540      	cmp	r0, r8
 8000da8:	d11b      	bne.n	8000de2 <??ZbZclClusterCheckMinSecurity_11>
 8000daa:	7f20      	ldrb	r0, [r4, #28]
 8000dac:	2801      	cmp	r0, #1
 8000dae:	d118      	bne.n	8000de2 <??ZbZclClusterCheckMinSecurity_11>
 8000db0:	7830      	ldrb	r0, [r6, #0]
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d114      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000db6:	79f0      	ldrb	r0, [r6, #7]
 8000db8:	2801      	cmp	r0, #1
 8000dba:	d111      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dbc:	78b0      	ldrb	r0, [r6, #2]
 8000dbe:	2801      	cmp	r0, #1
 8000dc0:	d10e      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dc2:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8000dc4:	2802      	cmp	r0, #2
 8000dc6:	d30b      	bcc.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000dca:	f000 ff02 	bl	8001bd2 <pletoh16>
 8000dce:	0001      	movs	r1, r0
 8000dd0:	f240 3206 	movw	r2, #774	; 0x306
 8000dd4:	b289      	uxth	r1, r1
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d102      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dda:	2101      	movs	r1, #1
 8000ddc:	000f      	movs	r7, r1
 8000dde:	e001      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000de0 <??ZbZclClusterCheckMinSecurity_12>:
 8000de0:	e000      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000de2 <??ZbZclClusterCheckMinSecurity_11>:
 8000de2:	e7ff      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000de4 <??ZbZclClusterCheckMinSecurity_1>:
 8000de4:	0038      	movs	r0, r7
 8000de6:	b2c0      	uxtb	r0, r0
 8000de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000dec <ZbZclClusterSetTxOptions>:
 8000dec:	05ca      	lsls	r2, r1, #23
 8000dee:	d400      	bmi.n	8000df2 <??ZbZclClusterSetTxOptions_0>

08000df0 <??ZbZclClusterSetTxOptions_1>:
 8000df0:	82c1      	strh	r1, [r0, #22]

08000df2 <??ZbZclClusterSetTxOptions_0>:
 8000df2:	4770      	bx	lr

08000df4 <ZbZclClusterGetTxOptions>:
 8000df4:	8ac0      	ldrh	r0, [r0, #22]
 8000df6:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8000dfa:	4008      	ands	r0, r1
 8000dfc:	4770      	bx	lr

08000dfe <ZbZclTxOptsFromSecurityStatus>:
 8000dfe:	0001      	movs	r1, r0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f050 0004 	orrs.w	r0, r0, #4
 8000e06:	f050 0008 	orrs.w	r0, r0, #8
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	2aab      	cmp	r2, #171	; 0xab
 8000e10:	d102      	bne.n	8000e18 <??ZbZclTxOptsFromSecurityStatus_0>
 8000e12:	f050 0001 	orrs.w	r0, r0, #1
 8000e16:	e007      	b.n	8000e28 <??ZbZclTxOptsFromSecurityStatus_1>

08000e18 <??ZbZclTxOptsFromSecurityStatus_0>:
 8000e18:	000a      	movs	r2, r1
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	2aac      	cmp	r2, #172	; 0xac
 8000e1e:	d103      	bne.n	8000e28 <??ZbZclTxOptsFromSecurityStatus_1>
 8000e20:	f050 0001 	orrs.w	r0, r0, #1
 8000e24:	f050 0002 	orrs.w	r0, r0, #2

08000e28 <??ZbZclTxOptsFromSecurityStatus_1>:
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	4770      	bx	lr

08000e2c <ZbZclClusterGetDirection>:
 8000e2c:	7f00      	ldrb	r0, [r0, #28]
 8000e2e:	4770      	bx	lr

08000e30 <ZbZclClusterGetDirectionStr>:
 8000e30:	0001      	movs	r1, r0
 8000e32:	7f08      	ldrb	r0, [r1, #28]
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d003      	beq.n	8000e40 <??ZbZclClusterGetDirectionStr_0>
 8000e38:	2802      	cmp	r0, #2
 8000e3a:	d005      	beq.n	8000e48 <??ZbZclClusterGetDirectionStr_1>
 8000e3c:	d302      	bcc.n	8000e44 <??ZbZclClusterGetDirectionStr_2>
 8000e3e:	e005      	b.n	8000e4c <??ZbZclClusterGetDirectionStr_3>

08000e40 <??ZbZclClusterGetDirectionStr_0>:
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <??DataTable1>)
 8000e42:	e004      	b.n	8000e4e <??ZbZclClusterGetDirectionStr_4>

08000e44 <??ZbZclClusterGetDirectionStr_2>:
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <??DataTable1_1>)
 8000e46:	e002      	b.n	8000e4e <??ZbZclClusterGetDirectionStr_4>

08000e48 <??ZbZclClusterGetDirectionStr_1>:
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <??DataTable1_2>)
 8000e4a:	e000      	b.n	8000e4e <??ZbZclClusterGetDirectionStr_4>

08000e4c <??ZbZclClusterGetDirectionStr_3>:
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <??DataTable1_3>)

08000e4e <??ZbZclClusterGetDirectionStr_4>:
 8000e4e:	4770      	bx	lr

08000e50 <??DataTable1>:
 8000e50:	696c 0801                                   li..

08000e54 <??DataTable1_1>:
 8000e54:	6974 0801                                   ti..

08000e58 <??DataTable1_2>:
 8000e58:	697c 0801                                   |i..

08000e5c <??DataTable1_3>:
 8000e5c:	6984 0801                                   .i..

08000e60 <ZbZclClusterSetDiscoverRoute>:
 8000e60:	7601      	strb	r1, [r0, #24]
 8000e62:	4770      	bx	lr

08000e64 <ZbZclClusterSetRadius>:
 8000e64:	7641      	strb	r1, [r0, #25]
 8000e66:	4770      	bx	lr

08000e68 <ZbZclClusterGetRadius>:
 8000e68:	7e40      	ldrb	r0, [r0, #25]
 8000e6a:	4770      	bx	lr

08000e6c <ZbZclClusterSetMaxAsduLength>:
 8000e6c:	b410      	push	{r4}
 8000e6e:	0002      	movs	r2, r0
 8000e70:	000b      	movs	r3, r1
 8000e72:	0018      	movs	r0, r3
 8000e74:	b280      	uxth	r0, r0
 8000e76:	f240 74d1 	movw	r4, #2001	; 0x7d1
 8000e7a:	42a0      	cmp	r0, r4
 8000e7c:	d301      	bcc.n	8000e82 <??ZbZclClusterSetMaxAsduLength_0>
 8000e7e:	2000      	movs	r0, #0
 8000e80:	e007      	b.n	8000e92 <??ZbZclClusterSetMaxAsduLength_1>

08000e82 <??ZbZclClusterSetMaxAsduLength_0>:
 8000e82:	0018      	movs	r0, r3
 8000e84:	b280      	uxth	r0, r0
 8000e86:	2839      	cmp	r0, #57	; 0x39
 8000e88:	d201      	bcs.n	8000e8e <??ZbZclClusterSetMaxAsduLength_2>
 8000e8a:	2039      	movs	r0, #57	; 0x39
 8000e8c:	0003      	movs	r3, r0

08000e8e <??ZbZclClusterSetMaxAsduLength_2>:
 8000e8e:	8353      	strh	r3, [r2, #26]
 8000e90:	2001      	movs	r0, #1

08000e92 <??ZbZclClusterSetMaxAsduLength_1>:
 8000e92:	bc10      	pop	{r4}
 8000e94:	4770      	bx	lr

08000e96 <ZbZclClusterGetMaxAsduLength>:
 8000e96:	8b40      	ldrh	r0, [r0, #26]
 8000e98:	4770      	bx	lr

08000e9a <ZbZclClusterInitCommandReq>:
 8000e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9e:	0004      	movs	r4, r0
 8000ea0:	000d      	movs	r5, r1
 8000ea2:	2630      	movs	r6, #48	; 0x30
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	46a8      	mov	r8, r5
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	0031      	movs	r1, r6
 8000eac:	4640      	mov	r0, r8
 8000eae:	f004 fe92 	bl	8005bd6 <__aeabi_memset>
 8000eb2:	8aa0      	ldrh	r0, [r4, #20]
 8000eb4:	8228      	strh	r0, [r5, #16]
 8000eb6:	89a0      	ldrh	r0, [r4, #12]
 8000eb8:	8268      	strh	r0, [r5, #18]
 8000eba:	7ba0      	ldrb	r0, [r4, #14]
 8000ebc:	82a8      	strh	r0, [r5, #20]
 8000ebe:	8ae0      	ldrh	r0, [r4, #22]
 8000ec0:	82e8      	strh	r0, [r5, #22]
 8000ec2:	7e20      	ldrb	r0, [r4, #24]
 8000ec4:	7628      	strb	r0, [r5, #24]
 8000ec6:	7e60      	ldrb	r0, [r4, #25]
 8000ec8:	7668      	strb	r0, [r5, #25]
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ece <ZbZclClusterInitApsdeReq>:
 8000ece:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed2:	0005      	movs	r5, r0
 8000ed4:	000e      	movs	r6, r1
 8000ed6:	0014      	movs	r4, r2
 8000ed8:	2730      	movs	r7, #48	; 0x30
 8000eda:	f05f 0800 	movs.w	r8, #0
 8000ede:	46b1      	mov	r9, r6
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	0039      	movs	r1, r7
 8000ee4:	4648      	mov	r0, r9
 8000ee6:	f004 fe76 	bl	8005bd6 <__aeabi_memset>
 8000eea:	8aa8      	ldrh	r0, [r5, #20]
 8000eec:	8230      	strh	r0, [r6, #16]
 8000eee:	89a8      	ldrh	r0, [r5, #12]
 8000ef0:	8270      	strh	r0, [r6, #18]
 8000ef2:	7ba8      	ldrb	r0, [r5, #14]
 8000ef4:	82b0      	strh	r0, [r6, #20]
 8000ef6:	8ae8      	ldrh	r0, [r5, #22]
 8000ef8:	84b0      	strh	r0, [r6, #36]	; 0x24
 8000efa:	7e28      	ldrb	r0, [r5, #24]
 8000efc:	f886 0026 	strb.w	r0, [r6, #38]	; 0x26
 8000f00:	7e68      	ldrb	r0, [r5, #25]
 8000f02:	f886 0027 	strb.w	r0, [r6, #39]	; 0x27
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d00b      	beq.n	8000f22 <??ZbZclClusterInitApsdeReq_0>
 8000f0a:	8ab0      	ldrh	r0, [r6, #20]
 8000f0c:	28ff      	cmp	r0, #255	; 0xff
 8000f0e:	d101      	bne.n	8000f14 <??ZbZclClusterInitApsdeReq_1>
 8000f10:	8860      	ldrh	r0, [r4, #2]
 8000f12:	82b0      	strh	r0, [r6, #20]

08000f14 <??ZbZclClusterInitApsdeReq_1>:
 8000f14:	8c20      	ldrh	r0, [r4, #32]
 8000f16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d001      	beq.n	8000f22 <??ZbZclClusterInitApsdeReq_0>
 8000f1e:	8c20      	ldrh	r0, [r4, #32]
 8000f20:	8230      	strh	r0, [r6, #16]

08000f22 <??ZbZclClusterInitApsdeReq_0>:
 8000f22:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08000f28 <zcl_persist_handle_set>:
 8000f28:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2c:	0004      	movs	r4, r0
 8000f2e:	000d      	movs	r5, r1
 8000f30:	0016      	movs	r6, r2
 8000f32:	f05f 0b00 	movs.w	fp, #0

08000f36 <??zcl_persist_handle_set_0>:
 8000f36:	4658      	mov	r0, fp
 8000f38:	0031      	movs	r1, r6
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	b289      	uxth	r1, r1
 8000f3e:	4288      	cmp	r0, r1
 8000f40:	d23c      	bcs.n	8000fbc <??zcl_persist_handle_set_1>
 8000f42:	0030      	movs	r0, r6
 8000f44:	b280      	uxth	r0, r0
 8000f46:	4659      	mov	r1, fp
 8000f48:	b289      	uxth	r1, r1
 8000f4a:	1d09      	adds	r1, r1, #4
 8000f4c:	4288      	cmp	r0, r1
 8000f4e:	d201      	bcs.n	8000f54 <??zcl_persist_handle_set_2>
 8000f50:	2087      	movs	r0, #135	; 0x87
 8000f52:	e034      	b.n	8000fbe <??zcl_persist_handle_set_3>

08000f54 <??zcl_persist_handle_set_2>:
 8000f54:	4658      	mov	r0, fp
 8000f56:	b280      	uxth	r0, r0
 8000f58:	4428      	add	r0, r5
 8000f5a:	f000 fe3a 	bl	8001bd2 <pletoh16>
 8000f5e:	0007      	movs	r7, r0
 8000f60:	f11b 0b02 	adds.w	fp, fp, #2
 8000f64:	4658      	mov	r0, fp
 8000f66:	b280      	uxth	r0, r0
 8000f68:	4428      	add	r0, r5
 8000f6a:	f000 fe32 	bl	8001bd2 <pletoh16>
 8000f6e:	4680      	mov	r8, r0
 8000f70:	f11b 0b02 	adds.w	fp, fp, #2
 8000f74:	0030      	movs	r0, r6
 8000f76:	b280      	uxth	r0, r0
 8000f78:	4641      	mov	r1, r8
 8000f7a:	b289      	uxth	r1, r1
 8000f7c:	fa11 f18b 	uxtah	r1, r1, fp
 8000f80:	4288      	cmp	r0, r1
 8000f82:	da01      	bge.n	8000f88 <??zcl_persist_handle_set_4>
 8000f84:	2087      	movs	r0, #135	; 0x87
 8000f86:	e01a      	b.n	8000fbe <??zcl_persist_handle_set_3>

08000f88 <??zcl_persist_handle_set_4>:
 8000f88:	4658      	mov	r0, fp
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	4428      	add	r0, r5
 8000f8e:	4681      	mov	r9, r0
 8000f90:	eb18 0b0b 	adds.w	fp, r8, fp
 8000f94:	2006      	movs	r0, #6
 8000f96:	9001      	str	r0, [sp, #4]
 8000f98:	4640      	mov	r0, r8
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	9000      	str	r0, [sp, #0]
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	003a      	movs	r2, r7
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f001 f939 	bl	800221e <ZbZclAttrWrite>
 8000fac:	4682      	mov	sl, r0
 8000fae:	4650      	mov	r0, sl
 8000fb0:	b2c0      	uxtb	r0, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d0bf      	beq.n	8000f36 <??zcl_persist_handle_set_0>
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	b2c0      	uxtb	r0, r0
 8000fba:	e000      	b.n	8000fbe <??zcl_persist_handle_set_3>

08000fbc <??zcl_persist_handle_set_1>:
 8000fbc:	2000      	movs	r0, #0

08000fbe <??zcl_persist_handle_set_3>:
 8000fbe:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fc2 <ZbZclHandleReadAttr>:
 8000fc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc6:	b092      	sub	sp, #72	; 0x48
 8000fc8:	0005      	movs	r5, r0
 8000fca:	000e      	movs	r6, r1
 8000fcc:	0017      	movs	r7, r2
 8000fce:	f20f 19a4 	addw	r9, pc, #420	; 0x1a4
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	8b69      	ldrh	r1, [r5, #26]
 8000fd8:	68a8      	ldr	r0, [r5, #8]
 8000fda:	f011 fae9 	bl	80125b0 <zb_heap_alloc>
 8000fde:	0004      	movs	r4, r0
 8000fe0:	2c00      	cmp	r4, #0
 8000fe2:	d106      	bne.n	8000ff2 <??ZbZclHandleReadAttr_0>
 8000fe4:	2389      	movs	r3, #137	; 0x89
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	0039      	movs	r1, r7
 8000fea:	0028      	movs	r0, r5
 8000fec:	f011 f9a3 	bl	8012336 <ZbZclSendDefaultResponse>
 8000ff0:	e0bd      	b.n	800116e <??ZbZclHandleReadAttr_1>

08000ff2 <??ZbZclHandleReadAttr_0>:
 8000ff2:	f05f 0808 	movs.w	r8, #8
 8000ff6:	f05f 0a00 	movs.w	sl, #0
 8000ffa:	f10d 0b0c 	add.w	fp, sp, #12
 8000ffe:	4652      	mov	r2, sl
 8001000:	4641      	mov	r1, r8
 8001002:	4658      	mov	r0, fp
 8001004:	f004 fde7 	bl	8005bd6 <__aeabi_memset>
 8001008:	2000      	movs	r0, #0
 800100a:	f88d 000c 	strb.w	r0, [sp, #12]
 800100e:	7870      	ldrb	r0, [r6, #1]
 8001010:	f88d 000d 	strb.w	r0, [sp, #13]
 8001014:	78b0      	ldrb	r0, [r6, #2]
 8001016:	2800      	cmp	r0, #0
 8001018:	d101      	bne.n	800101e <??ZbZclHandleReadAttr_2>
 800101a:	2001      	movs	r0, #1
 800101c:	e000      	b.n	8001020 <??ZbZclHandleReadAttr_3>

0800101e <??ZbZclHandleReadAttr_2>:
 800101e:	2000      	movs	r0, #0

08001020 <??ZbZclHandleReadAttr_3>:
 8001020:	f88d 000e 	strb.w	r0, [sp, #14]
 8001024:	2001      	movs	r0, #1
 8001026:	f88d 000f 	strb.w	r0, [sp, #15]
 800102a:	88b0      	ldrh	r0, [r6, #4]
 800102c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8001030:	79b0      	ldrb	r0, [r6, #6]
 8001032:	f88d 0012 	strb.w	r0, [sp, #18]
 8001036:	2001      	movs	r0, #1
 8001038:	f88d 0013 	strb.w	r0, [sp, #19]
 800103c:	8b6a      	ldrh	r2, [r5, #26]
 800103e:	0021      	movs	r1, r4
 8001040:	a803      	add	r0, sp, #12
 8001042:	f000 fca5 	bl	8001990 <ZbZclAppendHeader>
 8001046:	4680      	mov	r8, r0
 8001048:	f1b8 0f00 	cmp.w	r8, #0
 800104c:	d50c      	bpl.n	8001068 <??ZbZclHandleReadAttr_4>
 800104e:	2300      	movs	r3, #0
 8001050:	464a      	mov	r2, r9
 8001052:	0021      	movs	r1, r4
 8001054:	68a8      	ldr	r0, [r5, #8]
 8001056:	f011 faba 	bl	80125ce <zb_heap_free>
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	0032      	movs	r2, r6
 800105e:	0039      	movs	r1, r7
 8001060:	0028      	movs	r0, r5
 8001062:	f011 f968 	bl	8012336 <ZbZclSendDefaultResponse>
 8001066:	e082      	b.n	800116e <??ZbZclHandleReadAttr_1>

08001068 <??ZbZclHandleReadAttr_4>:
 8001068:	46c3      	mov	fp, r8

0800106a <??ZbZclHandleReadAttr_5>:
 800106a:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800106c:	2802      	cmp	r0, #2
 800106e:	d353      	bcc.n	8001118 <??ZbZclHandleReadAttr_6>

08001070 <??ZbZclHandleReadAttr_7>:
 8001070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001072:	f000 fdae 	bl	8001bd2 <pletoh16>
 8001076:	f8ad 000a 	strh.w	r0, [sp, #10]
 800107a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800107c:	1c80      	adds	r0, r0, #2
 800107e:	6278      	str	r0, [r7, #36]	; 0x24
 8001080:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8001082:	1e80      	subs	r0, r0, #2
 8001084:	8538      	strh	r0, [r7, #40]	; 0x28
 8001086:	f11b 0004 	adds.w	r0, fp, #4
 800108a:	8b69      	ldrh	r1, [r5, #26]
 800108c:	4288      	cmp	r0, r1
 800108e:	d243      	bcs.n	8001118 <??ZbZclHandleReadAttr_6>

08001090 <??ZbZclHandleReadAttr_8>:
 8001090:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8001094:	eb04 000b 	add.w	r0, r4, fp
 8001098:	f000 fde7 	bl	8001c6a <putle16>
 800109c:	f11b 0b02 	adds.w	fp, fp, #2
 80010a0:	2000      	movs	r0, #0
 80010a2:	9001      	str	r0, [sp, #4]
 80010a4:	8b68      	ldrh	r0, [r5, #26]
 80010a6:	ebb0 000b 	subs.w	r0, r0, fp
 80010aa:	1e80      	subs	r0, r0, #2
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	eb04 000b 	add.w	r0, r4, fp
 80010b2:	1c83      	adds	r3, r0, #2
 80010b4:	aa02      	add	r2, sp, #8
 80010b6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80010ba:	0028      	movs	r0, r5
 80010bc:	f000 ff5d 	bl	8001f7a <ZbZclAttrRead>
 80010c0:	4682      	mov	sl, r0
 80010c2:	f804 a00b 	strb.w	sl, [r4, fp]
 80010c6:	f11b 0b01 	adds.w	fp, fp, #1
 80010ca:	4650      	mov	r0, sl
 80010cc:	b2c0      	uxtb	r0, r0
 80010ce:	2889      	cmp	r0, #137	; 0x89
 80010d0:	d022      	beq.n	8001118 <??ZbZclHandleReadAttr_6>

080010d2 <??ZbZclHandleReadAttr_9>:
 80010d2:	4650      	mov	r0, sl
 80010d4:	b2c0      	uxtb	r0, r0
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d1c7      	bne.n	800106a <??ZbZclHandleReadAttr_5>

080010da <??ZbZclHandleReadAttr_10>:
 80010da:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80010de:	f804 000b 	strb.w	r0, [r4, fp]
 80010e2:	f11b 0b01 	adds.w	fp, fp, #1
 80010e6:	2300      	movs	r3, #0
 80010e8:	8b6a      	ldrh	r2, [r5, #26]
 80010ea:	ebb2 020b 	subs.w	r2, r2, fp
 80010ee:	eb04 010b 	add.w	r1, r4, fp
 80010f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80010f6:	f001 fd68 	bl	8002bca <ZbZclAttrParseLength>
 80010fa:	4680      	mov	r8, r0
 80010fc:	f1b8 0f00 	cmp.w	r8, #0
 8001100:	d507      	bpl.n	8001112 <??ZbZclHandleReadAttr_11>
 8001102:	f1bb 0b01 	subs.w	fp, fp, #1
 8001106:	2087      	movs	r0, #135	; 0x87
 8001108:	eb04 010b 	add.w	r1, r4, fp
 800110c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8001110:	e7ab      	b.n	800106a <??ZbZclHandleReadAttr_5>

08001112 <??ZbZclHandleReadAttr_11>:
 8001112:	eb18 0b0b 	adds.w	fp, r8, fp
 8001116:	e7a8      	b.n	800106a <??ZbZclHandleReadAttr_5>

08001118 <??ZbZclHandleReadAttr_6>:
 8001118:	003a      	movs	r2, r7
 800111a:	a906      	add	r1, sp, #24
 800111c:	0028      	movs	r0, r5
 800111e:	f7ff fed6 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8001122:	a806      	add	r0, sp, #24
 8001124:	f117 0110 	adds.w	r1, r7, #16
 8001128:	2210      	movs	r2, #16
 800112a:	f014 faca 	bl	80156c2 <__aeabi_memcpy>
 800112e:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001132:	f7ff fe64 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8001136:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800113a:	7da8      	ldrb	r0, [r5, #22]
 800113c:	0700      	lsls	r0, r0, #28
 800113e:	d406      	bmi.n	800114e <??ZbZclHandleReadAttr_12>
 8001140:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8001144:	f64f 70f7 	movw	r0, #65527	; 0xfff7
 8001148:	4001      	ands	r1, r0
 800114a:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c

0800114e <??ZbZclHandleReadAttr_12>:
 800114e:	940c      	str	r4, [sp, #48]	; 0x30
 8001150:	4658      	mov	r0, fp
 8001152:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8001156:	2300      	movs	r3, #0
 8001158:	2200      	movs	r2, #0
 800115a:	a906      	add	r1, sp, #24
 800115c:	68a8      	ldr	r0, [r5, #8]
 800115e:	f010 fc77 	bl	8011a50 <ZbApsdeDataReqCallback>
 8001162:	2300      	movs	r3, #0
 8001164:	464a      	mov	r2, r9
 8001166:	0021      	movs	r1, r4
 8001168:	68a8      	ldr	r0, [r5, #8]
 800116a:	f011 fa30 	bl	80125ce <zb_heap_free>

0800116e <??ZbZclHandleReadAttr_1>:
 800116e:	b013      	add	sp, #76	; 0x4c
 8001170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001174 <??DataTable1>:
 8001174:	0000 0000                                   ....

08001178 <ZbZclHandleWriteAttr>:
 8001178:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117c:	b0a3      	sub	sp, #140	; 0x8c
 800117e:	0016      	movs	r6, r2
 8001180:	2701      	movs	r7, #1
 8001182:	2500      	movs	r5, #0
 8001184:	2400      	movs	r4, #0
 8001186:	f05f 0800 	movs.w	r8, #0
 800118a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800118c:	79c0      	ldrb	r0, [r0, #7]
 800118e:	f88d 000a 	strb.w	r0, [sp, #10]
 8001192:	f05f 0900 	movs.w	r9, #0
 8001196:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800119a:	2802      	cmp	r0, #2
 800119c:	d007      	beq.n	80011ae <??ZbZclHandleWriteAttr_0>
 800119e:	2803      	cmp	r0, #3
 80011a0:	d003      	beq.n	80011aa <??ZbZclHandleWriteAttr_1>
 80011a2:	2805      	cmp	r0, #5
 80011a4:	f000 80c3 	beq.w	800132e <??ZbZclHandleWriteAttr_2>
 80011a8:	e116      	b.n	80013d8 <??ZbZclHandleWriteAttr_3>

080011aa <??ZbZclHandleWriteAttr_1>:
 80011aa:	f059 0901 	orrs.w	r9, r9, #1

080011ae <??ZbZclHandleWriteAttr_0>:
 80011ae:	2008      	movs	r0, #8
 80011b0:	9001      	str	r0, [sp, #4]
 80011b2:	2000      	movs	r0, #0
 80011b4:	9000      	str	r0, [sp, #0]
 80011b6:	f10d 0b14 	add.w	fp, sp, #20
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	9901      	ldr	r1, [sp, #4]
 80011be:	4658      	mov	r0, fp
 80011c0:	f004 fd09 	bl	8005bd6 <__aeabi_memset>
 80011c4:	2000      	movs	r0, #0
 80011c6:	f88d 0014 	strb.w	r0, [sp, #20]
 80011ca:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011cc:	7840      	ldrb	r0, [r0, #1]
 80011ce:	f88d 0015 	strb.w	r0, [sp, #21]
 80011d2:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011d4:	7880      	ldrb	r0, [r0, #2]
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d101      	bne.n	80011de <??ZbZclHandleWriteAttr_4>
 80011da:	2001      	movs	r0, #1
 80011dc:	e000      	b.n	80011e0 <??ZbZclHandleWriteAttr_5>

080011de <??ZbZclHandleWriteAttr_4>:
 80011de:	2000      	movs	r0, #0

080011e0 <??ZbZclHandleWriteAttr_5>:
 80011e0:	f88d 0016 	strb.w	r0, [sp, #22]
 80011e4:	2001      	movs	r0, #1
 80011e6:	f88d 0017 	strb.w	r0, [sp, #23]
 80011ea:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011ec:	8880      	ldrh	r0, [r0, #4]
 80011ee:	f8ad 0018 	strh.w	r0, [sp, #24]
 80011f2:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011f4:	7980      	ldrb	r0, [r0, #6]
 80011f6:	f88d 001a 	strb.w	r0, [sp, #26]
 80011fa:	2004      	movs	r0, #4
 80011fc:	f88d 001b 	strb.w	r0, [sp, #27]
 8001200:	2239      	movs	r2, #57	; 0x39
 8001202:	a907      	add	r1, sp, #28
 8001204:	a805      	add	r0, sp, #20
 8001206:	f000 fbc3 	bl	8001990 <ZbZclAppendHeader>
 800120a:	0005      	movs	r5, r0
 800120c:	2d00      	cmp	r5, #0
 800120e:	d502      	bpl.n	8001216 <??ZbZclHandleWriteAttr_6>
 8001210:	2080      	movs	r0, #128	; 0x80
 8001212:	4680      	mov	r8, r0
 8001214:	e0e2      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

08001216 <??ZbZclHandleWriteAttr_6>:
 8001216:	0032      	movs	r2, r6
 8001218:	a916      	add	r1, sp, #88	; 0x58
 800121a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800121c:	f7ff fe57 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8001220:	a816      	add	r0, sp, #88	; 0x58
 8001222:	f116 0110 	adds.w	r1, r6, #16
 8001226:	2210      	movs	r2, #16
 8001228:	f014 fa4b 	bl	80156c2 <__aeabi_memcpy>
 800122c:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 8001230:	f7ff fde5 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8001234:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
 8001238:	2000      	movs	r0, #0
 800123a:	4682      	mov	sl, r0
 800123c:	2080      	movs	r0, #128	; 0x80
 800123e:	0007      	movs	r7, r0
 8001240:	2001      	movs	r0, #1
 8001242:	f88d 0008 	strb.w	r0, [sp, #8]
 8001246:	2000      	movs	r0, #0
 8001248:	0004      	movs	r4, r0

0800124a <??ZbZclHandleWriteAttr_8>:
 800124a:	f11a 0003 	adds.w	r0, sl, #3
 800124e:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8001250:	4288      	cmp	r0, r1
 8001252:	d302      	bcc.n	800125a <??ZbZclHandleWriteAttr_9>
 8001254:	2080      	movs	r0, #128	; 0x80
 8001256:	0007      	movs	r7, r0
 8001258:	e05c      	b.n	8001314 <??ZbZclHandleWriteAttr_10>

0800125a <??ZbZclHandleWriteAttr_9>:
 800125a:	1ce8      	adds	r0, r5, #3
 800125c:	283a      	cmp	r0, #58	; 0x3a
 800125e:	d305      	bcc.n	800126c <??ZbZclHandleWriteAttr_11>
 8001260:	2001      	movs	r0, #1
 8001262:	f88d 0008 	strb.w	r0, [sp, #8]
 8001266:	2089      	movs	r0, #137	; 0x89
 8001268:	0007      	movs	r7, r0
 800126a:	e053      	b.n	8001314 <??ZbZclHandleWriteAttr_10>

0800126c <??ZbZclHandleWriteAttr_11>:
 800126c:	2000      	movs	r0, #0
 800126e:	f88d 0008 	strb.w	r0, [sp, #8]
 8001272:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001274:	4450      	add	r0, sl
 8001276:	f000 fcac 	bl	8001bd2 <pletoh16>
 800127a:	f8ad 000c 	strh.w	r0, [sp, #12]
 800127e:	f11a 0a02 	adds.w	sl, sl, #2
 8001282:	4650      	mov	r0, sl
 8001284:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8001286:	5c09      	ldrb	r1, [r1, r0]
 8001288:	f88d 1009 	strb.w	r1, [sp, #9]
 800128c:	4682      	mov	sl, r0
 800128e:	f11a 0a01 	adds.w	sl, sl, #1
 8001292:	2300      	movs	r3, #0
 8001294:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8001296:	ebb2 020a 	subs.w	r2, r2, sl
 800129a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800129c:	eb00 010a 	add.w	r1, r0, sl
 80012a0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80012a4:	f001 fc91 	bl	8002bca <ZbZclAttrParseLength>
 80012a8:	9004      	str	r0, [sp, #16]
 80012aa:	9804      	ldr	r0, [sp, #16]
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d50c      	bpl.n	80012ca <??ZbZclHandleWriteAttr_12>
 80012b0:	1c64      	adds	r4, r4, #1
 80012b2:	2087      	movs	r0, #135	; 0x87
 80012b4:	a907      	add	r1, sp, #28
 80012b6:	5548      	strb	r0, [r1, r5]
 80012b8:	1c6d      	adds	r5, r5, #1
 80012ba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80012be:	a807      	add	r0, sp, #28
 80012c0:	4428      	add	r0, r5
 80012c2:	f000 fcd2 	bl	8001c6a <putle16>
 80012c6:	1cad      	adds	r5, r5, #2
 80012c8:	e024      	b.n	8001314 <??ZbZclHandleWriteAttr_10>

080012ca <??ZbZclHandleWriteAttr_12>:
 80012ca:	4648      	mov	r0, r9
 80012cc:	b280      	uxth	r0, r0
 80012ce:	9001      	str	r0, [sp, #4]
 80012d0:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80012d2:	ebb0 000a 	subs.w	r0, r0, sl
 80012d6:	9000      	str	r0, [sp, #0]
 80012d8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80012da:	eb00 030a 	add.w	r3, r0, sl
 80012de:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80012e2:	f116 0110 	adds.w	r1, r6, #16
 80012e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80012e8:	f000 ff99 	bl	800221e <ZbZclAttrWrite>
 80012ec:	0007      	movs	r7, r0
 80012ee:	9804      	ldr	r0, [sp, #16]
 80012f0:	eb10 0a0a 	adds.w	sl, r0, sl
 80012f4:	0038      	movs	r0, r7
 80012f6:	b2c0      	uxtb	r0, r0
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d0a6      	beq.n	800124a <??ZbZclHandleWriteAttr_8>
 80012fc:	1c64      	adds	r4, r4, #1
 80012fe:	a807      	add	r0, sp, #28
 8001300:	5547      	strb	r7, [r0, r5]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001308:	a807      	add	r0, sp, #28
 800130a:	4428      	add	r0, r5
 800130c:	f000 fcad 	bl	8001c6a <putle16>
 8001310:	1cad      	adds	r5, r5, #2
 8001312:	e79a      	b.n	800124a <??ZbZclHandleWriteAttr_8>

08001314 <??ZbZclHandleWriteAttr_10>:
 8001314:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001318:	2800      	cmp	r0, #0
 800131a:	d001      	beq.n	8001320 <??ZbZclHandleWriteAttr_13>
 800131c:	46b8      	mov	r8, r7
 800131e:	e05d      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

08001320 <??ZbZclHandleWriteAttr_13>:
 8001320:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8001324:	2802      	cmp	r0, #2
 8001326:	d001      	beq.n	800132c <??ZbZclHandleWriteAttr_14>
 8001328:	2c00      	cmp	r4, #0
 800132a:	d000      	beq.n	800132e <??ZbZclHandleWriteAttr_2>

0800132c <??ZbZclHandleWriteAttr_14>:
 800132c:	e056      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

0800132e <??ZbZclHandleWriteAttr_2>:
 800132e:	2000      	movs	r0, #0
 8001330:	4682      	mov	sl, r0
 8001332:	f05f 0b00 	movs.w	fp, #0

08001336 <??ZbZclHandleWriteAttr_15>:
 8001336:	f11a 0003 	adds.w	r0, sl, #3
 800133a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800133c:	4288      	cmp	r0, r1
 800133e:	d302      	bcc.n	8001346 <??ZbZclHandleWriteAttr_16>
 8001340:	465c      	mov	r4, fp
 8001342:	1c64      	adds	r4, r4, #1
 8001344:	e03b      	b.n	80013be <??ZbZclHandleWriteAttr_17>

08001346 <??ZbZclHandleWriteAttr_16>:
 8001346:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001348:	4450      	add	r0, sl
 800134a:	f000 fc42 	bl	8001bd2 <pletoh16>
 800134e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001352:	f11a 0a02 	adds.w	sl, sl, #2
 8001356:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001358:	f810 000a 	ldrb.w	r0, [r0, sl]
 800135c:	f88d 0009 	strb.w	r0, [sp, #9]
 8001360:	f11a 0a01 	adds.w	sl, sl, #1
 8001364:	2300      	movs	r3, #0
 8001366:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8001368:	ebb2 020a 	subs.w	r2, r2, sl
 800136c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800136e:	eb00 010a 	add.w	r1, r0, sl
 8001372:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001376:	f001 fc28 	bl	8002bca <ZbZclAttrParseLength>
 800137a:	9004      	str	r0, [sp, #16]
 800137c:	9804      	ldr	r0, [sp, #16]
 800137e:	2800      	cmp	r0, #0
 8001380:	d502      	bpl.n	8001388 <??ZbZclHandleWriteAttr_18>
 8001382:	465c      	mov	r4, fp
 8001384:	1c64      	adds	r4, r4, #1
 8001386:	e01a      	b.n	80013be <??ZbZclHandleWriteAttr_17>

08001388 <??ZbZclHandleWriteAttr_18>:
 8001388:	2000      	movs	r0, #0
 800138a:	9001      	str	r0, [sp, #4]
 800138c:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 800138e:	ebb0 000a 	subs.w	r0, r0, sl
 8001392:	9000      	str	r0, [sp, #0]
 8001394:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001396:	eb00 030a 	add.w	r3, r0, sl
 800139a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800139e:	f116 0110 	adds.w	r1, r6, #16
 80013a2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80013a4:	f000 ff3b 	bl	800221e <ZbZclAttrWrite>
 80013a8:	0007      	movs	r7, r0
 80013aa:	0038      	movs	r0, r7
 80013ac:	b2c0      	uxtb	r0, r0
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d001      	beq.n	80013b6 <??ZbZclHandleWriteAttr_19>
 80013b2:	f11b 0b01 	adds.w	fp, fp, #1

080013b6 <??ZbZclHandleWriteAttr_19>:
 80013b6:	9804      	ldr	r0, [sp, #16]
 80013b8:	eb10 0a0a 	adds.w	sl, r0, sl
 80013bc:	e7bb      	b.n	8001336 <??ZbZclHandleWriteAttr_15>

080013be <??ZbZclHandleWriteAttr_17>:
 80013be:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80013c2:	2803      	cmp	r0, #3
 80013c4:	d105      	bne.n	80013d2 <??ZbZclHandleWriteAttr_20>
 80013c6:	2c00      	cmp	r4, #0
 80013c8:	d002      	beq.n	80013d0 <??ZbZclHandleWriteAttr_21>
 80013ca:	2001      	movs	r0, #1
 80013cc:	4680      	mov	r8, r0
 80013ce:	e005      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

080013d0 <??ZbZclHandleWriteAttr_21>:
 80013d0:	e004      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

080013d2 <??ZbZclHandleWriteAttr_20>:
 80013d2:	20ff      	movs	r0, #255	; 0xff
 80013d4:	4680      	mov	r8, r0
 80013d6:	e001      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

080013d8 <??ZbZclHandleWriteAttr_3>:
 80013d8:	2081      	movs	r0, #129	; 0x81
 80013da:	4680      	mov	r8, r0

080013dc <??ZbZclHandleWriteAttr_7>:
 80013dc:	4640      	mov	r0, r8
 80013de:	b2c0      	uxtb	r0, r0
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d00b      	beq.n	80013fc <??ZbZclHandleWriteAttr_22>
 80013e4:	4640      	mov	r0, r8
 80013e6:	b2c0      	uxtb	r0, r0
 80013e8:	28ff      	cmp	r0, #255	; 0xff
 80013ea:	d006      	beq.n	80013fa <??ZbZclHandleWriteAttr_23>
 80013ec:	4643      	mov	r3, r8
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80013f2:	0031      	movs	r1, r6
 80013f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80013f6:	f010 ff9e 	bl	8012336 <ZbZclSendDefaultResponse>

080013fa <??ZbZclHandleWriteAttr_23>:
 80013fa:	e01a      	b.n	8001432 <??ZbZclHandleWriteAttr_24>

080013fc <??ZbZclHandleWriteAttr_22>:
 80013fc:	2c00      	cmp	r4, #0
 80013fe:	d10c      	bne.n	800141a <??ZbZclHandleWriteAttr_25>
 8001400:	2d00      	cmp	r5, #0
 8001402:	d106      	bne.n	8001412 <??ZbZclHandleWriteAttr_26>
 8001404:	2301      	movs	r3, #1
 8001406:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001408:	0031      	movs	r1, r6
 800140a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800140c:	f010 ff93 	bl	8012336 <ZbZclSendDefaultResponse>
 8001410:	e00f      	b.n	8001432 <??ZbZclHandleWriteAttr_24>

08001412 <??ZbZclHandleWriteAttr_26>:
 8001412:	2000      	movs	r0, #0
 8001414:	a907      	add	r1, sp, #28
 8001416:	5548      	strb	r0, [r1, r5]
 8001418:	1c6d      	adds	r5, r5, #1

0800141a <??ZbZclHandleWriteAttr_25>:
 800141a:	a807      	add	r0, sp, #28
 800141c:	901c      	str	r0, [sp, #112]	; 0x70
 800141e:	0028      	movs	r0, r5
 8001420:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
 8001424:	2300      	movs	r3, #0
 8001426:	2200      	movs	r2, #0
 8001428:	a916      	add	r1, sp, #88	; 0x58
 800142a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800142c:	6880      	ldr	r0, [r0, #8]
 800142e:	f010 fb0f 	bl	8011a50 <ZbApsdeDataReqCallback>

08001432 <??ZbZclHandleWriteAttr_24>:
 8001432:	b025      	add	sp, #148	; 0x94
 8001434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001438 <zcl_handle_command>:
 8001438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800143c:	0004      	movs	r4, r0
 800143e:	000d      	movs	r5, r1
 8001440:	0016      	movs	r6, r2
 8001442:	79f7      	ldrb	r7, [r6, #7]
 8001444:	8868      	ldrh	r0, [r5, #2]
 8001446:	28ff      	cmp	r0, #255	; 0xff
 8001448:	d102      	bne.n	8001450 <??zcl_handle_command_0>
 800144a:	f05f 0800 	movs.w	r8, #0
 800144e:	e001      	b.n	8001454 <??zcl_handle_command_1>

08001450 <??zcl_handle_command_0>:
 8001450:	f05f 0801 	movs.w	r8, #1

08001454 <??zcl_handle_command_1>:
 8001454:	f115 0110 	adds.w	r1, r5, #16
 8001458:	68a0      	ldr	r0, [r4, #8]
 800145a:	f010 fb96 	bl	8011b8a <ZbApsAddrIsLocal>
 800145e:	2800      	cmp	r0, #0
 8001460:	d121      	bne.n	80014a6 <??zcl_handle_command_2>

08001462 <??zcl_handle_command_3>:
 8001462:	89a0      	ldrh	r0, [r4, #12]
 8001464:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001468:	d01d      	beq.n	80014a6 <??zcl_handle_command_2>

0800146a <??zcl_handle_command_4>:
 800146a:	0032      	movs	r2, r6
 800146c:	0029      	movs	r1, r5
 800146e:	0020      	movs	r0, r4
 8001470:	f7ff fc38 	bl	8000ce4 <ZbZclClusterCheckMinSecurity>
 8001474:	2800      	cmp	r0, #0
 8001476:	d107      	bne.n	8001488 <??zcl_handle_command_5>
 8001478:	2301      	movs	r3, #1
 800147a:	0032      	movs	r2, r6
 800147c:	0029      	movs	r1, r5
 800147e:	0020      	movs	r0, r4
 8001480:	f010 ff59 	bl	8012336 <ZbZclSendDefaultResponse>
 8001484:	4640      	mov	r0, r8
 8001486:	e0f7      	b.n	8001678 <??zcl_handle_command_6>

08001488 <??zcl_handle_command_5>:
 8001488:	0032      	movs	r2, r6
 800148a:	0029      	movs	r1, r5
 800148c:	68a0      	ldr	r0, [r4, #8]
 800148e:	f010 fe65 	bl	801215c <ZbZclDeviceLogCheckAllow>
 8001492:	2800      	cmp	r0, #0
 8001494:	d107      	bne.n	80014a6 <??zcl_handle_command_2>
 8001496:	2301      	movs	r3, #1
 8001498:	0032      	movs	r2, r6
 800149a:	0029      	movs	r1, r5
 800149c:	0020      	movs	r0, r4
 800149e:	f010 ff4a 	bl	8012336 <ZbZclSendDefaultResponse>
 80014a2:	4640      	mov	r0, r8
 80014a4:	e0e8      	b.n	8001678 <??zcl_handle_command_6>

080014a6 <??zcl_handle_command_2>:
 80014a6:	7830      	ldrb	r0, [r6, #0]
 80014a8:	2801      	cmp	r0, #1
 80014aa:	d13a      	bne.n	8001522 <??zcl_handle_command_8>
 80014ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d107      	bne.n	80014c2 <??zcl_handle_command_9>
 80014b2:	2381      	movs	r3, #129	; 0x81
 80014b4:	0032      	movs	r2, r6
 80014b6:	0029      	movs	r1, r5
 80014b8:	0020      	movs	r0, r4
 80014ba:	f010 ff3c 	bl	8012336 <ZbZclSendDefaultResponse>
 80014be:	4640      	mov	r0, r8
 80014c0:	e0da      	b.n	8001678 <??zcl_handle_command_6>

080014c2 <??zcl_handle_command_9>:
 80014c2:	7870      	ldrb	r0, [r6, #1]
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d00e      	beq.n	80014e6 <??zcl_handle_command_10>
 80014c8:	8a20      	ldrh	r0, [r4, #16]
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d003      	beq.n	80014d6 <??zcl_handle_command_11>
 80014ce:	8a20      	ldrh	r0, [r4, #16]
 80014d0:	88b1      	ldrh	r1, [r6, #4]
 80014d2:	4288      	cmp	r0, r1
 80014d4:	d012      	beq.n	80014fc <??zcl_handle_command_12>

080014d6 <??zcl_handle_command_11>:
 80014d6:	2381      	movs	r3, #129	; 0x81
 80014d8:	0032      	movs	r2, r6
 80014da:	0029      	movs	r1, r5
 80014dc:	0020      	movs	r0, r4
 80014de:	f010 ff2a 	bl	8012336 <ZbZclSendDefaultResponse>
 80014e2:	4640      	mov	r0, r8
 80014e4:	e0c8      	b.n	8001678 <??zcl_handle_command_6>

080014e6 <??zcl_handle_command_10>:
 80014e6:	8a20      	ldrh	r0, [r4, #16]
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d007      	beq.n	80014fc <??zcl_handle_command_12>
 80014ec:	2381      	movs	r3, #129	; 0x81
 80014ee:	0032      	movs	r2, r6
 80014f0:	0029      	movs	r1, r5
 80014f2:	0020      	movs	r0, r4
 80014f4:	f010 ff1f 	bl	8012336 <ZbZclSendDefaultResponse>
 80014f8:	4640      	mov	r0, r8
 80014fa:	e0bd      	b.n	8001678 <??zcl_handle_command_6>

080014fc <??zcl_handle_command_12>:
 80014fc:	002a      	movs	r2, r5
 80014fe:	0031      	movs	r1, r6
 8001500:	0020      	movs	r0, r4
 8001502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001504:	4798      	blx	r3
 8001506:	4681      	mov	r9, r0
 8001508:	4648      	mov	r0, r9
 800150a:	b2c0      	uxtb	r0, r0
 800150c:	28ff      	cmp	r0, #255	; 0xff
 800150e:	d006      	beq.n	800151e <??zcl_handle_command_13>
 8001510:	464b      	mov	r3, r9
 8001512:	b2db      	uxtb	r3, r3
 8001514:	0032      	movs	r2, r6
 8001516:	0029      	movs	r1, r5
 8001518:	0020      	movs	r0, r4
 800151a:	f010 ff0c 	bl	8012336 <ZbZclSendDefaultResponse>

0800151e <??zcl_handle_command_13>:
 800151e:	4640      	mov	r0, r8
 8001520:	e0aa      	b.n	8001678 <??zcl_handle_command_6>

08001522 <??zcl_handle_command_8>:
 8001522:	7830      	ldrb	r0, [r6, #0]
 8001524:	2800      	cmp	r0, #0
 8001526:	d007      	beq.n	8001538 <??zcl_handle_command_14>
 8001528:	2385      	movs	r3, #133	; 0x85
 800152a:	0032      	movs	r2, r6
 800152c:	0029      	movs	r1, r5
 800152e:	0020      	movs	r0, r4
 8001530:	f010 ff01 	bl	8012336 <ZbZclSendDefaultResponse>
 8001534:	4640      	mov	r0, r8
 8001536:	e09f      	b.n	8001678 <??zcl_handle_command_6>

08001538 <??zcl_handle_command_14>:
 8001538:	0038      	movs	r0, r7
 800153a:	b2c0      	uxtb	r0, r0
 800153c:	2800      	cmp	r0, #0
 800153e:	d01c      	beq.n	800157a <??zcl_handle_command_15>
 8001540:	2801      	cmp	r0, #1
 8001542:	d03f      	beq.n	80015c4 <??zcl_handle_command_16>
 8001544:	2802      	cmp	r0, #2
 8001546:	d01e      	beq.n	8001586 <??zcl_handle_command_17>
 8001548:	2803      	cmp	r0, #3
 800154a:	d01c      	beq.n	8001586 <??zcl_handle_command_17>
 800154c:	2804      	cmp	r0, #4
 800154e:	d039      	beq.n	80015c4 <??zcl_handle_command_16>
 8001550:	2805      	cmp	r0, #5
 8001552:	d018      	beq.n	8001586 <??zcl_handle_command_17>
 8001554:	2806      	cmp	r0, #6
 8001556:	d01c      	beq.n	8001592 <??zcl_handle_command_18>
 8001558:	2807      	cmp	r0, #7
 800155a:	d033      	beq.n	80015c4 <??zcl_handle_command_16>
 800155c:	2808      	cmp	r0, #8
 800155e:	d01e      	beq.n	800159e <??zcl_handle_command_19>
 8001560:	2809      	cmp	r0, #9
 8001562:	d02f      	beq.n	80015c4 <??zcl_handle_command_16>
 8001564:	280a      	cmp	r0, #10
 8001566:	d020      	beq.n	80015aa <??zcl_handle_command_20>
 8001568:	280b      	cmp	r0, #11
 800156a:	d02a      	beq.n	80015c2 <??zcl_handle_command_21>
 800156c:	280c      	cmp	r0, #12
 800156e:	d022      	beq.n	80015b6 <??zcl_handle_command_22>
 8001570:	280d      	cmp	r0, #13
 8001572:	d027      	beq.n	80015c4 <??zcl_handle_command_16>
 8001574:	2810      	cmp	r0, #16
 8001576:	d025      	beq.n	80015c4 <??zcl_handle_command_16>
 8001578:	e025      	b.n	80015c6 <??zcl_handle_command_23>

0800157a <??zcl_handle_command_15>:
 800157a:	002a      	movs	r2, r5
 800157c:	0031      	movs	r1, r6
 800157e:	0020      	movs	r0, r4
 8001580:	f7ff fd1f 	bl	8000fc2 <ZbZclHandleReadAttr>
 8001584:	e077      	b.n	8001676 <??zcl_handle_command_24>

08001586 <??zcl_handle_command_17>:
 8001586:	002a      	movs	r2, r5
 8001588:	0031      	movs	r1, r6
 800158a:	0020      	movs	r0, r4
 800158c:	f7ff fdf4 	bl	8001178 <ZbZclHandleWriteAttr>
 8001590:	e071      	b.n	8001676 <??zcl_handle_command_24>

08001592 <??zcl_handle_command_18>:
 8001592:	002a      	movs	r2, r5
 8001594:	0031      	movs	r1, r6
 8001596:	0020      	movs	r0, r4
 8001598:	f002 fc71 	bl	8003e7e <ZbZclHandleConfigReport>
 800159c:	e06b      	b.n	8001676 <??zcl_handle_command_24>

0800159e <??zcl_handle_command_19>:
 800159e:	002a      	movs	r2, r5
 80015a0:	0031      	movs	r1, r6
 80015a2:	0020      	movs	r0, r4
 80015a4:	f002 feef 	bl	8004386 <ZbZclHandleReadReport>
 80015a8:	e065      	b.n	8001676 <??zcl_handle_command_24>

080015aa <??zcl_handle_command_20>:
 80015aa:	002a      	movs	r2, r5
 80015ac:	0031      	movs	r1, r6
 80015ae:	0020      	movs	r0, r4
 80015b0:	f003 f80e 	bl	80045d0 <ZbZclHandleReportAttr>
 80015b4:	e05f      	b.n	8001676 <??zcl_handle_command_24>

080015b6 <??zcl_handle_command_22>:
 80015b6:	002a      	movs	r2, r5
 80015b8:	0031      	movs	r1, r6
 80015ba:	0020      	movs	r0, r4
 80015bc:	f000 fbfb 	bl	8001db6 <ZbZclAttrHandleDiscover>
 80015c0:	e059      	b.n	8001676 <??zcl_handle_command_24>

080015c2 <??zcl_handle_command_21>:
 80015c2:	e058      	b.n	8001676 <??zcl_handle_command_24>

080015c4 <??zcl_handle_command_16>:
 80015c4:	e057      	b.n	8001676 <??zcl_handle_command_24>

080015c6 <??zcl_handle_command_23>:
 80015c6:	7870      	ldrb	r0, [r6, #1]
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d04e      	beq.n	800166a <??zcl_handle_command_25>
 80015cc:	88b0      	ldrh	r0, [r6, #4]
 80015ce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80015d2:	4288      	cmp	r0, r1
 80015d4:	d141      	bne.n	800165a <??zcl_handle_command_26>
 80015d6:	f115 0110 	adds.w	r1, r5, #16
 80015da:	68a0      	ldr	r0, [r4, #8]
 80015dc:	f010 fad5 	bl	8011b8a <ZbApsAddrIsLocal>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d107      	bne.n	80015f4 <??zcl_handle_command_27>
 80015e4:	2381      	movs	r3, #129	; 0x81
 80015e6:	0032      	movs	r2, r6
 80015e8:	0029      	movs	r1, r5
 80015ea:	0020      	movs	r0, r4
 80015ec:	f010 fea3 	bl	8012336 <ZbZclSendDefaultResponse>
 80015f0:	4640      	mov	r0, r8
 80015f2:	e041      	b.n	8001678 <??zcl_handle_command_6>

080015f4 <??zcl_handle_command_27>:
 80015f4:	0038      	movs	r0, r7
 80015f6:	b2c0      	uxtb	r0, r0
 80015f8:	28f0      	cmp	r0, #240	; 0xf0
 80015fa:	d108      	bne.n	800160e <??zcl_handle_command_28>
 80015fc:	78b0      	ldrb	r0, [r6, #2]
 80015fe:	2800      	cmp	r0, #0
 8001600:	d131      	bne.n	8001666 <??zcl_handle_command_29>
 8001602:	002a      	movs	r2, r5
 8001604:	0031      	movs	r1, r6
 8001606:	0020      	movs	r0, r4
 8001608:	f003 fd5b 	bl	80050c2 <ZbZclHandleGetSceneData>
 800160c:	e02b      	b.n	8001666 <??zcl_handle_command_29>

0800160e <??zcl_handle_command_28>:
 800160e:	0038      	movs	r0, r7
 8001610:	b2c0      	uxtb	r0, r0
 8001612:	28f1      	cmp	r0, #241	; 0xf1
 8001614:	d108      	bne.n	8001628 <??zcl_handle_command_30>
 8001616:	78b0      	ldrb	r0, [r6, #2]
 8001618:	2800      	cmp	r0, #0
 800161a:	d124      	bne.n	8001666 <??zcl_handle_command_29>
 800161c:	002a      	movs	r2, r5
 800161e:	0031      	movs	r1, r6
 8001620:	0020      	movs	r0, r4
 8001622:	f003 fdcd 	bl	80051c0 <ZbZclHandleSetSceneData>
 8001626:	e01e      	b.n	8001666 <??zcl_handle_command_29>

08001628 <??zcl_handle_command_30>:
 8001628:	0038      	movs	r0, r7
 800162a:	b2c0      	uxtb	r0, r0
 800162c:	28f2      	cmp	r0, #242	; 0xf2
 800162e:	d10d      	bne.n	800164c <??zcl_handle_command_31>
 8001630:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8001632:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001634:	0020      	movs	r0, r4
 8001636:	f7ff fc77 	bl	8000f28 <zcl_persist_handle_set>
 800163a:	4681      	mov	r9, r0
 800163c:	464b      	mov	r3, r9
 800163e:	b2db      	uxtb	r3, r3
 8001640:	0032      	movs	r2, r6
 8001642:	0029      	movs	r1, r5
 8001644:	0020      	movs	r0, r4
 8001646:	f010 fe76 	bl	8012336 <ZbZclSendDefaultResponse>
 800164a:	e00c      	b.n	8001666 <??zcl_handle_command_29>

0800164c <??zcl_handle_command_31>:
 800164c:	2381      	movs	r3, #129	; 0x81
 800164e:	0032      	movs	r2, r6
 8001650:	0029      	movs	r1, r5
 8001652:	0020      	movs	r0, r4
 8001654:	f010 fe6f 	bl	8012336 <ZbZclSendDefaultResponse>
 8001658:	e005      	b.n	8001666 <??zcl_handle_command_29>

0800165a <??zcl_handle_command_26>:
 800165a:	2381      	movs	r3, #129	; 0x81
 800165c:	0032      	movs	r2, r6
 800165e:	0029      	movs	r1, r5
 8001660:	0020      	movs	r0, r4
 8001662:	f010 fe68 	bl	8012336 <ZbZclSendDefaultResponse>

08001666 <??zcl_handle_command_29>:
 8001666:	4640      	mov	r0, r8
 8001668:	e006      	b.n	8001678 <??zcl_handle_command_6>

0800166a <??zcl_handle_command_25>:
 800166a:	2381      	movs	r3, #129	; 0x81
 800166c:	0032      	movs	r2, r6
 800166e:	0029      	movs	r1, r5
 8001670:	0020      	movs	r0, r4
 8001672:	f010 fe60 	bl	8012336 <ZbZclSendDefaultResponse>

08001676 <??zcl_handle_command_24>:
 8001676:	4640      	mov	r0, r8

08001678 <??zcl_handle_command_6>:
 8001678:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

0800167c <zcl_cluster_data_ind>:
 800167c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800167e:	0004      	movs	r4, r0
 8001680:	000d      	movs	r5, r1
 8001682:	002e      	movs	r6, r5
 8001684:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001686:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001688:	4668      	mov	r0, sp
 800168a:	f000 f8fe 	bl	800188a <ZbZclParseHeader>
 800168e:	0007      	movs	r7, r0
 8001690:	2f00      	cmp	r7, #0
 8001692:	d501      	bpl.n	8001698 <??zcl_cluster_data_ind_0>
 8001694:	2000      	movs	r0, #0
 8001696:	e00a      	b.n	80016ae <??zcl_cluster_data_ind_1>

08001698 <??zcl_cluster_data_ind_0>:
 8001698:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800169a:	4438      	add	r0, r7
 800169c:	6260      	str	r0, [r4, #36]	; 0x24
 800169e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80016a0:	1bc0      	subs	r0, r0, r7
 80016a2:	8520      	strh	r0, [r4, #40]	; 0x28
 80016a4:	466a      	mov	r2, sp
 80016a6:	0021      	movs	r1, r4
 80016a8:	0030      	movs	r0, r6
 80016aa:	f7ff fec5 	bl	8001438 <zcl_handle_command>

080016ae <??zcl_cluster_data_ind_1>:
 80016ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080016b0 <zcl_cluster_alarm_data_ind>:
 80016b0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b4:	b098      	sub	sp, #96	; 0x60
 80016b6:	0004      	movs	r4, r0
 80016b8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80016ba:	26ff      	movs	r6, #255	; 0xff
 80016bc:	2700      	movs	r7, #0
 80016be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80016c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016c2:	a802      	add	r0, sp, #8
 80016c4:	f000 f8e1 	bl	800188a <ZbZclParseHeader>
 80016c8:	4680      	mov	r8, r0
 80016ca:	f1b8 0f00 	cmp.w	r8, #0
 80016ce:	d501      	bpl.n	80016d4 <??zcl_cluster_alarm_data_ind_0>
 80016d0:	2000      	movs	r0, #0
 80016d2:	e0d7      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016d4 <??zcl_cluster_alarm_data_ind_0>:
 80016d4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80016d6:	ebb0 0008 	subs.w	r0, r0, r8
 80016da:	8520      	strh	r0, [r4, #40]	; 0x28
 80016dc:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80016de:	2809      	cmp	r0, #9
 80016e0:	d001      	beq.n	80016e6 <??zcl_cluster_alarm_data_ind_2>
 80016e2:	2000      	movs	r0, #0
 80016e4:	e0ce      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016e6 <??zcl_cluster_alarm_data_ind_2>:
 80016e6:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d001      	beq.n	80016f2 <??zcl_cluster_alarm_data_ind_3>
 80016ee:	2000      	movs	r0, #0
 80016f0:	e0c8      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016f2 <??zcl_cluster_alarm_data_ind_3>:
 80016f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80016f6:	2801      	cmp	r0, #1
 80016f8:	d001      	beq.n	80016fe <??zcl_cluster_alarm_data_ind_4>
 80016fa:	2000      	movs	r0, #0
 80016fc:	e0c2      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016fe <??zcl_cluster_alarm_data_ind_4>:
 80016fe:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001702:	2800      	cmp	r0, #0
 8001704:	d002      	beq.n	800170c <??zcl_cluster_alarm_data_ind_5>
 8001706:	2801      	cmp	r0, #1
 8001708:	d02a      	beq.n	8001760 <??zcl_cluster_alarm_data_ind_6>
 800170a:	e03f      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

0800170c <??zcl_cluster_alarm_data_ind_5>:
 800170c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800170e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8001712:	f88d 0004 	strb.w	r0, [sp, #4]
 8001716:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001718:	4440      	add	r0, r8
 800171a:	1c40      	adds	r0, r0, #1
 800171c:	f000 fa59 	bl	8001bd2 <pletoh16>
 8001720:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001724:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8001728:	0028      	movs	r0, r5
 800172a:	f7ff fa77 	bl	8000c1c <ZbZclClusterGetClusterId>
 800172e:	4581      	cmp	r9, r0
 8001730:	d12c      	bne.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001732 <??zcl_cluster_alarm_data_ind_9>:
 8001732:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8001734:	2800      	cmp	r0, #0
 8001736:	d104      	bne.n	8001742 <??zcl_cluster_alarm_data_ind_10>
 8001738:	2081      	movs	r0, #129	; 0x81
 800173a:	0006      	movs	r6, r0
 800173c:	2001      	movs	r0, #1
 800173e:	0007      	movs	r7, r0
 8001740:	e024      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001742 <??zcl_cluster_alarm_data_ind_10>:
 8001742:	a802      	add	r0, sp, #8
 8001744:	9000      	str	r0, [sp, #0]
 8001746:	0023      	movs	r3, r4
 8001748:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800174c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001750:	0028      	movs	r0, r5
 8001752:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8001756:	47e0      	blx	ip
 8001758:	0006      	movs	r6, r0
 800175a:	2001      	movs	r0, #1
 800175c:	0007      	movs	r7, r0
 800175e:	e015      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001760 <??zcl_cluster_alarm_data_ind_6>:
 8001760:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8001762:	2800      	cmp	r0, #0
 8001764:	d104      	bne.n	8001770 <??zcl_cluster_alarm_data_ind_11>
 8001766:	2081      	movs	r0, #129	; 0x81
 8001768:	0006      	movs	r6, r0
 800176a:	2001      	movs	r0, #1
 800176c:	0007      	movs	r7, r0
 800176e:	e00d      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001770 <??zcl_cluster_alarm_data_ind_11>:
 8001770:	a802      	add	r0, sp, #8
 8001772:	9000      	str	r0, [sp, #0]
 8001774:	0023      	movs	r3, r4
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	21ff      	movs	r1, #255	; 0xff
 800177c:	0028      	movs	r0, r5
 800177e:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8001782:	47e0      	blx	ip
 8001784:	0006      	movs	r6, r0
 8001786:	2001      	movs	r0, #1
 8001788:	0007      	movs	r7, r0
 800178a:	e7ff      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

0800178c <??zcl_cluster_alarm_data_ind_7>:
 800178c:	0030      	movs	r0, r6
 800178e:	b2c0      	uxtb	r0, r0
 8001790:	28ff      	cmp	r0, #255	; 0xff
 8001792:	d076      	beq.n	8001882 <??zcl_cluster_alarm_data_ind_12>
 8001794:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001798:	f88d 0000 	strb.w	r0, [sp]
 800179c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80017a0:	f88d 0002 	strb.w	r0, [sp, #2]
 80017a4:	f88d 6003 	strb.w	r6, [sp, #3]
 80017a8:	f05f 0a08 	movs.w	sl, #8
 80017ac:	f05f 0b00 	movs.w	fp, #0
 80017b0:	f10d 0908 	add.w	r9, sp, #8
 80017b4:	465a      	mov	r2, fp
 80017b6:	4651      	mov	r1, sl
 80017b8:	4648      	mov	r0, r9
 80017ba:	f004 fa0c 	bl	8005bd6 <__aeabi_memset>
 80017be:	2000      	movs	r0, #0
 80017c0:	f88d 0008 	strb.w	r0, [sp, #8]
 80017c4:	2000      	movs	r0, #0
 80017c6:	f88d 0009 	strb.w	r0, [sp, #9]
 80017ca:	2001      	movs	r0, #1
 80017cc:	f88d 000a 	strb.w	r0, [sp, #10]
 80017d0:	2001      	movs	r0, #1
 80017d2:	f88d 000b 	strb.w	r0, [sp, #11]
 80017d6:	2000      	movs	r0, #0
 80017d8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80017dc:	f89d 0000 	ldrb.w	r0, [sp]
 80017e0:	f88d 000e 	strb.w	r0, [sp, #14]
 80017e4:	200b      	movs	r0, #11
 80017e6:	f88d 000f 	strb.w	r0, [sp, #15]
 80017ea:	2205      	movs	r2, #5
 80017ec:	a905      	add	r1, sp, #20
 80017ee:	a802      	add	r0, sp, #8
 80017f0:	f000 f8ce 	bl	8001990 <ZbZclAppendHeader>
 80017f4:	4681      	mov	r9, r0
 80017f6:	f1b9 0f00 	cmp.w	r9, #0
 80017fa:	d501      	bpl.n	8001800 <??zcl_cluster_alarm_data_ind_13>
 80017fc:	2089      	movs	r0, #137	; 0x89
 80017fe:	e041      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

08001800 <??zcl_cluster_alarm_data_ind_13>:
 8001800:	a805      	add	r0, sp, #20
 8001802:	9014      	str	r0, [sp, #80]	; 0x50
 8001804:	a814      	add	r0, sp, #80	; 0x50
 8001806:	f8c0 9004 	str.w	r9, [r0, #4]
 800180a:	f10d 0102 	add.w	r1, sp, #2
 800180e:	6081      	str	r1, [r0, #8]
 8001810:	2002      	movs	r0, #2
 8001812:	9017      	str	r0, [sp, #92]	; 0x5c
 8001814:	2030      	movs	r0, #48	; 0x30
 8001816:	9004      	str	r0, [sp, #16]
 8001818:	f05f 0a00 	movs.w	sl, #0
 800181c:	f10d 0b20 	add.w	fp, sp, #32
 8001820:	4652      	mov	r2, sl
 8001822:	9904      	ldr	r1, [sp, #16]
 8001824:	4658      	mov	r0, fp
 8001826:	f004 f9d6 	bl	8005bd6 <__aeabi_memset>
 800182a:	a808      	add	r0, sp, #32
 800182c:	f114 0110 	adds.w	r1, r4, #16
 8001830:	2210      	movs	r2, #16
 8001832:	f013 ff46 	bl	80156c2 <__aeabi_memcpy>
 8001836:	8aa8      	ldrh	r0, [r5, #20]
 8001838:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800183c:	2009      	movs	r0, #9
 800183e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8001842:	7ba8      	ldrb	r0, [r5, #14]
 8001844:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8001848:	a814      	add	r0, sp, #80	; 0x50
 800184a:	900e      	str	r0, [sp, #56]	; 0x38
 800184c:	2002      	movs	r0, #2
 800184e:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8001852:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001856:	f7ff fad2 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 800185a:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 800185e:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8001862:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8001866:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 800186a:	2000      	movs	r0, #0
 800186c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
 8001870:	2000      	movs	r0, #0
 8001872:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
 8001876:	2300      	movs	r3, #0
 8001878:	2200      	movs	r2, #0
 800187a:	a908      	add	r1, sp, #32
 800187c:	68a8      	ldr	r0, [r5, #8]
 800187e:	f010 f8e7 	bl	8011a50 <ZbApsdeDataReqCallback>

08001882 <??zcl_cluster_alarm_data_ind_12>:
 8001882:	0038      	movs	r0, r7

08001884 <??zcl_cluster_alarm_data_ind_1>:
 8001884:	b019      	add	sp, #100	; 0x64
 8001886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800188a <ZbZclParseHeader>:
 800188a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800188e:	0004      	movs	r4, r0
 8001890:	000d      	movs	r5, r1
 8001892:	0016      	movs	r6, r2
 8001894:	2700      	movs	r7, #0
 8001896:	2e03      	cmp	r6, #3
 8001898:	d202      	bcs.n	80018a0 <??ZbZclParseHeader_0>
 800189a:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800189e:	e035      	b.n	800190c <??ZbZclParseHeader_1>

080018a0 <??ZbZclParseHeader_0>:
 80018a0:	f05f 0808 	movs.w	r8, #8
 80018a4:	f05f 0900 	movs.w	r9, #0
 80018a8:	46a2      	mov	sl, r4
 80018aa:	464a      	mov	r2, r9
 80018ac:	4641      	mov	r1, r8
 80018ae:	4650      	mov	r0, sl
 80018b0:	f004 f991 	bl	8005bd6 <__aeabi_memset>
 80018b4:	5de8      	ldrb	r0, [r5, r7]
 80018b6:	f010 0003 	ands.w	r0, r0, #3
 80018ba:	7020      	strb	r0, [r4, #0]
 80018bc:	5de8      	ldrb	r0, [r5, r7]
 80018be:	b2c0      	uxtb	r0, r0
 80018c0:	0880      	lsrs	r0, r0, #2
 80018c2:	f010 0001 	ands.w	r0, r0, #1
 80018c6:	7060      	strb	r0, [r4, #1]
 80018c8:	5de8      	ldrb	r0, [r5, r7]
 80018ca:	b2c0      	uxtb	r0, r0
 80018cc:	08c0      	lsrs	r0, r0, #3
 80018ce:	f010 0001 	ands.w	r0, r0, #1
 80018d2:	70a0      	strb	r0, [r4, #2]
 80018d4:	5de8      	ldrb	r0, [r5, r7]
 80018d6:	b2c0      	uxtb	r0, r0
 80018d8:	0900      	lsrs	r0, r0, #4
 80018da:	f010 0001 	ands.w	r0, r0, #1
 80018de:	70e0      	strb	r0, [r4, #3]
 80018e0:	1c7f      	adds	r7, r7, #1
 80018e2:	7860      	ldrb	r0, [r4, #1]
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d00a      	beq.n	80018fe <??ZbZclParseHeader_2>
 80018e8:	2e05      	cmp	r6, #5
 80018ea:	d202      	bcs.n	80018f2 <??ZbZclParseHeader_3>
 80018ec:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80018f0:	e00c      	b.n	800190c <??ZbZclParseHeader_1>

080018f2 <??ZbZclParseHeader_3>:
 80018f2:	eb05 0007 	add.w	r0, r5, r7
 80018f6:	f000 f96c 	bl	8001bd2 <pletoh16>
 80018fa:	80a0      	strh	r0, [r4, #4]
 80018fc:	1cbf      	adds	r7, r7, #2

080018fe <??ZbZclParseHeader_2>:
 80018fe:	5de8      	ldrb	r0, [r5, r7]
 8001900:	71a0      	strb	r0, [r4, #6]
 8001902:	1c7f      	adds	r7, r7, #1
 8001904:	5de8      	ldrb	r0, [r5, r7]
 8001906:	71e0      	strb	r0, [r4, #7]
 8001908:	1c7f      	adds	r7, r7, #1
 800190a:	0038      	movs	r0, r7

0800190c <??ZbZclParseHeader_1>:
 800190c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001910 <ZbZclPrependHeader>:
 8001910:	b470      	push	{r4, r5, r6}
 8001912:	0003      	movs	r3, r0
 8001914:	2400      	movs	r4, #0
 8001916:	0015      	movs	r5, r2
 8001918:	2600      	movs	r6, #0
 800191a:	7858      	ldrb	r0, [r3, #1]
 800191c:	2800      	cmp	r0, #0
 800191e:	d004      	beq.n	800192a <??ZbZclPrependHeader_0>
 8001920:	2a05      	cmp	r2, #5
 8001922:	d202      	bcs.n	800192a <??ZbZclPrependHeader_0>
 8001924:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8001928:	e030      	b.n	800198c <??ZbZclPrependHeader_1>

0800192a <??ZbZclPrependHeader_0>:
 800192a:	2a03      	cmp	r2, #3
 800192c:	d202      	bcs.n	8001934 <??ZbZclPrependHeader_2>
 800192e:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8001932:	e02b      	b.n	800198c <??ZbZclPrependHeader_1>

08001934 <??ZbZclPrependHeader_2>:
 8001934:	1e6d      	subs	r5, r5, #1
 8001936:	79d8      	ldrb	r0, [r3, #7]
 8001938:	5548      	strb	r0, [r1, r5]
 800193a:	1c76      	adds	r6, r6, #1
 800193c:	1e6d      	subs	r5, r5, #1
 800193e:	7998      	ldrb	r0, [r3, #6]
 8001940:	5548      	strb	r0, [r1, r5]
 8001942:	1c76      	adds	r6, r6, #1
 8001944:	7858      	ldrb	r0, [r3, #1]
 8001946:	2800      	cmp	r0, #0
 8001948:	d009      	beq.n	800195e <??ZbZclPrependHeader_3>
 800194a:	1e6d      	subs	r5, r5, #1
 800194c:	8898      	ldrh	r0, [r3, #4]
 800194e:	b280      	uxth	r0, r0
 8001950:	0a00      	lsrs	r0, r0, #8
 8001952:	5548      	strb	r0, [r1, r5]
 8001954:	1c76      	adds	r6, r6, #1
 8001956:	1e6d      	subs	r5, r5, #1
 8001958:	8898      	ldrh	r0, [r3, #4]
 800195a:	5548      	strb	r0, [r1, r5]
 800195c:	1c76      	adds	r6, r6, #1

0800195e <??ZbZclPrependHeader_3>:
 800195e:	7818      	ldrb	r0, [r3, #0]
 8001960:	f010 0003 	ands.w	r0, r0, #3
 8001964:	4304      	orrs	r4, r0
 8001966:	7858      	ldrb	r0, [r3, #1]
 8001968:	2800      	cmp	r0, #0
 800196a:	d001      	beq.n	8001970 <??ZbZclPrependHeader_4>
 800196c:	f054 0404 	orrs.w	r4, r4, #4

08001970 <??ZbZclPrependHeader_4>:
 8001970:	7898      	ldrb	r0, [r3, #2]
 8001972:	2801      	cmp	r0, #1
 8001974:	d101      	bne.n	800197a <??ZbZclPrependHeader_5>
 8001976:	f054 0408 	orrs.w	r4, r4, #8

0800197a <??ZbZclPrependHeader_5>:
 800197a:	78d8      	ldrb	r0, [r3, #3]
 800197c:	2801      	cmp	r0, #1
 800197e:	d101      	bne.n	8001984 <??ZbZclPrependHeader_6>
 8001980:	f054 0410 	orrs.w	r4, r4, #16

08001984 <??ZbZclPrependHeader_6>:
 8001984:	1e6d      	subs	r5, r5, #1
 8001986:	554c      	strb	r4, [r1, r5]
 8001988:	1c76      	adds	r6, r6, #1
 800198a:	0030      	movs	r0, r6

0800198c <??ZbZclPrependHeader_1>:
 800198c:	bc70      	pop	{r4, r5, r6}
 800198e:	4770      	bx	lr

08001990 <ZbZclAppendHeader>:
 8001990:	b430      	push	{r4, r5}
 8001992:	0003      	movs	r3, r0
 8001994:	2400      	movs	r4, #0
 8001996:	2500      	movs	r5, #0
 8001998:	7858      	ldrb	r0, [r3, #1]
 800199a:	2800      	cmp	r0, #0
 800199c:	d004      	beq.n	80019a8 <??ZbZclAppendHeader_0>
 800199e:	2a05      	cmp	r2, #5
 80019a0:	d202      	bcs.n	80019a8 <??ZbZclAppendHeader_0>
 80019a2:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80019a6:	e02b      	b.n	8001a00 <??ZbZclAppendHeader_1>

080019a8 <??ZbZclAppendHeader_0>:
 80019a8:	2a03      	cmp	r2, #3
 80019aa:	d202      	bcs.n	80019b2 <??ZbZclAppendHeader_2>
 80019ac:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80019b0:	e026      	b.n	8001a00 <??ZbZclAppendHeader_1>

080019b2 <??ZbZclAppendHeader_2>:
 80019b2:	7818      	ldrb	r0, [r3, #0]
 80019b4:	f010 0003 	ands.w	r0, r0, #3
 80019b8:	4304      	orrs	r4, r0
 80019ba:	7858      	ldrb	r0, [r3, #1]
 80019bc:	2800      	cmp	r0, #0
 80019be:	d001      	beq.n	80019c4 <??ZbZclAppendHeader_3>
 80019c0:	f054 0404 	orrs.w	r4, r4, #4

080019c4 <??ZbZclAppendHeader_3>:
 80019c4:	7898      	ldrb	r0, [r3, #2]
 80019c6:	2801      	cmp	r0, #1
 80019c8:	d101      	bne.n	80019ce <??ZbZclAppendHeader_4>
 80019ca:	f054 0408 	orrs.w	r4, r4, #8

080019ce <??ZbZclAppendHeader_4>:
 80019ce:	78d8      	ldrb	r0, [r3, #3]
 80019d0:	2801      	cmp	r0, #1
 80019d2:	d101      	bne.n	80019d8 <??ZbZclAppendHeader_5>
 80019d4:	f054 0410 	orrs.w	r4, r4, #16

080019d8 <??ZbZclAppendHeader_5>:
 80019d8:	554c      	strb	r4, [r1, r5]
 80019da:	1c6d      	adds	r5, r5, #1
 80019dc:	7858      	ldrb	r0, [r3, #1]
 80019de:	2800      	cmp	r0, #0
 80019e0:	d007      	beq.n	80019f2 <??ZbZclAppendHeader_6>
 80019e2:	8898      	ldrh	r0, [r3, #4]
 80019e4:	5548      	strb	r0, [r1, r5]
 80019e6:	1c6d      	adds	r5, r5, #1
 80019e8:	8898      	ldrh	r0, [r3, #4]
 80019ea:	b280      	uxth	r0, r0
 80019ec:	0a00      	lsrs	r0, r0, #8
 80019ee:	5548      	strb	r0, [r1, r5]
 80019f0:	1c6d      	adds	r5, r5, #1

080019f2 <??ZbZclAppendHeader_6>:
 80019f2:	7998      	ldrb	r0, [r3, #6]
 80019f4:	5548      	strb	r0, [r1, r5]
 80019f6:	1c6d      	adds	r5, r5, #1
 80019f8:	79d8      	ldrb	r0, [r3, #7]
 80019fa:	5548      	strb	r0, [r1, r5]
 80019fc:	1c6d      	adds	r5, r5, #1
 80019fe:	0028      	movs	r0, r5

08001a00 <??ZbZclAppendHeader_1>:
 8001a00:	bc30      	pop	{r4, r5}
 8001a02:	4770      	bx	lr

08001a04 <zcl_attr_cb>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	0004      	movs	r4, r0
 8001a0a:	000d      	movs	r5, r1
 8001a0c:	7928      	ldrb	r0, [r5, #4]
 8001a0e:	2801      	cmp	r0, #1
 8001a10:	d10f      	bne.n	8001a32 <??zcl_attr_cb_0>
 8001a12:	69e8      	ldr	r0, [r5, #28]
 8001a14:	9003      	str	r0, [sp, #12]
 8001a16:	8a28      	ldrh	r0, [r5, #16]
 8001a18:	9002      	str	r0, [sp, #8]
 8001a1a:	6968      	ldr	r0, [r5, #20]
 8001a1c:	9001      	str	r0, [sp, #4]
 8001a1e:	68e8      	ldr	r0, [r5, #12]
 8001a20:	9000      	str	r0, [sp, #0]
 8001a22:	68ab      	ldr	r3, [r5, #8]
 8001a24:	6828      	ldr	r0, [r5, #0]
 8001a26:	8802      	ldrh	r2, [r0, #0]
 8001a28:	69a9      	ldr	r1, [r5, #24]
 8001a2a:	0020      	movs	r0, r4
 8001a2c:	f000 f882 	bl	8001b34 <zcl_attr_write_cb>
 8001a30:	e000      	b.n	8001a34 <??zcl_attr_cb_1>

08001a32 <??zcl_attr_cb_0>:
 8001a32:	2001      	movs	r0, #1

08001a34 <??zcl_attr_cb_1>:
 8001a34:	b005      	add	sp, #20
 8001a36:	bd30      	pop	{r4, r5, pc}

08001a38 <ZbZclTempMeasServerAlloc>:
 8001a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a3c:	4681      	mov	r9, r0
 8001a3e:	000e      	movs	r6, r1
 8001a40:	0017      	movs	r7, r2
 8001a42:	4698      	mov	r8, r3
 8001a44:	9d08      	ldr	r5, [sp, #32]
 8001a46:	2000      	movs	r0, #0
 8001a48:	9000      	str	r0, [sp, #0]
 8001a4a:	0033      	movs	r3, r6
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f240 4202 	movw	r2, #1026	; 0x402
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	4648      	mov	r0, r9
 8001a56:	f003 f84a 	bl	8004aee <ZbZclClusterAlloc>
 8001a5a:	0004      	movs	r4, r0
 8001a5c:	2c00      	cmp	r4, #0
 8001a5e:	d101      	bne.n	8001a64 <??ZbZclTempMeasServerAlloc_0>
 8001a60:	2000      	movs	r0, #0
 8001a62:	e03a      	b.n	8001ada <??ZbZclTempMeasServerAlloc_1>

08001a64 <??ZbZclTempMeasServerAlloc_0>:
 8001a64:	2201      	movs	r2, #1
 8001a66:	2300      	movs	r3, #0
 8001a68:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8001a6c:	0020      	movs	r0, r4
 8001a6e:	f7fe ffb8 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001a72:	0038      	movs	r0, r7
 8001a74:	b200      	sxth	r0, r0
 8001a76:	17c1      	asrs	r1, r0, #31
 8001a78:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
 8001a7c:	f8a4 8078 	strh.w	r8, [r4, #120]	; 0x78
 8001a80:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
 8001a84:	2204      	movs	r2, #4
 8001a86:	4929      	ldr	r1, [pc, #164]	; (8001b2c <??DataTable2>)
 8001a88:	0020      	movs	r0, r4
 8001a8a:	f001 f983 	bl	8002d94 <ZbZclAttrAppendList>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d004      	beq.n	8001a9c <??ZbZclTempMeasServerAlloc_2>
 8001a92:	0020      	movs	r0, r4
 8001a94:	f003 f8ed 	bl	8004c72 <ZbZclClusterFree>
 8001a98:	2000      	movs	r0, #0
 8001a9a:	e01e      	b.n	8001ada <??ZbZclTempMeasServerAlloc_1>

08001a9c <??ZbZclTempMeasServerAlloc_2>:
 8001a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	0020      	movs	r0, r4
 8001aa6:	f7fe ff9c 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001aaa:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 8001aae:	2101      	movs	r1, #1
 8001ab0:	0020      	movs	r0, r4
 8001ab2:	f7fe ff96 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001ab6:	f9b4 2078 	ldrsh.w	r2, [r4, #120]	; 0x78
 8001aba:	17d3      	asrs	r3, r2, #31
 8001abc:	2102      	movs	r1, #2
 8001abe:	0020      	movs	r0, r4
 8001ac0:	f7fe ff8f 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001ac4:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2103      	movs	r1, #3
 8001acc:	0020      	movs	r0, r4
 8001ace:	f7fe ff88 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	f003 f89b 	bl	8004c0e <ZbZclClusterAttach>
 8001ad8:	0020      	movs	r0, r4

08001ada <??ZbZclTempMeasServerAlloc_1>:
 8001ada:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08001ade <zcl_meas_temp_server_range_check>:
 8001ade:	b410      	push	{r4}
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	4c12      	ldr	r4, [pc, #72]	; (8001b30 <??DataTable2_1>)
 8001ae6:	b200      	sxth	r0, r0
 8001ae8:	42a0      	cmp	r0, r4
 8001aea:	d101      	bne.n	8001af0 <??zcl_meas_temp_server_range_check_0>
 8001aec:	2001      	movs	r0, #1
 8001aee:	e01a      	b.n	8001b26 <??zcl_meas_temp_server_range_check_1>

08001af0 <??zcl_meas_temp_server_range_check_0>:
 8001af0:	0018      	movs	r0, r3
 8001af2:	000c      	movs	r4, r1
 8001af4:	b200      	sxth	r0, r0
 8001af6:	b224      	sxth	r4, r4
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	da06      	bge.n	8001b0a <??zcl_meas_temp_server_range_check_2>
 8001afc:	0008      	movs	r0, r1
 8001afe:	b200      	sxth	r0, r0
 8001b00:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8001b04:	d001      	beq.n	8001b0a <??zcl_meas_temp_server_range_check_2>
 8001b06:	2000      	movs	r0, #0
 8001b08:	e00d      	b.n	8001b26 <??zcl_meas_temp_server_range_check_1>

08001b0a <??zcl_meas_temp_server_range_check_2>:
 8001b0a:	0010      	movs	r0, r2
 8001b0c:	001c      	movs	r4, r3
 8001b0e:	b200      	sxth	r0, r0
 8001b10:	b224      	sxth	r4, r4
 8001b12:	42a0      	cmp	r0, r4
 8001b14:	da06      	bge.n	8001b24 <??zcl_meas_temp_server_range_check_3>
 8001b16:	0010      	movs	r0, r2
 8001b18:	b200      	sxth	r0, r0
 8001b1a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8001b1e:	d001      	beq.n	8001b24 <??zcl_meas_temp_server_range_check_3>
 8001b20:	2000      	movs	r0, #0
 8001b22:	e000      	b.n	8001b26 <??zcl_meas_temp_server_range_check_1>

08001b24 <??zcl_meas_temp_server_range_check_3>:
 8001b24:	2001      	movs	r0, #1

08001b26 <??zcl_meas_temp_server_range_check_1>:
 8001b26:	bc10      	pop	{r4}
 8001b28:	4770      	bx	lr
	...

08001b2c <??DataTable2>:
 8001b2c:	6990 0801                                   .i..

08001b30 <??DataTable2_1>:
 8001b30:	8000 ffff                                   ....

08001b34 <zcl_attr_write_cb>:
 8001b34:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b38:	b081      	sub	sp, #4
 8001b3a:	0005      	movs	r5, r0
 8001b3c:	0016      	movs	r6, r2
 8001b3e:	001f      	movs	r7, r3
 8001b40:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8001b44:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8001b46:	0030      	movs	r0, r6
 8001b48:	b280      	uxth	r0, r0
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d125      	bne.n	8001b9a <??zcl_attr_write_cb_0>
 8001b4e:	0038      	movs	r0, r7
 8001b50:	f000 f83f 	bl	8001bd2 <pletoh16>
 8001b54:	4681      	mov	r9, r0
 8001b56:	2300      	movs	r3, #0
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	0028      	movs	r0, r5
 8001b5e:	f7fe fef3 	bl	8000948 <ZbZclAttrIntegerRead>
 8001b62:	f8ad 0000 	strh.w	r0, [sp]
 8001b66:	2300      	movs	r3, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	0028      	movs	r0, r5
 8001b6e:	f7fe feeb 	bl	8000948 <ZbZclAttrIntegerRead>
 8001b72:	4682      	mov	sl, r0
 8001b74:	4652      	mov	r2, sl
 8001b76:	b212      	sxth	r2, r2
 8001b78:	f9bd 1000 	ldrsh.w	r1, [sp]
 8001b7c:	4648      	mov	r0, r9
 8001b7e:	b200      	sxth	r0, r0
 8001b80:	f7ff ffad 	bl	8001ade <zcl_meas_temp_server_range_check>
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d101      	bne.n	8001b8c <??zcl_attr_write_cb_1>
 8001b88:	2087      	movs	r0, #135	; 0x87
 8001b8a:	e012      	b.n	8001bb2 <??zcl_attr_write_cb_2>

08001b8c <??zcl_attr_write_cb_1>:
 8001b8c:	f05f 0b02 	movs.w	fp, #2
 8001b90:	0020      	movs	r0, r4
 8001b92:	b280      	uxth	r0, r0
 8001b94:	07c0      	lsls	r0, r0, #31
 8001b96:	d40b      	bmi.n	8001bb0 <??zcl_attr_write_cb_3>
 8001b98:	e001      	b.n	8001b9e <??zcl_attr_write_cb_4>

08001b9a <??zcl_attr_write_cb_0>:
 8001b9a:	2086      	movs	r0, #134	; 0x86
 8001b9c:	e009      	b.n	8001bb2 <??zcl_attr_write_cb_2>

08001b9e <??zcl_attr_write_cb_4>:
 8001b9e:	f8cd b000 	str.w	fp, [sp]
 8001ba2:	46b9      	mov	r9, r7
 8001ba4:	46c2      	mov	sl, r8
 8001ba6:	9a00      	ldr	r2, [sp, #0]
 8001ba8:	4649      	mov	r1, r9
 8001baa:	4650      	mov	r0, sl
 8001bac:	f013 fd89 	bl	80156c2 <__aeabi_memcpy>

08001bb0 <??zcl_attr_write_cb_3>:
 8001bb0:	2000      	movs	r0, #0

08001bb2 <??zcl_attr_write_cb_2>:
 8001bb2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bb6 <is_little_endian>:
 8001bb6:	b081      	sub	sp, #4
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f8ad 0000 	strh.w	r0, [sp]
 8001bbe:	4668      	mov	r0, sp
 8001bc0:	7800      	ldrb	r0, [r0, #0]
 8001bc2:	2801      	cmp	r0, #1
 8001bc4:	d101      	bne.n	8001bca <??is_little_endian_0>
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	e000      	b.n	8001bcc <??is_little_endian_1>

08001bca <??is_little_endian_0>:
 8001bca:	2000      	movs	r0, #0

08001bcc <??is_little_endian_1>:
 8001bcc:	b2c0      	uxtb	r0, r0
 8001bce:	b001      	add	sp, #4
 8001bd0:	4770      	bx	lr

08001bd2 <pletoh16>:
 8001bd2:	0001      	movs	r1, r0
 8001bd4:	7808      	ldrb	r0, [r1, #0]
 8001bd6:	7849      	ldrb	r1, [r1, #1]
 8001bd8:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8001bdc:	b280      	uxth	r0, r0
 8001bde:	4770      	bx	lr

08001be0 <pletoh24>:
 8001be0:	b510      	push	{r4, lr}
 8001be2:	0004      	movs	r4, r0
 8001be4:	0020      	movs	r0, r4
 8001be6:	f7ff fff4 	bl	8001bd2 <pletoh16>
 8001bea:	b280      	uxth	r0, r0
 8001bec:	78a1      	ldrb	r1, [r4, #2]
 8001bee:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 8001bf2:	bd10      	pop	{r4, pc}

08001bf4 <pletoh32>:
 8001bf4:	b538      	push	{r3, r4, r5, lr}
 8001bf6:	0004      	movs	r4, r0
 8001bf8:	0020      	movs	r0, r4
 8001bfa:	f7ff ffea 	bl	8001bd2 <pletoh16>
 8001bfe:	0005      	movs	r5, r0
 8001c00:	b2ad      	uxth	r5, r5
 8001c02:	1ca0      	adds	r0, r4, #2
 8001c04:	f7ff ffe5 	bl	8001bd2 <pletoh16>
 8001c08:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8001c0c:	0028      	movs	r0, r5
 8001c0e:	bd32      	pop	{r1, r4, r5, pc}

08001c10 <pletoh40>:
 8001c10:	b510      	push	{r4, lr}
 8001c12:	0004      	movs	r4, r0
 8001c14:	0020      	movs	r0, r4
 8001c16:	f7ff ffed 	bl	8001bf4 <pletoh32>
 8001c1a:	7921      	ldrb	r1, [r4, #4]
 8001c1c:	bd10      	pop	{r4, pc}

08001c1e <pletoh48>:
 8001c1e:	b510      	push	{r4, lr}
 8001c20:	0004      	movs	r4, r0
 8001c22:	0020      	movs	r0, r4
 8001c24:	f7ff fff4 	bl	8001c10 <pletoh40>
 8001c28:	7962      	ldrb	r2, [r4, #5]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	0213      	lsls	r3, r2, #8
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4310      	orrs	r0, r2
 8001c32:	4319      	orrs	r1, r3
 8001c34:	bd10      	pop	{r4, pc}

08001c36 <pletoh56>:
 8001c36:	b510      	push	{r4, lr}
 8001c38:	0004      	movs	r4, r0
 8001c3a:	0020      	movs	r0, r4
 8001c3c:	f7ff ffef 	bl	8001c1e <pletoh48>
 8001c40:	79a2      	ldrb	r2, [r4, #6]
 8001c42:	2300      	movs	r3, #0
 8001c44:	0413      	lsls	r3, r2, #16
 8001c46:	2200      	movs	r2, #0
 8001c48:	4310      	orrs	r0, r2
 8001c4a:	4319      	orrs	r1, r3
 8001c4c:	bd10      	pop	{r4, pc}

08001c4e <pletoh64>:
 8001c4e:	b538      	push	{r3, r4, r5, lr}
 8001c50:	0005      	movs	r5, r0
 8001c52:	0028      	movs	r0, r5
 8001c54:	f7ff ffce 	bl	8001bf4 <pletoh32>
 8001c58:	0004      	movs	r4, r0
 8001c5a:	1d28      	adds	r0, r5, #4
 8001c5c:	f7ff ffca 	bl	8001bf4 <pletoh32>
 8001c60:	0003      	movs	r3, r0
 8001c62:	0022      	movs	r2, r4
 8001c64:	0010      	movs	r0, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	bd34      	pop	{r2, r4, r5, pc}

08001c6a <putle16>:
 8001c6a:	7001      	strb	r1, [r0, #0]
 8001c6c:	000a      	movs	r2, r1
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	0a12      	lsrs	r2, r2, #8
 8001c72:	7042      	strb	r2, [r0, #1]
 8001c74:	4770      	bx	lr

08001c76 <putle24>:
 8001c76:	b538      	push	{r3, r4, r5, lr}
 8001c78:	0004      	movs	r4, r0
 8001c7a:	000d      	movs	r5, r1
 8001c7c:	0029      	movs	r1, r5
 8001c7e:	b289      	uxth	r1, r1
 8001c80:	0020      	movs	r0, r4
 8001c82:	f7ff fff2 	bl	8001c6a <putle16>
 8001c86:	0028      	movs	r0, r5
 8001c88:	0c00      	lsrs	r0, r0, #16
 8001c8a:	70a0      	strb	r0, [r4, #2]
 8001c8c:	bd31      	pop	{r0, r4, r5, pc}

08001c8e <putle32>:
 8001c8e:	b538      	push	{r3, r4, r5, lr}
 8001c90:	0004      	movs	r4, r0
 8001c92:	000d      	movs	r5, r1
 8001c94:	0029      	movs	r1, r5
 8001c96:	0020      	movs	r0, r4
 8001c98:	f7ff ffed 	bl	8001c76 <putle24>
 8001c9c:	0028      	movs	r0, r5
 8001c9e:	0e00      	lsrs	r0, r0, #24
 8001ca0:	70e0      	strb	r0, [r4, #3]
 8001ca2:	bd31      	pop	{r0, r4, r5, pc}

08001ca4 <putle40>:
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	0006      	movs	r6, r0
 8001ca8:	0014      	movs	r4, r2
 8001caa:	001d      	movs	r5, r3
 8001cac:	0021      	movs	r1, r4
 8001cae:	0030      	movs	r0, r6
 8001cb0:	f7ff ffed 	bl	8001c8e <putle32>
 8001cb4:	7135      	strb	r5, [r6, #4]
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}

08001cb8 <putle48>:
 8001cb8:	b570      	push	{r4, r5, r6, lr}
 8001cba:	0006      	movs	r6, r0
 8001cbc:	0014      	movs	r4, r2
 8001cbe:	001d      	movs	r5, r3
 8001cc0:	0022      	movs	r2, r4
 8001cc2:	002b      	movs	r3, r5
 8001cc4:	0030      	movs	r0, r6
 8001cc6:	f7ff ffed 	bl	8001ca4 <putle40>
 8001cca:	0020      	movs	r0, r4
 8001ccc:	0029      	movs	r1, r5
 8001cce:	0a08      	lsrs	r0, r1, #8
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	7170      	strb	r0, [r6, #5]
 8001cd4:	bd70      	pop	{r4, r5, r6, pc}

08001cd6 <putle56>:
 8001cd6:	b570      	push	{r4, r5, r6, lr}
 8001cd8:	0006      	movs	r6, r0
 8001cda:	0014      	movs	r4, r2
 8001cdc:	001d      	movs	r5, r3
 8001cde:	0022      	movs	r2, r4
 8001ce0:	002b      	movs	r3, r5
 8001ce2:	0030      	movs	r0, r6
 8001ce4:	f7ff ffe8 	bl	8001cb8 <putle48>
 8001ce8:	0020      	movs	r0, r4
 8001cea:	0029      	movs	r1, r5
 8001cec:	0c08      	lsrs	r0, r1, #16
 8001cee:	2100      	movs	r1, #0
 8001cf0:	71b0      	strb	r0, [r6, #6]
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}

08001cf4 <putle64>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	0006      	movs	r6, r0
 8001cf8:	0014      	movs	r4, r2
 8001cfa:	001d      	movs	r5, r3
 8001cfc:	0022      	movs	r2, r4
 8001cfe:	002b      	movs	r3, r5
 8001d00:	0030      	movs	r0, r6
 8001d02:	f7ff ffe8 	bl	8001cd6 <putle56>
 8001d06:	0020      	movs	r0, r4
 8001d08:	0029      	movs	r1, r5
 8001d0a:	0e08      	lsrs	r0, r1, #24
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	71f0      	strb	r0, [r6, #7]
 8001d10:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d14 <ZbZclAttrAddSorted>:
 8001d14:	b430      	push	{r4, r5}
 8001d16:	0002      	movs	r2, r0
 8001d18:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001d1a:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 8001d1e:	42a0      	cmp	r0, r4
 8001d20:	d001      	beq.n	8001d26 <??ZbZclAttrAddSorted_0>
 8001d22:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001d24:	e000      	b.n	8001d28 <??ZbZclAttrAddSorted_1>

08001d26 <??ZbZclAttrAddSorted_0>:
 8001d26:	2000      	movs	r0, #0

08001d28 <??ZbZclAttrAddSorted_1>:
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d017      	beq.n	8001d5c <??ZbZclAttrAddSorted_2>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	688c      	ldr	r4, [r1, #8]
 8001d30:	8824      	ldrh	r4, [r4, #0]
 8001d32:	689d      	ldr	r5, [r3, #8]
 8001d34:	882d      	ldrh	r5, [r5, #0]
 8001d36:	42ac      	cmp	r4, r5
 8001d38:	d207      	bcs.n	8001d4a <??ZbZclAttrAddSorted_3>
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	685c      	ldr	r4, [r3, #4]
 8001d3e:	604c      	str	r4, [r1, #4]
 8001d40:	680c      	ldr	r4, [r1, #0]
 8001d42:	6061      	str	r1, [r4, #4]
 8001d44:	684c      	ldr	r4, [r1, #4]
 8001d46:	6021      	str	r1, [r4, #0]
 8001d48:	e011      	b.n	8001d6e <??ZbZclAttrAddSorted_4>

08001d4a <??ZbZclAttrAddSorted_3>:
 8001d4a:	6804      	ldr	r4, [r0, #0]
 8001d4c:	f112 0524 	adds.w	r5, r2, #36	; 0x24
 8001d50:	42ac      	cmp	r4, r5
 8001d52:	d001      	beq.n	8001d58 <??ZbZclAttrAddSorted_5>
 8001d54:	6800      	ldr	r0, [r0, #0]
 8001d56:	e7e7      	b.n	8001d28 <??ZbZclAttrAddSorted_1>

08001d58 <??ZbZclAttrAddSorted_5>:
 8001d58:	2000      	movs	r0, #0
 8001d5a:	e7e5      	b.n	8001d28 <??ZbZclAttrAddSorted_1>

08001d5c <??ZbZclAttrAddSorted_2>:
 8001d5c:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 8001d60:	600c      	str	r4, [r1, #0]
 8001d62:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001d64:	604c      	str	r4, [r1, #4]
 8001d66:	680c      	ldr	r4, [r1, #0]
 8001d68:	6061      	str	r1, [r4, #4]
 8001d6a:	684c      	ldr	r4, [r1, #4]
 8001d6c:	6021      	str	r1, [r4, #0]

08001d6e <??ZbZclAttrAddSorted_4>:
 8001d6e:	bc30      	pop	{r4, r5}
 8001d70:	4770      	bx	lr

08001d72 <ZbZclAttrFind>:
 8001d72:	b430      	push	{r4, r5}
 8001d74:	0003      	movs	r3, r0
 8001d76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001d78:	f113 0224 	adds.w	r2, r3, #36	; 0x24
 8001d7c:	4290      	cmp	r0, r2
 8001d7e:	d001      	beq.n	8001d84 <??ZbZclAttrFind_0>
 8001d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d82:	e000      	b.n	8001d86 <??ZbZclAttrFind_1>

08001d84 <??ZbZclAttrFind_0>:
 8001d84:	2200      	movs	r2, #0

08001d86 <??ZbZclAttrFind_1>:
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d012      	beq.n	8001db0 <??ZbZclAttrFind_2>
 8001d8a:	0014      	movs	r4, r2
 8001d8c:	68a0      	ldr	r0, [r4, #8]
 8001d8e:	8800      	ldrh	r0, [r0, #0]
 8001d90:	000d      	movs	r5, r1
 8001d92:	b2ad      	uxth	r5, r5
 8001d94:	42a8      	cmp	r0, r5
 8001d96:	d005      	beq.n	8001da4 <??ZbZclAttrFind_3>
 8001d98:	6810      	ldr	r0, [r2, #0]
 8001d9a:	f113 0524 	adds.w	r5, r3, #36	; 0x24
 8001d9e:	42a8      	cmp	r0, r5
 8001da0:	d004      	beq.n	8001dac <??ZbZclAttrFind_4>
 8001da2:	e001      	b.n	8001da8 <??ZbZclAttrFind_5>

08001da4 <??ZbZclAttrFind_3>:
 8001da4:	0020      	movs	r0, r4
 8001da6:	e004      	b.n	8001db2 <??ZbZclAttrFind_6>

08001da8 <??ZbZclAttrFind_5>:
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	e7ec      	b.n	8001d86 <??ZbZclAttrFind_1>

08001dac <??ZbZclAttrFind_4>:
 8001dac:	2200      	movs	r2, #0
 8001dae:	e7ea      	b.n	8001d86 <??ZbZclAttrFind_1>

08001db0 <??ZbZclAttrFind_2>:
 8001db0:	2000      	movs	r0, #0

08001db2 <??ZbZclAttrFind_6>:
 8001db2:	bc30      	pop	{r4, r5}
 8001db4:	4770      	bx	lr

08001db6 <ZbZclAttrHandleDiscover>:
 8001db6:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dba:	b09f      	sub	sp, #124	; 0x7c
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	000d      	movs	r5, r1
 8001dc0:	0016      	movs	r6, r2
 8001dc2:	2708      	movs	r7, #8
 8001dc4:	f05f 0800 	movs.w	r8, #0
 8001dc8:	f10d 0908 	add.w	r9, sp, #8
 8001dcc:	4642      	mov	r2, r8
 8001dce:	0039      	movs	r1, r7
 8001dd0:	4648      	mov	r0, r9
 8001dd2:	f003 ff00 	bl	8005bd6 <__aeabi_memset>
 8001dd6:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8001dd8:	2803      	cmp	r0, #3
 8001dda:	d206      	bcs.n	8001dea <??ZbZclAttrHandleDiscover_0>
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	002a      	movs	r2, r5
 8001de0:	0031      	movs	r1, r6
 8001de2:	0020      	movs	r0, r4
 8001de4:	f010 faa7 	bl	8012336 <ZbZclSendDefaultResponse>
 8001de8:	e070      	b.n	8001ecc <??ZbZclAttrHandleDiscover_1>

08001dea <??ZbZclAttrHandleDiscover_0>:
 8001dea:	f05f 0800 	movs.w	r8, #0
 8001dee:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001df0:	4641      	mov	r1, r8
 8001df2:	b2c9      	uxtb	r1, r1
 8001df4:	4408      	add	r0, r1
 8001df6:	f7ff feec 	bl	8001bd2 <pletoh16>
 8001dfa:	0007      	movs	r7, r0
 8001dfc:	f118 0802 	adds.w	r8, r8, #2
 8001e00:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001e02:	4641      	mov	r1, r8
 8001e04:	b2c9      	uxtb	r1, r1
 8001e06:	5c40      	ldrb	r0, [r0, r1]
 8001e08:	f88d 0004 	strb.w	r0, [sp, #4]
 8001e0c:	f118 0801 	adds.w	r8, r8, #1
 8001e10:	2000      	movs	r0, #0
 8001e12:	f88d 0008 	strb.w	r0, [sp, #8]
 8001e16:	7868      	ldrb	r0, [r5, #1]
 8001e18:	f88d 0009 	strb.w	r0, [sp, #9]
 8001e1c:	78a8      	ldrb	r0, [r5, #2]
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d101      	bne.n	8001e26 <??ZbZclAttrHandleDiscover_2>
 8001e22:	2001      	movs	r0, #1
 8001e24:	e000      	b.n	8001e28 <??ZbZclAttrHandleDiscover_3>

08001e26 <??ZbZclAttrHandleDiscover_2>:
 8001e26:	2000      	movs	r0, #0

08001e28 <??ZbZclAttrHandleDiscover_3>:
 8001e28:	f88d 000a 	strb.w	r0, [sp, #10]
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f88d 000b 	strb.w	r0, [sp, #11]
 8001e32:	88a8      	ldrh	r0, [r5, #4]
 8001e34:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001e38:	79a8      	ldrb	r0, [r5, #6]
 8001e3a:	f88d 000e 	strb.w	r0, [sp, #14]
 8001e3e:	200d      	movs	r0, #13
 8001e40:	f88d 000f 	strb.w	r0, [sp, #15]
 8001e44:	2239      	movs	r2, #57	; 0x39
 8001e46:	a910      	add	r1, sp, #64	; 0x40
 8001e48:	a802      	add	r0, sp, #8
 8001e4a:	f7ff fda1 	bl	8001990 <ZbZclAppendHeader>
 8001e4e:	4682      	mov	sl, r0
 8001e50:	f1ba 0f00 	cmp.w	sl, #0
 8001e54:	d506      	bpl.n	8001e64 <??ZbZclAttrHandleDiscover_4>
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	002a      	movs	r2, r5
 8001e5a:	0031      	movs	r1, r6
 8001e5c:	0020      	movs	r0, r4
 8001e5e:	f010 fa6a 	bl	8012336 <ZbZclSendDefaultResponse>
 8001e62:	e033      	b.n	8001ecc <??ZbZclAttrHandleDiscover_1>

08001e64 <??ZbZclAttrHandleDiscover_4>:
 8001e64:	f1da 0039 	rsbs	r0, sl, #57	; 0x39
 8001e68:	9000      	str	r0, [sp, #0]
 8001e6a:	a810      	add	r0, sp, #64	; 0x40
 8001e6c:	eb00 030a 	add.w	r3, r0, sl
 8001e70:	aa01      	add	r2, sp, #4
 8001e72:	0039      	movs	r1, r7
 8001e74:	b289      	uxth	r1, r1
 8001e76:	0020      	movs	r0, r4
 8001e78:	f000 f82b 	bl	8001ed2 <ZbZclAttrDiscoverGetList>
 8001e7c:	4681      	mov	r9, r0
 8001e7e:	eb19 090a 	adds.w	r9, r9, sl
 8001e82:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d104      	bne.n	8001e94 <??ZbZclAttrHandleDiscover_5>
 8001e8a:	0030      	movs	r0, r6
 8001e8c:	f00f fe5a 	bl	8011b44 <ZbApsAddrIsBcast>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d11b      	bne.n	8001ecc <??ZbZclAttrHandleDiscover_1>

08001e94 <??ZbZclAttrHandleDiscover_5>:
 8001e94:	0032      	movs	r2, r6
 8001e96:	a904      	add	r1, sp, #16
 8001e98:	0020      	movs	r0, r4
 8001e9a:	f7ff f818 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8001e9e:	a804      	add	r0, sp, #16
 8001ea0:	f116 0110 	adds.w	r1, r6, #16
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	f013 fc0c 	bl	80156c2 <__aeabi_memcpy>
 8001eaa:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 8001eae:	f7fe ffa6 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8001eb2:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8001eb6:	a810      	add	r0, sp, #64	; 0x40
 8001eb8:	900a      	str	r0, [sp, #40]	; 0x28
 8001eba:	4648      	mov	r0, r9
 8001ebc:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	a904      	add	r1, sp, #16
 8001ec6:	68a0      	ldr	r0, [r4, #8]
 8001ec8:	f00f fdc2 	bl	8011a50 <ZbApsdeDataReqCallback>

08001ecc <??ZbZclAttrHandleDiscover_1>:
 8001ecc:	b020      	add	sp, #128	; 0x80
 8001ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001ed2 <ZbZclAttrDiscoverGetList>:
 8001ed2:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed6:	0005      	movs	r5, r0
 8001ed8:	0016      	movs	r6, r2
 8001eda:	001f      	movs	r7, r3
 8001edc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001ee0:	f05f 0a00 	movs.w	sl, #0
 8001ee4:	f05f 0b00 	movs.w	fp, #0
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f807 000b 	strb.w	r0, [r7, fp]
 8001eee:	f11b 0b01 	adds.w	fp, fp, #1
 8001ef2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001ef4:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8001ef8:	4288      	cmp	r0, r1
 8001efa:	d001      	beq.n	8001f00 <??ZbZclAttrDiscoverGetList_0>
 8001efc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001efe:	e000      	b.n	8001f02 <??ZbZclAttrDiscoverGetList_1>

08001f00 <??ZbZclAttrDiscoverGetList_0>:
 8001f00:	2400      	movs	r4, #0

08001f02 <??ZbZclAttrDiscoverGetList_1>:
 8001f02:	2c00      	cmp	r4, #0
 8001f04:	d030      	beq.n	8001f68 <??ZbZclAttrDiscoverGetList_2>
 8001f06:	46a1      	mov	r9, r4
 8001f08:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001f0c:	8800      	ldrh	r0, [r0, #0]
 8001f0e:	f8bd 1000 	ldrh.w	r1, [sp]
 8001f12:	4288      	cmp	r0, r1
 8001f14:	d31f      	bcc.n	8001f56 <??ZbZclAttrDiscoverGetList_3>

08001f16 <??ZbZclAttrDiscoverGetList_4>:
 8001f16:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001f1a:	8880      	ldrh	r0, [r0, #4]
 8001f1c:	0400      	lsls	r0, r0, #16
 8001f1e:	d41a      	bmi.n	8001f56 <??ZbZclAttrDiscoverGetList_3>

08001f20 <??ZbZclAttrDiscoverGetList_5>:
 8001f20:	4650      	mov	r0, sl
 8001f22:	7831      	ldrb	r1, [r6, #0]
 8001f24:	b2c0      	uxtb	r0, r0
 8001f26:	4288      	cmp	r0, r1
 8001f28:	d21e      	bcs.n	8001f68 <??ZbZclAttrDiscoverGetList_2>

08001f2a <??ZbZclAttrDiscoverGetList_6>:
 8001f2a:	f11b 0003 	adds.w	r0, fp, #3
 8001f2e:	4580      	cmp	r8, r0
 8001f30:	d31a      	bcc.n	8001f68 <??ZbZclAttrDiscoverGetList_2>

08001f32 <??ZbZclAttrDiscoverGetList_7>:
 8001f32:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001f36:	8801      	ldrh	r1, [r0, #0]
 8001f38:	eb07 000b 	add.w	r0, r7, fp
 8001f3c:	f7ff fe95 	bl	8001c6a <putle16>
 8001f40:	f11b 0b02 	adds.w	fp, fp, #2
 8001f44:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001f48:	7880      	ldrb	r0, [r0, #2]
 8001f4a:	f807 000b 	strb.w	r0, [r7, fp]
 8001f4e:	f11b 0b01 	adds.w	fp, fp, #1
 8001f52:	f11a 0a01 	adds.w	sl, sl, #1

08001f56 <??ZbZclAttrDiscoverGetList_3>:
 8001f56:	6820      	ldr	r0, [r4, #0]
 8001f58:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8001f5c:	4288      	cmp	r0, r1
 8001f5e:	d001      	beq.n	8001f64 <??ZbZclAttrDiscoverGetList_8>
 8001f60:	6824      	ldr	r4, [r4, #0]
 8001f62:	e7ce      	b.n	8001f02 <??ZbZclAttrDiscoverGetList_1>

08001f64 <??ZbZclAttrDiscoverGetList_8>:
 8001f64:	2400      	movs	r4, #0
 8001f66:	e7cc      	b.n	8001f02 <??ZbZclAttrDiscoverGetList_1>

08001f68 <??ZbZclAttrDiscoverGetList_2>:
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d101      	bne.n	8001f70 <??ZbZclAttrDiscoverGetList_9>
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	7038      	strb	r0, [r7, #0]

08001f70 <??ZbZclAttrDiscoverGetList_9>:
 8001f70:	f886 a000 	strb.w	sl, [r6]
 8001f74:	4658      	mov	r0, fp
 8001f76:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f7a <ZbZclAttrRead>:
 8001f7a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	4680      	mov	r8, r0
 8001f82:	0014      	movs	r4, r2
 8001f84:	001d      	movs	r5, r3
 8001f86:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001f88:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001f8c:	4640      	mov	r0, r8
 8001f8e:	f7ff fef0 	bl	8001d72 <ZbZclAttrFind>
 8001f92:	0007      	movs	r7, r0
 8001f94:	2f00      	cmp	r7, #0
 8001f96:	d101      	bne.n	8001f9c <??ZbZclAttrRead_0>
 8001f98:	2086      	movs	r0, #134	; 0x86
 8001f9a:	e03c      	b.n	8002016 <??ZbZclAttrRead_1>

08001f9c <??ZbZclAttrRead_0>:
 8001f9c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d005      	beq.n	8001fb0 <??ZbZclAttrRead_2>
 8001fa4:	68b8      	ldr	r0, [r7, #8]
 8001fa6:	7900      	ldrb	r0, [r0, #4]
 8001fa8:	0780      	lsls	r0, r0, #30
 8001faa:	d401      	bmi.n	8001fb0 <??ZbZclAttrRead_2>
 8001fac:	208c      	movs	r0, #140	; 0x8c
 8001fae:	e032      	b.n	8002016 <??ZbZclAttrRead_1>

08001fb0 <??ZbZclAttrRead_2>:
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d002      	beq.n	8001fba <??ZbZclAttrRead_3>
 8001fb4:	68b8      	ldr	r0, [r7, #8]
 8001fb6:	7880      	ldrb	r0, [r0, #2]
 8001fb8:	7020      	strb	r0, [r4, #0]

08001fba <??ZbZclAttrRead_3>:
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d001      	beq.n	8001fc2 <??ZbZclAttrRead_4>
 8001fbe:	2e00      	cmp	r6, #0
 8001fc0:	d105      	bne.n	8001fce <??ZbZclAttrRead_5>

08001fc2 <??ZbZclAttrRead_4>:
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d001      	beq.n	8001fca <??ZbZclAttrRead_6>
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	e025      	b.n	8002016 <??ZbZclAttrRead_1>

08001fca <??ZbZclAttrRead_6>:
 8001fca:	2089      	movs	r0, #137	; 0x89
 8001fcc:	e023      	b.n	8002016 <??ZbZclAttrRead_1>

08001fce <??ZbZclAttrRead_5>:
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	7900      	ldrb	r0, [r0, #4]
 8001fd2:	06c0      	lsls	r0, r0, #27
 8001fd4:	d519      	bpl.n	800200a <??ZbZclAttrRead_7>
 8001fd6:	f05f 0920 	movs.w	r9, #32
 8001fda:	f05f 0a00 	movs.w	sl, #0
 8001fde:	46eb      	mov	fp, sp
 8001fe0:	4652      	mov	r2, sl
 8001fe2:	4649      	mov	r1, r9
 8001fe4:	4658      	mov	r0, fp
 8001fe6:	f003 fdf6 	bl	8005bd6 <__aeabi_memset>
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	9000      	str	r0, [sp, #0]
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f88d 0004 	strb.w	r0, [sp, #4]
 8001ff4:	9502      	str	r5, [sp, #8]
 8001ff6:	9603      	str	r6, [sp, #12]
 8001ff8:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8001ffc:	9007      	str	r0, [sp, #28]
 8001ffe:	466a      	mov	r2, sp
 8002000:	0039      	movs	r1, r7
 8002002:	4640      	mov	r0, r8
 8002004:	f000 ff9e 	bl	8002f44 <ZbZclAttrCallbackExec>
 8002008:	e005      	b.n	8002016 <??ZbZclAttrRead_1>

0800200a <??ZbZclAttrRead_7>:
 800200a:	0033      	movs	r3, r6
 800200c:	002a      	movs	r2, r5
 800200e:	0039      	movs	r1, r7
 8002010:	4640      	mov	r0, r8
 8002012:	f000 f803 	bl	800201c <ZbZclAttrDefaultRead>

08002016 <??ZbZclAttrRead_1>:
 8002016:	b009      	add	sp, #36	; 0x24
 8002018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800201c <ZbZclAttrDefaultRead>:
 800201c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002020:	0005      	movs	r5, r0
 8002022:	000e      	movs	r6, r1
 8002024:	0017      	movs	r7, r2
 8002026:	001c      	movs	r4, r3
 8002028:	f05f 0800 	movs.w	r8, #0
 800202c:	f05f 0900 	movs.w	r9, #0
 8002030:	68b0      	ldr	r0, [r6, #8]
 8002032:	7880      	ldrb	r0, [r0, #2]
 8002034:	2808      	cmp	r0, #8
 8002036:	d065      	beq.n	8002104 <??ZbZclAttrDefaultRead_0>
 8002038:	2809      	cmp	r0, #9
 800203a:	d06b      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 800203c:	280a      	cmp	r0, #10
 800203e:	d071      	beq.n	8002124 <??ZbZclAttrDefaultRead_2>
 8002040:	280b      	cmp	r0, #11
 8002042:	d077      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 8002044:	280c      	cmp	r0, #12
 8002046:	d07d      	beq.n	8002144 <??ZbZclAttrDefaultRead_4>
 8002048:	280d      	cmp	r0, #13
 800204a:	f000 8083 	beq.w	8002154 <??ZbZclAttrDefaultRead_5>
 800204e:	280e      	cmp	r0, #14
 8002050:	f000 8088 	beq.w	8002164 <??ZbZclAttrDefaultRead_6>
 8002054:	280f      	cmp	r0, #15
 8002056:	f000 808d 	beq.w	8002174 <??ZbZclAttrDefaultRead_7>
 800205a:	2810      	cmp	r0, #16
 800205c:	d052      	beq.n	8002104 <??ZbZclAttrDefaultRead_0>
 800205e:	2818      	cmp	r0, #24
 8002060:	d050      	beq.n	8002104 <??ZbZclAttrDefaultRead_0>
 8002062:	2819      	cmp	r0, #25
 8002064:	d056      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 8002066:	281a      	cmp	r0, #26
 8002068:	d05c      	beq.n	8002124 <??ZbZclAttrDefaultRead_2>
 800206a:	281b      	cmp	r0, #27
 800206c:	d062      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 800206e:	281c      	cmp	r0, #28
 8002070:	d068      	beq.n	8002144 <??ZbZclAttrDefaultRead_4>
 8002072:	281d      	cmp	r0, #29
 8002074:	d06e      	beq.n	8002154 <??ZbZclAttrDefaultRead_5>
 8002076:	281e      	cmp	r0, #30
 8002078:	d074      	beq.n	8002164 <??ZbZclAttrDefaultRead_6>
 800207a:	281f      	cmp	r0, #31
 800207c:	d07a      	beq.n	8002174 <??ZbZclAttrDefaultRead_7>
 800207e:	2820      	cmp	r0, #32
 8002080:	d040      	beq.n	8002104 <??ZbZclAttrDefaultRead_0>
 8002082:	2821      	cmp	r0, #33	; 0x21
 8002084:	d046      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 8002086:	2822      	cmp	r0, #34	; 0x22
 8002088:	d04c      	beq.n	8002124 <??ZbZclAttrDefaultRead_2>
 800208a:	2823      	cmp	r0, #35	; 0x23
 800208c:	d052      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 800208e:	2824      	cmp	r0, #36	; 0x24
 8002090:	d058      	beq.n	8002144 <??ZbZclAttrDefaultRead_4>
 8002092:	2825      	cmp	r0, #37	; 0x25
 8002094:	d05e      	beq.n	8002154 <??ZbZclAttrDefaultRead_5>
 8002096:	2826      	cmp	r0, #38	; 0x26
 8002098:	d064      	beq.n	8002164 <??ZbZclAttrDefaultRead_6>
 800209a:	2827      	cmp	r0, #39	; 0x27
 800209c:	d06a      	beq.n	8002174 <??ZbZclAttrDefaultRead_7>
 800209e:	2828      	cmp	r0, #40	; 0x28
 80020a0:	d030      	beq.n	8002104 <??ZbZclAttrDefaultRead_0>
 80020a2:	2829      	cmp	r0, #41	; 0x29
 80020a4:	d036      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 80020a6:	282a      	cmp	r0, #42	; 0x2a
 80020a8:	d03c      	beq.n	8002124 <??ZbZclAttrDefaultRead_2>
 80020aa:	282b      	cmp	r0, #43	; 0x2b
 80020ac:	d042      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 80020ae:	282c      	cmp	r0, #44	; 0x2c
 80020b0:	d048      	beq.n	8002144 <??ZbZclAttrDefaultRead_4>
 80020b2:	282d      	cmp	r0, #45	; 0x2d
 80020b4:	d04e      	beq.n	8002154 <??ZbZclAttrDefaultRead_5>
 80020b6:	282e      	cmp	r0, #46	; 0x2e
 80020b8:	d054      	beq.n	8002164 <??ZbZclAttrDefaultRead_6>
 80020ba:	282f      	cmp	r0, #47	; 0x2f
 80020bc:	d05a      	beq.n	8002174 <??ZbZclAttrDefaultRead_7>
 80020be:	2830      	cmp	r0, #48	; 0x30
 80020c0:	d020      	beq.n	8002104 <??ZbZclAttrDefaultRead_0>
 80020c2:	2831      	cmp	r0, #49	; 0x31
 80020c4:	d026      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 80020c6:	2838      	cmp	r0, #56	; 0x38
 80020c8:	d024      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 80020ca:	2839      	cmp	r0, #57	; 0x39
 80020cc:	d032      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 80020ce:	283a      	cmp	r0, #58	; 0x3a
 80020d0:	d050      	beq.n	8002174 <??ZbZclAttrDefaultRead_7>
 80020d2:	2841      	cmp	r0, #65	; 0x41
 80020d4:	d05e      	beq.n	8002194 <??ZbZclAttrDefaultRead_8>
 80020d6:	2842      	cmp	r0, #66	; 0x42
 80020d8:	d05c      	beq.n	8002194 <??ZbZclAttrDefaultRead_8>
 80020da:	2843      	cmp	r0, #67	; 0x43
 80020dc:	d071      	beq.n	80021c2 <??ZbZclAttrDefaultRead_9>
 80020de:	2844      	cmp	r0, #68	; 0x44
 80020e0:	d06f      	beq.n	80021c2 <??ZbZclAttrDefaultRead_9>
 80020e2:	28e0      	cmp	r0, #224	; 0xe0
 80020e4:	d026      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 80020e6:	28e1      	cmp	r0, #225	; 0xe1
 80020e8:	d024      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 80020ea:	28e2      	cmp	r0, #226	; 0xe2
 80020ec:	d022      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 80020ee:	28e8      	cmp	r0, #232	; 0xe8
 80020f0:	d010      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 80020f2:	28e9      	cmp	r0, #233	; 0xe9
 80020f4:	d00e      	beq.n	8002114 <??ZbZclAttrDefaultRead_1>
 80020f6:	28ea      	cmp	r0, #234	; 0xea
 80020f8:	d01c      	beq.n	8002134 <??ZbZclAttrDefaultRead_3>
 80020fa:	28f0      	cmp	r0, #240	; 0xf0
 80020fc:	d03a      	beq.n	8002174 <??ZbZclAttrDefaultRead_7>
 80020fe:	28f1      	cmp	r0, #241	; 0xf1
 8002100:	d040      	beq.n	8002184 <??ZbZclAttrDefaultRead_10>
 8002102:	e078      	b.n	80021f6 <??ZbZclAttrDefaultRead_11>

08002104 <??ZbZclAttrDefaultRead_0>:
 8002104:	2c00      	cmp	r4, #0
 8002106:	d102      	bne.n	800210e <??ZbZclAttrDefaultRead_12>
 8002108:	2089      	movs	r0, #137	; 0x89
 800210a:	4681      	mov	r9, r0
 800210c:	e075      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800210e <??ZbZclAttrDefaultRead_12>:
 800210e:	2001      	movs	r0, #1
 8002110:	4680      	mov	r8, r0
 8002112:	e072      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002114 <??ZbZclAttrDefaultRead_1>:
 8002114:	2c02      	cmp	r4, #2
 8002116:	d202      	bcs.n	800211e <??ZbZclAttrDefaultRead_14>
 8002118:	2089      	movs	r0, #137	; 0x89
 800211a:	4681      	mov	r9, r0
 800211c:	e06d      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800211e <??ZbZclAttrDefaultRead_14>:
 800211e:	2002      	movs	r0, #2
 8002120:	4680      	mov	r8, r0
 8002122:	e06a      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002124 <??ZbZclAttrDefaultRead_2>:
 8002124:	2c03      	cmp	r4, #3
 8002126:	d202      	bcs.n	800212e <??ZbZclAttrDefaultRead_15>
 8002128:	2089      	movs	r0, #137	; 0x89
 800212a:	4681      	mov	r9, r0
 800212c:	e065      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800212e <??ZbZclAttrDefaultRead_15>:
 800212e:	2003      	movs	r0, #3
 8002130:	4680      	mov	r8, r0
 8002132:	e062      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002134 <??ZbZclAttrDefaultRead_3>:
 8002134:	2c04      	cmp	r4, #4
 8002136:	d202      	bcs.n	800213e <??ZbZclAttrDefaultRead_16>
 8002138:	2089      	movs	r0, #137	; 0x89
 800213a:	4681      	mov	r9, r0
 800213c:	e05d      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800213e <??ZbZclAttrDefaultRead_16>:
 800213e:	2004      	movs	r0, #4
 8002140:	4680      	mov	r8, r0
 8002142:	e05a      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002144 <??ZbZclAttrDefaultRead_4>:
 8002144:	2c05      	cmp	r4, #5
 8002146:	d202      	bcs.n	800214e <??ZbZclAttrDefaultRead_17>
 8002148:	2089      	movs	r0, #137	; 0x89
 800214a:	4681      	mov	r9, r0
 800214c:	e055      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800214e <??ZbZclAttrDefaultRead_17>:
 800214e:	2005      	movs	r0, #5
 8002150:	4680      	mov	r8, r0
 8002152:	e052      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002154 <??ZbZclAttrDefaultRead_5>:
 8002154:	2c06      	cmp	r4, #6
 8002156:	d202      	bcs.n	800215e <??ZbZclAttrDefaultRead_18>
 8002158:	2089      	movs	r0, #137	; 0x89
 800215a:	4681      	mov	r9, r0
 800215c:	e04d      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800215e <??ZbZclAttrDefaultRead_18>:
 800215e:	2006      	movs	r0, #6
 8002160:	4680      	mov	r8, r0
 8002162:	e04a      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002164 <??ZbZclAttrDefaultRead_6>:
 8002164:	2c07      	cmp	r4, #7
 8002166:	d202      	bcs.n	800216e <??ZbZclAttrDefaultRead_19>
 8002168:	2089      	movs	r0, #137	; 0x89
 800216a:	4681      	mov	r9, r0
 800216c:	e045      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800216e <??ZbZclAttrDefaultRead_19>:
 800216e:	2007      	movs	r0, #7
 8002170:	4680      	mov	r8, r0
 8002172:	e042      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002174 <??ZbZclAttrDefaultRead_7>:
 8002174:	2c08      	cmp	r4, #8
 8002176:	d202      	bcs.n	800217e <??ZbZclAttrDefaultRead_20>
 8002178:	2089      	movs	r0, #137	; 0x89
 800217a:	4681      	mov	r9, r0
 800217c:	e03d      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800217e <??ZbZclAttrDefaultRead_20>:
 800217e:	2008      	movs	r0, #8
 8002180:	4680      	mov	r8, r0
 8002182:	e03a      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002184 <??ZbZclAttrDefaultRead_10>:
 8002184:	2c10      	cmp	r4, #16
 8002186:	d202      	bcs.n	800218e <??ZbZclAttrDefaultRead_21>
 8002188:	2089      	movs	r0, #137	; 0x89
 800218a:	4681      	mov	r9, r0
 800218c:	e035      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800218e <??ZbZclAttrDefaultRead_21>:
 800218e:	2010      	movs	r0, #16
 8002190:	4680      	mov	r8, r0
 8002192:	e032      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

08002194 <??ZbZclAttrDefaultRead_8>:
 8002194:	2c00      	cmp	r4, #0
 8002196:	d102      	bne.n	800219e <??ZbZclAttrDefaultRead_22>
 8002198:	2089      	movs	r0, #137	; 0x89
 800219a:	4681      	mov	r9, r0
 800219c:	e02d      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

0800219e <??ZbZclAttrDefaultRead_22>:
 800219e:	68f0      	ldr	r0, [r6, #12]
 80021a0:	7800      	ldrb	r0, [r0, #0]
 80021a2:	0001      	movs	r1, r0
 80021a4:	b2c9      	uxtb	r1, r1
 80021a6:	29ff      	cmp	r1, #255	; 0xff
 80021a8:	d101      	bne.n	80021ae <??ZbZclAttrDefaultRead_23>
 80021aa:	2100      	movs	r1, #0
 80021ac:	0008      	movs	r0, r1

080021ae <??ZbZclAttrDefaultRead_23>:
 80021ae:	0001      	movs	r1, r0
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	1c49      	adds	r1, r1, #1
 80021b4:	4688      	mov	r8, r1
 80021b6:	4544      	cmp	r4, r8
 80021b8:	d202      	bcs.n	80021c0 <??ZbZclAttrDefaultRead_24>
 80021ba:	2189      	movs	r1, #137	; 0x89
 80021bc:	4689      	mov	r9, r1
 80021be:	e01c      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

080021c0 <??ZbZclAttrDefaultRead_24>:
 80021c0:	e01b      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

080021c2 <??ZbZclAttrDefaultRead_9>:
 80021c2:	2c00      	cmp	r4, #0
 80021c4:	d102      	bne.n	80021cc <??ZbZclAttrDefaultRead_25>
 80021c6:	2089      	movs	r0, #137	; 0x89
 80021c8:	4681      	mov	r9, r0
 80021ca:	e016      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

080021cc <??ZbZclAttrDefaultRead_25>:
 80021cc:	68f0      	ldr	r0, [r6, #12]
 80021ce:	f7ff fd00 	bl	8001bd2 <pletoh16>
 80021d2:	0001      	movs	r1, r0
 80021d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d8:	b289      	uxth	r1, r1
 80021da:	4291      	cmp	r1, r2
 80021dc:	d101      	bne.n	80021e2 <??ZbZclAttrDefaultRead_26>
 80021de:	2100      	movs	r1, #0
 80021e0:	0008      	movs	r0, r1

080021e2 <??ZbZclAttrDefaultRead_26>:
 80021e2:	0001      	movs	r1, r0
 80021e4:	b289      	uxth	r1, r1
 80021e6:	1c89      	adds	r1, r1, #2
 80021e8:	4688      	mov	r8, r1
 80021ea:	4544      	cmp	r4, r8
 80021ec:	d202      	bcs.n	80021f4 <??ZbZclAttrDefaultRead_27>
 80021ee:	2189      	movs	r1, #137	; 0x89
 80021f0:	4689      	mov	r9, r1
 80021f2:	e002      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

080021f4 <??ZbZclAttrDefaultRead_27>:
 80021f4:	e001      	b.n	80021fa <??ZbZclAttrDefaultRead_13>

080021f6 <??ZbZclAttrDefaultRead_11>:
 80021f6:	2086      	movs	r0, #134	; 0x86
 80021f8:	4681      	mov	r9, r0

080021fa <??ZbZclAttrDefaultRead_13>:
 80021fa:	4648      	mov	r0, r9
 80021fc:	b2c0      	uxtb	r0, r0
 80021fe:	2800      	cmp	r0, #0
 8002200:	d109      	bne.n	8002216 <??ZbZclAttrDefaultRead_28>
 8002202:	f8cd 8000 	str.w	r8, [sp]
 8002206:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800220a:	46bb      	mov	fp, r7
 800220c:	9a00      	ldr	r2, [sp, #0]
 800220e:	4651      	mov	r1, sl
 8002210:	4658      	mov	r0, fp
 8002212:	f013 fa56 	bl	80156c2 <__aeabi_memcpy>

08002216 <??ZbZclAttrDefaultRead_28>:
 8002216:	4648      	mov	r0, r9
 8002218:	b2c0      	uxtb	r0, r0
 800221a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800221e <ZbZclAttrWrite>:
 800221e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002222:	b096      	sub	sp, #88	; 0x58
 8002224:	4680      	mov	r8, r0
 8002226:	4699      	mov	r9, r3
 8002228:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800222c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800222e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8002232:	4640      	mov	r0, r8
 8002234:	f7ff fd9d 	bl	8001d72 <ZbZclAttrFind>
 8002238:	0006      	movs	r6, r0
 800223a:	2e00      	cmp	r6, #0
 800223c:	d101      	bne.n	8002242 <??ZbZclAttrWrite_0>
 800223e:	2086      	movs	r0, #134	; 0x86
 8002240:	e0a2      	b.n	8002388 <??ZbZclAttrWrite_1>

08002242 <??ZbZclAttrWrite_0>:
 8002242:	68b0      	ldr	r0, [r6, #8]
 8002244:	7900      	ldrb	r0, [r0, #4]
 8002246:	f010 0001 	ands.w	r0, r0, #1
 800224a:	b2c0      	uxtb	r0, r0
 800224c:	2800      	cmp	r0, #0
 800224e:	d105      	bne.n	800225c <??ZbZclAttrWrite_2>
 8002250:	0038      	movs	r0, r7
 8002252:	b280      	uxth	r0, r0
 8002254:	0780      	lsls	r0, r0, #30
 8002256:	d401      	bmi.n	800225c <??ZbZclAttrWrite_2>
 8002258:	2088      	movs	r0, #136	; 0x88
 800225a:	e095      	b.n	8002388 <??ZbZclAttrWrite_1>

0800225c <??ZbZclAttrWrite_2>:
 800225c:	2300      	movs	r3, #0
 800225e:	4652      	mov	r2, sl
 8002260:	4649      	mov	r1, r9
 8002262:	68b0      	ldr	r0, [r6, #8]
 8002264:	7880      	ldrb	r0, [r0, #2]
 8002266:	f000 fcb0 	bl	8002bca <ZbZclAttrParseLength>
 800226a:	9005      	str	r0, [sp, #20]
 800226c:	9805      	ldr	r0, [sp, #20]
 800226e:	2800      	cmp	r0, #0
 8002270:	d501      	bpl.n	8002276 <??ZbZclAttrWrite_3>
 8002272:	2087      	movs	r0, #135	; 0x87
 8002274:	e088      	b.n	8002388 <??ZbZclAttrWrite_1>

08002276 <??ZbZclAttrWrite_3>:
 8002276:	68b0      	ldr	r0, [r6, #8]
 8002278:	7880      	ldrb	r0, [r0, #2]
 800227a:	f7fe f979 	bl	8000570 <ZbZclAttrIsInteger>
 800227e:	2800      	cmp	r0, #0
 8002280:	d026      	beq.n	80022d0 <??ZbZclAttrWrite_4>
 8002282:	aa04      	add	r2, sp, #16
 8002284:	4649      	mov	r1, r9
 8002286:	68b0      	ldr	r0, [r6, #8]
 8002288:	7880      	ldrb	r0, [r0, #2]
 800228a:	f7fe f843 	bl	8000314 <ZbZclParseInteger>
 800228e:	0004      	movs	r4, r0
 8002290:	000d      	movs	r5, r1
 8002292:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002296:	2800      	cmp	r0, #0
 8002298:	d002      	beq.n	80022a0 <??ZbZclAttrWrite_5>
 800229a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800229e:	e073      	b.n	8002388 <??ZbZclAttrWrite_1>

080022a0 <??ZbZclAttrWrite_5>:
 80022a0:	68b0      	ldr	r0, [r6, #8]
 80022a2:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 80022a6:	f004 f9f5 	bl	8006694 <__aeabi_d2lz>
 80022aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80022ae:	68b0      	ldr	r0, [r6, #8]
 80022b0:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80022b4:	f004 f9ee 	bl	8006694 <__aeabi_d2lz>
 80022b8:	e9cd 0100 	strd	r0, r1, [sp]
 80022bc:	68b0      	ldr	r0, [r6, #8]
 80022be:	7882      	ldrb	r2, [r0, #2]
 80022c0:	0020      	movs	r0, r4
 80022c2:	0029      	movs	r1, r5
 80022c4:	f7fe f96a 	bl	800059c <ZbZclAttrIntegerRangeCheck>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d101      	bne.n	80022d0 <??ZbZclAttrWrite_4>
 80022cc:	2087      	movs	r0, #135	; 0x87
 80022ce:	e05b      	b.n	8002388 <??ZbZclAttrWrite_1>

080022d0 <??ZbZclAttrWrite_4>:
 80022d0:	68b0      	ldr	r0, [r6, #8]
 80022d2:	7900      	ldrb	r0, [r0, #4]
 80022d4:	0680      	lsls	r0, r0, #26
 80022d6:	d522      	bpl.n	800231e <??ZbZclAttrWrite_6>
 80022d8:	2420      	movs	r4, #32
 80022da:	2500      	movs	r5, #0
 80022dc:	f10d 0b18 	add.w	fp, sp, #24
 80022e0:	002a      	movs	r2, r5
 80022e2:	0021      	movs	r1, r4
 80022e4:	4658      	mov	r0, fp
 80022e6:	f003 fc76 	bl	8005bd6 <__aeabi_memset>
 80022ea:	68b0      	ldr	r0, [r6, #8]
 80022ec:	9006      	str	r0, [sp, #24]
 80022ee:	2001      	movs	r0, #1
 80022f0:	f88d 001c 	strb.w	r0, [sp, #28]
 80022f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80022f6:	900c      	str	r0, [sp, #48]	; 0x30
 80022f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80022fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002300:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8002304:	68f0      	ldr	r0, [r6, #12]
 8002306:	900b      	str	r0, [sp, #44]	; 0x2c
 8002308:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 800230c:	900d      	str	r0, [sp, #52]	; 0x34
 800230e:	aa06      	add	r2, sp, #24
 8002310:	0031      	movs	r1, r6
 8002312:	4640      	mov	r0, r8
 8002314:	f000 fe16 	bl	8002f44 <ZbZclAttrCallbackExec>
 8002318:	f88d 0010 	strb.w	r0, [sp, #16]
 800231c:	e028      	b.n	8002370 <??ZbZclAttrWrite_7>

0800231e <??ZbZclAttrWrite_6>:
 800231e:	003b      	movs	r3, r7
 8002320:	b29b      	uxth	r3, r3
 8002322:	464a      	mov	r2, r9
 8002324:	0031      	movs	r1, r6
 8002326:	4640      	mov	r0, r8
 8002328:	f000 f85e 	bl	80023e8 <ZbZclAttrDefaultWrite>
 800232c:	f88d 0010 	strb.w	r0, [sp, #16]
 8002330:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002334:	2800      	cmp	r0, #0
 8002336:	d11b      	bne.n	8002370 <??ZbZclAttrWrite_7>
 8002338:	68b0      	ldr	r0, [r6, #8]
 800233a:	7900      	ldrb	r0, [r0, #4]
 800233c:	0640      	lsls	r0, r0, #25
 800233e:	d517      	bpl.n	8002370 <??ZbZclAttrWrite_7>
 8002340:	2420      	movs	r4, #32
 8002342:	2500      	movs	r5, #0
 8002344:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8002348:	002a      	movs	r2, r5
 800234a:	0021      	movs	r1, r4
 800234c:	4658      	mov	r0, fp
 800234e:	f003 fc42 	bl	8005bd6 <__aeabi_memset>
 8002352:	68b0      	ldr	r0, [r6, #8]
 8002354:	900e      	str	r0, [sp, #56]	; 0x38
 8002356:	2002      	movs	r0, #2
 8002358:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 800235c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800235e:	9014      	str	r0, [sp, #80]	; 0x50
 8002360:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8002364:	9015      	str	r0, [sp, #84]	; 0x54
 8002366:	aa0e      	add	r2, sp, #56	; 0x38
 8002368:	0031      	movs	r1, r6
 800236a:	4640      	mov	r0, r8
 800236c:	f000 fdea 	bl	8002f44 <ZbZclAttrCallbackExec>

08002370 <??ZbZclAttrWrite_7>:
 8002370:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002374:	2800      	cmp	r0, #0
 8002376:	d002      	beq.n	800237e <??ZbZclAttrWrite_8>
 8002378:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800237c:	e004      	b.n	8002388 <??ZbZclAttrWrite_1>

0800237e <??ZbZclAttrWrite_8>:
 800237e:	0031      	movs	r1, r6
 8002380:	4640      	mov	r0, r8
 8002382:	f000 f804 	bl	800238e <ZbZclAttrPostWrite>
 8002386:	2000      	movs	r0, #0

08002388 <??ZbZclAttrWrite_1>:
 8002388:	b019      	add	sp, #100	; 0x64
 800238a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800238e <ZbZclAttrPostWrite>:
 800238e:	b538      	push	{r3, r4, r5, lr}
 8002390:	0005      	movs	r5, r0
 8002392:	000c      	movs	r4, r1
 8002394:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8002396:	2800      	cmp	r0, #0
 8002398:	d004      	beq.n	80023a4 <??ZbZclAttrPostWrite_0>
 800239a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800239e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80023a0:	f00f fe14 	bl	8011fcc <ZbTimerReset>

080023a4 <??ZbZclAttrPostWrite_0>:
 80023a4:	2c00      	cmp	r4, #0
 80023a6:	d005      	beq.n	80023b4 <??ZbZclAttrPostWrite_1>
 80023a8:	2200      	movs	r2, #0
 80023aa:	68a0      	ldr	r0, [r4, #8]
 80023ac:	8801      	ldrh	r1, [r0, #0]
 80023ae:	0028      	movs	r0, r5
 80023b0:	f001 fa83 	bl	80038ba <zcl_attr_reporting_check>

080023b4 <??ZbZclAttrPostWrite_1>:
 80023b4:	bd31      	pop	{r0, r4, r5, pc}

080023b6 <ZbZclAttrPersist>:
 80023b6:	b570      	push	{r4, r5, r6, lr}
 80023b8:	0005      	movs	r5, r0
 80023ba:	000e      	movs	r6, r1
 80023bc:	0031      	movs	r1, r6
 80023be:	b289      	uxth	r1, r1
 80023c0:	0028      	movs	r0, r5
 80023c2:	f7ff fcd6 	bl	8001d72 <ZbZclAttrFind>
 80023c6:	0004      	movs	r4, r0
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d101      	bne.n	80023d0 <??ZbZclAttrPersist_0>
 80023cc:	2000      	movs	r0, #0
 80023ce:	e00a      	b.n	80023e6 <??ZbZclAttrPersist_1>

080023d0 <??ZbZclAttrPersist_0>:
 80023d0:	68a0      	ldr	r0, [r4, #8]
 80023d2:	7900      	ldrb	r0, [r0, #4]
 80023d4:	0740      	lsls	r0, r0, #29
 80023d6:	d401      	bmi.n	80023dc <??ZbZclAttrPersist_2>
 80023d8:	2000      	movs	r0, #0
 80023da:	e004      	b.n	80023e6 <??ZbZclAttrPersist_1>

080023dc <??ZbZclAttrPersist_2>:
 80023dc:	0021      	movs	r1, r4
 80023de:	0028      	movs	r0, r5
 80023e0:	f7ff ffd5 	bl	800238e <ZbZclAttrPostWrite>
 80023e4:	2001      	movs	r0, #1

080023e6 <??ZbZclAttrPersist_1>:
 80023e6:	bd70      	pop	{r4, r5, r6, pc}

080023e8 <ZbZclAttrDefaultWrite>:
 80023e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ec:	0006      	movs	r6, r0
 80023ee:	000f      	movs	r7, r1
 80023f0:	0014      	movs	r4, r2
 80023f2:	4698      	mov	r8, r3
 80023f4:	2500      	movs	r5, #0
 80023f6:	f05f 0900 	movs.w	r9, #0
 80023fa:	2c00      	cmp	r4, #0
 80023fc:	d101      	bne.n	8002402 <??ZbZclAttrDefaultWrite_0>
 80023fe:	2001      	movs	r0, #1
 8002400:	e0d6      	b.n	80025b0 <??ZbZclAttrDefaultWrite_1>

08002402 <??ZbZclAttrDefaultWrite_0>:
 8002402:	68b8      	ldr	r0, [r7, #8]
 8002404:	7880      	ldrb	r0, [r0, #2]
 8002406:	2808      	cmp	r0, #8
 8002408:	d062      	beq.n	80024d0 <??ZbZclAttrDefaultWrite_2>
 800240a:	2809      	cmp	r0, #9
 800240c:	d063      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 800240e:	280a      	cmp	r0, #10
 8002410:	d064      	beq.n	80024dc <??ZbZclAttrDefaultWrite_4>
 8002412:	280b      	cmp	r0, #11
 8002414:	d065      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 8002416:	280c      	cmp	r0, #12
 8002418:	d066      	beq.n	80024e8 <??ZbZclAttrDefaultWrite_6>
 800241a:	280d      	cmp	r0, #13
 800241c:	d067      	beq.n	80024ee <??ZbZclAttrDefaultWrite_7>
 800241e:	280e      	cmp	r0, #14
 8002420:	d068      	beq.n	80024f4 <??ZbZclAttrDefaultWrite_8>
 8002422:	280f      	cmp	r0, #15
 8002424:	d069      	beq.n	80024fa <??ZbZclAttrDefaultWrite_9>
 8002426:	2810      	cmp	r0, #16
 8002428:	d052      	beq.n	80024d0 <??ZbZclAttrDefaultWrite_2>
 800242a:	2818      	cmp	r0, #24
 800242c:	d050      	beq.n	80024d0 <??ZbZclAttrDefaultWrite_2>
 800242e:	2819      	cmp	r0, #25
 8002430:	d051      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 8002432:	281a      	cmp	r0, #26
 8002434:	d052      	beq.n	80024dc <??ZbZclAttrDefaultWrite_4>
 8002436:	281b      	cmp	r0, #27
 8002438:	d053      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 800243a:	281c      	cmp	r0, #28
 800243c:	d054      	beq.n	80024e8 <??ZbZclAttrDefaultWrite_6>
 800243e:	281d      	cmp	r0, #29
 8002440:	d055      	beq.n	80024ee <??ZbZclAttrDefaultWrite_7>
 8002442:	281e      	cmp	r0, #30
 8002444:	d056      	beq.n	80024f4 <??ZbZclAttrDefaultWrite_8>
 8002446:	281f      	cmp	r0, #31
 8002448:	d057      	beq.n	80024fa <??ZbZclAttrDefaultWrite_9>
 800244a:	2820      	cmp	r0, #32
 800244c:	d040      	beq.n	80024d0 <??ZbZclAttrDefaultWrite_2>
 800244e:	2821      	cmp	r0, #33	; 0x21
 8002450:	d041      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 8002452:	2822      	cmp	r0, #34	; 0x22
 8002454:	d042      	beq.n	80024dc <??ZbZclAttrDefaultWrite_4>
 8002456:	2823      	cmp	r0, #35	; 0x23
 8002458:	d043      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 800245a:	2824      	cmp	r0, #36	; 0x24
 800245c:	d044      	beq.n	80024e8 <??ZbZclAttrDefaultWrite_6>
 800245e:	2825      	cmp	r0, #37	; 0x25
 8002460:	d045      	beq.n	80024ee <??ZbZclAttrDefaultWrite_7>
 8002462:	2826      	cmp	r0, #38	; 0x26
 8002464:	d046      	beq.n	80024f4 <??ZbZclAttrDefaultWrite_8>
 8002466:	2827      	cmp	r0, #39	; 0x27
 8002468:	d047      	beq.n	80024fa <??ZbZclAttrDefaultWrite_9>
 800246a:	2828      	cmp	r0, #40	; 0x28
 800246c:	d030      	beq.n	80024d0 <??ZbZclAttrDefaultWrite_2>
 800246e:	2829      	cmp	r0, #41	; 0x29
 8002470:	d031      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 8002472:	282a      	cmp	r0, #42	; 0x2a
 8002474:	d032      	beq.n	80024dc <??ZbZclAttrDefaultWrite_4>
 8002476:	282b      	cmp	r0, #43	; 0x2b
 8002478:	d033      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 800247a:	282c      	cmp	r0, #44	; 0x2c
 800247c:	d034      	beq.n	80024e8 <??ZbZclAttrDefaultWrite_6>
 800247e:	282d      	cmp	r0, #45	; 0x2d
 8002480:	d035      	beq.n	80024ee <??ZbZclAttrDefaultWrite_7>
 8002482:	282e      	cmp	r0, #46	; 0x2e
 8002484:	d036      	beq.n	80024f4 <??ZbZclAttrDefaultWrite_8>
 8002486:	282f      	cmp	r0, #47	; 0x2f
 8002488:	d037      	beq.n	80024fa <??ZbZclAttrDefaultWrite_9>
 800248a:	2830      	cmp	r0, #48	; 0x30
 800248c:	d020      	beq.n	80024d0 <??ZbZclAttrDefaultWrite_2>
 800248e:	2831      	cmp	r0, #49	; 0x31
 8002490:	d021      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 8002492:	2838      	cmp	r0, #56	; 0x38
 8002494:	d01f      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 8002496:	2839      	cmp	r0, #57	; 0x39
 8002498:	d023      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 800249a:	283a      	cmp	r0, #58	; 0x3a
 800249c:	d02d      	beq.n	80024fa <??ZbZclAttrDefaultWrite_9>
 800249e:	2841      	cmp	r0, #65	; 0x41
 80024a0:	d031      	beq.n	8002506 <??ZbZclAttrDefaultWrite_10>
 80024a2:	2842      	cmp	r0, #66	; 0x42
 80024a4:	d02f      	beq.n	8002506 <??ZbZclAttrDefaultWrite_10>
 80024a6:	2843      	cmp	r0, #67	; 0x43
 80024a8:	d049      	beq.n	800253e <??ZbZclAttrDefaultWrite_11>
 80024aa:	2844      	cmp	r0, #68	; 0x44
 80024ac:	d047      	beq.n	800253e <??ZbZclAttrDefaultWrite_11>
 80024ae:	28e0      	cmp	r0, #224	; 0xe0
 80024b0:	d017      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 80024b2:	28e1      	cmp	r0, #225	; 0xe1
 80024b4:	d015      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 80024b6:	28e2      	cmp	r0, #226	; 0xe2
 80024b8:	d013      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 80024ba:	28e8      	cmp	r0, #232	; 0xe8
 80024bc:	d00b      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 80024be:	28e9      	cmp	r0, #233	; 0xe9
 80024c0:	d009      	beq.n	80024d6 <??ZbZclAttrDefaultWrite_3>
 80024c2:	28ea      	cmp	r0, #234	; 0xea
 80024c4:	d00d      	beq.n	80024e2 <??ZbZclAttrDefaultWrite_5>
 80024c6:	28f0      	cmp	r0, #240	; 0xf0
 80024c8:	d017      	beq.n	80024fa <??ZbZclAttrDefaultWrite_9>
 80024ca:	28f1      	cmp	r0, #241	; 0xf1
 80024cc:	d018      	beq.n	8002500 <??ZbZclAttrDefaultWrite_12>
 80024ce:	e058      	b.n	8002582 <??ZbZclAttrDefaultWrite_13>

080024d0 <??ZbZclAttrDefaultWrite_2>:
 80024d0:	2001      	movs	r0, #1
 80024d2:	0005      	movs	r5, r0
 80024d4:	e057      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

080024d6 <??ZbZclAttrDefaultWrite_3>:
 80024d6:	2002      	movs	r0, #2
 80024d8:	0005      	movs	r5, r0
 80024da:	e054      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

080024dc <??ZbZclAttrDefaultWrite_4>:
 80024dc:	2003      	movs	r0, #3
 80024de:	0005      	movs	r5, r0
 80024e0:	e051      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

080024e2 <??ZbZclAttrDefaultWrite_5>:
 80024e2:	2004      	movs	r0, #4
 80024e4:	0005      	movs	r5, r0
 80024e6:	e04e      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

080024e8 <??ZbZclAttrDefaultWrite_6>:
 80024e8:	2005      	movs	r0, #5
 80024ea:	0005      	movs	r5, r0
 80024ec:	e04b      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

080024ee <??ZbZclAttrDefaultWrite_7>:
 80024ee:	2006      	movs	r0, #6
 80024f0:	0005      	movs	r5, r0
 80024f2:	e048      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

080024f4 <??ZbZclAttrDefaultWrite_8>:
 80024f4:	2007      	movs	r0, #7
 80024f6:	0005      	movs	r5, r0
 80024f8:	e045      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

080024fa <??ZbZclAttrDefaultWrite_9>:
 80024fa:	2008      	movs	r0, #8
 80024fc:	0005      	movs	r5, r0
 80024fe:	e042      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

08002500 <??ZbZclAttrDefaultWrite_12>:
 8002500:	2010      	movs	r0, #16
 8002502:	0005      	movs	r5, r0
 8002504:	e03f      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

08002506 <??ZbZclAttrDefaultWrite_10>:
 8002506:	6938      	ldr	r0, [r7, #16]
 8002508:	2800      	cmp	r0, #0
 800250a:	d102      	bne.n	8002512 <??ZbZclAttrDefaultWrite_15>
 800250c:	2089      	movs	r0, #137	; 0x89
 800250e:	4681      	mov	r9, r0
 8002510:	e039      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

08002512 <??ZbZclAttrDefaultWrite_15>:
 8002512:	7820      	ldrb	r0, [r4, #0]
 8002514:	0001      	movs	r1, r0
 8002516:	b2c9      	uxtb	r1, r1
 8002518:	29ff      	cmp	r1, #255	; 0xff
 800251a:	d105      	bne.n	8002528 <??ZbZclAttrDefaultWrite_16>
 800251c:	21ff      	movs	r1, #255	; 0xff
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	7011      	strb	r1, [r2, #0]
 8002522:	2100      	movs	r1, #0
 8002524:	000d      	movs	r5, r1
 8002526:	e02e      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

08002528 <??ZbZclAttrDefaultWrite_16>:
 8002528:	0001      	movs	r1, r0
 800252a:	b2c9      	uxtb	r1, r1
 800252c:	1c49      	adds	r1, r1, #1
 800252e:	000d      	movs	r5, r1
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	42a9      	cmp	r1, r5
 8002534:	d202      	bcs.n	800253c <??ZbZclAttrDefaultWrite_17>
 8002536:	2189      	movs	r1, #137	; 0x89
 8002538:	4689      	mov	r9, r1
 800253a:	e024      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

0800253c <??ZbZclAttrDefaultWrite_17>:
 800253c:	e023      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

0800253e <??ZbZclAttrDefaultWrite_11>:
 800253e:	6938      	ldr	r0, [r7, #16]
 8002540:	2802      	cmp	r0, #2
 8002542:	d202      	bcs.n	800254a <??ZbZclAttrDefaultWrite_18>
 8002544:	2089      	movs	r0, #137	; 0x89
 8002546:	4681      	mov	r9, r0
 8002548:	e01d      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

0800254a <??ZbZclAttrDefaultWrite_18>:
 800254a:	0020      	movs	r0, r4
 800254c:	f7ff fb41 	bl	8001bd2 <pletoh16>
 8002550:	4682      	mov	sl, r0
 8002552:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002556:	4650      	mov	r0, sl
 8002558:	000a      	movs	r2, r1
 800255a:	b280      	uxth	r0, r0
 800255c:	4290      	cmp	r0, r2
 800255e:	d105      	bne.n	800256c <??ZbZclAttrDefaultWrite_19>
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff fb82 	bl	8001c6a <putle16>
 8002566:	2000      	movs	r0, #0
 8002568:	0005      	movs	r5, r0
 800256a:	e00c      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

0800256c <??ZbZclAttrDefaultWrite_19>:
 800256c:	4650      	mov	r0, sl
 800256e:	b280      	uxth	r0, r0
 8002570:	1c80      	adds	r0, r0, #2
 8002572:	0005      	movs	r5, r0
 8002574:	6938      	ldr	r0, [r7, #16]
 8002576:	42a8      	cmp	r0, r5
 8002578:	d202      	bcs.n	8002580 <??ZbZclAttrDefaultWrite_20>
 800257a:	2089      	movs	r0, #137	; 0x89
 800257c:	4681      	mov	r9, r0
 800257e:	e002      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

08002580 <??ZbZclAttrDefaultWrite_20>:
 8002580:	e001      	b.n	8002586 <??ZbZclAttrDefaultWrite_14>

08002582 <??ZbZclAttrDefaultWrite_13>:
 8002582:	2086      	movs	r0, #134	; 0x86
 8002584:	4681      	mov	r9, r0

08002586 <??ZbZclAttrDefaultWrite_14>:
 8002586:	4648      	mov	r0, r9
 8002588:	b2c0      	uxtb	r0, r0
 800258a:	2800      	cmp	r0, #0
 800258c:	d10e      	bne.n	80025ac <??ZbZclAttrDefaultWrite_21>
 800258e:	4640      	mov	r0, r8
 8002590:	b280      	uxth	r0, r0
 8002592:	07c0      	lsls	r0, r0, #31
 8002594:	d40a      	bmi.n	80025ac <??ZbZclAttrDefaultWrite_21>
 8002596:	2d00      	cmp	r5, #0
 8002598:	d008      	beq.n	80025ac <??ZbZclAttrDefaultWrite_21>
 800259a:	9500      	str	r5, [sp, #0]
 800259c:	46a2      	mov	sl, r4
 800259e:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 80025a2:	9a00      	ldr	r2, [sp, #0]
 80025a4:	4651      	mov	r1, sl
 80025a6:	4658      	mov	r0, fp
 80025a8:	f013 f88b 	bl	80156c2 <__aeabi_memcpy>

080025ac <??ZbZclAttrDefaultWrite_21>:
 80025ac:	4648      	mov	r0, r9
 80025ae:	b2c0      	uxtb	r0, r0

080025b0 <??ZbZclAttrDefaultWrite_1>:
 80025b0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080025b4 <ZbZclAttrDefaultValue>:
 80025b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	0004      	movs	r4, r0
 80025ba:	4688      	mov	r8, r1
 80025bc:	0015      	movs	r5, r2
 80025be:	2600      	movs	r6, #0
 80025c0:	f05f 37ff 	movs.w	r7, #4294967295	; 0xffffffff
 80025c4:	0020      	movs	r0, r4
 80025c6:	b2c0      	uxtb	r0, r0
 80025c8:	2800      	cmp	r0, #0
 80025ca:	f000 80a1 	beq.w	8002710 <??ZbZclAttrDefaultValue_0>
 80025ce:	2808      	cmp	r0, #8
 80025d0:	f000 80e7 	beq.w	80027a2 <??ZbZclAttrDefaultValue_1>
 80025d4:	2809      	cmp	r0, #9
 80025d6:	f000 80da 	beq.w	800278e <??ZbZclAttrDefaultValue_2>
 80025da:	280a      	cmp	r0, #10
 80025dc:	f000 80cd 	beq.w	800277a <??ZbZclAttrDefaultValue_3>
 80025e0:	280b      	cmp	r0, #11
 80025e2:	f000 80c0 	beq.w	8002766 <??ZbZclAttrDefaultValue_4>
 80025e6:	280c      	cmp	r0, #12
 80025e8:	f000 80b3 	beq.w	8002752 <??ZbZclAttrDefaultValue_5>
 80025ec:	280d      	cmp	r0, #13
 80025ee:	f000 80a6 	beq.w	800273e <??ZbZclAttrDefaultValue_6>
 80025f2:	280e      	cmp	r0, #14
 80025f4:	f000 8099 	beq.w	800272a <??ZbZclAttrDefaultValue_7>
 80025f8:	280f      	cmp	r0, #15
 80025fa:	f000 808c 	beq.w	8002716 <??ZbZclAttrDefaultValue_8>
 80025fe:	2810      	cmp	r0, #16
 8002600:	f000 80db 	beq.w	80027ba <??ZbZclAttrDefaultValue_9>
 8002604:	2818      	cmp	r0, #24
 8002606:	f000 8126 	beq.w	8002856 <??ZbZclAttrDefaultValue_10>
 800260a:	2819      	cmp	r0, #25
 800260c:	f000 8119 	beq.w	8002842 <??ZbZclAttrDefaultValue_11>
 8002610:	281a      	cmp	r0, #26
 8002612:	f000 810c 	beq.w	800282e <??ZbZclAttrDefaultValue_12>
 8002616:	281b      	cmp	r0, #27
 8002618:	f000 80ff 	beq.w	800281a <??ZbZclAttrDefaultValue_13>
 800261c:	281c      	cmp	r0, #28
 800261e:	f000 80f2 	beq.w	8002806 <??ZbZclAttrDefaultValue_14>
 8002622:	281d      	cmp	r0, #29
 8002624:	f000 80e5 	beq.w	80027f2 <??ZbZclAttrDefaultValue_15>
 8002628:	281e      	cmp	r0, #30
 800262a:	f000 80d8 	beq.w	80027de <??ZbZclAttrDefaultValue_16>
 800262e:	281f      	cmp	r0, #31
 8002630:	f000 80cb 	beq.w	80027ca <??ZbZclAttrDefaultValue_17>
 8002634:	2820      	cmp	r0, #32
 8002636:	f000 80b4 	beq.w	80027a2 <??ZbZclAttrDefaultValue_1>
 800263a:	2821      	cmp	r0, #33	; 0x21
 800263c:	f000 80a7 	beq.w	800278e <??ZbZclAttrDefaultValue_2>
 8002640:	2822      	cmp	r0, #34	; 0x22
 8002642:	f000 809a 	beq.w	800277a <??ZbZclAttrDefaultValue_3>
 8002646:	2823      	cmp	r0, #35	; 0x23
 8002648:	f000 808d 	beq.w	8002766 <??ZbZclAttrDefaultValue_4>
 800264c:	2824      	cmp	r0, #36	; 0x24
 800264e:	f000 8080 	beq.w	8002752 <??ZbZclAttrDefaultValue_5>
 8002652:	2825      	cmp	r0, #37	; 0x25
 8002654:	d073      	beq.n	800273e <??ZbZclAttrDefaultValue_6>
 8002656:	2826      	cmp	r0, #38	; 0x26
 8002658:	d067      	beq.n	800272a <??ZbZclAttrDefaultValue_7>
 800265a:	2827      	cmp	r0, #39	; 0x27
 800265c:	d05b      	beq.n	8002716 <??ZbZclAttrDefaultValue_8>
 800265e:	2828      	cmp	r0, #40	; 0x28
 8002660:	f000 814b 	beq.w	80028fa <??ZbZclAttrDefaultValue_18>
 8002664:	2829      	cmp	r0, #41	; 0x29
 8002666:	f000 813e 	beq.w	80028e6 <??ZbZclAttrDefaultValue_19>
 800266a:	282a      	cmp	r0, #42	; 0x2a
 800266c:	f000 8131 	beq.w	80028d2 <??ZbZclAttrDefaultValue_20>
 8002670:	282b      	cmp	r0, #43	; 0x2b
 8002672:	f000 8124 	beq.w	80028be <??ZbZclAttrDefaultValue_21>
 8002676:	282c      	cmp	r0, #44	; 0x2c
 8002678:	f000 8117 	beq.w	80028aa <??ZbZclAttrDefaultValue_22>
 800267c:	282d      	cmp	r0, #45	; 0x2d
 800267e:	f000 810a 	beq.w	8002896 <??ZbZclAttrDefaultValue_23>
 8002682:	282e      	cmp	r0, #46	; 0x2e
 8002684:	f000 80fd 	beq.w	8002882 <??ZbZclAttrDefaultValue_24>
 8002688:	282f      	cmp	r0, #47	; 0x2f
 800268a:	f000 80f0 	beq.w	800286e <??ZbZclAttrDefaultValue_25>
 800268e:	2830      	cmp	r0, #48	; 0x30
 8002690:	f000 8087 	beq.w	80027a2 <??ZbZclAttrDefaultValue_1>
 8002694:	2831      	cmp	r0, #49	; 0x31
 8002696:	d07a      	beq.n	800278e <??ZbZclAttrDefaultValue_2>
 8002698:	2838      	cmp	r0, #56	; 0x38
 800269a:	f000 813a 	beq.w	8002912 <??ZbZclAttrDefaultValue_26>
 800269e:	2839      	cmp	r0, #57	; 0x39
 80026a0:	f000 8142 	beq.w	8002928 <??ZbZclAttrDefaultValue_27>
 80026a4:	283a      	cmp	r0, #58	; 0x3a
 80026a6:	f000 8149 	beq.w	800293c <??ZbZclAttrDefaultValue_28>
 80026aa:	2841      	cmp	r0, #65	; 0x41
 80026ac:	f000 8152 	beq.w	8002954 <??ZbZclAttrDefaultValue_29>
 80026b0:	2842      	cmp	r0, #66	; 0x42
 80026b2:	f000 8159 	beq.w	8002968 <??ZbZclAttrDefaultValue_30>
 80026b6:	2843      	cmp	r0, #67	; 0x43
 80026b8:	f000 8160 	beq.w	800297c <??ZbZclAttrDefaultValue_31>
 80026bc:	2844      	cmp	r0, #68	; 0x44
 80026be:	f000 8168 	beq.w	8002992 <??ZbZclAttrDefaultValue_32>
 80026c2:	2848      	cmp	r0, #72	; 0x48
 80026c4:	f000 818b 	beq.w	80029de <??ZbZclAttrDefaultValue_33>
 80026c8:	284c      	cmp	r0, #76	; 0x4c
 80026ca:	f000 8192 	beq.w	80029f2 <??ZbZclAttrDefaultValue_34>
 80026ce:	2850      	cmp	r0, #80	; 0x50
 80026d0:	f000 8199 	beq.w	8002a06 <??ZbZclAttrDefaultValue_35>
 80026d4:	2851      	cmp	r0, #81	; 0x51
 80026d6:	f000 81a0 	beq.w	8002a1a <??ZbZclAttrDefaultValue_36>
 80026da:	28e0      	cmp	r0, #224	; 0xe0
 80026dc:	f000 81a7 	beq.w	8002a2e <??ZbZclAttrDefaultValue_37>
 80026e0:	28e1      	cmp	r0, #225	; 0xe1
 80026e2:	f000 81ae 	beq.w	8002a42 <??ZbZclAttrDefaultValue_38>
 80026e6:	28e2      	cmp	r0, #226	; 0xe2
 80026e8:	f000 81b5 	beq.w	8002a56 <??ZbZclAttrDefaultValue_39>
 80026ec:	28e8      	cmp	r0, #232	; 0xe8
 80026ee:	f000 81bc 	beq.w	8002a6a <??ZbZclAttrDefaultValue_40>
 80026f2:	28e9      	cmp	r0, #233	; 0xe9
 80026f4:	f000 81c3 	beq.w	8002a7e <??ZbZclAttrDefaultValue_41>
 80026f8:	28ea      	cmp	r0, #234	; 0xea
 80026fa:	f000 81ca 	beq.w	8002a92 <??ZbZclAttrDefaultValue_42>
 80026fe:	28f0      	cmp	r0, #240	; 0xf0
 8002700:	f000 8152 	beq.w	80029a8 <??ZbZclAttrDefaultValue_43>
 8002704:	28f1      	cmp	r0, #241	; 0xf1
 8002706:	f000 815b 	beq.w	80029c0 <??ZbZclAttrDefaultValue_44>
 800270a:	28ff      	cmp	r0, #255	; 0xff
 800270c:	f040 81cb 	bne.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002710 <??ZbZclAttrDefaultValue_0>:
 8002710:	2000      	movs	r0, #0
 8002712:	0007      	movs	r7, r0
 8002714:	e1c7      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002716 <??ZbZclAttrDefaultValue_8>:
 8002716:	1c70      	adds	r0, r6, #1
 8002718:	4285      	cmp	r5, r0
 800271a:	f0c0 81c4 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800271e <??ZbZclAttrDefaultValue_47>:
 800271e:	20ff      	movs	r0, #255	; 0xff
 8002720:	f888 0000 	strb.w	r0, [r8]
 8002724:	f118 0801 	adds.w	r8, r8, #1
 8002728:	1c76      	adds	r6, r6, #1

0800272a <??ZbZclAttrDefaultValue_7>:
 800272a:	1c70      	adds	r0, r6, #1
 800272c:	4285      	cmp	r5, r0
 800272e:	f0c0 81ba 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002732 <??ZbZclAttrDefaultValue_48>:
 8002732:	20ff      	movs	r0, #255	; 0xff
 8002734:	f888 0000 	strb.w	r0, [r8]
 8002738:	f118 0801 	adds.w	r8, r8, #1
 800273c:	1c76      	adds	r6, r6, #1

0800273e <??ZbZclAttrDefaultValue_6>:
 800273e:	1c70      	adds	r0, r6, #1
 8002740:	4285      	cmp	r5, r0
 8002742:	f0c0 81b0 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002746 <??ZbZclAttrDefaultValue_49>:
 8002746:	20ff      	movs	r0, #255	; 0xff
 8002748:	f888 0000 	strb.w	r0, [r8]
 800274c:	f118 0801 	adds.w	r8, r8, #1
 8002750:	1c76      	adds	r6, r6, #1

08002752 <??ZbZclAttrDefaultValue_5>:
 8002752:	1c70      	adds	r0, r6, #1
 8002754:	4285      	cmp	r5, r0
 8002756:	f0c0 81a6 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800275a <??ZbZclAttrDefaultValue_50>:
 800275a:	20ff      	movs	r0, #255	; 0xff
 800275c:	f888 0000 	strb.w	r0, [r8]
 8002760:	f118 0801 	adds.w	r8, r8, #1
 8002764:	1c76      	adds	r6, r6, #1

08002766 <??ZbZclAttrDefaultValue_4>:
 8002766:	1c70      	adds	r0, r6, #1
 8002768:	4285      	cmp	r5, r0
 800276a:	f0c0 819c 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800276e <??ZbZclAttrDefaultValue_51>:
 800276e:	20ff      	movs	r0, #255	; 0xff
 8002770:	f888 0000 	strb.w	r0, [r8]
 8002774:	f118 0801 	adds.w	r8, r8, #1
 8002778:	1c76      	adds	r6, r6, #1

0800277a <??ZbZclAttrDefaultValue_3>:
 800277a:	1c70      	adds	r0, r6, #1
 800277c:	4285      	cmp	r5, r0
 800277e:	f0c0 8192 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002782 <??ZbZclAttrDefaultValue_52>:
 8002782:	20ff      	movs	r0, #255	; 0xff
 8002784:	f888 0000 	strb.w	r0, [r8]
 8002788:	f118 0801 	adds.w	r8, r8, #1
 800278c:	1c76      	adds	r6, r6, #1

0800278e <??ZbZclAttrDefaultValue_2>:
 800278e:	1c70      	adds	r0, r6, #1
 8002790:	4285      	cmp	r5, r0
 8002792:	f0c0 8188 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002796 <??ZbZclAttrDefaultValue_53>:
 8002796:	20ff      	movs	r0, #255	; 0xff
 8002798:	f888 0000 	strb.w	r0, [r8]
 800279c:	f118 0801 	adds.w	r8, r8, #1
 80027a0:	1c76      	adds	r6, r6, #1

080027a2 <??ZbZclAttrDefaultValue_1>:
 80027a2:	1c70      	adds	r0, r6, #1
 80027a4:	4285      	cmp	r5, r0
 80027a6:	f0c0 817e 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080027aa <??ZbZclAttrDefaultValue_54>:
 80027aa:	20ff      	movs	r0, #255	; 0xff
 80027ac:	f888 0000 	strb.w	r0, [r8]
 80027b0:	f118 0801 	adds.w	r8, r8, #1
 80027b4:	1c76      	adds	r6, r6, #1
 80027b6:	0037      	movs	r7, r6
 80027b8:	e175      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080027ba <??ZbZclAttrDefaultValue_9>:
 80027ba:	2000      	movs	r0, #0
 80027bc:	f888 0000 	strb.w	r0, [r8]
 80027c0:	f118 0801 	adds.w	r8, r8, #1
 80027c4:	2001      	movs	r0, #1
 80027c6:	0007      	movs	r7, r0
 80027c8:	e16d      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080027ca <??ZbZclAttrDefaultValue_17>:
 80027ca:	1c70      	adds	r0, r6, #1
 80027cc:	4285      	cmp	r5, r0
 80027ce:	f0c0 816a 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080027d2 <??ZbZclAttrDefaultValue_55>:
 80027d2:	2000      	movs	r0, #0
 80027d4:	f888 0000 	strb.w	r0, [r8]
 80027d8:	f118 0801 	adds.w	r8, r8, #1
 80027dc:	1c76      	adds	r6, r6, #1

080027de <??ZbZclAttrDefaultValue_16>:
 80027de:	1c70      	adds	r0, r6, #1
 80027e0:	4285      	cmp	r5, r0
 80027e2:	f0c0 8160 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080027e6 <??ZbZclAttrDefaultValue_56>:
 80027e6:	2000      	movs	r0, #0
 80027e8:	f888 0000 	strb.w	r0, [r8]
 80027ec:	f118 0801 	adds.w	r8, r8, #1
 80027f0:	1c76      	adds	r6, r6, #1

080027f2 <??ZbZclAttrDefaultValue_15>:
 80027f2:	1c70      	adds	r0, r6, #1
 80027f4:	4285      	cmp	r5, r0
 80027f6:	f0c0 8156 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080027fa <??ZbZclAttrDefaultValue_57>:
 80027fa:	2000      	movs	r0, #0
 80027fc:	f888 0000 	strb.w	r0, [r8]
 8002800:	f118 0801 	adds.w	r8, r8, #1
 8002804:	1c76      	adds	r6, r6, #1

08002806 <??ZbZclAttrDefaultValue_14>:
 8002806:	1c70      	adds	r0, r6, #1
 8002808:	4285      	cmp	r5, r0
 800280a:	f0c0 814c 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800280e <??ZbZclAttrDefaultValue_58>:
 800280e:	2000      	movs	r0, #0
 8002810:	f888 0000 	strb.w	r0, [r8]
 8002814:	f118 0801 	adds.w	r8, r8, #1
 8002818:	1c76      	adds	r6, r6, #1

0800281a <??ZbZclAttrDefaultValue_13>:
 800281a:	1c70      	adds	r0, r6, #1
 800281c:	4285      	cmp	r5, r0
 800281e:	f0c0 8142 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002822 <??ZbZclAttrDefaultValue_59>:
 8002822:	2000      	movs	r0, #0
 8002824:	f888 0000 	strb.w	r0, [r8]
 8002828:	f118 0801 	adds.w	r8, r8, #1
 800282c:	1c76      	adds	r6, r6, #1

0800282e <??ZbZclAttrDefaultValue_12>:
 800282e:	1c70      	adds	r0, r6, #1
 8002830:	4285      	cmp	r5, r0
 8002832:	f0c0 8138 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002836 <??ZbZclAttrDefaultValue_60>:
 8002836:	2000      	movs	r0, #0
 8002838:	f888 0000 	strb.w	r0, [r8]
 800283c:	f118 0801 	adds.w	r8, r8, #1
 8002840:	1c76      	adds	r6, r6, #1

08002842 <??ZbZclAttrDefaultValue_11>:
 8002842:	1c70      	adds	r0, r6, #1
 8002844:	4285      	cmp	r5, r0
 8002846:	f0c0 812e 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800284a <??ZbZclAttrDefaultValue_61>:
 800284a:	2000      	movs	r0, #0
 800284c:	f888 0000 	strb.w	r0, [r8]
 8002850:	f118 0801 	adds.w	r8, r8, #1
 8002854:	1c76      	adds	r6, r6, #1

08002856 <??ZbZclAttrDefaultValue_10>:
 8002856:	1c70      	adds	r0, r6, #1
 8002858:	4285      	cmp	r5, r0
 800285a:	f0c0 8124 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800285e <??ZbZclAttrDefaultValue_62>:
 800285e:	2000      	movs	r0, #0
 8002860:	f888 0000 	strb.w	r0, [r8]
 8002864:	f118 0801 	adds.w	r8, r8, #1
 8002868:	1c76      	adds	r6, r6, #1
 800286a:	0037      	movs	r7, r6
 800286c:	e11b      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

0800286e <??ZbZclAttrDefaultValue_25>:
 800286e:	1c70      	adds	r0, r6, #1
 8002870:	4285      	cmp	r5, r0
 8002872:	f0c0 8118 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002876 <??ZbZclAttrDefaultValue_63>:
 8002876:	2000      	movs	r0, #0
 8002878:	f888 0000 	strb.w	r0, [r8]
 800287c:	f118 0801 	adds.w	r8, r8, #1
 8002880:	1c76      	adds	r6, r6, #1

08002882 <??ZbZclAttrDefaultValue_24>:
 8002882:	1c70      	adds	r0, r6, #1
 8002884:	4285      	cmp	r5, r0
 8002886:	f0c0 810e 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800288a <??ZbZclAttrDefaultValue_64>:
 800288a:	2000      	movs	r0, #0
 800288c:	f888 0000 	strb.w	r0, [r8]
 8002890:	f118 0801 	adds.w	r8, r8, #1
 8002894:	1c76      	adds	r6, r6, #1

08002896 <??ZbZclAttrDefaultValue_23>:
 8002896:	1c70      	adds	r0, r6, #1
 8002898:	4285      	cmp	r5, r0
 800289a:	f0c0 8104 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800289e <??ZbZclAttrDefaultValue_65>:
 800289e:	2000      	movs	r0, #0
 80028a0:	f888 0000 	strb.w	r0, [r8]
 80028a4:	f118 0801 	adds.w	r8, r8, #1
 80028a8:	1c76      	adds	r6, r6, #1

080028aa <??ZbZclAttrDefaultValue_22>:
 80028aa:	1c70      	adds	r0, r6, #1
 80028ac:	4285      	cmp	r5, r0
 80028ae:	f0c0 80fa 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080028b2 <??ZbZclAttrDefaultValue_66>:
 80028b2:	2000      	movs	r0, #0
 80028b4:	f888 0000 	strb.w	r0, [r8]
 80028b8:	f118 0801 	adds.w	r8, r8, #1
 80028bc:	1c76      	adds	r6, r6, #1

080028be <??ZbZclAttrDefaultValue_21>:
 80028be:	1c70      	adds	r0, r6, #1
 80028c0:	4285      	cmp	r5, r0
 80028c2:	f0c0 80f0 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080028c6 <??ZbZclAttrDefaultValue_67>:
 80028c6:	2000      	movs	r0, #0
 80028c8:	f888 0000 	strb.w	r0, [r8]
 80028cc:	f118 0801 	adds.w	r8, r8, #1
 80028d0:	1c76      	adds	r6, r6, #1

080028d2 <??ZbZclAttrDefaultValue_20>:
 80028d2:	1c70      	adds	r0, r6, #1
 80028d4:	4285      	cmp	r5, r0
 80028d6:	f0c0 80e6 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080028da <??ZbZclAttrDefaultValue_68>:
 80028da:	2000      	movs	r0, #0
 80028dc:	f888 0000 	strb.w	r0, [r8]
 80028e0:	f118 0801 	adds.w	r8, r8, #1
 80028e4:	1c76      	adds	r6, r6, #1

080028e6 <??ZbZclAttrDefaultValue_19>:
 80028e6:	1c70      	adds	r0, r6, #1
 80028e8:	4285      	cmp	r5, r0
 80028ea:	f0c0 80dc 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

080028ee <??ZbZclAttrDefaultValue_69>:
 80028ee:	2000      	movs	r0, #0
 80028f0:	f888 0000 	strb.w	r0, [r8]
 80028f4:	f118 0801 	adds.w	r8, r8, #1
 80028f8:	1c76      	adds	r6, r6, #1

080028fa <??ZbZclAttrDefaultValue_18>:
 80028fa:	1c70      	adds	r0, r6, #1
 80028fc:	4285      	cmp	r5, r0
 80028fe:	f0c0 80d2 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002902 <??ZbZclAttrDefaultValue_70>:
 8002902:	2080      	movs	r0, #128	; 0x80
 8002904:	f888 0000 	strb.w	r0, [r8]
 8002908:	f118 0801 	adds.w	r8, r8, #1
 800290c:	1c76      	adds	r6, r6, #1
 800290e:	0037      	movs	r7, r6
 8002910:	e0c9      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002912 <??ZbZclAttrDefaultValue_26>:
 8002912:	2d02      	cmp	r5, #2
 8002914:	f0c0 80c7 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002918 <??ZbZclAttrDefaultValue_71>:
 8002918:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800291c:	4640      	mov	r0, r8
 800291e:	f7ff f9a4 	bl	8001c6a <putle16>
 8002922:	2002      	movs	r0, #2
 8002924:	0007      	movs	r7, r0
 8002926:	e0be      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002928 <??ZbZclAttrDefaultValue_27>:
 8002928:	2d04      	cmp	r5, #4
 800292a:	f0c0 80bc 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800292e <??ZbZclAttrDefaultValue_72>:
 800292e:	495f      	ldr	r1, [pc, #380]	; (8002aac <??DataTable1>)
 8002930:	4640      	mov	r0, r8
 8002932:	f7ff f9ac 	bl	8001c8e <putle32>
 8002936:	2004      	movs	r0, #4
 8002938:	0007      	movs	r7, r0
 800293a:	e0b4      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

0800293c <??ZbZclAttrDefaultValue_28>:
 800293c:	2d08      	cmp	r5, #8
 800293e:	f0c0 80b2 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002942 <??ZbZclAttrDefaultValue_73>:
 8002942:	f07f 0201 	mvns.w	r2, #1
 8002946:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <??DataTable1_1>)
 8002948:	4640      	mov	r0, r8
 800294a:	f7ff f9d3 	bl	8001cf4 <putle64>
 800294e:	2008      	movs	r0, #8
 8002950:	0007      	movs	r7, r0
 8002952:	e0a8      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002954 <??ZbZclAttrDefaultValue_29>:
 8002954:	2d02      	cmp	r5, #2
 8002956:	f0c0 80a6 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800295a <??ZbZclAttrDefaultValue_74>:
 800295a:	21ff      	movs	r1, #255	; 0xff
 800295c:	4640      	mov	r0, r8
 800295e:	f7ff f984 	bl	8001c6a <putle16>
 8002962:	2002      	movs	r0, #2
 8002964:	0007      	movs	r7, r0
 8002966:	e09e      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002968 <??ZbZclAttrDefaultValue_30>:
 8002968:	2d02      	cmp	r5, #2
 800296a:	f0c0 809c 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

0800296e <??ZbZclAttrDefaultValue_75>:
 800296e:	21ff      	movs	r1, #255	; 0xff
 8002970:	4640      	mov	r0, r8
 8002972:	f7ff f97a 	bl	8001c6a <putle16>
 8002976:	2002      	movs	r0, #2
 8002978:	0007      	movs	r7, r0
 800297a:	e094      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

0800297c <??ZbZclAttrDefaultValue_31>:
 800297c:	2d04      	cmp	r5, #4
 800297e:	f0c0 8092 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002982 <??ZbZclAttrDefaultValue_76>:
 8002982:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002986:	4640      	mov	r0, r8
 8002988:	f7ff f981 	bl	8001c8e <putle32>
 800298c:	2004      	movs	r0, #4
 800298e:	0007      	movs	r7, r0
 8002990:	e089      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002992 <??ZbZclAttrDefaultValue_32>:
 8002992:	2d04      	cmp	r5, #4
 8002994:	f0c0 8087 	bcc.w	8002aa6 <??ZbZclAttrDefaultValue_45>

08002998 <??ZbZclAttrDefaultValue_77>:
 8002998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800299c:	4640      	mov	r0, r8
 800299e:	f7ff f976 	bl	8001c8e <putle32>
 80029a2:	2004      	movs	r0, #4
 80029a4:	0007      	movs	r7, r0
 80029a6:	e07e      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029a8 <??ZbZclAttrDefaultValue_43>:
 80029a8:	2d08      	cmp	r5, #8
 80029aa:	d37c      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029ac <??ZbZclAttrDefaultValue_78>:
 80029ac:	f05f 32ff 	movs.w	r2, #4294967295	; 0xffffffff
 80029b0:	f05f 33ff 	movs.w	r3, #4294967295	; 0xffffffff
 80029b4:	4640      	mov	r0, r8
 80029b6:	f7ff f99d 	bl	8001cf4 <putle64>
 80029ba:	2008      	movs	r0, #8
 80029bc:	0007      	movs	r7, r0
 80029be:	e072      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029c0 <??ZbZclAttrDefaultValue_44>:
 80029c0:	2d10      	cmp	r5, #16
 80029c2:	d370      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029c4 <??ZbZclAttrDefaultValue_79>:
 80029c4:	f05f 0910 	movs.w	r9, #16
 80029c8:	f05f 0a00 	movs.w	sl, #0
 80029cc:	46c3      	mov	fp, r8
 80029ce:	4652      	mov	r2, sl
 80029d0:	4649      	mov	r1, r9
 80029d2:	4658      	mov	r0, fp
 80029d4:	f003 f8ff 	bl	8005bd6 <__aeabi_memset>
 80029d8:	2010      	movs	r0, #16
 80029da:	0007      	movs	r7, r0
 80029dc:	e063      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029de <??ZbZclAttrDefaultValue_33>:
 80029de:	2d02      	cmp	r5, #2
 80029e0:	d361      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029e2 <??ZbZclAttrDefaultValue_80>:
 80029e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029e6:	4640      	mov	r0, r8
 80029e8:	f7ff f93f 	bl	8001c6a <putle16>
 80029ec:	2002      	movs	r0, #2
 80029ee:	0007      	movs	r7, r0
 80029f0:	e059      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029f2 <??ZbZclAttrDefaultValue_34>:
 80029f2:	2d02      	cmp	r5, #2
 80029f4:	d357      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

080029f6 <??ZbZclAttrDefaultValue_81>:
 80029f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029fa:	4640      	mov	r0, r8
 80029fc:	f7ff f935 	bl	8001c6a <putle16>
 8002a00:	2002      	movs	r0, #2
 8002a02:	0007      	movs	r7, r0
 8002a04:	e04f      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a06 <??ZbZclAttrDefaultValue_35>:
 8002a06:	2d02      	cmp	r5, #2
 8002a08:	d34d      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a0a <??ZbZclAttrDefaultValue_82>:
 8002a0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a0e:	4640      	mov	r0, r8
 8002a10:	f7ff f92b 	bl	8001c6a <putle16>
 8002a14:	2002      	movs	r0, #2
 8002a16:	0007      	movs	r7, r0
 8002a18:	e045      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a1a <??ZbZclAttrDefaultValue_36>:
 8002a1a:	2d02      	cmp	r5, #2
 8002a1c:	d343      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a1e <??ZbZclAttrDefaultValue_83>:
 8002a1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a22:	4640      	mov	r0, r8
 8002a24:	f7ff f921 	bl	8001c6a <putle16>
 8002a28:	2002      	movs	r0, #2
 8002a2a:	0007      	movs	r7, r0
 8002a2c:	e03b      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a2e <??ZbZclAttrDefaultValue_37>:
 8002a2e:	2d04      	cmp	r5, #4
 8002a30:	d339      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a32 <??ZbZclAttrDefaultValue_84>:
 8002a32:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8002a36:	4640      	mov	r0, r8
 8002a38:	f7ff f929 	bl	8001c8e <putle32>
 8002a3c:	2004      	movs	r0, #4
 8002a3e:	0007      	movs	r7, r0
 8002a40:	e031      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a42 <??ZbZclAttrDefaultValue_38>:
 8002a42:	2d04      	cmp	r5, #4
 8002a44:	d32f      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a46 <??ZbZclAttrDefaultValue_85>:
 8002a46:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	f7ff f91f 	bl	8001c8e <putle32>
 8002a50:	2004      	movs	r0, #4
 8002a52:	0007      	movs	r7, r0
 8002a54:	e027      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a56 <??ZbZclAttrDefaultValue_39>:
 8002a56:	2d04      	cmp	r5, #4
 8002a58:	d325      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a5a <??ZbZclAttrDefaultValue_86>:
 8002a5a:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8002a5e:	4640      	mov	r0, r8
 8002a60:	f7ff f915 	bl	8001c8e <putle32>
 8002a64:	2004      	movs	r0, #4
 8002a66:	0007      	movs	r7, r0
 8002a68:	e01d      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a6a <??ZbZclAttrDefaultValue_40>:
 8002a6a:	2d02      	cmp	r5, #2
 8002a6c:	d31b      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a6e <??ZbZclAttrDefaultValue_87>:
 8002a6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a72:	4640      	mov	r0, r8
 8002a74:	f7ff f8f9 	bl	8001c6a <putle16>
 8002a78:	2002      	movs	r0, #2
 8002a7a:	0007      	movs	r7, r0
 8002a7c:	e013      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a7e <??ZbZclAttrDefaultValue_41>:
 8002a7e:	2d02      	cmp	r5, #2
 8002a80:	d311      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a82 <??ZbZclAttrDefaultValue_88>:
 8002a82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a86:	4640      	mov	r0, r8
 8002a88:	f7ff f8ef 	bl	8001c6a <putle16>
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	0007      	movs	r7, r0
 8002a90:	e009      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a92 <??ZbZclAttrDefaultValue_42>:
 8002a92:	2d04      	cmp	r5, #4
 8002a94:	d307      	bcc.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002a96 <??ZbZclAttrDefaultValue_89>:
 8002a96:	f05f 31ff 	movs.w	r1, #4294967295	; 0xffffffff
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	f7ff f8f7 	bl	8001c8e <putle32>
 8002aa0:	2004      	movs	r0, #4
 8002aa2:	0007      	movs	r7, r0
 8002aa4:	e7ff      	b.n	8002aa6 <??ZbZclAttrDefaultValue_45>

08002aa6 <??ZbZclAttrDefaultValue_45>:
 8002aa6:	0038      	movs	r0, r7
 8002aa8:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002aac <??DataTable1>:
 8002aac:	fffe 00ff                                   ....

08002ab0 <??DataTable1_1>:
 8002ab0:	ffff 001f                                   ....

08002ab4 <ZbZclAttrTypeLength>:
 8002ab4:	0001      	movs	r1, r0
 8002ab6:	0008      	movs	r0, r1
 8002ab8:	b2c0      	uxtb	r0, r0
 8002aba:	2800      	cmp	r0, #0
 8002abc:	f000 8081 	beq.w	8002bc2 <??ZbZclAttrTypeLength_0>
 8002ac0:	2808      	cmp	r0, #8
 8002ac2:	d06c      	beq.n	8002b9e <??ZbZclAttrTypeLength_1>
 8002ac4:	2809      	cmp	r0, #9
 8002ac6:	d06c      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002ac8:	280a      	cmp	r0, #10
 8002aca:	d06c      	beq.n	8002ba6 <??ZbZclAttrTypeLength_3>
 8002acc:	280b      	cmp	r0, #11
 8002ace:	d06c      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002ad0:	280c      	cmp	r0, #12
 8002ad2:	d06c      	beq.n	8002bae <??ZbZclAttrTypeLength_5>
 8002ad4:	280d      	cmp	r0, #13
 8002ad6:	d06c      	beq.n	8002bb2 <??ZbZclAttrTypeLength_6>
 8002ad8:	280e      	cmp	r0, #14
 8002ada:	d06c      	beq.n	8002bb6 <??ZbZclAttrTypeLength_7>
 8002adc:	280f      	cmp	r0, #15
 8002ade:	d06c      	beq.n	8002bba <??ZbZclAttrTypeLength_8>
 8002ae0:	2810      	cmp	r0, #16
 8002ae2:	d05c      	beq.n	8002b9e <??ZbZclAttrTypeLength_1>
 8002ae4:	2818      	cmp	r0, #24
 8002ae6:	d05a      	beq.n	8002b9e <??ZbZclAttrTypeLength_1>
 8002ae8:	2819      	cmp	r0, #25
 8002aea:	d05a      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002aec:	281a      	cmp	r0, #26
 8002aee:	d05a      	beq.n	8002ba6 <??ZbZclAttrTypeLength_3>
 8002af0:	281b      	cmp	r0, #27
 8002af2:	d05a      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002af4:	281c      	cmp	r0, #28
 8002af6:	d05a      	beq.n	8002bae <??ZbZclAttrTypeLength_5>
 8002af8:	281d      	cmp	r0, #29
 8002afa:	d05a      	beq.n	8002bb2 <??ZbZclAttrTypeLength_6>
 8002afc:	281e      	cmp	r0, #30
 8002afe:	d05a      	beq.n	8002bb6 <??ZbZclAttrTypeLength_7>
 8002b00:	281f      	cmp	r0, #31
 8002b02:	d05a      	beq.n	8002bba <??ZbZclAttrTypeLength_8>
 8002b04:	2820      	cmp	r0, #32
 8002b06:	d04a      	beq.n	8002b9e <??ZbZclAttrTypeLength_1>
 8002b08:	2821      	cmp	r0, #33	; 0x21
 8002b0a:	d04a      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002b0c:	2822      	cmp	r0, #34	; 0x22
 8002b0e:	d04a      	beq.n	8002ba6 <??ZbZclAttrTypeLength_3>
 8002b10:	2823      	cmp	r0, #35	; 0x23
 8002b12:	d04a      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002b14:	2824      	cmp	r0, #36	; 0x24
 8002b16:	d04a      	beq.n	8002bae <??ZbZclAttrTypeLength_5>
 8002b18:	2825      	cmp	r0, #37	; 0x25
 8002b1a:	d04a      	beq.n	8002bb2 <??ZbZclAttrTypeLength_6>
 8002b1c:	2826      	cmp	r0, #38	; 0x26
 8002b1e:	d04a      	beq.n	8002bb6 <??ZbZclAttrTypeLength_7>
 8002b20:	2827      	cmp	r0, #39	; 0x27
 8002b22:	d04a      	beq.n	8002bba <??ZbZclAttrTypeLength_8>
 8002b24:	2828      	cmp	r0, #40	; 0x28
 8002b26:	d03a      	beq.n	8002b9e <??ZbZclAttrTypeLength_1>
 8002b28:	2829      	cmp	r0, #41	; 0x29
 8002b2a:	d03a      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002b2c:	282a      	cmp	r0, #42	; 0x2a
 8002b2e:	d03a      	beq.n	8002ba6 <??ZbZclAttrTypeLength_3>
 8002b30:	282b      	cmp	r0, #43	; 0x2b
 8002b32:	d03a      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002b34:	282c      	cmp	r0, #44	; 0x2c
 8002b36:	d03a      	beq.n	8002bae <??ZbZclAttrTypeLength_5>
 8002b38:	282d      	cmp	r0, #45	; 0x2d
 8002b3a:	d03a      	beq.n	8002bb2 <??ZbZclAttrTypeLength_6>
 8002b3c:	282e      	cmp	r0, #46	; 0x2e
 8002b3e:	d03a      	beq.n	8002bb6 <??ZbZclAttrTypeLength_7>
 8002b40:	282f      	cmp	r0, #47	; 0x2f
 8002b42:	d03a      	beq.n	8002bba <??ZbZclAttrTypeLength_8>
 8002b44:	2830      	cmp	r0, #48	; 0x30
 8002b46:	d02a      	beq.n	8002b9e <??ZbZclAttrTypeLength_1>
 8002b48:	2831      	cmp	r0, #49	; 0x31
 8002b4a:	d02a      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002b4c:	2838      	cmp	r0, #56	; 0x38
 8002b4e:	d028      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002b50:	2839      	cmp	r0, #57	; 0x39
 8002b52:	d02a      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002b54:	283a      	cmp	r0, #58	; 0x3a
 8002b56:	d030      	beq.n	8002bba <??ZbZclAttrTypeLength_8>
 8002b58:	2841      	cmp	r0, #65	; 0x41
 8002b5a:	d032      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b5c:	2842      	cmp	r0, #66	; 0x42
 8002b5e:	d030      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b60:	2843      	cmp	r0, #67	; 0x43
 8002b62:	d02e      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b64:	2844      	cmp	r0, #68	; 0x44
 8002b66:	d02c      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b68:	2848      	cmp	r0, #72	; 0x48
 8002b6a:	d02a      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b6c:	284c      	cmp	r0, #76	; 0x4c
 8002b6e:	d028      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b70:	2850      	cmp	r0, #80	; 0x50
 8002b72:	d026      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b74:	2851      	cmp	r0, #81	; 0x51
 8002b76:	d024      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b78:	28e0      	cmp	r0, #224	; 0xe0
 8002b7a:	d016      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002b7c:	28e1      	cmp	r0, #225	; 0xe1
 8002b7e:	d014      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002b80:	28e2      	cmp	r0, #226	; 0xe2
 8002b82:	d012      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002b84:	28e8      	cmp	r0, #232	; 0xe8
 8002b86:	d00c      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002b88:	28e9      	cmp	r0, #233	; 0xe9
 8002b8a:	d00a      	beq.n	8002ba2 <??ZbZclAttrTypeLength_2>
 8002b8c:	28ea      	cmp	r0, #234	; 0xea
 8002b8e:	d00c      	beq.n	8002baa <??ZbZclAttrTypeLength_4>
 8002b90:	28f0      	cmp	r0, #240	; 0xf0
 8002b92:	d012      	beq.n	8002bba <??ZbZclAttrTypeLength_8>
 8002b94:	28f1      	cmp	r0, #241	; 0xf1
 8002b96:	d012      	beq.n	8002bbe <??ZbZclAttrTypeLength_9>
 8002b98:	28ff      	cmp	r0, #255	; 0xff
 8002b9a:	d012      	beq.n	8002bc2 <??ZbZclAttrTypeLength_0>
 8002b9c:	e013      	b.n	8002bc6 <??ZbZclAttrTypeLength_10>

08002b9e <??ZbZclAttrTypeLength_1>:
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	e012      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002ba2 <??ZbZclAttrTypeLength_2>:
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	e010      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002ba6 <??ZbZclAttrTypeLength_3>:
 8002ba6:	2003      	movs	r0, #3
 8002ba8:	e00e      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002baa <??ZbZclAttrTypeLength_4>:
 8002baa:	2004      	movs	r0, #4
 8002bac:	e00c      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002bae <??ZbZclAttrTypeLength_5>:
 8002bae:	2005      	movs	r0, #5
 8002bb0:	e00a      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002bb2 <??ZbZclAttrTypeLength_6>:
 8002bb2:	2006      	movs	r0, #6
 8002bb4:	e008      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002bb6 <??ZbZclAttrTypeLength_7>:
 8002bb6:	2007      	movs	r0, #7
 8002bb8:	e006      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002bba <??ZbZclAttrTypeLength_8>:
 8002bba:	2008      	movs	r0, #8
 8002bbc:	e004      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002bbe <??ZbZclAttrTypeLength_9>:
 8002bbe:	2010      	movs	r0, #16
 8002bc0:	e002      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002bc2 <??ZbZclAttrTypeLength_0>:
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e000      	b.n	8002bc8 <??ZbZclAttrTypeLength_11>

08002bc6 <??ZbZclAttrTypeLength_10>:
 8002bc6:	2000      	movs	r0, #0

08002bc8 <??ZbZclAttrTypeLength_11>:
 8002bc8:	4770      	bx	lr

08002bca <ZbZclAttrParseLength>:
 8002bca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bce:	0006      	movs	r6, r0
 8002bd0:	000c      	movs	r4, r1
 8002bd2:	0015      	movs	r5, r2
 8002bd4:	001f      	movs	r7, r3
 8002bd6:	0038      	movs	r0, r7
 8002bd8:	b2c0      	uxtb	r0, r0
 8002bda:	280f      	cmp	r0, #15
 8002bdc:	d302      	bcc.n	8002be4 <??ZbZclAttrParseLength_0>
 8002bde:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8002be2:	e0a1      	b.n	8002d28 <??ZbZclAttrParseLength_1>

08002be4 <??ZbZclAttrParseLength_0>:
 8002be4:	0030      	movs	r0, r6
 8002be6:	b2c0      	uxtb	r0, r0
 8002be8:	f7ff ff64 	bl	8002ab4 <ZbZclAttrTypeLength>
 8002bec:	0001      	movs	r1, r0
 8002bee:	2901      	cmp	r1, #1
 8002bf0:	db06      	blt.n	8002c00 <??ZbZclAttrParseLength_2>
 8002bf2:	428d      	cmp	r5, r1
 8002bf4:	d202      	bcs.n	8002bfc <??ZbZclAttrParseLength_3>
 8002bf6:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8002bfa:	e095      	b.n	8002d28 <??ZbZclAttrParseLength_1>

08002bfc <??ZbZclAttrParseLength_3>:
 8002bfc:	0008      	movs	r0, r1
 8002bfe:	e093      	b.n	8002d28 <??ZbZclAttrParseLength_1>

08002c00 <??ZbZclAttrParseLength_2>:
 8002c00:	2c00      	cmp	r4, #0
 8002c02:	d101      	bne.n	8002c08 <??ZbZclAttrParseLength_4>
 8002c04:	0028      	movs	r0, r5
 8002c06:	e08f      	b.n	8002d28 <??ZbZclAttrParseLength_1>

08002c08 <??ZbZclAttrParseLength_4>:
 8002c08:	f05f 39ff 	movs.w	r9, #4294967295	; 0xffffffff
 8002c0c:	0030      	movs	r0, r6
 8002c0e:	b2c0      	uxtb	r0, r0
 8002c10:	3841      	subs	r0, #65	; 0x41
 8002c12:	2801      	cmp	r0, #1
 8002c14:	d90a      	bls.n	8002c2c <??ZbZclAttrParseLength_5>
 8002c16:	1e80      	subs	r0, r0, #2
 8002c18:	2801      	cmp	r0, #1
 8002c1a:	d914      	bls.n	8002c46 <??ZbZclAttrParseLength_6>
 8002c1c:	1f40      	subs	r0, r0, #5
 8002c1e:	d027      	beq.n	8002c70 <??ZbZclAttrParseLength_7>
 8002c20:	1f00      	subs	r0, r0, #4
 8002c22:	d04b      	beq.n	8002cbc <??ZbZclAttrParseLength_8>
 8002c24:	1f00      	subs	r0, r0, #4
 8002c26:	2801      	cmp	r0, #1
 8002c28:	d922      	bls.n	8002c70 <??ZbZclAttrParseLength_7>
 8002c2a:	e074      	b.n	8002d16 <??ZbZclAttrParseLength_10>

08002c2c <??ZbZclAttrParseLength_5>:
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	d072      	beq.n	8002d16 <??ZbZclAttrParseLength_10>

08002c30 <??ZbZclAttrParseLength_11>:
 8002c30:	7820      	ldrb	r0, [r4, #0]
 8002c32:	28ff      	cmp	r0, #255	; 0xff
 8002c34:	d102      	bne.n	8002c3c <??ZbZclAttrParseLength_12>
 8002c36:	f05f 0901 	movs.w	r9, #1
 8002c3a:	e003      	b.n	8002c44 <??ZbZclAttrParseLength_13>

08002c3c <??ZbZclAttrParseLength_12>:
 8002c3c:	f894 9000 	ldrb.w	r9, [r4]
 8002c40:	f119 0901 	adds.w	r9, r9, #1

08002c44 <??ZbZclAttrParseLength_13>:
 8002c44:	e067      	b.n	8002d16 <??ZbZclAttrParseLength_10>

08002c46 <??ZbZclAttrParseLength_6>:
 8002c46:	2d02      	cmp	r5, #2
 8002c48:	d365      	bcc.n	8002d16 <??ZbZclAttrParseLength_10>

08002c4a <??ZbZclAttrParseLength_14>:
 8002c4a:	0020      	movs	r0, r4
 8002c4c:	f7fe ffc1 	bl	8001bd2 <pletoh16>
 8002c50:	4680      	mov	r8, r0
 8002c52:	4640      	mov	r0, r8
 8002c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c58:	b280      	uxth	r0, r0
 8002c5a:	4288      	cmp	r0, r1
 8002c5c:	d102      	bne.n	8002c64 <??ZbZclAttrParseLength_15>
 8002c5e:	f05f 0902 	movs.w	r9, #2
 8002c62:	e004      	b.n	8002c6e <??ZbZclAttrParseLength_16>

08002c64 <??ZbZclAttrParseLength_15>:
 8002c64:	46c1      	mov	r9, r8
 8002c66:	fa1f f989 	uxth.w	r9, r9
 8002c6a:	f119 0902 	adds.w	r9, r9, #2

08002c6e <??ZbZclAttrParseLength_16>:
 8002c6e:	e052      	b.n	8002d16 <??ZbZclAttrParseLength_10>

08002c70 <??ZbZclAttrParseLength_7>:
 8002c70:	2d03      	cmp	r5, #3
 8002c72:	d350      	bcc.n	8002d16 <??ZbZclAttrParseLength_10>

08002c74 <??ZbZclAttrParseLength_17>:
 8002c74:	7820      	ldrb	r0, [r4, #0]
 8002c76:	4683      	mov	fp, r0
 8002c78:	1c60      	adds	r0, r4, #1
 8002c7a:	f7fe ffaa 	bl	8001bd2 <pletoh16>
 8002c7e:	4680      	mov	r8, r0
 8002c80:	2003      	movs	r0, #3
 8002c82:	4681      	mov	r9, r0

08002c84 <??ZbZclAttrParseLength_18>:
 8002c84:	4640      	mov	r0, r8
 8002c86:	b280      	uxth	r0, r0
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d016      	beq.n	8002cba <??ZbZclAttrParseLength_19>
 8002c8c:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8002c90:	4640      	mov	r0, r8
 8002c92:	b280      	uxth	r0, r0
 8002c94:	4550      	cmp	r0, sl
 8002c96:	d010      	beq.n	8002cba <??ZbZclAttrParseLength_19>
 8002c98:	1c7b      	adds	r3, r7, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	ebb5 0209 	subs.w	r2, r5, r9
 8002ca0:	eb04 0109 	add.w	r1, r4, r9
 8002ca4:	4658      	mov	r0, fp
 8002ca6:	b2c0      	uxtb	r0, r0
 8002ca8:	f7ff ff8f 	bl	8002bca <ZbZclAttrParseLength>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d43b      	bmi.n	8002d28 <??ZbZclAttrParseLength_1>

08002cb0 <??ZbZclAttrParseLength_20>:
 8002cb0:	eb10 0909 	adds.w	r9, r0, r9
 8002cb4:	eb1a 0808 	adds.w	r8, sl, r8
 8002cb8:	e7e4      	b.n	8002c84 <??ZbZclAttrParseLength_18>

08002cba <??ZbZclAttrParseLength_19>:
 8002cba:	e02c      	b.n	8002d16 <??ZbZclAttrParseLength_10>

08002cbc <??ZbZclAttrParseLength_8>:
 8002cbc:	2d02      	cmp	r5, #2
 8002cbe:	d32a      	bcc.n	8002d16 <??ZbZclAttrParseLength_10>

08002cc0 <??ZbZclAttrParseLength_21>:
 8002cc0:	0020      	movs	r0, r4
 8002cc2:	f7fe ff86 	bl	8001bd2 <pletoh16>
 8002cc6:	4680      	mov	r8, r0
 8002cc8:	2002      	movs	r0, #2
 8002cca:	4681      	mov	r9, r0

08002ccc <??ZbZclAttrParseLength_22>:
 8002ccc:	4640      	mov	r0, r8
 8002cce:	b280      	uxth	r0, r0
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d01f      	beq.n	8002d14 <??ZbZclAttrParseLength_23>
 8002cd4:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8002cd8:	4640      	mov	r0, r8
 8002cda:	b280      	uxth	r0, r0
 8002cdc:	4550      	cmp	r0, sl
 8002cde:	d019      	beq.n	8002d14 <??ZbZclAttrParseLength_23>
 8002ce0:	f119 0001 	adds.w	r0, r9, #1
 8002ce4:	4285      	cmp	r5, r0
 8002ce6:	d315      	bcc.n	8002d14 <??ZbZclAttrParseLength_23>

08002ce8 <??ZbZclAttrParseLength_24>:
 8002ce8:	f814 0009 	ldrb.w	r0, [r4, r9]
 8002cec:	4683      	mov	fp, r0
 8002cee:	f119 0901 	adds.w	r9, r9, #1
 8002cf2:	1c7b      	adds	r3, r7, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	ebb5 0209 	subs.w	r2, r5, r9
 8002cfa:	eb04 0109 	add.w	r1, r4, r9
 8002cfe:	4658      	mov	r0, fp
 8002d00:	b2c0      	uxtb	r0, r0
 8002d02:	f7ff ff62 	bl	8002bca <ZbZclAttrParseLength>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d404      	bmi.n	8002d14 <??ZbZclAttrParseLength_23>

08002d0a <??ZbZclAttrParseLength_25>:
 8002d0a:	eb10 0909 	adds.w	r9, r0, r9
 8002d0e:	eb1a 0808 	adds.w	r8, sl, r8
 8002d12:	e7db      	b.n	8002ccc <??ZbZclAttrParseLength_22>

08002d14 <??ZbZclAttrParseLength_23>:
 8002d14:	e7ff      	b.n	8002d16 <??ZbZclAttrParseLength_10>

08002d16 <??ZbZclAttrParseLength_10>:
 8002d16:	f1b9 0f00 	cmp.w	r9, #0
 8002d1a:	d401      	bmi.n	8002d20 <??ZbZclAttrParseLength_26>
 8002d1c:	454d      	cmp	r5, r9
 8002d1e:	d202      	bcs.n	8002d26 <??ZbZclAttrParseLength_27>

08002d20 <??ZbZclAttrParseLength_26>:
 8002d20:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8002d24:	e000      	b.n	8002d28 <??ZbZclAttrParseLength_1>

08002d26 <??ZbZclAttrParseLength_27>:
 8002d26:	4648      	mov	r0, r9

08002d28 <??ZbZclAttrParseLength_1>:
 8002d28:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d2c <ZbZclAttrIsAnalog>:
 8002d2c:	0001      	movs	r1, r0
 8002d2e:	0008      	movs	r0, r1
 8002d30:	b2c0      	uxtb	r0, r0
 8002d32:	2820      	cmp	r0, #32
 8002d34:	db05      	blt.n	8002d42 <??ZbZclAttrIsAnalog_0>
 8002d36:	0008      	movs	r0, r1
 8002d38:	b2c0      	uxtb	r0, r0
 8002d3a:	2828      	cmp	r0, #40	; 0x28
 8002d3c:	da01      	bge.n	8002d42 <??ZbZclAttrIsAnalog_0>
 8002d3e:	2001      	movs	r0, #1
 8002d40:	e026      	b.n	8002d90 <??ZbZclAttrIsAnalog_1>

08002d42 <??ZbZclAttrIsAnalog_0>:
 8002d42:	0008      	movs	r0, r1
 8002d44:	b2c0      	uxtb	r0, r0
 8002d46:	2828      	cmp	r0, #40	; 0x28
 8002d48:	db05      	blt.n	8002d56 <??ZbZclAttrIsAnalog_2>
 8002d4a:	0008      	movs	r0, r1
 8002d4c:	b2c0      	uxtb	r0, r0
 8002d4e:	2830      	cmp	r0, #48	; 0x30
 8002d50:	da01      	bge.n	8002d56 <??ZbZclAttrIsAnalog_2>
 8002d52:	2001      	movs	r0, #1
 8002d54:	e01c      	b.n	8002d90 <??ZbZclAttrIsAnalog_1>

08002d56 <??ZbZclAttrIsAnalog_2>:
 8002d56:	0008      	movs	r0, r1
 8002d58:	b2c0      	uxtb	r0, r0
 8002d5a:	2838      	cmp	r0, #56	; 0x38
 8002d5c:	d007      	beq.n	8002d6e <??ZbZclAttrIsAnalog_3>
 8002d5e:	0008      	movs	r0, r1
 8002d60:	b2c0      	uxtb	r0, r0
 8002d62:	2839      	cmp	r0, #57	; 0x39
 8002d64:	d003      	beq.n	8002d6e <??ZbZclAttrIsAnalog_3>
 8002d66:	0008      	movs	r0, r1
 8002d68:	b2c0      	uxtb	r0, r0
 8002d6a:	283a      	cmp	r0, #58	; 0x3a
 8002d6c:	d101      	bne.n	8002d72 <??ZbZclAttrIsAnalog_4>

08002d6e <??ZbZclAttrIsAnalog_3>:
 8002d6e:	2001      	movs	r0, #1
 8002d70:	e00e      	b.n	8002d90 <??ZbZclAttrIsAnalog_1>

08002d72 <??ZbZclAttrIsAnalog_4>:
 8002d72:	0008      	movs	r0, r1
 8002d74:	b2c0      	uxtb	r0, r0
 8002d76:	28e0      	cmp	r0, #224	; 0xe0
 8002d78:	d007      	beq.n	8002d8a <??ZbZclAttrIsAnalog_5>
 8002d7a:	0008      	movs	r0, r1
 8002d7c:	b2c0      	uxtb	r0, r0
 8002d7e:	28e1      	cmp	r0, #225	; 0xe1
 8002d80:	d003      	beq.n	8002d8a <??ZbZclAttrIsAnalog_5>
 8002d82:	0008      	movs	r0, r1
 8002d84:	b2c0      	uxtb	r0, r0
 8002d86:	28e2      	cmp	r0, #226	; 0xe2
 8002d88:	d101      	bne.n	8002d8e <??ZbZclAttrIsAnalog_6>

08002d8a <??ZbZclAttrIsAnalog_5>:
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	e000      	b.n	8002d90 <??ZbZclAttrIsAnalog_1>

08002d8e <??ZbZclAttrIsAnalog_6>:
 8002d8e:	2000      	movs	r0, #0

08002d90 <??ZbZclAttrIsAnalog_1>:
 8002d90:	4770      	bx	lr
	...

08002d94 <ZbZclAttrAppendList>:
 8002d94:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d98:	b089      	sub	sp, #36	; 0x24
 8002d9a:	0007      	movs	r7, r0
 8002d9c:	000e      	movs	r6, r1
 8002d9e:	68b8      	ldr	r0, [r7, #8]
 8002da0:	9008      	str	r0, [sp, #32]
 8002da2:	2e00      	cmp	r6, #0
 8002da4:	d002      	beq.n	8002dac <??ZbZclAttrAppendList_0>
 8002da6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d101      	bne.n	8002db0 <??ZbZclAttrAppendList_1>

08002dac <??ZbZclAttrAppendList_0>:
 8002dac:	2000      	movs	r0, #0
 8002dae:	e0c6      	b.n	8002f3e <??ZbZclAttrAppendList_2>

08002db0 <??ZbZclAttrAppendList_1>:
 8002db0:	f05f 0800 	movs.w	r8, #0

08002db4 <??ZbZclAttrAppendList_3>:
 8002db4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002db6:	4580      	cmp	r8, r0
 8002db8:	f080 80bd 	bcs.w	8002f36 <??ZbZclAttrAppendList_4>
 8002dbc:	f05f 0928 	movs.w	r9, #40	; 0x28
 8002dc0:	fb09 f008 	mul.w	r0, r9, r8
 8002dc4:	4430      	add	r0, r6
 8002dc6:	7900      	ldrb	r0, [r0, #4]
 8002dc8:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8002dcc:	d007      	beq.n	8002dde <??ZbZclAttrAppendList_5>
 8002dce:	fb09 f008 	mul.w	r0, r9, r8
 8002dd2:	4430      	add	r0, r6
 8002dd4:	68c0      	ldr	r0, [r0, #12]
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d101      	bne.n	8002dde <??ZbZclAttrAppendList_5>
 8002dda:	2001      	movs	r0, #1
 8002ddc:	e0af      	b.n	8002f3e <??ZbZclAttrAppendList_2>

08002dde <??ZbZclAttrAppendList_5>:
 8002dde:	fb09 f008 	mul.w	r0, r9, r8
 8002de2:	5a31      	ldrh	r1, [r6, r0]
 8002de4:	0038      	movs	r0, r7
 8002de6:	f7fe ffc4 	bl	8001d72 <ZbZclAttrFind>
 8002dea:	0005      	movs	r5, r0
 8002dec:	2d00      	cmp	r5, #0
 8002dee:	d003      	beq.n	8002df8 <??ZbZclAttrAppendList_6>
 8002df0:	0029      	movs	r1, r5
 8002df2:	0038      	movs	r0, r7
 8002df4:	f000 f8b6 	bl	8002f64 <ZbZclAttrFreeAttr>

08002df8 <??ZbZclAttrAppendList_6>:
 8002df8:	2418      	movs	r4, #24
 8002dfa:	f05f 0a00 	movs.w	sl, #0
 8002dfe:	f10d 0b04 	add.w	fp, sp, #4
 8002e02:	4652      	mov	r2, sl
 8002e04:	0021      	movs	r1, r4
 8002e06:	4658      	mov	r0, fp
 8002e08:	f002 fee5 	bl	8005bd6 <__aeabi_memset>
 8002e0c:	a801      	add	r0, sp, #4
 8002e0e:	9001      	str	r0, [sp, #4]
 8002e10:	a801      	add	r0, sp, #4
 8002e12:	9002      	str	r0, [sp, #8]
 8002e14:	fb09 f008 	mul.w	r0, r9, r8
 8002e18:	4430      	add	r0, r6
 8002e1a:	9003      	str	r0, [sp, #12]
 8002e1c:	fb09 f008 	mul.w	r0, r9, r8
 8002e20:	4430      	add	r0, r6
 8002e22:	7900      	ldrb	r0, [r0, #4]
 8002e24:	0780      	lsls	r0, r0, #30
 8002e26:	d50b      	bpl.n	8002e40 <??ZbZclAttrAppendList_7>
 8002e28:	fb09 f008 	mul.w	r0, r9, r8
 8002e2c:	4430      	add	r0, r6
 8002e2e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8002e30:	f8ad 001a 	strh.w	r0, [sp, #26]
 8002e34:	fb09 f008 	mul.w	r0, r9, r8
 8002e38:	4430      	add	r0, r6
 8002e3a:	8c00      	ldrh	r0, [r0, #32]
 8002e3c:	f8ad 0018 	strh.w	r0, [sp, #24]

08002e40 <??ZbZclAttrAppendList_7>:
 8002e40:	fb09 f008 	mul.w	r0, r9, r8
 8002e44:	4430      	add	r0, r6
 8002e46:	7900      	ldrb	r0, [r0, #4]
 8002e48:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 8002e4c:	2830      	cmp	r0, #48	; 0x30
 8002e4e:	d108      	bne.n	8002e62 <??ZbZclAttrAppendList_8>
 8002e50:	2000      	movs	r0, #0
 8002e52:	9000      	str	r0, [sp, #0]
 8002e54:	fb09 f908 	mul.w	r9, r9, r8
 8002e58:	eb06 0009 	add.w	r0, r6, r9
 8002e5c:	6880      	ldr	r0, [r0, #8]
 8002e5e:	9005      	str	r0, [sp, #20]
 8002e60:	e034      	b.n	8002ecc <??ZbZclAttrAppendList_9>

08002e62 <??ZbZclAttrAppendList_8>:
 8002e62:	fb09 f008 	mul.w	r0, r9, r8
 8002e66:	4430      	add	r0, r6
 8002e68:	6880      	ldr	r0, [r0, #8]
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d01f      	beq.n	8002eae <??ZbZclAttrAppendList_10>
 8002e6e:	fb09 f908 	mul.w	r9, r9, r8
 8002e72:	eb06 0009 	add.w	r0, r6, r9
 8002e76:	6880      	ldr	r0, [r0, #8]
 8002e78:	9005      	str	r0, [sp, #20]
 8002e7a:	9803      	ldr	r0, [sp, #12]
 8002e7c:	7880      	ldrb	r0, [r0, #2]
 8002e7e:	2841      	cmp	r0, #65	; 0x41
 8002e80:	d003      	beq.n	8002e8a <??ZbZclAttrAppendList_11>
 8002e82:	9803      	ldr	r0, [sp, #12]
 8002e84:	7880      	ldrb	r0, [r0, #2]
 8002e86:	2842      	cmp	r0, #66	; 0x42
 8002e88:	d103      	bne.n	8002e92 <??ZbZclAttrAppendList_12>

08002e8a <??ZbZclAttrAppendList_11>:
 8002e8a:	9805      	ldr	r0, [sp, #20]
 8002e8c:	1c40      	adds	r0, r0, #1
 8002e8e:	9005      	str	r0, [sp, #20]
 8002e90:	e00a      	b.n	8002ea8 <??ZbZclAttrAppendList_13>

08002e92 <??ZbZclAttrAppendList_12>:
 8002e92:	9803      	ldr	r0, [sp, #12]
 8002e94:	7880      	ldrb	r0, [r0, #2]
 8002e96:	2843      	cmp	r0, #67	; 0x43
 8002e98:	d003      	beq.n	8002ea2 <??ZbZclAttrAppendList_14>
 8002e9a:	9803      	ldr	r0, [sp, #12]
 8002e9c:	7880      	ldrb	r0, [r0, #2]
 8002e9e:	2844      	cmp	r0, #68	; 0x44
 8002ea0:	d102      	bne.n	8002ea8 <??ZbZclAttrAppendList_13>

08002ea2 <??ZbZclAttrAppendList_14>:
 8002ea2:	9805      	ldr	r0, [sp, #20]
 8002ea4:	1c80      	adds	r0, r0, #2
 8002ea6:	9005      	str	r0, [sp, #20]

08002ea8 <??ZbZclAttrAppendList_13>:
 8002ea8:	9805      	ldr	r0, [sp, #20]
 8002eaa:	9000      	str	r0, [sp, #0]
 8002eac:	e00e      	b.n	8002ecc <??ZbZclAttrAppendList_9>

08002eae <??ZbZclAttrAppendList_10>:
 8002eae:	fb09 f908 	mul.w	r9, r9, r8
 8002eb2:	eb06 0009 	add.w	r0, r6, r9
 8002eb6:	7880      	ldrb	r0, [r0, #2]
 8002eb8:	f7ff fdfc 	bl	8002ab4 <ZbZclAttrTypeLength>
 8002ebc:	9005      	str	r0, [sp, #20]
 8002ebe:	9805      	ldr	r0, [sp, #20]
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d101      	bne.n	8002ec8 <??ZbZclAttrAppendList_15>
 8002ec4:	208d      	movs	r0, #141	; 0x8d
 8002ec6:	e03a      	b.n	8002f3e <??ZbZclAttrAppendList_2>

08002ec8 <??ZbZclAttrAppendList_15>:
 8002ec8:	9805      	ldr	r0, [sp, #20]
 8002eca:	9000      	str	r0, [sp, #0]

08002ecc <??ZbZclAttrAppendList_9>:
 8002ecc:	2300      	movs	r3, #0
 8002ece:	a236      	add	r2, pc, #216	; (adr r2, 8002fa8 <??DataTable1>)
 8002ed0:	9900      	ldr	r1, [sp, #0]
 8002ed2:	3118      	adds	r1, #24
 8002ed4:	9808      	ldr	r0, [sp, #32]
 8002ed6:	f00f fb6b 	bl	80125b0 <zb_heap_alloc>
 8002eda:	0004      	movs	r4, r0
 8002edc:	2c00      	cmp	r4, #0
 8002ede:	d101      	bne.n	8002ee4 <??ZbZclAttrAppendList_16>
 8002ee0:	2089      	movs	r0, #137	; 0x89
 8002ee2:	e02c      	b.n	8002f3e <??ZbZclAttrAppendList_2>

08002ee4 <??ZbZclAttrAppendList_16>:
 8002ee4:	2518      	movs	r5, #24
 8002ee6:	f10d 0904 	add.w	r9, sp, #4
 8002eea:	46a2      	mov	sl, r4
 8002eec:	002a      	movs	r2, r5
 8002eee:	4649      	mov	r1, r9
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	f012 fbe6 	bl	80156c2 <__aeabi_memcpy>
 8002ef6:	9800      	ldr	r0, [sp, #0]
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d00c      	beq.n	8002f16 <??ZbZclAttrAppendList_17>
 8002efc:	f114 0018 	adds.w	r0, r4, #24
 8002f00:	60e0      	str	r0, [r4, #12]
 8002f02:	9800      	ldr	r0, [sp, #0]
 8002f04:	9007      	str	r0, [sp, #28]
 8002f06:	2500      	movs	r5, #0
 8002f08:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8002f0c:	002a      	movs	r2, r5
 8002f0e:	9907      	ldr	r1, [sp, #28]
 8002f10:	4648      	mov	r0, r9
 8002f12:	f002 fe60 	bl	8005bd6 <__aeabi_memset>

08002f16 <??ZbZclAttrAppendList_17>:
 8002f16:	0021      	movs	r1, r4
 8002f18:	0038      	movs	r0, r7
 8002f1a:	f7fe fefb 	bl	8001d14 <ZbZclAttrAddSorted>
 8002f1e:	68e0      	ldr	r0, [r4, #12]
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d005      	beq.n	8002f30 <??ZbZclAttrAppendList_18>
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	68e1      	ldr	r1, [r4, #12]
 8002f28:	68a0      	ldr	r0, [r4, #8]
 8002f2a:	7880      	ldrb	r0, [r0, #2]
 8002f2c:	f7ff fb42 	bl	80025b4 <ZbZclAttrDefaultValue>

08002f30 <??ZbZclAttrAppendList_18>:
 8002f30:	f118 0801 	adds.w	r8, r8, #1
 8002f34:	e73e      	b.n	8002db4 <??ZbZclAttrAppendList_3>

08002f36 <??ZbZclAttrAppendList_4>:
 8002f36:	0038      	movs	r0, r7
 8002f38:	f000 ff3a 	bl	8003db0 <zcl_reporting_create_default_reports>
 8002f3c:	2000      	movs	r0, #0

08002f3e <??ZbZclAttrAppendList_2>:
 8002f3e:	b00b      	add	sp, #44	; 0x2c
 8002f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f44 <ZbZclAttrCallbackExec>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	0004      	movs	r4, r0
 8002f48:	000d      	movs	r5, r1
 8002f4a:	0016      	movs	r6, r2
 8002f4c:	68a8      	ldr	r0, [r5, #8]
 8002f4e:	68c0      	ldr	r0, [r0, #12]
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d005      	beq.n	8002f60 <??ZbZclAttrCallbackExec_0>
 8002f54:	0031      	movs	r1, r6
 8002f56:	0020      	movs	r0, r4
 8002f58:	68aa      	ldr	r2, [r5, #8]
 8002f5a:	68d2      	ldr	r2, [r2, #12]
 8002f5c:	4790      	blx	r2
 8002f5e:	e000      	b.n	8002f62 <??ZbZclAttrCallbackExec_1>

08002f60 <??ZbZclAttrCallbackExec_0>:
 8002f60:	2001      	movs	r0, #1

08002f62 <??ZbZclAttrCallbackExec_1>:
 8002f62:	bd70      	pop	{r4, r5, r6, pc}

08002f64 <ZbZclAttrFreeAttr>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	0004      	movs	r4, r0
 8002f68:	000d      	movs	r5, r1
 8002f6a:	68a8      	ldr	r0, [r5, #8]
 8002f6c:	7900      	ldrb	r0, [r0, #4]
 8002f6e:	0780      	lsls	r0, r0, #30
 8002f70:	d50b      	bpl.n	8002f8a <??ZbZclAttrFreeAttr_0>
 8002f72:	2200      	movs	r2, #0
 8002f74:	68a8      	ldr	r0, [r5, #8]
 8002f76:	8801      	ldrh	r1, [r0, #0]
 8002f78:	0020      	movs	r0, r4
 8002f7a:	f000 fdfd 	bl	8003b78 <zcl_cluster_attr_report_delete>
 8002f7e:	2201      	movs	r2, #1
 8002f80:	68a8      	ldr	r0, [r5, #8]
 8002f82:	8801      	ldrh	r1, [r0, #0]
 8002f84:	0020      	movs	r0, r4
 8002f86:	f000 fdf7 	bl	8003b78 <zcl_cluster_attr_report_delete>

08002f8a <??ZbZclAttrFreeAttr_0>:
 8002f8a:	6868      	ldr	r0, [r5, #4]
 8002f8c:	6829      	ldr	r1, [r5, #0]
 8002f8e:	6048      	str	r0, [r1, #4]
 8002f90:	6828      	ldr	r0, [r5, #0]
 8002f92:	6869      	ldr	r1, [r5, #4]
 8002f94:	6008      	str	r0, [r1, #0]
 8002f96:	602d      	str	r5, [r5, #0]
 8002f98:	606d      	str	r5, [r5, #4]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	a202      	add	r2, pc, #8	; (adr r2, 8002fa8 <??DataTable1>)
 8002f9e:	0029      	movs	r1, r5
 8002fa0:	68a0      	ldr	r0, [r4, #8]
 8002fa2:	f00f fb14 	bl	80125ce <zb_heap_free>
 8002fa6:	bd31      	pop	{r0, r4, r5, pc}

08002fa8 <??DataTable1>:
 8002fa8:	0000 0000                                   ....

08002fac <ZbZclAttrFreeList>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	0005      	movs	r5, r0

08002fb0 <??ZbZclAttrFreeList_0>:
 8002fb0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002fb2:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8002fb6:	4288      	cmp	r0, r1
 8002fb8:	d001      	beq.n	8002fbe <??ZbZclAttrFreeList_1>
 8002fba:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002fbc:	e000      	b.n	8002fc0 <??ZbZclAttrFreeList_2>

08002fbe <??ZbZclAttrFreeList_1>:
 8002fbe:	2400      	movs	r4, #0

08002fc0 <??ZbZclAttrFreeList_2>:
 8002fc0:	2c00      	cmp	r4, #0
 8002fc2:	d005      	beq.n	8002fd0 <??ZbZclAttrFreeList_3>

08002fc4 <??ZbZclAttrFreeList_4>:
 8002fc4:	0026      	movs	r6, r4
 8002fc6:	0031      	movs	r1, r6
 8002fc8:	0028      	movs	r0, r5
 8002fca:	f7ff ffcb 	bl	8002f64 <ZbZclAttrFreeAttr>
 8002fce:	e7ef      	b.n	8002fb0 <??ZbZclAttrFreeList_0>

08002fd0 <??ZbZclAttrFreeList_3>:
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fd4 <zcl_reporting_send_conf>:
 8002fd4:	000b      	movs	r3, r1
 8002fd6:	7e02      	ldrb	r2, [r0, #24]
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	d004      	beq.n	8002fe6 <??zcl_reporting_send_conf_0>
 8002fdc:	7e02      	ldrb	r2, [r0, #24]
 8002fde:	2aa4      	cmp	r2, #164	; 0xa4
 8002fe0:	d001      	beq.n	8002fe6 <??zcl_reporting_send_conf_0>
 8002fe2:	7e02      	ldrb	r2, [r0, #24]
 8002fe4:	2aa3      	cmp	r2, #163	; 0xa3

08002fe6 <??zcl_reporting_send_conf_0>:
 8002fe6:	4770      	bx	lr

08002fe8 <report_command_timer>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	0004      	movs	r4, r0
 8002fec:	000d      	movs	r5, r1
 8002fee:	002e      	movs	r6, r5
 8002ff0:	f116 0108 	adds.w	r1, r6, #8
 8002ff4:	6830      	ldr	r0, [r6, #0]
 8002ff6:	f000 f852 	bl	800309e <zcl_reporting_send_report>
 8002ffa:	6870      	ldr	r0, [r6, #4]
 8002ffc:	f00e ffb2 	bl	8011f64 <ZbTimerFree>
 8003000:	2300      	movs	r3, #0
 8003002:	a2cf      	add	r2, pc, #828	; (adr r2, 8003340 <??DataTable4>)
 8003004:	0031      	movs	r1, r6
 8003006:	6830      	ldr	r0, [r6, #0]
 8003008:	6880      	ldr	r0, [r0, #8]
 800300a:	f00f fae0 	bl	80125ce <zb_heap_free>
 800300e:	bd70      	pop	{r4, r5, r6, pc}

08003010 <zcl_reporting_queue_report>:
 8003010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003014:	0006      	movs	r6, r0
 8003016:	000f      	movs	r7, r1
 8003018:	0014      	movs	r4, r2
 800301a:	2c00      	cmp	r4, #0
 800301c:	d104      	bne.n	8003028 <??zcl_reporting_queue_report_0>
 800301e:	0039      	movs	r1, r7
 8003020:	0030      	movs	r0, r6
 8003022:	f000 f83c 	bl	800309e <zcl_reporting_send_report>
 8003026:	e037      	b.n	8003098 <??zcl_reporting_queue_report_1>

08003028 <??zcl_reporting_queue_report_0>:
 8003028:	f20f 3814 	addw	r8, pc, #788	; 0x314
 800302c:	2300      	movs	r3, #0
 800302e:	4642      	mov	r2, r8
 8003030:	2198      	movs	r1, #152	; 0x98
 8003032:	68b0      	ldr	r0, [r6, #8]
 8003034:	f00f fabc 	bl	80125b0 <zb_heap_alloc>
 8003038:	0005      	movs	r5, r0
 800303a:	2d00      	cmp	r5, #0
 800303c:	d101      	bne.n	8003042 <??zcl_reporting_queue_report_2>
 800303e:	2000      	movs	r0, #0
 8003040:	e02b      	b.n	800309a <??zcl_reporting_queue_report_3>

08003042 <??zcl_reporting_queue_report_2>:
 8003042:	f05f 0998 	movs.w	r9, #152	; 0x98
 8003046:	f05f 0a00 	movs.w	sl, #0
 800304a:	46ab      	mov	fp, r5
 800304c:	4652      	mov	r2, sl
 800304e:	4649      	mov	r1, r9
 8003050:	4658      	mov	r0, fp
 8003052:	f002 fdc0 	bl	8005bd6 <__aeabi_memset>
 8003056:	002a      	movs	r2, r5
 8003058:	f8df 1c98 	ldr.w	r1, [pc, #3224]	; 8003cf4 <??DataTable9>
 800305c:	68b0      	ldr	r0, [r6, #8]
 800305e:	f00e ff2f 	bl	8011ec0 <ZbTimerAlloc>
 8003062:	6068      	str	r0, [r5, #4]
 8003064:	6868      	ldr	r0, [r5, #4]
 8003066:	2800      	cmp	r0, #0
 8003068:	d107      	bne.n	800307a <??zcl_reporting_queue_report_4>
 800306a:	2300      	movs	r3, #0
 800306c:	4642      	mov	r2, r8
 800306e:	0029      	movs	r1, r5
 8003070:	68b0      	ldr	r0, [r6, #8]
 8003072:	f00f faac 	bl	80125ce <zb_heap_free>
 8003076:	2000      	movs	r0, #0
 8003078:	e00f      	b.n	800309a <??zcl_reporting_queue_report_3>

0800307a <??zcl_reporting_queue_report_4>:
 800307a:	602e      	str	r6, [r5, #0]
 800307c:	f05f 0890 	movs.w	r8, #144	; 0x90
 8003080:	46b9      	mov	r9, r7
 8003082:	f115 0a08 	adds.w	sl, r5, #8
 8003086:	4642      	mov	r2, r8
 8003088:	4649      	mov	r1, r9
 800308a:	4650      	mov	r0, sl
 800308c:	f012 fb19 	bl	80156c2 <__aeabi_memcpy>
 8003090:	0021      	movs	r1, r4
 8003092:	6868      	ldr	r0, [r5, #4]
 8003094:	f00e ff9a 	bl	8011fcc <ZbTimerReset>

08003098 <??zcl_reporting_queue_report_1>:
 8003098:	2001      	movs	r0, #1

0800309a <??zcl_reporting_queue_report_3>:
 800309a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800309e <zcl_reporting_send_report>:
 800309e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a2:	b0cc      	sub	sp, #304	; 0x130
 80030a4:	0005      	movs	r5, r0
 80030a6:	000e      	movs	r6, r1
 80030a8:	2400      	movs	r4, #0
 80030aa:	2000      	movs	r0, #0
 80030ac:	f88d 0004 	strb.w	r0, [sp, #4]
 80030b0:	8a28      	ldrh	r0, [r5, #16]
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d001      	beq.n	80030ba <??zcl_reporting_send_report_0>
 80030b6:	2001      	movs	r0, #1
 80030b8:	e000      	b.n	80030bc <??zcl_reporting_send_report_1>

080030ba <??zcl_reporting_send_report_0>:
 80030ba:	2000      	movs	r0, #0

080030bc <??zcl_reporting_send_report_1>:
 80030bc:	f88d 0005 	strb.w	r0, [sp, #5]
 80030c0:	8a28      	ldrh	r0, [r5, #16]
 80030c2:	f8ad 0008 	strh.w	r0, [sp, #8]
 80030c6:	7f28      	ldrb	r0, [r5, #28]
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d103      	bne.n	80030d4 <??zcl_reporting_send_report_2>
 80030cc:	2001      	movs	r0, #1
 80030ce:	f88d 0006 	strb.w	r0, [sp, #6]
 80030d2:	e002      	b.n	80030da <??zcl_reporting_send_report_3>

080030d4 <??zcl_reporting_send_report_2>:
 80030d4:	2000      	movs	r0, #0
 80030d6:	f88d 0006 	strb.w	r0, [sp, #6]

080030da <??zcl_reporting_send_report_3>:
 80030da:	2001      	movs	r0, #1
 80030dc:	f88d 0007 	strb.w	r0, [sp, #7]
 80030e0:	f00f f8a5 	bl	801222e <ZbZclGetNextSeqnum>
 80030e4:	f88d 000a 	strb.w	r0, [sp, #10]
 80030e8:	200a      	movs	r0, #10
 80030ea:	f88d 000b 	strb.w	r0, [sp, #11]
 80030ee:	2205      	movs	r2, #5
 80030f0:	a903      	add	r1, sp, #12
 80030f2:	a801      	add	r0, sp, #4
 80030f4:	f7fe fc4c 	bl	8001990 <ZbZclAppendHeader>
 80030f8:	0007      	movs	r7, r0
 80030fa:	2f01      	cmp	r7, #1
 80030fc:	f2c0 8093 	blt.w	8003226 <??zcl_reporting_send_report_4>

08003100 <??zcl_reporting_send_report_5>:
 8003100:	a91a      	add	r1, sp, #104	; 0x68
 8003102:	a803      	add	r0, sp, #12
 8003104:	0022      	movs	r2, r4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 800310c:	0038      	movs	r0, r7
 800310e:	b2c0      	uxtb	r0, r0
 8003110:	aa1a      	add	r2, sp, #104	; 0x68
 8003112:	0023      	movs	r3, r4
 8003114:	b2db      	uxtb	r3, r3
 8003116:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800311a:	6050      	str	r0, [r2, #4]
 800311c:	1c64      	adds	r4, r4, #1
 800311e:	2000      	movs	r0, #0
 8003120:	4680      	mov	r8, r0

08003122 <??zcl_reporting_send_report_6>:
 8003122:	f1b8 0f0c 	cmp.w	r8, #12
 8003126:	d22e      	bcs.n	8003186 <??zcl_reporting_send_report_7>
 8003128:	220c      	movs	r2, #12
 800312a:	fb02 f008 	mul.w	r0, r2, r8
 800312e:	4430      	add	r0, r6
 8003130:	7a00      	ldrb	r0, [r0, #8]
 8003132:	2800      	cmp	r0, #0
 8003134:	d027      	beq.n	8003186 <??zcl_reporting_send_report_7>

08003136 <??zcl_reporting_send_report_8>:
 8003136:	fb02 f008 	mul.w	r0, r2, r8
 800313a:	4430      	add	r0, r6
 800313c:	3009      	adds	r0, #9
 800313e:	0023      	movs	r3, r4
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8003146:	2003      	movs	r0, #3
 8003148:	ab1a      	add	r3, sp, #104	; 0x68
 800314a:	46a4      	mov	ip, r4
 800314c:	fa5f fc8c 	uxtb.w	ip, ip
 8003150:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8003154:	6058      	str	r0, [r3, #4]
 8003156:	1c64      	adds	r4, r4, #1
 8003158:	fb02 f008 	mul.w	r0, r2, r8
 800315c:	4430      	add	r0, r6
 800315e:	6840      	ldr	r0, [r0, #4]
 8003160:	0023      	movs	r3, r4
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8003168:	fb02 f208 	mul.w	r2, r2, r8
 800316c:	eb06 0002 	add.w	r0, r6, r2
 8003170:	7a00      	ldrb	r0, [r0, #8]
 8003172:	aa1a      	add	r2, sp, #104	; 0x68
 8003174:	0023      	movs	r3, r4
 8003176:	b2db      	uxtb	r3, r3
 8003178:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800317c:	6050      	str	r0, [r2, #4]
 800317e:	1c64      	adds	r4, r4, #1
 8003180:	f118 0801 	adds.w	r8, r8, #1
 8003184:	e7cd      	b.n	8003122 <??zcl_reporting_send_report_6>

08003186 <??zcl_reporting_send_report_7>:
 8003186:	2200      	movs	r2, #0
 8003188:	a906      	add	r1, sp, #24
 800318a:	0028      	movs	r0, r5
 800318c:	f7fd fe9f 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8003190:	a806      	add	r0, sp, #24
 8003192:	f8df 1b68 	ldr.w	r1, [pc, #2920]	; 8003cfc <??DataTable9_2>
 8003196:	6809      	ldr	r1, [r1, #0]
 8003198:	2210      	movs	r2, #16
 800319a:	f012 fa92 	bl	80156c2 <__aeabi_memcpy>
 800319e:	2001      	movs	r0, #1
 80031a0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80031a4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80031a8:	f050 0004 	orrs.w	r0, r0, #4
 80031ac:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80031b0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80031b4:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 80031b8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80031bc:	7ca8      	ldrb	r0, [r5, #18]
 80031be:	28ab      	cmp	r0, #171	; 0xab
 80031c0:	d005      	beq.n	80031ce <??zcl_reporting_send_report_9>
 80031c2:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80031c6:	f050 0002 	orrs.w	r0, r0, #2
 80031ca:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c

080031ce <??zcl_reporting_send_report_9>:
 80031ce:	2001      	movs	r0, #1
 80031d0:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 80031d4:	2000      	movs	r0, #0
 80031d6:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 80031da:	a81a      	add	r0, sp, #104	; 0x68
 80031dc:	900c      	str	r0, [sp, #48]	; 0x30
 80031de:	0020      	movs	r0, r4
 80031e0:	b2c0      	uxtb	r0, r0
 80031e2:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80031e6:	68ab      	ldr	r3, [r5, #8]
 80031e8:	f8df 2b14 	ldr.w	r2, [pc, #2836]	; 8003d00 <??DataTable9_3>
 80031ec:	a906      	add	r1, sp, #24
 80031ee:	68a8      	ldr	r0, [r5, #8]
 80031f0:	f00e fc2e 	bl	8011a50 <ZbApsdeDataReqCallback>
 80031f4:	f88d 0000 	strb.w	r0, [sp]
 80031f8:	f89d 0000 	ldrb.w	r0, [sp]
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d012      	beq.n	8003226 <??zcl_reporting_send_report_4>
 8003200:	f05f 0920 	movs.w	r9, #32
 8003204:	f05f 0a00 	movs.w	sl, #0
 8003208:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800320c:	4652      	mov	r2, sl
 800320e:	4649      	mov	r1, r9
 8003210:	4658      	mov	r0, fp
 8003212:	f002 fce0 	bl	8005bd6 <__aeabi_memset>
 8003216:	f89d 0000 	ldrb.w	r0, [sp]
 800321a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 800321e:	68a9      	ldr	r1, [r5, #8]
 8003220:	a812      	add	r0, sp, #72	; 0x48
 8003222:	f7ff fed7 	bl	8002fd4 <zcl_reporting_send_conf>

08003226 <??zcl_reporting_send_report_4>:
 8003226:	f05f 0900 	movs.w	r9, #0

0800322a <??zcl_reporting_send_report_10>:
 800322a:	f1b9 0f0c 	cmp.w	r9, #12
 800322e:	d21e      	bcs.n	800326e <??zcl_reporting_send_report_11>
 8003230:	f05f 080c 	movs.w	r8, #12
 8003234:	fb08 f009 	mul.w	r0, r8, r9
 8003238:	4430      	add	r0, r6
 800323a:	6840      	ldr	r0, [r0, #4]
 800323c:	2800      	cmp	r0, #0
 800323e:	d016      	beq.n	800326e <??zcl_reporting_send_report_11>

08003240 <??zcl_reporting_send_report_12>:
 8003240:	2300      	movs	r3, #0
 8003242:	a23f      	add	r2, pc, #252	; (adr r2, 8003340 <??DataTable4>)
 8003244:	fb08 f009 	mul.w	r0, r8, r9
 8003248:	4430      	add	r0, r6
 800324a:	6841      	ldr	r1, [r0, #4]
 800324c:	68a8      	ldr	r0, [r5, #8]
 800324e:	f00f f9be 	bl	80125ce <zb_heap_free>
 8003252:	2000      	movs	r0, #0
 8003254:	fb08 f109 	mul.w	r1, r8, r9
 8003258:	4431      	add	r1, r6
 800325a:	6048      	str	r0, [r1, #4]
 800325c:	2000      	movs	r0, #0
 800325e:	fb08 f809 	mul.w	r8, r8, r9
 8003262:	eb06 0108 	add.w	r1, r6, r8
 8003266:	7208      	strb	r0, [r1, #8]
 8003268:	f119 0901 	adds.w	r9, r9, #1
 800326c:	e7dd      	b.n	800322a <??zcl_reporting_send_report_10>

0800326e <??zcl_reporting_send_report_11>:
 800326e:	b04d      	add	sp, #308	; 0x134
 8003270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003274 <zcl_report_check_time>:
 8003274:	4281      	cmp	r1, r0
 8003276:	d201      	bcs.n	800327c <??zcl_report_check_time_0>
 8003278:	0008      	movs	r0, r1
 800327a:	e7ff      	b.n	800327c <??zcl_report_check_time_0>

0800327c <??zcl_report_check_time_0>:
 800327c:	4770      	bx	lr

0800327e <zcl_report_kick>:
 800327e:	b538      	push	{r3, r4, r5, lr}
 8003280:	0004      	movs	r4, r0
 8003282:	000d      	movs	r5, r1
 8003284:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003286:	2800      	cmp	r0, #0
 8003288:	d101      	bne.n	800328e <??zcl_report_kick_0>
 800328a:	2000      	movs	r0, #0
 800328c:	e00d      	b.n	80032aa <??zcl_report_kick_1>

0800328e <??zcl_report_kick_0>:
 800328e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003292:	2800      	cmp	r0, #0
 8003294:	d001      	beq.n	800329a <??zcl_report_kick_2>
 8003296:	2001      	movs	r0, #1
 8003298:	e007      	b.n	80032aa <??zcl_report_kick_1>

0800329a <??zcl_report_kick_2>:
 800329a:	2001      	movs	r0, #1
 800329c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80032a0:	0029      	movs	r1, r5
 80032a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80032a4:	f00e fe92 	bl	8011fcc <ZbTimerReset>
 80032a8:	2001      	movs	r0, #1

080032aa <??zcl_report_kick_1>:
 80032aa:	bd32      	pop	{r1, r4, r5, pc}

080032ac <ZbZclAttrReportKick>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	0004      	movs	r4, r0
 80032b0:	000d      	movs	r5, r1
 80032b2:	0016      	movs	r6, r2
 80032b4:	001f      	movs	r7, r3
 80032b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d001      	beq.n	80032c0 <??ZbZclAttrReportKick_0>
 80032bc:	2001      	movs	r0, #1
 80032be:	e010      	b.n	80032e2 <??ZbZclAttrReportKick_1>

080032c0 <??ZbZclAttrReportKick_0>:
 80032c0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 80032c4:	6426      	str	r6, [r4, #64]	; 0x40
 80032c6:	6467      	str	r7, [r4, #68]	; 0x44
 80032c8:	2100      	movs	r1, #0
 80032ca:	0020      	movs	r0, r4
 80032cc:	f7ff ffd7 	bl	800327e <zcl_report_kick>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d105      	bne.n	80032e0 <??ZbZclAttrReportKick_2>
 80032d4:	2000      	movs	r0, #0
 80032d6:	6420      	str	r0, [r4, #64]	; 0x40
 80032d8:	2000      	movs	r0, #0
 80032da:	6460      	str	r0, [r4, #68]	; 0x44
 80032dc:	2001      	movs	r0, #1
 80032de:	e000      	b.n	80032e2 <??ZbZclAttrReportKick_1>

080032e0 <??ZbZclAttrReportKick_2>:
 80032e0:	2000      	movs	r0, #0

080032e2 <??ZbZclAttrReportKick_1>:
 80032e2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080032e4 <zcl_report_append_attr>:
 80032e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e8:	0004      	movs	r4, r0
 80032ea:	000d      	movs	r5, r1
 80032ec:	0016      	movs	r6, r2
 80032ee:	001f      	movs	r7, r3
 80032f0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80032f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80032f8:	2300      	movs	r3, #0
 80032fa:	a211      	add	r2, pc, #68	; (adr r2, 8003340 <??DataTable4>)
 80032fc:	4649      	mov	r1, r9
 80032fe:	0020      	movs	r0, r4
 8003300:	f00f f956 	bl	80125b0 <zb_heap_alloc>
 8003304:	6068      	str	r0, [r5, #4]
 8003306:	6868      	ldr	r0, [r5, #4]
 8003308:	2800      	cmp	r0, #0
 800330a:	d101      	bne.n	8003310 <??zcl_report_append_attr_0>
 800330c:	2000      	movs	r0, #0
 800330e:	e014      	b.n	800333a <??zcl_report_append_attr_1>

08003310 <??zcl_report_append_attr_0>:
 8003310:	f8cd 9000 	str.w	r9, [sp]
 8003314:	46c2      	mov	sl, r8
 8003316:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800331a:	9a00      	ldr	r2, [sp, #0]
 800331c:	4651      	mov	r1, sl
 800331e:	4658      	mov	r0, fp
 8003320:	f012 f9cf 	bl	80156c2 <__aeabi_memcpy>
 8003324:	f885 9008 	strb.w	r9, [r5, #8]
 8003328:	802e      	strh	r6, [r5, #0]
 800332a:	0031      	movs	r1, r6
 800332c:	b289      	uxth	r1, r1
 800332e:	f115 0009 	adds.w	r0, r5, #9
 8003332:	f7fe fc9a 	bl	8001c6a <putle16>
 8003336:	72ef      	strb	r7, [r5, #11]
 8003338:	2001      	movs	r0, #1

0800333a <??zcl_report_append_attr_1>:
 800333a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003340 <??DataTable4>:
 8003340:	0000 0000                                   ....

08003344 <zcl_cluster_report_check_timeout>:
 8003344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003348:	0006      	movs	r6, r0
 800334a:	000f      	movs	r7, r1
 800334c:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800334e:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 8003352:	4288      	cmp	r0, r1
 8003354:	d001      	beq.n	800335a <??zcl_cluster_report_check_timeout_0>
 8003356:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003358:	e000      	b.n	800335c <??zcl_cluster_report_check_timeout_1>

0800335a <??zcl_cluster_report_check_timeout_0>:
 800335a:	2000      	movs	r0, #0

0800335c <??zcl_cluster_report_check_timeout_1>:
 800335c:	2800      	cmp	r0, #0
 800335e:	d101      	bne.n	8003364 <??zcl_cluster_report_check_timeout_2>
 8003360:	2000      	movs	r0, #0
 8003362:	e042      	b.n	80033ea <??zcl_cluster_report_check_timeout_3>

08003364 <??zcl_cluster_report_check_timeout_2>:
 8003364:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003366:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 800336a:	4288      	cmp	r0, r1
 800336c:	d001      	beq.n	8003372 <??zcl_cluster_report_check_timeout_4>
 800336e:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8003370:	e000      	b.n	8003374 <??zcl_cluster_report_check_timeout_5>

08003372 <??zcl_cluster_report_check_timeout_4>:
 8003372:	2500      	movs	r5, #0

08003374 <??zcl_cluster_report_check_timeout_5>:
 8003374:	2d00      	cmp	r5, #0
 8003376:	d037      	beq.n	80033e8 <??zcl_cluster_report_check_timeout_6>
 8003378:	46a8      	mov	r8, r5
 800337a:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 800337e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003382:	4288      	cmp	r0, r1
 8003384:	d027      	beq.n	80033d6 <??zcl_cluster_report_check_timeout_7>

08003386 <??zcl_cluster_report_check_timeout_8>:
 8003386:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 800338a:	2800      	cmp	r0, #0
 800338c:	d00e      	beq.n	80033ac <??zcl_cluster_report_check_timeout_9>
 800338e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003392:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 8003396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800339a:	fb00 1909 	mla	r9, r0, r9, r1
 800339e:	4649      	mov	r1, r9
 80033a0:	0038      	movs	r0, r7
 80033a2:	f00e fe43 	bl	801202c <ZbTimeoutRemaining>
 80033a6:	0004      	movs	r4, r0
 80033a8:	2c00      	cmp	r4, #0
 80033aa:	d114      	bne.n	80033d6 <??zcl_cluster_report_check_timeout_7>

080033ac <??zcl_cluster_report_check_timeout_9>:
 80033ac:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d010      	beq.n	80033d6 <??zcl_cluster_report_check_timeout_7>

080033b4 <??zcl_cluster_report_check_timeout_10>:
 80033b4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80033b8:	f8b8 9022 	ldrh.w	r9, [r8, #34]	; 0x22
 80033bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033c0:	fb00 1909 	mla	r9, r0, r9, r1
 80033c4:	4649      	mov	r1, r9
 80033c6:	0038      	movs	r0, r7
 80033c8:	f00e fe30 	bl	801202c <ZbTimeoutRemaining>
 80033cc:	0004      	movs	r4, r0
 80033ce:	2c00      	cmp	r4, #0
 80033d0:	d101      	bne.n	80033d6 <??zcl_cluster_report_check_timeout_7>

080033d2 <??zcl_cluster_report_check_timeout_11>:
 80033d2:	2001      	movs	r0, #1
 80033d4:	e009      	b.n	80033ea <??zcl_cluster_report_check_timeout_3>

080033d6 <??zcl_cluster_report_check_timeout_7>:
 80033d6:	6828      	ldr	r0, [r5, #0]
 80033d8:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 80033dc:	4288      	cmp	r0, r1
 80033de:	d001      	beq.n	80033e4 <??zcl_cluster_report_check_timeout_12>
 80033e0:	682d      	ldr	r5, [r5, #0]
 80033e2:	e7c7      	b.n	8003374 <??zcl_cluster_report_check_timeout_5>

080033e4 <??zcl_cluster_report_check_timeout_12>:
 80033e4:	2500      	movs	r5, #0
 80033e6:	e7c5      	b.n	8003374 <??zcl_cluster_report_check_timeout_5>

080033e8 <??zcl_cluster_report_check_timeout_6>:
 80033e8:	2000      	movs	r0, #0

080033ea <??zcl_cluster_report_check_timeout_3>:
 80033ea:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080033f0 <zcl_cluster_reports_timer>:
 80033f0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	b081      	sub	sp, #4
 80033f6:	ed2d 8b04 	vpush	{d8-d9}
 80033fa:	b0b0      	sub	sp, #192	; 0xc0
 80033fc:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80033fe:	9003      	str	r0, [sp, #12]
 8003400:	2000      	movs	r0, #0
 8003402:	9005      	str	r0, [sp, #20]
 8003404:	2000      	movs	r0, #0
 8003406:	9007      	str	r0, [sp, #28]
 8003408:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8003d04 <??DataTable9_4>
 800340c:	9006      	str	r0, [sp, #24]
 800340e:	2000      	movs	r0, #0
 8003410:	f88d 0010 	strb.w	r0, [sp, #16]
 8003414:	f05f 0b00 	movs.w	fp, #0
 8003418:	9803      	ldr	r0, [sp, #12]
 800341a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800341e:	f88d 000b 	strb.w	r0, [sp, #11]
 8003422:	2000      	movs	r0, #0
 8003424:	f88d 000a 	strb.w	r0, [sp, #10]
 8003428:	2000      	movs	r0, #0
 800342a:	9903      	ldr	r1, [sp, #12]
 800342c:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 8003430:	2000      	movs	r0, #0
 8003432:	9903      	ldr	r1, [sp, #12]
 8003434:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 8003438:	9803      	ldr	r0, [sp, #12]
 800343a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800343c:	9903      	ldr	r1, [sp, #12]
 800343e:	3130      	adds	r1, #48	; 0x30
 8003440:	4288      	cmp	r0, r1
 8003442:	d002      	beq.n	800344a <??zcl_cluster_reports_timer_1>
 8003444:	9803      	ldr	r0, [sp, #12]
 8003446:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003448:	e000      	b.n	800344c <??zcl_cluster_reports_timer_2>

0800344a <??zcl_cluster_reports_timer_1>:
 800344a:	2000      	movs	r0, #0

0800344c <??zcl_cluster_reports_timer_2>:
 800344c:	2800      	cmp	r0, #0
 800344e:	f000 81f7 	beq.w	8003840 <??zcl_cluster_reports_timer_3>

08003452 <??zcl_cluster_reports_timer_4>:
 8003452:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8003454:	f00e fe6f 	bl	8012136 <ZbZclUptime>
 8003458:	9009      	str	r0, [sp, #36]	; 0x24
 800345a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800345c:	9803      	ldr	r0, [sp, #12]
 800345e:	f7ff ff71 	bl	8003344 <zcl_cluster_report_check_timeout>
 8003462:	2800      	cmp	r0, #0
 8003464:	d004      	beq.n	8003470 <??zcl_cluster_reports_timer_5>
 8003466:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003468:	f510 707a 	adds.w	r0, r0, #1000	; 0x3e8
 800346c:	900b      	str	r0, [sp, #44]	; 0x2c
 800346e:	e001      	b.n	8003474 <??zcl_cluster_reports_timer_6>

08003470 <??zcl_cluster_reports_timer_5>:
 8003470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003472:	900b      	str	r0, [sp, #44]	; 0x2c

08003474 <??zcl_cluster_reports_timer_6>:
 8003474:	2490      	movs	r4, #144	; 0x90
 8003476:	2500      	movs	r5, #0
 8003478:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800347c:	002a      	movs	r2, r5
 800347e:	0021      	movs	r1, r4
 8003480:	4640      	mov	r0, r8
 8003482:	f002 fba8 	bl	8005bd6 <__aeabi_memset>
 8003486:	2000      	movs	r0, #0
 8003488:	4682      	mov	sl, r0
 800348a:	2000      	movs	r0, #0
 800348c:	f88d 0008 	strb.w	r0, [sp, #8]
 8003490:	9803      	ldr	r0, [sp, #12]
 8003492:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003494:	9903      	ldr	r1, [sp, #12]
 8003496:	3130      	adds	r1, #48	; 0x30
 8003498:	4288      	cmp	r0, r1
 800349a:	d002      	beq.n	80034a2 <??zcl_cluster_reports_timer_7>
 800349c:	9803      	ldr	r0, [sp, #12]
 800349e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80034a0:	e000      	b.n	80034a4 <??zcl_cluster_reports_timer_8>

080034a2 <??zcl_cluster_reports_timer_7>:
 80034a2:	2600      	movs	r6, #0

080034a4 <??zcl_cluster_reports_timer_8>:
 80034a4:	2e00      	cmp	r6, #0
 80034a6:	f000 817b 	beq.w	80037a0 <??zcl_cluster_reports_timer_9>
 80034aa:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80034ae:	f88d 0009 	strb.w	r0, [sp, #9]
 80034b2:	f8df 0850 	ldr.w	r0, [pc, #2128]	; 8003d04 <??DataTable9_4>
 80034b6:	900a      	str	r0, [sp, #40]	; 0x28
 80034b8:	0037      	movs	r7, r6
 80034ba:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80034bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034c0:	4288      	cmp	r0, r1
 80034c2:	f000 8164 	beq.w	800378e <??zcl_cluster_reports_timer_10>

080034c6 <??zcl_cluster_reports_timer_11>:
 80034c6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d116      	bne.n	80034fc <??zcl_cluster_reports_timer_12>
 80034ce:	8c38      	ldrh	r0, [r7, #32]
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d013      	beq.n	80034fc <??zcl_cluster_reports_timer_12>
 80034d4:	6939      	ldr	r1, [r7, #16]
 80034d6:	8c3c      	ldrh	r4, [r7, #32]
 80034d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034dc:	fb00 1404 	mla	r4, r0, r4, r1
 80034e0:	0021      	movs	r1, r4
 80034e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80034e4:	f00e fda2 	bl	801202c <ZbTimeoutRemaining>
 80034e8:	9008      	str	r0, [sp, #32]
 80034ea:	9808      	ldr	r0, [sp, #32]
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d005      	beq.n	80034fc <??zcl_cluster_reports_timer_12>
 80034f0:	9908      	ldr	r1, [sp, #32]
 80034f2:	9806      	ldr	r0, [sp, #24]
 80034f4:	f7ff febe 	bl	8003274 <zcl_report_check_time>
 80034f8:	9006      	str	r0, [sp, #24]
 80034fa:	e148      	b.n	800378e <??zcl_cluster_reports_timer_10>

080034fc <??zcl_cluster_reports_timer_12>:
 80034fc:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003500:	2800      	cmp	r0, #0
 8003502:	d115      	bne.n	8003530 <??zcl_cluster_reports_timer_13>
 8003504:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8003506:	2800      	cmp	r0, #0
 8003508:	d012      	beq.n	8003530 <??zcl_cluster_reports_timer_13>
 800350a:	6939      	ldr	r1, [r7, #16]
 800350c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800350e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003512:	fb00 1404 	mla	r4, r0, r4, r1
 8003516:	0021      	movs	r1, r4
 8003518:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800351a:	f00e fd87 	bl	801202c <ZbTimeoutRemaining>
 800351e:	900a      	str	r0, [sp, #40]	; 0x28
 8003520:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003522:	2800      	cmp	r0, #0
 8003524:	d104      	bne.n	8003530 <??zcl_cluster_reports_timer_13>
 8003526:	2001      	movs	r0, #1
 8003528:	f88d 0009 	strb.w	r0, [sp, #9]
 800352c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800352e:	6138      	str	r0, [r7, #16]

08003530 <??zcl_cluster_reports_timer_13>:
 8003530:	9803      	ldr	r0, [sp, #12]
 8003532:	8982      	ldrh	r2, [r0, #12]
 8003534:	9803      	ldr	r0, [sp, #12]
 8003536:	7b81      	ldrb	r1, [r0, #14]
 8003538:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800353a:	f00e fbbe 	bl	8011cba <ZbApsBindSrcExists>
 800353e:	2800      	cmp	r0, #0
 8003540:	d105      	bne.n	800354e <??zcl_cluster_reports_timer_14>
 8003542:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003544:	9806      	ldr	r0, [sp, #24]
 8003546:	f7ff fe95 	bl	8003274 <zcl_report_check_time>
 800354a:	9006      	str	r0, [sp, #24]
 800354c:	e11f      	b.n	800378e <??zcl_cluster_reports_timer_10>

0800354e <??zcl_cluster_reports_timer_14>:
 800354e:	9805      	ldr	r0, [sp, #20]
 8003550:	2800      	cmp	r0, #0
 8003552:	d10b      	bne.n	800356c <??zcl_cluster_reports_timer_15>
 8003554:	2300      	movs	r3, #0
 8003556:	a28a      	add	r2, pc, #552	; (adr r2, 8003780 <??zcl_cluster_reports_timer_0>)
 8003558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800355c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800355e:	f00f f827 	bl	80125b0 <zb_heap_alloc>
 8003562:	9005      	str	r0, [sp, #20]
 8003564:	9805      	ldr	r0, [sp, #20]
 8003566:	2800      	cmp	r0, #0
 8003568:	f000 816a 	beq.w	8003840 <??zcl_cluster_reports_timer_3>

0800356c <??zcl_cluster_reports_timer_15>:
 800356c:	2000      	movs	r0, #0
 800356e:	9001      	str	r0, [sp, #4]
 8003570:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003574:	9000      	str	r0, [sp, #0]
 8003576:	9b05      	ldr	r3, [sp, #20]
 8003578:	f10d 0211 	add.w	r2, sp, #17
 800357c:	89b9      	ldrh	r1, [r7, #12]
 800357e:	9803      	ldr	r0, [sp, #12]
 8003580:	f7fe fcfb 	bl	8001f7a <ZbZclAttrRead>
 8003584:	2800      	cmp	r0, #0
 8003586:	d003      	beq.n	8003590 <??zcl_cluster_reports_timer_16>
 8003588:	0038      	movs	r0, r7
 800358a:	f000 fb0a 	bl	8003ba2 <zcl_reporting_disable>
 800358e:	e094      	b.n	80036ba <??zcl_cluster_reports_timer_17>

08003590 <??zcl_cluster_reports_timer_16>:
 8003590:	2300      	movs	r3, #0
 8003592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003596:	9905      	ldr	r1, [sp, #20]
 8003598:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800359c:	f7ff fb15 	bl	8002bca <ZbZclAttrParseLength>
 80035a0:	9007      	str	r0, [sp, #28]
 80035a2:	9807      	ldr	r0, [sp, #28]
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d503      	bpl.n	80035b0 <??zcl_cluster_reports_timer_18>
 80035a8:	0038      	movs	r0, r7
 80035aa:	f000 fafa 	bl	8003ba2 <zcl_reporting_disable>
 80035ae:	e084      	b.n	80036ba <??zcl_cluster_reports_timer_17>

080035b0 <??zcl_cluster_reports_timer_18>:
 80035b0:	9807      	ldr	r0, [sp, #28]
 80035b2:	2800      	cmp	r0, #0
 80035b4:	f000 8081 	beq.w	80036ba <??zcl_cluster_reports_timer_17>

080035b8 <??zcl_cluster_reports_timer_19>:
 80035b8:	7bb8      	ldrb	r0, [r7, #14]
 80035ba:	2838      	cmp	r0, #56	; 0x38
 80035bc:	db37      	blt.n	800362e <??zcl_cluster_reports_timer_20>
 80035be:	7bb8      	ldrb	r0, [r7, #14]
 80035c0:	283b      	cmp	r0, #59	; 0x3b
 80035c2:	da34      	bge.n	800362e <??zcl_cluster_reports_timer_20>
 80035c4:	f10d 0201 	add.w	r2, sp, #1
 80035c8:	9905      	ldr	r1, [sp, #20]
 80035ca:	7bb8      	ldrb	r0, [r7, #14]
 80035cc:	f001 ffd1 	bl	8005572 <ZbZclParseFloat>
 80035d0:	eeb0 8a40 	vmov.f32	s16, s0
 80035d4:	eef0 8a60 	vmov.f32	s17, s1
 80035d8:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80035dc:	2800      	cmp	r0, #0
 80035de:	d003      	beq.n	80035e8 <??zcl_cluster_reports_timer_21>
 80035e0:	0038      	movs	r0, r7
 80035e2:	f000 fade 	bl	8003ba2 <zcl_reporting_disable>
 80035e6:	e068      	b.n	80036ba <??zcl_cluster_reports_timer_17>

080035e8 <??zcl_cluster_reports_timer_21>:
 80035e8:	ec51 0b18 	vmov	r0, r1, d8
 80035ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f0:	f002 fb9e 	bl	8005d30 <__aeabi_dsub>
 80035f4:	ec41 0b19 	vmov	d9, r0, r1
 80035f8:	ec51 0b19 	vmov	r0, r1, d9
 80035fc:	2200      	movs	r2, #0
 80035fe:	2300      	movs	r3, #0
 8003600:	f002 ffae 	bl	8006560 <__aeabi_cdcmpeq>
 8003604:	d205      	bcs.n	8003612 <??zcl_cluster_reports_timer_22>
 8003606:	ec51 0b19 	vmov	r0, r1, d9
 800360a:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 800360e:	ec41 0b19 	vmov	d9, r0, r1

08003612 <??zcl_cluster_reports_timer_22>:
 8003612:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003616:	2800      	cmp	r0, #0
 8003618:	d106      	bne.n	8003628 <??zcl_cluster_reports_timer_23>
 800361a:	ec51 0b19 	vmov	r0, r1, d9
 800361e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003622:	f002 ff9d 	bl	8006560 <__aeabi_cdcmpeq>
 8003626:	d348      	bcc.n	80036ba <??zcl_cluster_reports_timer_17>

08003628 <??zcl_cluster_reports_timer_23>:
 8003628:	ed87 8b06 	vstr	d8, [r7, #24]
 800362c:	e040      	b.n	80036b0 <??zcl_cluster_reports_timer_24>

0800362e <??zcl_cluster_reports_timer_20>:
 800362e:	7bb8      	ldrb	r0, [r7, #14]
 8003630:	f7ff fb7c 	bl	8002d2c <ZbZclAttrIsAnalog>
 8003634:	2800      	cmp	r0, #0
 8003636:	d02b      	beq.n	8003690 <??zcl_cluster_reports_timer_25>
 8003638:	466a      	mov	r2, sp
 800363a:	9905      	ldr	r1, [sp, #20]
 800363c:	7bb8      	ldrb	r0, [r7, #14]
 800363e:	f7fc fe69 	bl	8000314 <ZbZclParseInteger>
 8003642:	0004      	movs	r4, r0
 8003644:	000d      	movs	r5, r1
 8003646:	f89d 0000 	ldrb.w	r0, [sp]
 800364a:	2800      	cmp	r0, #0
 800364c:	d003      	beq.n	8003656 <??zcl_cluster_reports_timer_26>
 800364e:	0038      	movs	r0, r7
 8003650:	f000 faa7 	bl	8003ba2 <zcl_reporting_disable>
 8003654:	e031      	b.n	80036ba <??zcl_cluster_reports_timer_17>

08003656 <??zcl_cluster_reports_timer_26>:
 8003656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800365a:	ebb4 0800 	subs.w	r8, r4, r0
 800365e:	eb75 0901 	sbcs.w	r9, r5, r1
 8003662:	f1b9 0f00 	cmp.w	r9, #0
 8003666:	d503      	bpl.n	8003670 <??zcl_cluster_reports_timer_27>
 8003668:	f1d8 0800 	rsbs	r8, r8, #0
 800366c:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

08003670 <??zcl_cluster_reports_timer_27>:
 8003670:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003674:	2800      	cmp	r0, #0
 8003676:	d108      	bne.n	800368a <??zcl_cluster_reports_timer_28>
 8003678:	4640      	mov	r0, r8
 800367a:	4649      	mov	r1, r9
 800367c:	f002 fce2 	bl	8006044 <__aeabi_l2d>
 8003680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003684:	f002 ff6c 	bl	8006560 <__aeabi_cdcmpeq>
 8003688:	d317      	bcc.n	80036ba <??zcl_cluster_reports_timer_17>

0800368a <??zcl_cluster_reports_timer_28>:
 800368a:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800368e:	e00f      	b.n	80036b0 <??zcl_cluster_reports_timer_24>

08003690 <??zcl_cluster_reports_timer_25>:
 8003690:	9a07      	ldr	r2, [sp, #28]
 8003692:	9905      	ldr	r1, [sp, #20]
 8003694:	2000      	movs	r0, #0
 8003696:	f00e ffa9 	bl	80125ec <WpanCrc>
 800369a:	0001      	movs	r1, r0
 800369c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d104      	bne.n	80036ae <??zcl_cluster_reports_timer_29>
 80036a4:	8b38      	ldrh	r0, [r7, #24]
 80036a6:	000a      	movs	r2, r1
 80036a8:	b292      	uxth	r2, r2
 80036aa:	4290      	cmp	r0, r2
 80036ac:	d005      	beq.n	80036ba <??zcl_cluster_reports_timer_17>

080036ae <??zcl_cluster_reports_timer_29>:
 80036ae:	8339      	strh	r1, [r7, #24]

080036b0 <??zcl_cluster_reports_timer_24>:
 80036b0:	2001      	movs	r0, #1
 80036b2:	f88d 0009 	strb.w	r0, [sp, #9]
 80036b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036b8:	6138      	str	r0, [r7, #16]

080036ba <??zcl_cluster_reports_timer_17>:
 80036ba:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80036be:	2800      	cmp	r0, #0
 80036c0:	d060      	beq.n	8003784 <??zcl_cluster_reports_timer_30>
 80036c2:	9807      	ldr	r0, [sp, #28]
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d05d      	beq.n	8003784 <??zcl_cluster_reports_timer_30>
 80036c8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80036cc:	1c40      	adds	r0, r0, #1
 80036ce:	f88d 0010 	strb.w	r0, [sp, #16]
 80036d2:	4650      	mov	r0, sl
 80036d4:	b2c0      	uxtb	r0, r0
 80036d6:	280c      	cmp	r0, #12
 80036d8:	d007      	beq.n	80036ea <??zcl_cluster_reports_timer_31>
 80036da:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80036de:	9907      	ldr	r1, [sp, #28]
 80036e0:	fa51 f080 	uxtab	r0, r1, r0
 80036e4:	1cc0      	adds	r0, r0, #3
 80036e6:	2837      	cmp	r0, #55	; 0x37
 80036e8:	d314      	bcc.n	8003714 <??zcl_cluster_reports_timer_32>

080036ea <??zcl_cluster_reports_timer_31>:
 80036ea:	465a      	mov	r2, fp
 80036ec:	a90c      	add	r1, sp, #48	; 0x30
 80036ee:	9803      	ldr	r0, [sp, #12]
 80036f0:	f7ff fc8e 	bl	8003010 <zcl_reporting_queue_report>
 80036f4:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 80036f8:	2490      	movs	r4, #144	; 0x90
 80036fa:	2500      	movs	r5, #0
 80036fc:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003700:	002a      	movs	r2, r5
 8003702:	0021      	movs	r1, r4
 8003704:	4640      	mov	r0, r8
 8003706:	f002 fa66 	bl	8005bd6 <__aeabi_memset>
 800370a:	2000      	movs	r0, #0
 800370c:	4682      	mov	sl, r0
 800370e:	2000      	movs	r0, #0
 8003710:	f88d 0008 	strb.w	r0, [sp, #8]

08003714 <??zcl_cluster_reports_timer_32>:
 8003714:	9807      	ldr	r0, [sp, #28]
 8003716:	9001      	str	r0, [sp, #4]
 8003718:	9805      	ldr	r0, [sp, #20]
 800371a:	9000      	str	r0, [sp, #0]
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	89ba      	ldrh	r2, [r7, #12]
 8003720:	a90c      	add	r1, sp, #48	; 0x30
 8003722:	4654      	mov	r4, sl
 8003724:	b2e4      	uxtb	r4, r4
 8003726:	200c      	movs	r0, #12
 8003728:	4344      	muls	r4, r0
 800372a:	4421      	add	r1, r4
 800372c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800372e:	f7ff fdd9 	bl	80032e4 <zcl_report_append_attr>
 8003732:	2800      	cmp	r0, #0
 8003734:	d02b      	beq.n	800378e <??zcl_cluster_reports_timer_10>

08003736 <??zcl_cluster_reports_timer_33>:
 8003736:	f11a 0a01 	adds.w	sl, sl, #1
 800373a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800373e:	9807      	ldr	r0, [sp, #28]
 8003740:	1841      	adds	r1, r0, r1
 8003742:	1cc9      	adds	r1, r1, #3
 8003744:	f88d 1008 	strb.w	r1, [sp, #8]
 8003748:	8c38      	ldrh	r0, [r7, #32]
 800374a:	2800      	cmp	r0, #0
 800374c:	d005      	beq.n	800375a <??zcl_cluster_reports_timer_34>
 800374e:	8c39      	ldrh	r1, [r7, #32]
 8003750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003754:	4341      	muls	r1, r0
 8003756:	9108      	str	r1, [sp, #32]
 8003758:	e00b      	b.n	8003772 <??zcl_cluster_reports_timer_35>

0800375a <??zcl_cluster_reports_timer_34>:
 800375a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800375c:	2800      	cmp	r0, #0
 800375e:	d005      	beq.n	800376c <??zcl_cluster_reports_timer_36>
 8003760:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003766:	4341      	muls	r1, r0
 8003768:	9108      	str	r1, [sp, #32]
 800376a:	e002      	b.n	8003772 <??zcl_cluster_reports_timer_35>

0800376c <??zcl_cluster_reports_timer_36>:
 800376c:	f8df 0594 	ldr.w	r0, [pc, #1428]	; 8003d04 <??DataTable9_4>
 8003770:	9008      	str	r0, [sp, #32]

08003772 <??zcl_cluster_reports_timer_35>:
 8003772:	9908      	ldr	r1, [sp, #32]
 8003774:	9806      	ldr	r0, [sp, #24]
 8003776:	f7ff fd7d 	bl	8003274 <zcl_report_check_time>
 800377a:	9006      	str	r0, [sp, #24]
 800377c:	e007      	b.n	800378e <??zcl_cluster_reports_timer_10>
 800377e:	bf00      	nop

08003780 <??zcl_cluster_reports_timer_0>:
 8003780:	0000 0000                                   ....

08003784 <??zcl_cluster_reports_timer_30>:
 8003784:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003786:	9806      	ldr	r0, [sp, #24]
 8003788:	f7ff fd74 	bl	8003274 <zcl_report_check_time>
 800378c:	9006      	str	r0, [sp, #24]

0800378e <??zcl_cluster_reports_timer_10>:
 800378e:	6830      	ldr	r0, [r6, #0]
 8003790:	9903      	ldr	r1, [sp, #12]
 8003792:	3130      	adds	r1, #48	; 0x30
 8003794:	4288      	cmp	r0, r1
 8003796:	d001      	beq.n	800379c <??zcl_cluster_reports_timer_37>
 8003798:	6836      	ldr	r6, [r6, #0]
 800379a:	e683      	b.n	80034a4 <??zcl_cluster_reports_timer_8>

0800379c <??zcl_cluster_reports_timer_37>:
 800379c:	2600      	movs	r6, #0
 800379e:	e681      	b.n	80034a4 <??zcl_cluster_reports_timer_8>

080037a0 <??zcl_cluster_reports_timer_9>:
 80037a0:	9805      	ldr	r0, [sp, #20]
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d04c      	beq.n	8003840 <??zcl_cluster_reports_timer_3>
 80037a6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80037aa:	2800      	cmp	r0, #0
 80037ac:	d042      	beq.n	8003834 <??zcl_cluster_reports_timer_38>
 80037ae:	2001      	movs	r0, #1
 80037b0:	9007      	str	r0, [sp, #28]
 80037b2:	2001      	movs	r0, #1
 80037b4:	9905      	ldr	r1, [sp, #20]
 80037b6:	7008      	strb	r0, [r1, #0]
 80037b8:	4650      	mov	r0, sl
 80037ba:	b2c0      	uxtb	r0, r0
 80037bc:	280c      	cmp	r0, #12
 80037be:	d007      	beq.n	80037d0 <??zcl_cluster_reports_timer_39>
 80037c0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80037c4:	9907      	ldr	r1, [sp, #28]
 80037c6:	fa51 f080 	uxtab	r0, r1, r0
 80037ca:	1cc0      	adds	r0, r0, #3
 80037cc:	2837      	cmp	r0, #55	; 0x37
 80037ce:	d314      	bcc.n	80037fa <??zcl_cluster_reports_timer_40>

080037d0 <??zcl_cluster_reports_timer_39>:
 80037d0:	465a      	mov	r2, fp
 80037d2:	a90c      	add	r1, sp, #48	; 0x30
 80037d4:	9803      	ldr	r0, [sp, #12]
 80037d6:	f7ff fc1b 	bl	8003010 <zcl_reporting_queue_report>
 80037da:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 80037de:	2490      	movs	r4, #144	; 0x90
 80037e0:	2500      	movs	r5, #0
 80037e2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80037e6:	002a      	movs	r2, r5
 80037e8:	0021      	movs	r1, r4
 80037ea:	4640      	mov	r0, r8
 80037ec:	f002 f9f3 	bl	8005bd6 <__aeabi_memset>
 80037f0:	2000      	movs	r0, #0
 80037f2:	4682      	mov	sl, r0
 80037f4:	2000      	movs	r0, #0
 80037f6:	f88d 0008 	strb.w	r0, [sp, #8]

080037fa <??zcl_cluster_reports_timer_40>:
 80037fa:	9807      	ldr	r0, [sp, #28]
 80037fc:	9001      	str	r0, [sp, #4]
 80037fe:	9805      	ldr	r0, [sp, #20]
 8003800:	9000      	str	r0, [sp, #0]
 8003802:	2330      	movs	r3, #48	; 0x30
 8003804:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003808:	a90c      	add	r1, sp, #48	; 0x30
 800380a:	4654      	mov	r4, sl
 800380c:	b2e4      	uxtb	r4, r4
 800380e:	200c      	movs	r0, #12
 8003810:	4344      	muls	r4, r0
 8003812:	4421      	add	r1, r4
 8003814:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8003816:	f7ff fd65 	bl	80032e4 <zcl_report_append_attr>
 800381a:	2800      	cmp	r0, #0
 800381c:	d001      	beq.n	8003822 <??zcl_cluster_reports_timer_41>
 800381e:	f11a 0a01 	adds.w	sl, sl, #1

08003822 <??zcl_cluster_reports_timer_41>:
 8003822:	4650      	mov	r0, sl
 8003824:	b2c0      	uxtb	r0, r0
 8003826:	2800      	cmp	r0, #0
 8003828:	d004      	beq.n	8003834 <??zcl_cluster_reports_timer_38>
 800382a:	465a      	mov	r2, fp
 800382c:	a90c      	add	r1, sp, #48	; 0x30
 800382e:	9803      	ldr	r0, [sp, #12]
 8003830:	f7ff fbee 	bl	8003010 <zcl_reporting_queue_report>

08003834 <??zcl_cluster_reports_timer_38>:
 8003834:	2300      	movs	r3, #0
 8003836:	a2ba      	add	r2, pc, #744	; (adr r2, 8003b20 <??DataTable7>)
 8003838:	9905      	ldr	r1, [sp, #20]
 800383a:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800383c:	f00e fec7 	bl	80125ce <zb_heap_free>

08003840 <??zcl_cluster_reports_timer_3>:
 8003840:	9806      	ldr	r0, [sp, #24]
 8003842:	28c8      	cmp	r0, #200	; 0xc8
 8003844:	d201      	bcs.n	800384a <??zcl_cluster_reports_timer_42>
 8003846:	20c8      	movs	r0, #200	; 0xc8
 8003848:	9006      	str	r0, [sp, #24]

0800384a <??zcl_cluster_reports_timer_42>:
 800384a:	9803      	ldr	r0, [sp, #12]
 800384c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800384e:	2800      	cmp	r0, #0
 8003850:	d00c      	beq.n	800386c <??zcl_cluster_reports_timer_43>
 8003852:	9803      	ldr	r0, [sp, #12]
 8003854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003856:	9906      	ldr	r1, [sp, #24]
 8003858:	9803      	ldr	r0, [sp, #12]
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4798      	blx	r3
 8003860:	2000      	movs	r0, #0
 8003862:	9903      	ldr	r1, [sp, #12]
 8003864:	6408      	str	r0, [r1, #64]	; 0x40
 8003866:	2000      	movs	r0, #0
 8003868:	9903      	ldr	r1, [sp, #12]
 800386a:	6448      	str	r0, [r1, #68]	; 0x44

0800386c <??zcl_cluster_reports_timer_43>:
 800386c:	2301      	movs	r3, #1
 800386e:	f10d 020a 	add.w	r2, sp, #10
 8003872:	f240 410c 	movw	r1, #1036	; 0x40c
 8003876:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8003878:	f00e fc48 	bl	801210c <ZbNwkGet>
 800387c:	2800      	cmp	r0, #0
 800387e:	d002      	beq.n	8003886 <??zcl_cluster_reports_timer_44>
 8003880:	2000      	movs	r0, #0
 8003882:	f88d 000a 	strb.w	r0, [sp, #10]

08003886 <??zcl_cluster_reports_timer_44>:
 8003886:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800388a:	2800      	cmp	r0, #0
 800388c:	d110      	bne.n	80038b0 <??zcl_cluster_reports_timer_45>
 800388e:	9803      	ldr	r0, [sp, #12]
 8003890:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003892:	9903      	ldr	r1, [sp, #12]
 8003894:	3130      	adds	r1, #48	; 0x30
 8003896:	4288      	cmp	r0, r1
 8003898:	d002      	beq.n	80038a0 <??zcl_cluster_reports_timer_46>
 800389a:	9803      	ldr	r0, [sp, #12]
 800389c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800389e:	e000      	b.n	80038a2 <??zcl_cluster_reports_timer_47>

080038a0 <??zcl_cluster_reports_timer_46>:
 80038a0:	2000      	movs	r0, #0

080038a2 <??zcl_cluster_reports_timer_47>:
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d004      	beq.n	80038b0 <??zcl_cluster_reports_timer_45>
 80038a6:	9906      	ldr	r1, [sp, #24]
 80038a8:	9803      	ldr	r0, [sp, #12]
 80038aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80038ac:	f00e fb8e 	bl	8011fcc <ZbTimerReset>

080038b0 <??zcl_cluster_reports_timer_45>:
 80038b0:	b030      	add	sp, #192	; 0xc0
 80038b2:	ecbd 8b04 	vpop	{d8-d9}
 80038b6:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080038ba <zcl_attr_reporting_check>:
 80038ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038bc:	0005      	movs	r5, r0
 80038be:	000e      	movs	r6, r1
 80038c0:	0017      	movs	r7, r2
 80038c2:	2000      	movs	r0, #0
 80038c4:	f88d 0000 	strb.w	r0, [sp]
 80038c8:	2301      	movs	r3, #1
 80038ca:	466a      	mov	r2, sp
 80038cc:	f240 410c 	movw	r1, #1036	; 0x40c
 80038d0:	68a8      	ldr	r0, [r5, #8]
 80038d2:	f00e fc1b 	bl	801210c <ZbNwkGet>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d002      	beq.n	80038e0 <??zcl_attr_reporting_check_0>
 80038da:	2000      	movs	r0, #0
 80038dc:	f88d 0000 	strb.w	r0, [sp]

080038e0 <??zcl_attr_reporting_check_0>:
 80038e0:	f89d 0000 	ldrb.w	r0, [sp]
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d10d      	bne.n	8003904 <??zcl_attr_reporting_check_1>
 80038e8:	003a      	movs	r2, r7
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	0031      	movs	r1, r6
 80038ee:	b289      	uxth	r1, r1
 80038f0:	0028      	movs	r0, r5
 80038f2:	f000 f81a 	bl	800392a <zcl_reporting_find>
 80038f6:	0004      	movs	r4, r0
 80038f8:	2c00      	cmp	r4, #0
 80038fa:	d003      	beq.n	8003904 <??zcl_attr_reporting_check_1>
 80038fc:	21c8      	movs	r1, #200	; 0xc8
 80038fe:	0028      	movs	r0, r5
 8003900:	f7ff fcbd 	bl	800327e <zcl_report_kick>

08003904 <??zcl_attr_reporting_check_1>:
 8003904:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003906 <ZbZclReportCleanup>:
 8003906:	b570      	push	{r4, r5, r6, lr}
 8003908:	0005      	movs	r5, r0

0800390a <??ZbZclReportCleanup_0>:
 800390a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800390c:	f115 0130 	adds.w	r1, r5, #48	; 0x30
 8003910:	4288      	cmp	r0, r1
 8003912:	d001      	beq.n	8003918 <??ZbZclReportCleanup_1>
 8003914:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8003916:	e000      	b.n	800391a <??ZbZclReportCleanup_2>

08003918 <??ZbZclReportCleanup_1>:
 8003918:	2400      	movs	r4, #0

0800391a <??ZbZclReportCleanup_2>:
 800391a:	2c00      	cmp	r4, #0
 800391c:	d004      	beq.n	8003928 <??ZbZclReportCleanup_3>

0800391e <??ZbZclReportCleanup_4>:
 800391e:	0026      	movs	r6, r4
 8003920:	0030      	movs	r0, r6
 8003922:	f000 f8ff 	bl	8003b24 <zcl_reporting_delete>
 8003926:	e7f0      	b.n	800390a <??ZbZclReportCleanup_0>

08003928 <??ZbZclReportCleanup_3>:
 8003928:	bd70      	pop	{r4, r5, r6, pc}

0800392a <zcl_reporting_find>:
 800392a:	b470      	push	{r4, r5, r6}
 800392c:	0004      	movs	r4, r0
 800392e:	000b      	movs	r3, r1
 8003930:	0010      	movs	r0, r2
 8003932:	b2c0      	uxtb	r0, r0
 8003934:	2801      	cmp	r0, #1
 8003936:	d101      	bne.n	800393c <??zcl_reporting_find_0>
 8003938:	2000      	movs	r0, #0
 800393a:	e01c      	b.n	8003976 <??zcl_reporting_find_1>

0800393c <??zcl_reporting_find_0>:
 800393c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800393e:	f114 0130 	adds.w	r1, r4, #48	; 0x30
 8003942:	4288      	cmp	r0, r1
 8003944:	d001      	beq.n	800394a <??zcl_reporting_find_2>
 8003946:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003948:	e000      	b.n	800394c <??zcl_reporting_find_3>

0800394a <??zcl_reporting_find_2>:
 800394a:	2100      	movs	r1, #0

0800394c <??zcl_reporting_find_3>:
 800394c:	2900      	cmp	r1, #0
 800394e:	d011      	beq.n	8003974 <??zcl_reporting_find_4>
 8003950:	000d      	movs	r5, r1
 8003952:	89a8      	ldrh	r0, [r5, #12]
 8003954:	001e      	movs	r6, r3
 8003956:	b2b6      	uxth	r6, r6
 8003958:	42b0      	cmp	r0, r6
 800395a:	d005      	beq.n	8003968 <??zcl_reporting_find_5>
 800395c:	6808      	ldr	r0, [r1, #0]
 800395e:	f114 0630 	adds.w	r6, r4, #48	; 0x30
 8003962:	42b0      	cmp	r0, r6
 8003964:	d004      	beq.n	8003970 <??zcl_reporting_find_6>
 8003966:	e001      	b.n	800396c <??zcl_reporting_find_7>

08003968 <??zcl_reporting_find_5>:
 8003968:	0028      	movs	r0, r5
 800396a:	e004      	b.n	8003976 <??zcl_reporting_find_1>

0800396c <??zcl_reporting_find_7>:
 800396c:	6809      	ldr	r1, [r1, #0]
 800396e:	e7ed      	b.n	800394c <??zcl_reporting_find_3>

08003970 <??zcl_reporting_find_6>:
 8003970:	2100      	movs	r1, #0
 8003972:	e7eb      	b.n	800394c <??zcl_reporting_find_3>

08003974 <??zcl_reporting_find_4>:
 8003974:	2000      	movs	r0, #0

08003976 <??zcl_reporting_find_1>:
 8003976:	bc70      	pop	{r4, r5, r6}
 8003978:	4770      	bx	lr

0800397a <zcl_reporting_stack_event>:
 800397a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397e:	0006      	movs	r6, r0
 8003980:	000f      	movs	r7, r1
 8003982:	4690      	mov	r8, r2
 8003984:	4699      	mov	r9, r3
 8003986:	46ca      	mov	sl, r9
 8003988:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800398c:	d001      	beq.n	8003992 <??zcl_reporting_stack_event_0>
 800398e:	2000      	movs	r0, #0
 8003990:	e01b      	b.n	80039ca <??zcl_reporting_stack_event_1>

08003992 <??zcl_reporting_stack_event_0>:
 8003992:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8003996:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 800399a:	4288      	cmp	r0, r1
 800399c:	d002      	beq.n	80039a4 <??zcl_reporting_stack_event_2>
 800399e:	f8da 4030 	ldr.w	r4, [sl, #48]	; 0x30
 80039a2:	e000      	b.n	80039a6 <??zcl_reporting_stack_event_3>

080039a4 <??zcl_reporting_stack_event_2>:
 80039a4:	2400      	movs	r4, #0

080039a6 <??zcl_reporting_stack_event_3>:
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	d00e      	beq.n	80039c8 <??zcl_reporting_stack_event_4>
 80039aa:	0025      	movs	r5, r4
 80039ac:	2201      	movs	r2, #1
 80039ae:	0029      	movs	r1, r5
 80039b0:	0030      	movs	r0, r6
 80039b2:	f000 f947 	bl	8003c44 <zcl_reporting_reset_defaults>
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 80039bc:	4288      	cmp	r0, r1
 80039be:	d001      	beq.n	80039c4 <??zcl_reporting_stack_event_5>
 80039c0:	6824      	ldr	r4, [r4, #0]
 80039c2:	e7f0      	b.n	80039a6 <??zcl_reporting_stack_event_3>

080039c4 <??zcl_reporting_stack_event_5>:
 80039c4:	2400      	movs	r4, #0
 80039c6:	e7ee      	b.n	80039a6 <??zcl_reporting_stack_event_3>

080039c8 <??zcl_reporting_stack_event_4>:
 80039c8:	2000      	movs	r0, #0

080039ca <??zcl_reporting_stack_event_1>:
 80039ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080039ce <zcl_reporting_save_curr_val>:
 80039ce:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80039d2:	0005      	movs	r5, r0
 80039d4:	000e      	movs	r6, r1
 80039d6:	68af      	ldr	r7, [r5, #8]
 80039d8:	f20f 1944 	addw	r9, pc, #324	; 0x144
 80039dc:	2300      	movs	r3, #0
 80039de:	464a      	mov	r2, r9
 80039e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e4:	0038      	movs	r0, r7
 80039e6:	f00e fde3 	bl	80125b0 <zb_heap_alloc>
 80039ea:	0004      	movs	r4, r0
 80039ec:	2c00      	cmp	r4, #0
 80039ee:	d101      	bne.n	80039f4 <??zcl_reporting_save_curr_val_0>
 80039f0:	2089      	movs	r0, #137	; 0x89
 80039f2:	e05d      	b.n	8003ab0 <??zcl_reporting_save_curr_val_1>

080039f4 <??zcl_reporting_save_curr_val_0>:
 80039f4:	2001      	movs	r0, #1
 80039f6:	9001      	str	r0, [sp, #4]
 80039f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039fc:	9000      	str	r0, [sp, #0]
 80039fe:	0023      	movs	r3, r4
 8003a00:	f10d 0209 	add.w	r2, sp, #9
 8003a04:	89b1      	ldrh	r1, [r6, #12]
 8003a06:	0028      	movs	r0, r5
 8003a08:	f7fe fab7 	bl	8001f7a <ZbZclAttrRead>
 8003a0c:	f88d 0008 	strb.w	r0, [sp, #8]
 8003a10:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d002      	beq.n	8003a1e <??zcl_reporting_save_curr_val_2>
 8003a18:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003a1c:	e048      	b.n	8003ab0 <??zcl_reporting_save_curr_val_1>

08003a1e <??zcl_reporting_save_curr_val_2>:
 8003a1e:	7bb0      	ldrb	r0, [r6, #14]
 8003a20:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8003a24:	4288      	cmp	r0, r1
 8003a26:	d001      	beq.n	8003a2c <??zcl_reporting_save_curr_val_3>
 8003a28:	208d      	movs	r0, #141	; 0x8d
 8003a2a:	e041      	b.n	8003ab0 <??zcl_reporting_save_curr_val_1>

08003a2c <??zcl_reporting_save_curr_val_3>:
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a32:	0021      	movs	r1, r4
 8003a34:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003a38:	f7ff f8c7 	bl	8002bca <ZbZclAttrParseLength>
 8003a3c:	4680      	mov	r8, r0
 8003a3e:	f1b8 0f00 	cmp.w	r8, #0
 8003a42:	d501      	bpl.n	8003a48 <??zcl_reporting_save_curr_val_4>
 8003a44:	2089      	movs	r0, #137	; 0x89
 8003a46:	e033      	b.n	8003ab0 <??zcl_reporting_save_curr_val_1>

08003a48 <??zcl_reporting_save_curr_val_4>:
 8003a48:	7bb0      	ldrb	r0, [r6, #14]
 8003a4a:	f7ff f96f 	bl	8002d2c <ZbZclAttrIsAnalog>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d106      	bne.n	8003a60 <??zcl_reporting_save_curr_val_5>
 8003a52:	4642      	mov	r2, r8
 8003a54:	0021      	movs	r1, r4
 8003a56:	2000      	movs	r0, #0
 8003a58:	f00e fdc8 	bl	80125ec <WpanCrc>
 8003a5c:	8330      	strh	r0, [r6, #24]
 8003a5e:	e020      	b.n	8003aa2 <??zcl_reporting_save_curr_val_6>

08003a60 <??zcl_reporting_save_curr_val_5>:
 8003a60:	7bb0      	ldrb	r0, [r6, #14]
 8003a62:	f002 f8ab 	bl	8005bbc <ZbZclAttrIsFloat>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d00d      	beq.n	8003a86 <??zcl_reporting_save_curr_val_7>
 8003a6a:	aa02      	add	r2, sp, #8
 8003a6c:	0021      	movs	r1, r4
 8003a6e:	7bb0      	ldrb	r0, [r6, #14]
 8003a70:	f001 fd7f 	bl	8005572 <ZbZclParseFloat>
 8003a74:	ed86 0b06 	vstr	d0, [r6, #24]
 8003a78:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d010      	beq.n	8003aa2 <??zcl_reporting_save_curr_val_6>
 8003a80:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003a84:	e014      	b.n	8003ab0 <??zcl_reporting_save_curr_val_1>

08003a86 <??zcl_reporting_save_curr_val_7>:
 8003a86:	aa02      	add	r2, sp, #8
 8003a88:	0021      	movs	r1, r4
 8003a8a:	7bb0      	ldrb	r0, [r6, #14]
 8003a8c:	f7fc fc42 	bl	8000314 <ZbZclParseInteger>
 8003a90:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8003a94:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d002      	beq.n	8003aa2 <??zcl_reporting_save_curr_val_6>
 8003a9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003aa0:	e006      	b.n	8003ab0 <??zcl_reporting_save_curr_val_1>

08003aa2 <??zcl_reporting_save_curr_val_6>:
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	464a      	mov	r2, r9
 8003aa6:	0021      	movs	r1, r4
 8003aa8:	0038      	movs	r0, r7
 8003aaa:	f00e fd90 	bl	80125ce <zb_heap_free>
 8003aae:	2000      	movs	r0, #0

08003ab0 <??zcl_reporting_save_curr_val_1>:
 8003ab0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08003ab4 <zcl_reporting_create_new>:
 8003ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	0006      	movs	r6, r0
 8003aba:	000f      	movs	r7, r1
 8003abc:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	89b9      	ldrh	r1, [r7, #12]
 8003ac4:	0030      	movs	r0, r6
 8003ac6:	f7ff ff30 	bl	800392a <zcl_reporting_find>
 8003aca:	0005      	movs	r5, r0
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	d001      	beq.n	8003ad4 <??zcl_reporting_create_new_0>
 8003ad0:	0028      	movs	r0, r5
 8003ad2:	e023      	b.n	8003b1c <??zcl_reporting_create_new_1>

08003ad4 <??zcl_reporting_create_new_0>:
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	a212      	add	r2, pc, #72	; (adr r2, 8003b20 <??DataTable7>)
 8003ad8:	2138      	movs	r1, #56	; 0x38
 8003ada:	4640      	mov	r0, r8
 8003adc:	f00e fd68 	bl	80125b0 <zb_heap_alloc>
 8003ae0:	0004      	movs	r4, r0
 8003ae2:	2c00      	cmp	r4, #0
 8003ae4:	d101      	bne.n	8003aea <??zcl_reporting_create_new_2>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e018      	b.n	8003b1c <??zcl_reporting_create_new_1>

08003aea <??zcl_reporting_create_new_2>:
 8003aea:	2538      	movs	r5, #56	; 0x38
 8003aec:	46b9      	mov	r9, r7
 8003aee:	46a2      	mov	sl, r4
 8003af0:	002a      	movs	r2, r5
 8003af2:	4649      	mov	r1, r9
 8003af4:	4650      	mov	r0, sl
 8003af6:	f011 fde4 	bl	80156c2 <__aeabi_memcpy>
 8003afa:	6024      	str	r4, [r4, #0]
 8003afc:	6064      	str	r4, [r4, #4]
 8003afe:	f116 0030 	adds.w	r0, r6, #48	; 0x30
 8003b02:	6020      	str	r0, [r4, #0]
 8003b04:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003b06:	6060      	str	r0, [r4, #4]
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	6044      	str	r4, [r0, #4]
 8003b0c:	6860      	ldr	r0, [r4, #4]
 8003b0e:	6004      	str	r4, [r0, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	0021      	movs	r1, r4
 8003b14:	4640      	mov	r0, r8
 8003b16:	f000 f895 	bl	8003c44 <zcl_reporting_reset_defaults>
 8003b1a:	0020      	movs	r0, r4

08003b1c <??zcl_reporting_create_new_1>:
 8003b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003b20 <??DataTable7>:
 8003b20:	0000 0000                                   ....

08003b24 <zcl_reporting_delete>:
 8003b24:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003b26:	0004      	movs	r4, r0
 8003b28:	68a5      	ldr	r5, [r4, #8]
 8003b2a:	68ae      	ldr	r6, [r5, #8]
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f88d 0000 	strb.w	r0, [sp]
 8003b32:	6860      	ldr	r0, [r4, #4]
 8003b34:	6821      	ldr	r1, [r4, #0]
 8003b36:	6048      	str	r0, [r1, #4]
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	6861      	ldr	r1, [r4, #4]
 8003b3c:	6008      	str	r0, [r1, #0]
 8003b3e:	6024      	str	r4, [r4, #0]
 8003b40:	6064      	str	r4, [r4, #4]
 8003b42:	2300      	movs	r3, #0
 8003b44:	a26c      	add	r2, pc, #432	; (adr r2, 8003cf8 <??DataTable9_1>)
 8003b46:	0021      	movs	r1, r4
 8003b48:	0030      	movs	r0, r6
 8003b4a:	f00e fd40 	bl	80125ce <zb_heap_free>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	466a      	mov	r2, sp
 8003b52:	f240 410c 	movw	r1, #1036	; 0x40c
 8003b56:	0030      	movs	r0, r6
 8003b58:	f00e fad8 	bl	801210c <ZbNwkGet>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d002      	beq.n	8003b66 <??zcl_reporting_delete_0>
 8003b60:	2000      	movs	r0, #0
 8003b62:	f88d 0000 	strb.w	r0, [sp]

08003b66 <??zcl_reporting_delete_0>:
 8003b66:	f89d 0000 	ldrb.w	r0, [sp]
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d103      	bne.n	8003b76 <??zcl_reporting_delete_1>
 8003b6e:	21c8      	movs	r1, #200	; 0xc8
 8003b70:	0028      	movs	r0, r5
 8003b72:	f7ff fb84 	bl	800327e <zcl_report_kick>

08003b76 <??zcl_reporting_delete_1>:
 8003b76:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003b78 <zcl_cluster_attr_report_delete>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	0005      	movs	r5, r0
 8003b7c:	000e      	movs	r6, r1
 8003b7e:	0017      	movs	r7, r2
 8003b80:	003a      	movs	r2, r7
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	0031      	movs	r1, r6
 8003b86:	b289      	uxth	r1, r1
 8003b88:	0028      	movs	r0, r5
 8003b8a:	f7ff fece 	bl	800392a <zcl_reporting_find>
 8003b8e:	0004      	movs	r4, r0
 8003b90:	2c00      	cmp	r4, #0
 8003b92:	d101      	bne.n	8003b98 <??zcl_cluster_attr_report_delete_0>
 8003b94:	2000      	movs	r0, #0
 8003b96:	e003      	b.n	8003ba0 <??zcl_cluster_attr_report_delete_1>

08003b98 <??zcl_cluster_attr_report_delete_0>:
 8003b98:	0020      	movs	r0, r4
 8003b9a:	f7ff ffc3 	bl	8003b24 <zcl_reporting_delete>
 8003b9e:	2001      	movs	r0, #1

08003ba0 <??zcl_cluster_attr_report_delete_1>:
 8003ba0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003ba2 <zcl_reporting_disable>:
 8003ba2:	b538      	push	{r3, r4, r5, lr}
 8003ba4:	0004      	movs	r4, r0
 8003ba6:	68a0      	ldr	r0, [r4, #8]
 8003ba8:	6885      	ldr	r5, [r0, #8]
 8003baa:	2000      	movs	r0, #0
 8003bac:	f88d 0000 	strb.w	r0, [sp]
 8003bb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003bb4:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	8420      	strh	r0, [r4, #32]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	466a      	mov	r2, sp
 8003bbe:	f240 410c 	movw	r1, #1036	; 0x40c
 8003bc2:	0028      	movs	r0, r5
 8003bc4:	f00e faa2 	bl	801210c <ZbNwkGet>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d002      	beq.n	8003bd2 <??zcl_reporting_disable_0>
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f88d 0000 	strb.w	r0, [sp]

08003bd2 <??zcl_reporting_disable_0>:
 8003bd2:	f89d 0000 	ldrb.w	r0, [sp]
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d103      	bne.n	8003be2 <??zcl_reporting_disable_1>
 8003bda:	21c8      	movs	r1, #200	; 0xc8
 8003bdc:	68a0      	ldr	r0, [r4, #8]
 8003bde:	f7ff fb4e 	bl	800327e <zcl_report_kick>

08003be2 <??zcl_reporting_disable_1>:
 8003be2:	bd31      	pop	{r0, r4, r5, pc}

08003be4 <zcl_reporting_check_default_intvl>:
 8003be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003be8:	880a      	ldrh	r2, [r1, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d00e      	beq.n	8003c0c <??zcl_reporting_check_default_intvl_0>
 8003bee:	880a      	ldrh	r2, [r1, #0]
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	d00b      	beq.n	8003c0c <??zcl_reporting_check_default_intvl_0>
 8003bf4:	880a      	ldrh	r2, [r1, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d102      	bne.n	8003c00 <??zcl_reporting_check_default_intvl_1>
 8003bfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bfe:	800a      	strh	r2, [r1, #0]

08003c00 <??zcl_reporting_check_default_intvl_1>:
 8003c00:	880a      	ldrh	r2, [r1, #0]
 8003c02:	8803      	ldrh	r3, [r0, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d201      	bcs.n	8003c0c <??zcl_reporting_check_default_intvl_0>
 8003c08:	2200      	movs	r2, #0
 8003c0a:	8002      	strh	r2, [r0, #0]

08003c0c <??zcl_reporting_check_default_intvl_0>:
 8003c0c:	4770      	bx	lr

08003c0e <zcl_reporting_config_attr_defaults>:
 8003c0e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003c10:	0004      	movs	r4, r0
 8003c12:	000d      	movs	r5, r1
 8003c14:	0016      	movs	r6, r2
 8003c16:	8aa8      	ldrh	r0, [r5, #20]
 8003c18:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003c1c:	8ae8      	ldrh	r0, [r5, #22]
 8003c1e:	f8ad 0000 	strh.w	r0, [sp]
 8003c22:	4669      	mov	r1, sp
 8003c24:	f10d 0002 	add.w	r0, sp, #2
 8003c28:	f7ff ffdc 	bl	8003be4 <zcl_reporting_check_default_intvl>
 8003c2c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8003c30:	84b0      	strh	r0, [r6, #36]	; 0x24
 8003c32:	f8bd 0000 	ldrh.w	r0, [sp]
 8003c36:	84f0      	strh	r0, [r6, #38]	; 0x26
 8003c38:	2200      	movs	r2, #0
 8003c3a:	0031      	movs	r1, r6
 8003c3c:	0020      	movs	r0, r4
 8003c3e:	f000 f801 	bl	8003c44 <zcl_reporting_reset_defaults>
 8003c42:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003c44 <zcl_reporting_reset_defaults>:
 8003c44:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003c46:	0004      	movs	r4, r0
 8003c48:	000d      	movs	r5, r1
 8003c4a:	0016      	movs	r6, r2
 8003c4c:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8003c4e:	8428      	strh	r0, [r5, #32]
 8003c50:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8003c52:	8468      	strh	r0, [r5, #34]	; 0x22
 8003c54:	8c28      	ldrh	r0, [r5, #32]
 8003c56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c5a:	4288      	cmp	r0, r1
 8003c5c:	d106      	bne.n	8003c6c <??zcl_reporting_reset_defaults_0>
 8003c5e:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d103      	bne.n	8003c6c <??zcl_reporting_reset_defaults_0>
 8003c64:	203d      	movs	r0, #61	; 0x3d
 8003c66:	8468      	strh	r0, [r5, #34]	; 0x22
 8003c68:	2000      	movs	r0, #0
 8003c6a:	8428      	strh	r0, [r5, #32]

08003c6c <??zcl_reporting_reset_defaults_0>:
 8003c6c:	ed95 0b0c 	vldr	d0, [r5, #48]	; 0x30
 8003c70:	ed85 0b0a 	vstr	d0, [r5, #40]	; 0x28
 8003c74:	0020      	movs	r0, r4
 8003c76:	f00e fa5e 	bl	8012136 <ZbZclUptime>
 8003c7a:	6128      	str	r0, [r5, #16]
 8003c7c:	0030      	movs	r0, r6
 8003c7e:	b2c0      	uxtb	r0, r0
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d013      	beq.n	8003cac <??zcl_reporting_reset_defaults_1>
 8003c84:	2301      	movs	r3, #1
 8003c86:	466a      	mov	r2, sp
 8003c88:	f240 410c 	movw	r1, #1036	; 0x40c
 8003c8c:	0020      	movs	r0, r4
 8003c8e:	f00e fa3d 	bl	801210c <ZbNwkGet>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d002      	beq.n	8003c9c <??zcl_reporting_reset_defaults_2>
 8003c96:	2000      	movs	r0, #0
 8003c98:	f88d 0000 	strb.w	r0, [sp]

08003c9c <??zcl_reporting_reset_defaults_2>:
 8003c9c:	f89d 0000 	ldrb.w	r0, [sp]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d103      	bne.n	8003cac <??zcl_reporting_reset_defaults_1>
 8003ca4:	21c8      	movs	r1, #200	; 0xc8
 8003ca6:	68a8      	ldr	r0, [r5, #8]
 8003ca8:	f7ff fae9 	bl	800327e <zcl_report_kick>

08003cac <??zcl_reporting_reset_defaults_1>:
 8003cac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003cae <zcl_reporting_epsilon_default>:
 8003cae:	b538      	push	{r3, r4, r5, lr}
 8003cb0:	0004      	movs	r4, r0
 8003cb2:	000d      	movs	r5, r1
 8003cb4:	0028      	movs	r0, r5
 8003cb6:	b2c0      	uxtb	r0, r0
 8003cb8:	2838      	cmp	r0, #56	; 0x38
 8003cba:	db09      	blt.n	8003cd0 <??zcl_reporting_epsilon_default_0>
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	b2c0      	uxtb	r0, r0
 8003cc0:	283b      	cmp	r0, #59	; 0x3b
 8003cc2:	da05      	bge.n	8003cd0 <??zcl_reporting_epsilon_default_0>
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	; 8004898 <??DataTable11>
 8003cca:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8003cce:	e00f      	b.n	8003cf0 <??zcl_reporting_epsilon_default_1>

08003cd0 <??zcl_reporting_epsilon_default_0>:
 8003cd0:	0028      	movs	r0, r5
 8003cd2:	b2c0      	uxtb	r0, r0
 8003cd4:	f7ff f82a 	bl	8002d2c <ZbZclAttrIsAnalog>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d005      	beq.n	8003ce8 <??zcl_reporting_epsilon_default_2>
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	; 8004898 <??DataTable11>
 8003ce2:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8003ce6:	e003      	b.n	8003cf0 <??zcl_reporting_epsilon_default_1>

08003ce8 <??zcl_reporting_epsilon_default_2>:
 8003ce8:	2000      	movs	r0, #0
 8003cea:	2100      	movs	r1, #0
 8003cec:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08003cf0 <??zcl_reporting_epsilon_default_1>:
 8003cf0:	bd31      	pop	{r0, r4, r5, pc}
	...

08003cf4 <??DataTable9>:
 8003cf4:	2fe9 0800                                   ./..

08003cf8 <??DataTable9_1>:
 8003cf8:	0000 0000                                   ....

08003cfc <??DataTable9_2>:
 8003cfc:	0020 2000                                    .. 

08003d00 <??DataTable9_3>:
 8003d00:	2fd5 0800                                   ./..

08003d04 <??DataTable9_4>:
 8003d04:	ee80 0036                                   ..6.

08003d08 <zcl_reporting_epsilon_check>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003d10:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003d12:	4281      	cmp	r1, r0
 8003d14:	d101      	bne.n	8003d1a <??zcl_reporting_epsilon_check_0>
 8003d16:	2001      	movs	r0, #1
 8003d18:	e049      	b.n	8003dae <??zcl_reporting_epsilon_check_1>

08003d1a <??zcl_reporting_epsilon_check_0>:
 8003d1a:	8c21      	ldrh	r1, [r4, #32]
 8003d1c:	4281      	cmp	r1, r0
 8003d1e:	d104      	bne.n	8003d2a <??zcl_reporting_epsilon_check_2>
 8003d20:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d101      	bne.n	8003d2a <??zcl_reporting_epsilon_check_2>
 8003d26:	2001      	movs	r0, #1
 8003d28:	e041      	b.n	8003dae <??zcl_reporting_epsilon_check_1>

08003d2a <??zcl_reporting_epsilon_check_2>:
 8003d2a:	7ba0      	ldrb	r0, [r4, #14]
 8003d2c:	2838      	cmp	r0, #56	; 0x38
 8003d2e:	db1d      	blt.n	8003d6c <??zcl_reporting_epsilon_check_3>
 8003d30:	7ba0      	ldrb	r0, [r4, #14]
 8003d32:	283b      	cmp	r0, #59	; 0x3b
 8003d34:	da1a      	bge.n	8003d6c <??zcl_reporting_epsilon_check_3>
 8003d36:	8c20      	ldrh	r0, [r4, #32]
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d108      	bne.n	8003d4e <??zcl_reporting_epsilon_check_4>
 8003d3c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003d40:	2000      	movs	r0, #0
 8003d42:	2100      	movs	r1, #0
 8003d44:	f002 fc0c 	bl	8006560 <__aeabi_cdcmpeq>
 8003d48:	d101      	bne.n	8003d4e <??zcl_reporting_epsilon_check_4>
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	e02f      	b.n	8003dae <??zcl_reporting_epsilon_check_1>

08003d4e <??zcl_reporting_epsilon_check_4>:
 8003d4e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003d52:	2200      	movs	r2, #0
 8003d54:	2300      	movs	r3, #0
 8003d56:	f002 fc03 	bl	8006560 <__aeabi_cdcmpeq>
 8003d5a:	d205      	bcs.n	8003d68 <??zcl_reporting_epsilon_check_5>
 8003d5c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003d60:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8003d64:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08003d68 <??zcl_reporting_epsilon_check_5>:
 8003d68:	2001      	movs	r0, #1
 8003d6a:	e020      	b.n	8003dae <??zcl_reporting_epsilon_check_1>

08003d6c <??zcl_reporting_epsilon_check_3>:
 8003d6c:	7ba0      	ldrb	r0, [r4, #14]
 8003d6e:	f7fe ffdd 	bl	8002d2c <ZbZclAttrIsAnalog>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d01a      	beq.n	8003dac <??zcl_reporting_epsilon_check_6>
 8003d76:	8c20      	ldrh	r0, [r4, #32]
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d108      	bne.n	8003d8e <??zcl_reporting_epsilon_check_7>
 8003d7c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003d80:	2000      	movs	r0, #0
 8003d82:	2100      	movs	r1, #0
 8003d84:	f002 fbec 	bl	8006560 <__aeabi_cdcmpeq>
 8003d88:	d101      	bne.n	8003d8e <??zcl_reporting_epsilon_check_7>
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	e00f      	b.n	8003dae <??zcl_reporting_epsilon_check_1>

08003d8e <??zcl_reporting_epsilon_check_7>:
 8003d8e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003d92:	2200      	movs	r2, #0
 8003d94:	2300      	movs	r3, #0
 8003d96:	f002 fbe3 	bl	8006560 <__aeabi_cdcmpeq>
 8003d9a:	d205      	bcs.n	8003da8 <??zcl_reporting_epsilon_check_8>
 8003d9c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003da0:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8003da4:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08003da8 <??zcl_reporting_epsilon_check_8>:
 8003da8:	2001      	movs	r0, #1
 8003daa:	e000      	b.n	8003dae <??zcl_reporting_epsilon_check_1>

08003dac <??zcl_reporting_epsilon_check_6>:
 8003dac:	2001      	movs	r0, #1

08003dae <??zcl_reporting_epsilon_check_1>:
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <zcl_reporting_create_default_reports>:
 8003db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	b090      	sub	sp, #64	; 0x40
 8003db6:	0005      	movs	r5, r0
 8003db8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003dba:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003dbe:	4288      	cmp	r0, r1
 8003dc0:	d001      	beq.n	8003dc6 <??zcl_reporting_create_default_reports_0>
 8003dc2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003dc4:	e000      	b.n	8003dc8 <??zcl_reporting_create_default_reports_1>

08003dc6 <??zcl_reporting_create_default_reports_0>:
 8003dc6:	2400      	movs	r4, #0

08003dc8 <??zcl_reporting_create_default_reports_1>:
 8003dc8:	2c00      	cmp	r4, #0
 8003dca:	d054      	beq.n	8003e76 <??zcl_reporting_create_default_reports_2>
 8003dcc:	0026      	movs	r6, r4
 8003dce:	68b0      	ldr	r0, [r6, #8]
 8003dd0:	7900      	ldrb	r0, [r0, #4]
 8003dd2:	0780      	lsls	r0, r0, #30
 8003dd4:	d546      	bpl.n	8003e64 <??zcl_reporting_create_default_reports_3>

08003dd6 <??zcl_reporting_create_default_reports_4>:
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	68b0      	ldr	r0, [r6, #8]
 8003dda:	8801      	ldrh	r1, [r0, #0]
 8003ddc:	0028      	movs	r0, r5
 8003dde:	f7ff fda4 	bl	800392a <zcl_reporting_find>
 8003de2:	9001      	str	r0, [sp, #4]
 8003de4:	9801      	ldr	r0, [sp, #4]
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d13c      	bne.n	8003e64 <??zcl_reporting_create_default_reports_3>

08003dea <??zcl_reporting_create_default_reports_5>:
 8003dea:	2738      	movs	r7, #56	; 0x38
 8003dec:	f05f 0800 	movs.w	r8, #0
 8003df0:	f10d 0908 	add.w	r9, sp, #8
 8003df4:	4642      	mov	r2, r8
 8003df6:	0039      	movs	r1, r7
 8003df8:	4648      	mov	r0, r9
 8003dfa:	f001 feec 	bl	8005bd6 <__aeabi_memset>
 8003dfe:	68b0      	ldr	r0, [r6, #8]
 8003e00:	8800      	ldrh	r0, [r0, #0]
 8003e02:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003e06:	9504      	str	r5, [sp, #16]
 8003e08:	68b0      	ldr	r0, [r6, #8]
 8003e0a:	7880      	ldrb	r0, [r0, #2]
 8003e0c:	f88d 0016 	strb.w	r0, [sp, #22]
 8003e10:	68b0      	ldr	r0, [r6, #8]
 8003e12:	7881      	ldrb	r1, [r0, #2]
 8003e14:	a802      	add	r0, sp, #8
 8003e16:	f7ff ff4a 	bl	8003cae <zcl_reporting_epsilon_default>
 8003e1a:	f05f 0908 	movs.w	r9, #8
 8003e1e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8003e22:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8003e26:	464a      	mov	r2, r9
 8003e28:	4651      	mov	r1, sl
 8003e2a:	4658      	mov	r0, fp
 8003e2c:	f011 fc49 	bl	80156c2 <__aeabi_memcpy>
 8003e30:	aa02      	add	r2, sp, #8
 8003e32:	0031      	movs	r1, r6
 8003e34:	68a8      	ldr	r0, [r5, #8]
 8003e36:	f7ff feea 	bl	8003c0e <zcl_reporting_config_attr_defaults>
 8003e3a:	a902      	add	r1, sp, #8
 8003e3c:	0028      	movs	r0, r5
 8003e3e:	f7ff fdc6 	bl	80039ce <zcl_reporting_save_curr_val>
 8003e42:	f88d 0000 	strb.w	r0, [sp]
 8003e46:	f89d 0000 	ldrb.w	r0, [sp]
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d002      	beq.n	8003e54 <??zcl_reporting_create_default_reports_6>
 8003e4e:	f89d 0000 	ldrb.w	r0, [sp]
 8003e52:	e011      	b.n	8003e78 <??zcl_reporting_create_default_reports_7>

08003e54 <??zcl_reporting_create_default_reports_6>:
 8003e54:	a902      	add	r1, sp, #8
 8003e56:	0028      	movs	r0, r5
 8003e58:	f7ff fe2c 	bl	8003ab4 <zcl_reporting_create_new>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d101      	bne.n	8003e64 <??zcl_reporting_create_default_reports_3>
 8003e60:	2089      	movs	r0, #137	; 0x89
 8003e62:	e009      	b.n	8003e78 <??zcl_reporting_create_default_reports_7>

08003e64 <??zcl_reporting_create_default_reports_3>:
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003e6a:	4288      	cmp	r0, r1
 8003e6c:	d001      	beq.n	8003e72 <??zcl_reporting_create_default_reports_8>
 8003e6e:	6824      	ldr	r4, [r4, #0]
 8003e70:	e7aa      	b.n	8003dc8 <??zcl_reporting_create_default_reports_1>

08003e72 <??zcl_reporting_create_default_reports_8>:
 8003e72:	2400      	movs	r4, #0
 8003e74:	e7a8      	b.n	8003dc8 <??zcl_reporting_create_default_reports_1>

08003e76 <??zcl_reporting_create_default_reports_2>:
 8003e76:	2000      	movs	r0, #0

08003e78 <??zcl_reporting_create_default_reports_7>:
 8003e78:	b011      	add	sp, #68	; 0x44
 8003e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e7e <ZbZclHandleConfigReport>:
 8003e7e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e82:	b0c8      	sub	sp, #288	; 0x120
 8003e84:	0004      	movs	r4, r0
 8003e86:	0015      	movs	r5, r2
 8003e88:	68a0      	ldr	r0, [r4, #8]
 8003e8a:	9001      	str	r0, [sp, #4]
 8003e8c:	2700      	movs	r7, #0
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f88d 0003 	strb.w	r0, [sp, #3]
 8003e94:	2600      	movs	r6, #0
 8003e96:	2000      	movs	r0, #0
 8003e98:	f88d 0002 	strb.w	r0, [sp, #2]
 8003e9c:	f05f 0808 	movs.w	r8, #8
 8003ea0:	f05f 0900 	movs.w	r9, #0
 8003ea4:	f10d 0a0c 	add.w	sl, sp, #12
 8003ea8:	464a      	mov	r2, r9
 8003eaa:	4641      	mov	r1, r8
 8003eac:	4650      	mov	r0, sl
 8003eae:	f001 fe92 	bl	8005bd6 <__aeabi_memset>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f88d 000c 	strb.w	r0, [sp, #12]
 8003eb8:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003eba:	7840      	ldrb	r0, [r0, #1]
 8003ebc:	f88d 000d 	strb.w	r0, [sp, #13]
 8003ec0:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003ec2:	7880      	ldrb	r0, [r0, #2]
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d003      	beq.n	8003ed0 <??ZbZclHandleConfigReport_0>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f88d 000e 	strb.w	r0, [sp, #14]
 8003ece:	e002      	b.n	8003ed6 <??ZbZclHandleConfigReport_1>

08003ed0 <??ZbZclHandleConfigReport_0>:
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f88d 000e 	strb.w	r0, [sp, #14]

08003ed6 <??ZbZclHandleConfigReport_1>:
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f88d 000f 	strb.w	r0, [sp, #15]
 8003edc:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003ede:	8880      	ldrh	r0, [r0, #4]
 8003ee0:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003ee4:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003ee6:	7980      	ldrb	r0, [r0, #6]
 8003ee8:	f88d 0012 	strb.w	r0, [sp, #18]
 8003eec:	2007      	movs	r0, #7
 8003eee:	f88d 0013 	strb.w	r0, [sp, #19]
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	a916      	add	r1, sp, #88	; 0x58
 8003ef6:	a803      	add	r0, sp, #12
 8003ef8:	f7fd fd4a 	bl	8001990 <ZbZclAppendHeader>
 8003efc:	9005      	str	r0, [sp, #20]
 8003efe:	9805      	ldr	r0, [sp, #20]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d506      	bpl.n	8003f12 <??ZbZclHandleConfigReport_2>
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8003f08:	0029      	movs	r1, r5
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	f00e fa13 	bl	8012336 <ZbZclSendDefaultResponse>
 8003f10:	e236      	b.n	8004380 <??ZbZclHandleConfigReport_3>

08003f12 <??ZbZclHandleConfigReport_2>:
 8003f12:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003f14:	4286      	cmp	r6, r0
 8003f16:	f080 81b4 	bcs.w	8004282 <??ZbZclHandleConfigReport_4>
 8003f1a:	f05f 0900 	movs.w	r9, #0
 8003f1e:	f05f 0838 	movs.w	r8, #56	; 0x38
 8003f22:	f05f 0a00 	movs.w	sl, #0
 8003f26:	f10d 0b18 	add.w	fp, sp, #24
 8003f2a:	4652      	mov	r2, sl
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	4658      	mov	r0, fp
 8003f30:	f001 fe51 	bl	8005bd6 <__aeabi_memset>
 8003f34:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003f36:	1cf1      	adds	r1, r6, #3
 8003f38:	4288      	cmp	r0, r1
 8003f3a:	d206      	bcs.n	8003f4a <??ZbZclHandleConfigReport_5>
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8003f40:	0029      	movs	r1, r5
 8003f42:	0020      	movs	r0, r4
 8003f44:	f00e f9f7 	bl	8012336 <ZbZclSendDefaultResponse>
 8003f48:	e21a      	b.n	8004380 <??ZbZclHandleConfigReport_3>

08003f4a <??ZbZclHandleConfigReport_5>:
 8003f4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003f4c:	5d80      	ldrb	r0, [r0, r6]
 8003f4e:	f88d 0001 	strb.w	r0, [sp, #1]
 8003f52:	1c76      	adds	r6, r6, #1
 8003f54:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003f56:	4430      	add	r0, r6
 8003f58:	f7fd fe3b 	bl	8001bd2 <pletoh16>
 8003f5c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8003f60:	1cb6      	adds	r6, r6, #2
 8003f62:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003f66:	2800      	cmp	r0, #0
 8003f68:	f040 8159 	bne.w	800421e <??ZbZclHandleConfigReport_6>
 8003f6c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003f6e:	1cb1      	adds	r1, r6, #2
 8003f70:	4288      	cmp	r0, r1
 8003f72:	d206      	bcs.n	8003f82 <??ZbZclHandleConfigReport_7>
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8003f78:	0029      	movs	r1, r5
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	f00e f9db 	bl	8012336 <ZbZclSendDefaultResponse>
 8003f80:	e1fe      	b.n	8004380 <??ZbZclHandleConfigReport_3>

08003f82 <??ZbZclHandleConfigReport_7>:
 8003f82:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003f84:	1c71      	adds	r1, r6, #1
 8003f86:	4288      	cmp	r0, r1
 8003f88:	f0c0 808f 	bcc.w	80040aa <??ZbZclHandleConfigReport_19>

08003f8c <??ZbZclHandleConfigReport_9>:
 8003f8c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003f8e:	5d80      	ldrb	r0, [r0, r6]
 8003f90:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8003f94:	1c76      	adds	r6, r6, #1
 8003f96:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003f98:	1cb1      	adds	r1, r6, #2
 8003f9a:	4288      	cmp	r0, r1
 8003f9c:	f0c0 8085 	bcc.w	80040aa <??ZbZclHandleConfigReport_19>

08003fa0 <??ZbZclHandleConfigReport_10>:
 8003fa0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003fa2:	4430      	add	r0, r6
 8003fa4:	f7fd fe15 	bl	8001bd2 <pletoh16>
 8003fa8:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8003fac:	1cb6      	adds	r6, r6, #2
 8003fae:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003fb0:	1cb1      	adds	r1, r6, #2
 8003fb2:	4288      	cmp	r0, r1
 8003fb4:	d379      	bcc.n	80040aa <??ZbZclHandleConfigReport_19>

08003fb6 <??ZbZclHandleConfigReport_11>:
 8003fb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003fb8:	4430      	add	r0, r6
 8003fba:	f7fd fe0a 	bl	8001bd2 <pletoh16>
 8003fbe:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8003fc2:	1cb6      	adds	r6, r6, #2
 8003fc4:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003fc6:	1c71      	adds	r1, r6, #1
 8003fc8:	4288      	cmp	r0, r1
 8003fca:	d36e      	bcc.n	80040aa <??ZbZclHandleConfigReport_19>

08003fcc <??ZbZclHandleConfigReport_12>:
 8003fcc:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003fd0:	2848      	cmp	r0, #72	; 0x48
 8003fd2:	d00b      	beq.n	8003fec <??ZbZclHandleConfigReport_13>
 8003fd4:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003fd8:	284c      	cmp	r0, #76	; 0x4c
 8003fda:	d007      	beq.n	8003fec <??ZbZclHandleConfigReport_13>
 8003fdc:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003fe0:	2850      	cmp	r0, #80	; 0x50
 8003fe2:	d003      	beq.n	8003fec <??ZbZclHandleConfigReport_13>
 8003fe4:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003fe8:	2851      	cmp	r0, #81	; 0x51
 8003fea:	d103      	bne.n	8003ff4 <??ZbZclHandleConfigReport_14>

08003fec <??ZbZclHandleConfigReport_13>:
 8003fec:	208c      	movs	r0, #140	; 0x8c
 8003fee:	f88d 0000 	strb.w	r0, [sp]
 8003ff2:	e12e      	b.n	8004252 <??ZbZclHandleConfigReport_15>

08003ff4 <??ZbZclHandleConfigReport_14>:
 8003ff4:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003ff8:	2838      	cmp	r0, #56	; 0x38
 8003ffa:	db29      	blt.n	8004050 <??ZbZclHandleConfigReport_16>
 8003ffc:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004000:	283b      	cmp	r0, #59	; 0x3b
 8004002:	da25      	bge.n	8004050 <??ZbZclHandleConfigReport_16>
 8004004:	2300      	movs	r3, #0
 8004006:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8004008:	1b92      	subs	r2, r2, r6
 800400a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800400c:	eb00 0106 	add.w	r1, r0, r6
 8004010:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004014:	f7fe fdd9 	bl	8002bca <ZbZclAttrParseLength>
 8004018:	9002      	str	r0, [sp, #8]
 800401a:	9802      	ldr	r0, [sp, #8]
 800401c:	2800      	cmp	r0, #0
 800401e:	d503      	bpl.n	8004028 <??ZbZclHandleConfigReport_17>
 8004020:	2085      	movs	r0, #133	; 0x85
 8004022:	f88d 0000 	strb.w	r0, [sp]
 8004026:	e114      	b.n	8004252 <??ZbZclHandleConfigReport_15>

08004028 <??ZbZclHandleConfigReport_17>:
 8004028:	466a      	mov	r2, sp
 800402a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800402c:	eb00 0106 	add.w	r1, r0, r6
 8004030:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004034:	f001 fa9d 	bl	8005572 <ZbZclParseFloat>
 8004038:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
 800403c:	f89d 0000 	ldrb.w	r0, [sp]
 8004040:	2800      	cmp	r0, #0
 8004042:	f040 8106 	bne.w	8004252 <??ZbZclHandleConfigReport_15>

08004046 <??ZbZclHandleConfigReport_18>:
 8004046:	9802      	ldr	r0, [sp, #8]
 8004048:	1986      	adds	r6, r0, r6
 800404a:	2001      	movs	r0, #1
 800404c:	4681      	mov	r9, r0
 800404e:	e02c      	b.n	80040aa <??ZbZclHandleConfigReport_19>

08004050 <??ZbZclHandleConfigReport_16>:
 8004050:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004054:	f7fe fe6a 	bl	8002d2c <ZbZclAttrIsAnalog>
 8004058:	2800      	cmp	r0, #0
 800405a:	d026      	beq.n	80040aa <??ZbZclHandleConfigReport_19>
 800405c:	2300      	movs	r3, #0
 800405e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8004060:	1b92      	subs	r2, r2, r6
 8004062:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004064:	eb00 0106 	add.w	r1, r0, r6
 8004068:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800406c:	f7fe fdad 	bl	8002bca <ZbZclAttrParseLength>
 8004070:	9002      	str	r0, [sp, #8]
 8004072:	9802      	ldr	r0, [sp, #8]
 8004074:	2800      	cmp	r0, #0
 8004076:	d503      	bpl.n	8004080 <??ZbZclHandleConfigReport_20>
 8004078:	2085      	movs	r0, #133	; 0x85
 800407a:	f88d 0000 	strb.w	r0, [sp]
 800407e:	e0e8      	b.n	8004252 <??ZbZclHandleConfigReport_15>

08004080 <??ZbZclHandleConfigReport_20>:
 8004080:	466a      	mov	r2, sp
 8004082:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004084:	eb00 0106 	add.w	r1, r0, r6
 8004088:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800408c:	f7fc f942 	bl	8000314 <ZbZclParseInteger>
 8004090:	f001 ffd8 	bl	8006044 <__aeabi_l2d>
 8004094:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004098:	f89d 0000 	ldrb.w	r0, [sp]
 800409c:	2800      	cmp	r0, #0
 800409e:	f040 80d8 	bne.w	8004252 <??ZbZclHandleConfigReport_15>

080040a2 <??ZbZclHandleConfigReport_21>:
 80040a2:	9802      	ldr	r0, [sp, #8]
 80040a4:	1986      	adds	r6, r0, r6
 80040a6:	2001      	movs	r0, #1
 80040a8:	4681      	mov	r9, r0

080040aa <??ZbZclHandleConfigReport_19>:
 80040aa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80040ae:	0020      	movs	r0, r4
 80040b0:	f7fd fe5f 	bl	8001d72 <ZbZclAttrFind>
 80040b4:	4682      	mov	sl, r0
 80040b6:	f1ba 0f00 	cmp.w	sl, #0
 80040ba:	d103      	bne.n	80040c4 <??ZbZclHandleConfigReport_22>
 80040bc:	2086      	movs	r0, #134	; 0x86
 80040be:	f88d 0000 	strb.w	r0, [sp]
 80040c2:	e0c6      	b.n	8004252 <??ZbZclHandleConfigReport_15>

080040c4 <??ZbZclHandleConfigReport_22>:
 80040c4:	f8da 0008 	ldr.w	r0, [sl, #8]
 80040c8:	8880      	ldrh	r0, [r0, #4]
 80040ca:	0400      	lsls	r0, r0, #16
 80040cc:	d503      	bpl.n	80040d6 <??ZbZclHandleConfigReport_23>
 80040ce:	2086      	movs	r0, #134	; 0x86
 80040d0:	f88d 0000 	strb.w	r0, [sp]
 80040d4:	e0bd      	b.n	8004252 <??ZbZclHandleConfigReport_15>

080040d6 <??ZbZclHandleConfigReport_23>:
 80040d6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80040da:	7900      	ldrb	r0, [r0, #4]
 80040dc:	0780      	lsls	r0, r0, #30
 80040de:	d403      	bmi.n	80040e8 <??ZbZclHandleConfigReport_24>
 80040e0:	208c      	movs	r0, #140	; 0x8c
 80040e2:	f88d 0000 	strb.w	r0, [sp]
 80040e6:	e0b4      	b.n	8004252 <??ZbZclHandleConfigReport_15>

080040e8 <??ZbZclHandleConfigReport_24>:
 80040e8:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80040ec:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 80040f0:	4558      	cmp	r0, fp
 80040f2:	d101      	bne.n	80040f8 <??ZbZclHandleConfigReport_25>
 80040f4:	2000      	movs	r0, #0
 80040f6:	4681      	mov	r9, r0

080040f8 <??ZbZclHandleConfigReport_25>:
 80040f8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80040fc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8004100:	0020      	movs	r0, r4
 8004102:	f7ff fc12 	bl	800392a <zcl_reporting_find>
 8004106:	4680      	mov	r8, r0
 8004108:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 800410c:	4558      	cmp	r0, fp
 800410e:	d11b      	bne.n	8004148 <??ZbZclHandleConfigReport_26>
 8004110:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8004114:	2800      	cmp	r0, #0
 8004116:	d117      	bne.n	8004148 <??ZbZclHandleConfigReport_26>
 8004118:	2000      	movs	r0, #0
 800411a:	4681      	mov	r9, r0
 800411c:	f1b8 0f00 	cmp.w	r8, #0
 8004120:	d00d      	beq.n	800413e <??ZbZclHandleConfigReport_27>
 8004122:	f8b8 0024 	ldrh.w	r0, [r8, #36]	; 0x24
 8004126:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800412a:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
 800412e:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 8004132:	2200      	movs	r2, #0
 8004134:	a906      	add	r1, sp, #24
 8004136:	9801      	ldr	r0, [sp, #4]
 8004138:	f7ff fd84 	bl	8003c44 <zcl_reporting_reset_defaults>
 800413c:	e004      	b.n	8004148 <??ZbZclHandleConfigReport_26>

0800413e <??ZbZclHandleConfigReport_27>:
 800413e:	aa06      	add	r2, sp, #24
 8004140:	4651      	mov	r1, sl
 8004142:	9801      	ldr	r0, [sp, #4]
 8004144:	f7ff fd63 	bl	8003c0e <zcl_reporting_config_attr_defaults>

08004148 <??ZbZclHandleConfigReport_26>:
 8004148:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800414c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004150:	7889      	ldrb	r1, [r1, #2]
 8004152:	4288      	cmp	r0, r1
 8004154:	d003      	beq.n	800415e <??ZbZclHandleConfigReport_28>
 8004156:	208d      	movs	r0, #141	; 0x8d
 8004158:	f88d 0000 	strb.w	r0, [sp]
 800415c:	e079      	b.n	8004252 <??ZbZclHandleConfigReport_15>

0800415e <??ZbZclHandleConfigReport_28>:
 800415e:	f1b8 0f00 	cmp.w	r8, #0
 8004162:	d021      	beq.n	80041a8 <??ZbZclHandleConfigReport_29>
 8004164:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8004168:	f8a8 0020 	strh.w	r0, [r8, #32]
 800416c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8004170:	f8a8 0022 	strh.w	r0, [r8, #34]	; 0x22
 8004174:	4648      	mov	r0, r9
 8004176:	b2c0      	uxtb	r0, r0
 8004178:	2800      	cmp	r0, #0
 800417a:	d00c      	beq.n	8004196 <??ZbZclHandleConfigReport_30>
 800417c:	a806      	add	r0, sp, #24
 800417e:	f7ff fdc3 	bl	8003d08 <zcl_reporting_epsilon_check>
 8004182:	2800      	cmp	r0, #0
 8004184:	d103      	bne.n	800418e <??ZbZclHandleConfigReport_31>
 8004186:	2085      	movs	r0, #133	; 0x85
 8004188:	f88d 0000 	strb.w	r0, [sp]
 800418c:	e061      	b.n	8004252 <??ZbZclHandleConfigReport_15>

0800418e <??ZbZclHandleConfigReport_31>:
 800418e:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8004192:	ed88 0b0a 	vstr	d0, [r8, #40]	; 0x28

08004196 <??ZbZclHandleConfigReport_30>:
 8004196:	9801      	ldr	r0, [sp, #4]
 8004198:	f00d ffcd 	bl	8012136 <ZbZclUptime>
 800419c:	f8c8 0010 	str.w	r0, [r8, #16]
 80041a0:	2001      	movs	r0, #1
 80041a2:	f88d 0002 	strb.w	r0, [sp, #2]
 80041a6:	e6b4      	b.n	8003f12 <??ZbZclHandleConfigReport_2>

080041a8 <??ZbZclHandleConfigReport_29>:
 80041a8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 80041ac:	4558      	cmp	r0, fp
 80041ae:	f43f aeb0 	beq.w	8003f12 <??ZbZclHandleConfigReport_2>

080041b2 <??ZbZclHandleConfigReport_32>:
 80041b2:	9408      	str	r4, [sp, #32]
 80041b4:	4648      	mov	r0, r9
 80041b6:	b2c0      	uxtb	r0, r0
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d008      	beq.n	80041ce <??ZbZclHandleConfigReport_33>
 80041bc:	a806      	add	r0, sp, #24
 80041be:	f7ff fda3 	bl	8003d08 <zcl_reporting_epsilon_check>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d108      	bne.n	80041d8 <??ZbZclHandleConfigReport_34>
 80041c6:	2085      	movs	r0, #133	; 0x85
 80041c8:	f88d 0000 	strb.w	r0, [sp]
 80041cc:	e041      	b.n	8004252 <??ZbZclHandleConfigReport_15>

080041ce <??ZbZclHandleConfigReport_33>:
 80041ce:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 80041d2:	a806      	add	r0, sp, #24
 80041d4:	f7ff fd6b 	bl	8003cae <zcl_reporting_epsilon_default>

080041d8 <??ZbZclHandleConfigReport_34>:
 80041d8:	2008      	movs	r0, #8
 80041da:	9015      	str	r0, [sp, #84]	; 0x54
 80041dc:	a810      	add	r0, sp, #64	; 0x40
 80041de:	9014      	str	r0, [sp, #80]	; 0x50
 80041e0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 80041e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80041e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80041e8:	4658      	mov	r0, fp
 80041ea:	f011 fa6a 	bl	80156c2 <__aeabi_memcpy>
 80041ee:	a906      	add	r1, sp, #24
 80041f0:	0020      	movs	r0, r4
 80041f2:	f7ff fbec 	bl	80039ce <zcl_reporting_save_curr_val>
 80041f6:	f88d 0000 	strb.w	r0, [sp]
 80041fa:	f89d 0000 	ldrb.w	r0, [sp]
 80041fe:	2800      	cmp	r0, #0
 8004200:	d127      	bne.n	8004252 <??ZbZclHandleConfigReport_15>

08004202 <??ZbZclHandleConfigReport_35>:
 8004202:	a906      	add	r1, sp, #24
 8004204:	0020      	movs	r0, r4
 8004206:	f7ff fc55 	bl	8003ab4 <zcl_reporting_create_new>
 800420a:	2800      	cmp	r0, #0
 800420c:	d103      	bne.n	8004216 <??ZbZclHandleConfigReport_36>
 800420e:	2189      	movs	r1, #137	; 0x89
 8004210:	f88d 1000 	strb.w	r1, [sp]
 8004214:	e01d      	b.n	8004252 <??ZbZclHandleConfigReport_15>

08004216 <??ZbZclHandleConfigReport_36>:
 8004216:	2101      	movs	r1, #1
 8004218:	f88d 1002 	strb.w	r1, [sp, #2]
 800421c:	e679      	b.n	8003f12 <??ZbZclHandleConfigReport_2>

0800421e <??ZbZclHandleConfigReport_6>:
 800421e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004222:	2801      	cmp	r0, #1
 8004224:	d10e      	bne.n	8004244 <??ZbZclHandleConfigReport_37>
 8004226:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004228:	1cb1      	adds	r1, r6, #2
 800422a:	4288      	cmp	r0, r1
 800422c:	d206      	bcs.n	800423c <??ZbZclHandleConfigReport_38>
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8004232:	0029      	movs	r1, r5
 8004234:	0020      	movs	r0, r4
 8004236:	f00e f87e 	bl	8012336 <ZbZclSendDefaultResponse>
 800423a:	e0a1      	b.n	8004380 <??ZbZclHandleConfigReport_3>

0800423c <??ZbZclHandleConfigReport_38>:
 800423c:	208c      	movs	r0, #140	; 0x8c
 800423e:	f88d 0000 	strb.w	r0, [sp]
 8004242:	e006      	b.n	8004252 <??ZbZclHandleConfigReport_15>

08004244 <??ZbZclHandleConfigReport_37>:
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8004248:	0029      	movs	r1, r5
 800424a:	0020      	movs	r0, r4
 800424c:	f00e f873 	bl	8012336 <ZbZclSendDefaultResponse>
 8004250:	e096      	b.n	8004380 <??ZbZclHandleConfigReport_3>

08004252 <??ZbZclHandleConfigReport_15>:
 8004252:	f89d 0000 	ldrb.w	r0, [sp]
 8004256:	f88d 0003 	strb.w	r0, [sp, #3]
 800425a:	1d38      	adds	r0, r7, #4
 800425c:	2837      	cmp	r0, #55	; 0x37
 800425e:	d210      	bcs.n	8004282 <??ZbZclHandleConfigReport_4>

08004260 <??ZbZclHandleConfigReport_39>:
 8004260:	a83a      	add	r0, sp, #232	; 0xe8
 8004262:	f89d 1000 	ldrb.w	r1, [sp]
 8004266:	55c1      	strb	r1, [r0, r7]
 8004268:	1c7f      	adds	r7, r7, #1
 800426a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800426e:	55c1      	strb	r1, [r0, r7]
 8004270:	1c7f      	adds	r7, r7, #1
 8004272:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8004276:	a83a      	add	r0, sp, #232	; 0xe8
 8004278:	4438      	add	r0, r7
 800427a:	f7fd fcf6 	bl	8001c6a <putle16>
 800427e:	1cbf      	adds	r7, r7, #2
 8004280:	e647      	b.n	8003f12 <??ZbZclHandleConfigReport_2>

08004282 <??ZbZclHandleConfigReport_4>:
 8004282:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004286:	2800      	cmp	r0, #0
 8004288:	d105      	bne.n	8004296 <??ZbZclHandleConfigReport_40>
 800428a:	2000      	movs	r0, #0
 800428c:	2100      	movs	r1, #0
 800428e:	aa3a      	add	r2, sp, #232	; 0xe8
 8004290:	5411      	strb	r1, [r2, r0]
 8004292:	1c40      	adds	r0, r0, #1
 8004294:	0007      	movs	r7, r0

08004296 <??ZbZclHandleConfigReport_40>:
 8004296:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800429a:	2800      	cmp	r0, #0
 800429c:	d127      	bne.n	80042ee <??ZbZclHandleConfigReport_41>
 800429e:	f05f 0920 	movs.w	r9, #32
 80042a2:	f05f 0800 	movs.w	r8, #0
 80042a6:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 80042aa:	4642      	mov	r2, r8
 80042ac:	4649      	mov	r1, r9
 80042ae:	4650      	mov	r0, sl
 80042b0:	f001 fc91 	bl	8005bd6 <__aeabi_memset>
 80042b4:	9801      	ldr	r0, [sp, #4]
 80042b6:	f00d fab5 	bl	8011824 <ZbExtendedAddress>
 80042ba:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80042be:	8868      	ldrh	r0, [r5, #2]
 80042c0:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
 80042c4:	89a0      	ldrh	r0, [r4, #12]
 80042c6:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
 80042ca:	2003      	movs	r0, #3
 80042cc:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
 80042d0:	8a68      	ldrh	r0, [r5, #18]
 80042d2:	f8ad 0072 	strh.w	r0, [sp, #114]	; 0x72
 80042d6:	8ae8      	ldrh	r0, [r5, #22]
 80042d8:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
 80042dc:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80042e0:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 80042e4:	aa30      	add	r2, sp, #192	; 0xc0
 80042e6:	a918      	add	r1, sp, #96	; 0x60
 80042e8:	9801      	ldr	r0, [sp, #4]
 80042ea:	f00d fcb6 	bl	8011c5a <ZbApsmeBindReq>

080042ee <??ZbZclHandleConfigReport_41>:
 80042ee:	2200      	movs	r2, #0
 80042f0:	a924      	add	r1, sp, #144	; 0x90
 80042f2:	0020      	movs	r0, r4
 80042f4:	f7fc fdeb 	bl	8000ece <ZbZclClusterInitApsdeReq>
 80042f8:	a824      	add	r0, sp, #144	; 0x90
 80042fa:	f115 0110 	adds.w	r1, r5, #16
 80042fe:	2210      	movs	r2, #16
 8004300:	f011 f9df 	bl	80156c2 <__aeabi_memcpy>
 8004304:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8004308:	f7fc fd79 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 800430c:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 8004310:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 8004314:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8004318:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 800431c:	2001      	movs	r0, #1
 800431e:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
 8004322:	2000      	movs	r0, #0
 8004324:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 8004328:	a816      	add	r0, sp, #88	; 0x58
 800432a:	9020      	str	r0, [sp, #128]	; 0x80
 800432c:	a820      	add	r0, sp, #128	; 0x80
 800432e:	9905      	ldr	r1, [sp, #20]
 8004330:	6041      	str	r1, [r0, #4]
 8004332:	a93a      	add	r1, sp, #232	; 0xe8
 8004334:	6081      	str	r1, [r0, #8]
 8004336:	60c7      	str	r7, [r0, #12]
 8004338:	a820      	add	r0, sp, #128	; 0x80
 800433a:	902a      	str	r0, [sp, #168]	; 0xa8
 800433c:	2002      	movs	r0, #2
 800433e:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 8004342:	2300      	movs	r3, #0
 8004344:	2200      	movs	r2, #0
 8004346:	a924      	add	r1, sp, #144	; 0x90
 8004348:	9801      	ldr	r0, [sp, #4]
 800434a:	f00d fb81 	bl	8011a50 <ZbApsdeDataReqCallback>
 800434e:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8004352:	2800      	cmp	r0, #0
 8004354:	d014      	beq.n	8004380 <??ZbZclHandleConfigReport_3>
 8004356:	2301      	movs	r3, #1
 8004358:	f10d 0201 	add.w	r2, sp, #1
 800435c:	f240 410c 	movw	r1, #1036	; 0x40c
 8004360:	9801      	ldr	r0, [sp, #4]
 8004362:	f00d fed3 	bl	801210c <ZbNwkGet>
 8004366:	2800      	cmp	r0, #0
 8004368:	d002      	beq.n	8004370 <??ZbZclHandleConfigReport_43>
 800436a:	2000      	movs	r0, #0
 800436c:	f88d 0001 	strb.w	r0, [sp, #1]

08004370 <??ZbZclHandleConfigReport_43>:
 8004370:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004374:	2800      	cmp	r0, #0
 8004376:	d103      	bne.n	8004380 <??ZbZclHandleConfigReport_3>
 8004378:	21c8      	movs	r1, #200	; 0xc8
 800437a:	0020      	movs	r0, r4
 800437c:	f7fe ff7f 	bl	800327e <zcl_report_kick>

08004380 <??ZbZclHandleConfigReport_3>:
 8004380:	b049      	add	sp, #292	; 0x124
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004386 <ZbZclHandleReadReport>:
 8004386:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	b09a      	sub	sp, #104	; 0x68
 800438c:	4680      	mov	r8, r0
 800438e:	4691      	mov	r9, r2
 8004390:	f05f 0a00 	movs.w	sl, #0
 8004394:	2300      	movs	r3, #0
 8004396:	a28d      	add	r2, pc, #564	; (adr r2, 80045cc <??DataTable10>)
 8004398:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 800439c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80043a0:	f00e f906 	bl	80125b0 <zb_heap_alloc>
 80043a4:	0007      	movs	r7, r0
 80043a6:	2f00      	cmp	r7, #0
 80043a8:	d106      	bne.n	80043b8 <??ZbZclHandleReadReport_0>
 80043aa:	2389      	movs	r3, #137	; 0x89
 80043ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80043ae:	4649      	mov	r1, r9
 80043b0:	4640      	mov	r0, r8
 80043b2:	f00d ffc0 	bl	8012336 <ZbZclSendDefaultResponse>
 80043b6:	e105      	b.n	80045c4 <??ZbZclHandleReadReport_1>

080043b8 <??ZbZclHandleReadReport_0>:
 80043b8:	2408      	movs	r4, #8
 80043ba:	2500      	movs	r5, #0
 80043bc:	ae01      	add	r6, sp, #4
 80043be:	002a      	movs	r2, r5
 80043c0:	0021      	movs	r1, r4
 80043c2:	0030      	movs	r0, r6
 80043c4:	f001 fc07 	bl	8005bd6 <__aeabi_memset>
 80043c8:	2000      	movs	r0, #0
 80043ca:	f88d 0004 	strb.w	r0, [sp, #4]
 80043ce:	981a      	ldr	r0, [sp, #104]	; 0x68
 80043d0:	7840      	ldrb	r0, [r0, #1]
 80043d2:	f88d 0005 	strb.w	r0, [sp, #5]
 80043d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80043d8:	7880      	ldrb	r0, [r0, #2]
 80043da:	2800      	cmp	r0, #0
 80043dc:	d103      	bne.n	80043e6 <??ZbZclHandleReadReport_2>
 80043de:	2001      	movs	r0, #1
 80043e0:	f88d 0006 	strb.w	r0, [sp, #6]
 80043e4:	e002      	b.n	80043ec <??ZbZclHandleReadReport_3>

080043e6 <??ZbZclHandleReadReport_2>:
 80043e6:	2000      	movs	r0, #0
 80043e8:	f88d 0006 	strb.w	r0, [sp, #6]

080043ec <??ZbZclHandleReadReport_3>:
 80043ec:	2001      	movs	r0, #1
 80043ee:	f88d 0007 	strb.w	r0, [sp, #7]
 80043f2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80043f4:	8880      	ldrh	r0, [r0, #4]
 80043f6:	f8ad 0008 	strh.w	r0, [sp, #8]
 80043fa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80043fc:	7980      	ldrb	r0, [r0, #6]
 80043fe:	f88d 000a 	strb.w	r0, [sp, #10]
 8004402:	2009      	movs	r0, #9
 8004404:	f88d 000b 	strb.w	r0, [sp, #11]
 8004408:	2205      	movs	r2, #5
 800440a:	0039      	movs	r1, r7
 800440c:	a801      	add	r0, sp, #4
 800440e:	f7fd fabf 	bl	8001990 <ZbZclAppendHeader>
 8004412:	0004      	movs	r4, r0
 8004414:	2c00      	cmp	r4, #0
 8004416:	d506      	bpl.n	8004426 <??ZbZclHandleReadReport_4>
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800441c:	4649      	mov	r1, r9
 800441e:	4640      	mov	r0, r8
 8004420:	f00d ff89 	bl	8012336 <ZbZclSendDefaultResponse>
 8004424:	e0ce      	b.n	80045c4 <??ZbZclHandleReadReport_1>

08004426 <??ZbZclHandleReadReport_4>:
 8004426:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 800442a:	4582      	cmp	sl, r0
 800442c:	f080 80a1 	bcs.w	8004572 <??ZbZclHandleReadReport_5>
 8004430:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 8004434:	f11a 0103 	adds.w	r1, sl, #3
 8004438:	4288      	cmp	r0, r1
 800443a:	d206      	bcs.n	800444a <??ZbZclHandleReadReport_6>
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004440:	4649      	mov	r1, r9
 8004442:	4640      	mov	r0, r8
 8004444:	f00d ff77 	bl	8012336 <ZbZclSendDefaultResponse>
 8004448:	e0bc      	b.n	80045c4 <??ZbZclHandleReadReport_1>

0800444a <??ZbZclHandleReadReport_6>:
 800444a:	4650      	mov	r0, sl
 800444c:	f110 0a01 	adds.w	sl, r0, #1
 8004450:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 8004454:	5c08      	ldrb	r0, [r1, r0]
 8004456:	2800      	cmp	r0, #0
 8004458:	d003      	beq.n	8004462 <??ZbZclHandleReadReport_7>
 800445a:	2001      	movs	r0, #1
 800445c:	f88d 0000 	strb.w	r0, [sp]
 8004460:	e002      	b.n	8004468 <??ZbZclHandleReadReport_8>

08004462 <??ZbZclHandleReadReport_7>:
 8004462:	2000      	movs	r0, #0
 8004464:	f88d 0000 	strb.w	r0, [sp]

08004468 <??ZbZclHandleReadReport_8>:
 8004468:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 800446c:	4450      	add	r0, sl
 800446e:	f7fd fbb0 	bl	8001bd2 <pletoh16>
 8004472:	f8ad 0002 	strh.w	r0, [sp, #2]
 8004476:	f11a 0a02 	adds.w	sl, sl, #2
 800447a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800447e:	4640      	mov	r0, r8
 8004480:	f7fd fc77 	bl	8001d72 <ZbZclAttrFind>
 8004484:	0006      	movs	r6, r0
 8004486:	2e00      	cmp	r6, #0
 8004488:	d102      	bne.n	8004490 <??ZbZclHandleReadReport_9>
 800448a:	f05f 0b86 	movs.w	fp, #134	; 0x86
 800448e:	e05c      	b.n	800454a <??ZbZclHandleReadReport_10>

08004490 <??ZbZclHandleReadReport_9>:
 8004490:	68b0      	ldr	r0, [r6, #8]
 8004492:	7900      	ldrb	r0, [r0, #4]
 8004494:	0780      	lsls	r0, r0, #30
 8004496:	d402      	bmi.n	800449e <??ZbZclHandleReadReport_11>
 8004498:	f05f 0b8c 	movs.w	fp, #140	; 0x8c
 800449c:	e055      	b.n	800454a <??ZbZclHandleReadReport_10>

0800449e <??ZbZclHandleReadReport_11>:
 800449e:	f89d 2000 	ldrb.w	r2, [sp]
 80044a2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80044a6:	4640      	mov	r0, r8
 80044a8:	f7ff fa3f 	bl	800392a <zcl_reporting_find>
 80044ac:	0005      	movs	r5, r0
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	d102      	bne.n	80044b8 <??ZbZclHandleReadReport_12>
 80044b2:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 80044b6:	e048      	b.n	800454a <??ZbZclHandleReadReport_10>

080044b8 <??ZbZclHandleReadReport_12>:
 80044b8:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80044ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044be:	4288      	cmp	r0, r1
 80044c0:	d102      	bne.n	80044c8 <??ZbZclHandleReadReport_13>
 80044c2:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 80044c6:	e040      	b.n	800454a <??ZbZclHandleReadReport_10>

080044c8 <??ZbZclHandleReadReport_13>:
 80044c8:	2020      	movs	r0, #32
 80044ca:	9005      	str	r0, [sp, #20]
 80044cc:	2000      	movs	r0, #0
 80044ce:	9004      	str	r0, [sp, #16]
 80044d0:	f10d 0b18 	add.w	fp, sp, #24
 80044d4:	9a04      	ldr	r2, [sp, #16]
 80044d6:	9905      	ldr	r1, [sp, #20]
 80044d8:	4658      	mov	r0, fp
 80044da:	f001 fb7c 	bl	8005bd6 <__aeabi_memset>
 80044de:	f89d 0000 	ldrb.w	r0, [sp]
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d003      	beq.n	80044ee <??ZbZclHandleReadReport_14>
 80044e6:	2001      	movs	r0, #1
 80044e8:	f88d 0018 	strb.w	r0, [sp, #24]
 80044ec:	e002      	b.n	80044f4 <??ZbZclHandleReadReport_15>

080044ee <??ZbZclHandleReadReport_14>:
 80044ee:	2000      	movs	r0, #0
 80044f0:	f88d 0018 	strb.w	r0, [sp, #24]

080044f4 <??ZbZclHandleReadReport_15>:
 80044f4:	89a8      	ldrh	r0, [r5, #12]
 80044f6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80044fa:	7ba8      	ldrb	r0, [r5, #14]
 80044fc:	f88d 001c 	strb.w	r0, [sp, #28]
 8004500:	8c28      	ldrh	r0, [r5, #32]
 8004502:	f8ad 001e 	strh.w	r0, [sp, #30]
 8004506:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8004508:	f8ad 0020 	strh.w	r0, [sp, #32]
 800450c:	ed95 0b0a 	vldr	d0, [r5, #40]	; 0x28
 8004510:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
 8004514:	2000      	movs	r0, #0
 8004516:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800451a:	2000      	movs	r0, #0
 800451c:	5538      	strb	r0, [r7, r4]
 800451e:	1c64      	adds	r4, r4, #1
 8004520:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8004524:	0020      	movs	r0, r4
 8004526:	b280      	uxth	r0, r0
 8004528:	1a12      	subs	r2, r2, r0
 800452a:	eb07 0104 	add.w	r1, r7, r4
 800452e:	a806      	add	r0, sp, #24
 8004530:	f000 f896 	bl	8004660 <zcl_append_report_config_record>
 8004534:	9003      	str	r0, [sp, #12]
 8004536:	9803      	ldr	r0, [sp, #12]
 8004538:	2800      	cmp	r0, #0
 800453a:	d503      	bpl.n	8004544 <??ZbZclHandleReadReport_16>
 800453c:	1e64      	subs	r4, r4, #1
 800453e:	f05f 0b01 	movs.w	fp, #1
 8004542:	e002      	b.n	800454a <??ZbZclHandleReadReport_10>

08004544 <??ZbZclHandleReadReport_16>:
 8004544:	9803      	ldr	r0, [sp, #12]
 8004546:	1904      	adds	r4, r0, r4
 8004548:	e76d      	b.n	8004426 <??ZbZclHandleReadReport_4>

0800454a <??ZbZclHandleReadReport_10>:
 800454a:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800454e:	1ce1      	adds	r1, r4, #3
 8004550:	4288      	cmp	r0, r1
 8004552:	d30e      	bcc.n	8004572 <??ZbZclHandleReadReport_5>

08004554 <??ZbZclHandleReadReport_17>:
 8004554:	f807 b004 	strb.w	fp, [r7, r4]
 8004558:	1c64      	adds	r4, r4, #1
 800455a:	f89d 0000 	ldrb.w	r0, [sp]
 800455e:	5538      	strb	r0, [r7, r4]
 8004560:	1c64      	adds	r4, r4, #1
 8004562:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004566:	eb07 0004 	add.w	r0, r7, r4
 800456a:	f7fd fb7e 	bl	8001c6a <putle16>
 800456e:	1ca4      	adds	r4, r4, #2
 8004570:	e759      	b.n	8004426 <??ZbZclHandleReadReport_4>

08004572 <??ZbZclHandleReadReport_5>:
 8004572:	464a      	mov	r2, r9
 8004574:	a90e      	add	r1, sp, #56	; 0x38
 8004576:	4640      	mov	r0, r8
 8004578:	f7fc fca9 	bl	8000ece <ZbZclClusterInitApsdeReq>
 800457c:	a80e      	add	r0, sp, #56	; 0x38
 800457e:	f119 0110 	adds.w	r1, r9, #16
 8004582:	2210      	movs	r2, #16
 8004584:	f011 f89d 	bl	80156c2 <__aeabi_memcpy>
 8004588:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 800458c:	f7fc fc37 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8004590:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8004594:	2001      	movs	r0, #1
 8004596:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
 800459a:	2000      	movs	r0, #0
 800459c:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
 80045a0:	9714      	str	r7, [sp, #80]	; 0x50
 80045a2:	0020      	movs	r0, r4
 80045a4:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80045a8:	2300      	movs	r3, #0
 80045aa:	2200      	movs	r2, #0
 80045ac:	a90e      	add	r1, sp, #56	; 0x38
 80045ae:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80045b2:	f00d fa4d 	bl	8011a50 <ZbApsdeDataReqCallback>
 80045b6:	2300      	movs	r3, #0
 80045b8:	a204      	add	r2, pc, #16	; (adr r2, 80045cc <??DataTable10>)
 80045ba:	0039      	movs	r1, r7
 80045bc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80045c0:	f00e f805 	bl	80125ce <zb_heap_free>

080045c4 <??ZbZclHandleReadReport_1>:
 80045c4:	b01b      	add	sp, #108	; 0x6c
 80045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080045cc <??DataTable10>:
 80045cc:	0000 0000                                   ....

080045d0 <ZbZclHandleReportAttr>:
 80045d0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045d4:	0004      	movs	r4, r0
 80045d6:	000d      	movs	r5, r1
 80045d8:	0016      	movs	r6, r2
 80045da:	f05f 0a00 	movs.w	sl, #0
 80045de:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d03b      	beq.n	800465c <??ZbZclHandleReportAttr_0>

080045e4 <??ZbZclHandleReportAttr_1>:
 80045e4:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80045e6:	4651      	mov	r1, sl
 80045e8:	b289      	uxth	r1, r1
 80045ea:	1cc9      	adds	r1, r1, #3
 80045ec:	4288      	cmp	r0, r1
 80045ee:	d335      	bcc.n	800465c <??ZbZclHandleReportAttr_0>

080045f0 <??ZbZclHandleReportAttr_3>:
 80045f0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80045f2:	4651      	mov	r1, sl
 80045f4:	b289      	uxth	r1, r1
 80045f6:	4408      	add	r0, r1
 80045f8:	f7fd faeb 	bl	8001bd2 <pletoh16>
 80045fc:	0007      	movs	r7, r0
 80045fe:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004600:	4651      	mov	r1, sl
 8004602:	b289      	uxth	r1, r1
 8004604:	4408      	add	r0, r1
 8004606:	7880      	ldrb	r0, [r0, #2]
 8004608:	4680      	mov	r8, r0
 800460a:	f11a 0a03 	adds.w	sl, sl, #3
 800460e:	2300      	movs	r3, #0
 8004610:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8004612:	4650      	mov	r0, sl
 8004614:	b280      	uxth	r0, r0
 8004616:	1a12      	subs	r2, r2, r0
 8004618:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800461a:	4651      	mov	r1, sl
 800461c:	b289      	uxth	r1, r1
 800461e:	4401      	add	r1, r0
 8004620:	4640      	mov	r0, r8
 8004622:	b2c0      	uxtb	r0, r0
 8004624:	f7fe fad1 	bl	8002bca <ZbZclAttrParseLength>
 8004628:	4681      	mov	r9, r0
 800462a:	f1b9 0f00 	cmp.w	r9, #0
 800462e:	d415      	bmi.n	800465c <??ZbZclHandleReportAttr_0>

08004630 <??ZbZclHandleReportAttr_4>:
 8004630:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8004632:	ebb0 000a 	subs.w	r0, r0, sl
 8004636:	b280      	uxth	r0, r0
 8004638:	9001      	str	r0, [sp, #4]
 800463a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800463c:	4651      	mov	r1, sl
 800463e:	b289      	uxth	r1, r1
 8004640:	4408      	add	r0, r1
 8004642:	9000      	str	r0, [sp, #0]
 8004644:	4643      	mov	r3, r8
 8004646:	b2db      	uxtb	r3, r3
 8004648:	003a      	movs	r2, r7
 800464a:	b292      	uxth	r2, r2
 800464c:	0031      	movs	r1, r6
 800464e:	0020      	movs	r0, r4
 8004650:	f8d4 c05c 	ldr.w	ip, [r4, #92]	; 0x5c
 8004654:	47e0      	blx	ip
 8004656:	eb19 0a0a 	adds.w	sl, r9, sl
 800465a:	e7c3      	b.n	80045e4 <??ZbZclHandleReportAttr_1>

0800465c <??ZbZclHandleReportAttr_0>:
 800465c:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

08004660 <zcl_append_report_config_record>:
 8004660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004664:	0005      	movs	r5, r0
 8004666:	000e      	movs	r6, r1
 8004668:	4690      	mov	r8, r2
 800466a:	2700      	movs	r7, #0
 800466c:	7828      	ldrb	r0, [r5, #0]
 800466e:	2800      	cmp	r0, #0
 8004670:	d003      	beq.n	800467a <??zcl_append_report_config_record_0>
 8004672:	2801      	cmp	r0, #1
 8004674:	f000 80f4 	beq.w	8004860 <??zcl_append_report_config_record_1>
 8004678:	e108      	b.n	800488c <??zcl_append_report_config_record_2>

0800467a <??zcl_append_report_config_record_0>:
 800467a:	7928      	ldrb	r0, [r5, #4]
 800467c:	f001 fa9e 	bl	8005bbc <ZbZclAttrIsFloat>
 8004680:	2800      	cmp	r0, #0
 8004682:	d002      	beq.n	800468a <??zcl_append_report_config_record_3>
 8004684:	2001      	movs	r0, #1
 8004686:	4681      	mov	r9, r0
 8004688:	e009      	b.n	800469e <??zcl_append_report_config_record_4>

0800468a <??zcl_append_report_config_record_3>:
 800468a:	7928      	ldrb	r0, [r5, #4]
 800468c:	f7fe fb4e 	bl	8002d2c <ZbZclAttrIsAnalog>
 8004690:	2800      	cmp	r0, #0
 8004692:	d002      	beq.n	800469a <??zcl_append_report_config_record_5>
 8004694:	2001      	movs	r0, #1
 8004696:	4681      	mov	r9, r0
 8004698:	e001      	b.n	800469e <??zcl_append_report_config_record_4>

0800469a <??zcl_append_report_config_record_5>:
 800469a:	2000      	movs	r0, #0
 800469c:	4681      	mov	r9, r0

0800469e <??zcl_append_report_config_record_4>:
 800469e:	f1b8 0f08 	cmp.w	r8, #8
 80046a2:	d202      	bcs.n	80046aa <??zcl_append_report_config_record_6>
 80046a4:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80046a8:	e0f3      	b.n	8004892 <??zcl_append_report_config_record_7>

080046aa <??zcl_append_report_config_record_6>:
 80046aa:	7828      	ldrb	r0, [r5, #0]
 80046ac:	55f0      	strb	r0, [r6, r7]
 80046ae:	1c7f      	adds	r7, r7, #1
 80046b0:	8869      	ldrh	r1, [r5, #2]
 80046b2:	eb06 0007 	add.w	r0, r6, r7
 80046b6:	f7fd fad8 	bl	8001c6a <putle16>
 80046ba:	1cbf      	adds	r7, r7, #2
 80046bc:	7928      	ldrb	r0, [r5, #4]
 80046be:	55f0      	strb	r0, [r6, r7]
 80046c0:	1c7f      	adds	r7, r7, #1
 80046c2:	88e9      	ldrh	r1, [r5, #6]
 80046c4:	eb06 0007 	add.w	r0, r6, r7
 80046c8:	f7fd facf 	bl	8001c6a <putle16>
 80046cc:	1cbf      	adds	r7, r7, #2
 80046ce:	8929      	ldrh	r1, [r5, #8]
 80046d0:	eb06 0007 	add.w	r0, r6, r7
 80046d4:	f7fd fac9 	bl	8001c6a <putle16>
 80046d8:	1cbf      	adds	r7, r7, #2
 80046da:	4648      	mov	r0, r9
 80046dc:	b2c0      	uxtb	r0, r0
 80046de:	2800      	cmp	r0, #0
 80046e0:	f000 80bd 	beq.w	800485e <??zcl_append_report_config_record_8>
 80046e4:	7928      	ldrb	r0, [r5, #4]
 80046e6:	f7fe f9e5 	bl	8002ab4 <ZbZclAttrTypeLength>
 80046ea:	0004      	movs	r4, r0
 80046ec:	2c00      	cmp	r4, #0
 80046ee:	d101      	bne.n	80046f4 <??zcl_append_report_config_record_9>
 80046f0:	2001      	movs	r0, #1
 80046f2:	e0ce      	b.n	8004892 <??zcl_append_report_config_record_7>

080046f4 <??zcl_append_report_config_record_9>:
 80046f4:	2c01      	cmp	r4, #1
 80046f6:	d00e      	beq.n	8004716 <??zcl_append_report_config_record_10>
 80046f8:	f0c0 80af 	bcc.w	800485a <??zcl_append_report_config_record_11>
 80046fc:	2c03      	cmp	r4, #3
 80046fe:	d02f      	beq.n	8004760 <??zcl_append_report_config_record_12>
 8004700:	d319      	bcc.n	8004736 <??zcl_append_report_config_record_13>
 8004702:	2c05      	cmp	r4, #5
 8004704:	d054      	beq.n	80047b0 <??zcl_append_report_config_record_14>
 8004706:	d33f      	bcc.n	8004788 <??zcl_append_report_config_record_15>
 8004708:	2c07      	cmp	r4, #7
 800470a:	d07c      	beq.n	8004806 <??zcl_append_report_config_record_16>
 800470c:	d365      	bcc.n	80047da <??zcl_append_report_config_record_17>
 800470e:	2c08      	cmp	r4, #8
 8004710:	f000 808e 	beq.w	8004830 <??zcl_append_report_config_record_18>
 8004714:	e0a1      	b.n	800485a <??zcl_append_report_config_record_11>

08004716 <??zcl_append_report_config_record_10>:
 8004716:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800471a:	2201      	movs	r2, #1
 800471c:	4b5f      	ldr	r3, [pc, #380]	; (800489c <??DataTable11_1>)
 800471e:	f001 ff17 	bl	8006550 <__aeabi_cdrcmple>
 8004722:	d801      	bhi.n	8004728 <??zcl_append_report_config_record_19>
 8004724:	2001      	movs	r0, #1
 8004726:	e0b4      	b.n	8004892 <??zcl_append_report_config_record_7>

08004728 <??zcl_append_report_config_record_19>:
 8004728:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800472c:	f001 ff52 	bl	80065d4 <__aeabi_d2iz>
 8004730:	55f0      	strb	r0, [r6, r7]
 8004732:	1c7f      	adds	r7, r7, #1
 8004734:	e093      	b.n	800485e <??zcl_append_report_config_record_8>

08004736 <??zcl_append_report_config_record_13>:
 8004736:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800473a:	2201      	movs	r2, #1
 800473c:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <??DataTable11_2>)
 800473e:	f001 ff07 	bl	8006550 <__aeabi_cdrcmple>
 8004742:	d801      	bhi.n	8004748 <??zcl_append_report_config_record_20>
 8004744:	2001      	movs	r0, #1
 8004746:	e0a4      	b.n	8004892 <??zcl_append_report_config_record_7>

08004748 <??zcl_append_report_config_record_20>:
 8004748:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800474c:	f001 ff42 	bl	80065d4 <__aeabi_d2iz>
 8004750:	0001      	movs	r1, r0
 8004752:	b289      	uxth	r1, r1
 8004754:	eb06 0007 	add.w	r0, r6, r7
 8004758:	f7fd fa87 	bl	8001c6a <putle16>
 800475c:	1cbf      	adds	r7, r7, #2
 800475e:	e07e      	b.n	800485e <??zcl_append_report_config_record_8>

08004760 <??zcl_append_report_config_record_12>:
 8004760:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004764:	4a4f      	ldr	r2, [pc, #316]	; (80048a4 <??DataTable11_3>)
 8004766:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <??DataTable11_4>)
 8004768:	f001 fef2 	bl	8006550 <__aeabi_cdrcmple>
 800476c:	d801      	bhi.n	8004772 <??zcl_append_report_config_record_21>
 800476e:	2001      	movs	r0, #1
 8004770:	e08f      	b.n	8004892 <??zcl_append_report_config_record_7>

08004772 <??zcl_append_report_config_record_21>:
 8004772:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004776:	f001 ff55 	bl	8006624 <__aeabi_d2uiz>
 800477a:	0001      	movs	r1, r0
 800477c:	eb06 0007 	add.w	r0, r6, r7
 8004780:	f7fd fa79 	bl	8001c76 <putle24>
 8004784:	1cff      	adds	r7, r7, #3
 8004786:	e06a      	b.n	800485e <??zcl_append_report_config_record_8>

08004788 <??zcl_append_report_config_record_15>:
 8004788:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800478c:	4a47      	ldr	r2, [pc, #284]	; (80048ac <??DataTable11_5>)
 800478e:	4b48      	ldr	r3, [pc, #288]	; (80048b0 <??DataTable11_6>)
 8004790:	f001 fede 	bl	8006550 <__aeabi_cdrcmple>
 8004794:	d801      	bhi.n	800479a <??zcl_append_report_config_record_22>
 8004796:	2001      	movs	r0, #1
 8004798:	e07b      	b.n	8004892 <??zcl_append_report_config_record_7>

0800479a <??zcl_append_report_config_record_22>:
 800479a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800479e:	f001 ff41 	bl	8006624 <__aeabi_d2uiz>
 80047a2:	0001      	movs	r1, r0
 80047a4:	eb06 0007 	add.w	r0, r6, r7
 80047a8:	f7fd fa71 	bl	8001c8e <putle32>
 80047ac:	1d3f      	adds	r7, r7, #4
 80047ae:	e056      	b.n	800485e <??zcl_append_report_config_record_8>

080047b0 <??zcl_append_report_config_record_14>:
 80047b0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047b4:	4a3f      	ldr	r2, [pc, #252]	; (80048b4 <??DataTable11_7>)
 80047b6:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <??DataTable11_8>)
 80047b8:	f001 feca 	bl	8006550 <__aeabi_cdrcmple>
 80047bc:	d801      	bhi.n	80047c2 <??zcl_append_report_config_record_23>
 80047be:	2001      	movs	r0, #1
 80047c0:	e067      	b.n	8004892 <??zcl_append_report_config_record_7>

080047c2 <??zcl_append_report_config_record_23>:
 80047c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047c6:	f001 ff7d 	bl	80066c4 <__aeabi_d2ulz>
 80047ca:	0002      	movs	r2, r0
 80047cc:	000b      	movs	r3, r1
 80047ce:	eb06 0007 	add.w	r0, r6, r7
 80047d2:	f7fd fa67 	bl	8001ca4 <putle40>
 80047d6:	1d7f      	adds	r7, r7, #5
 80047d8:	e041      	b.n	800485e <??zcl_append_report_config_record_8>

080047da <??zcl_append_report_config_record_17>:
 80047da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047de:	f07f 021e 	mvns.w	r2, #30
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <??DataTable11_9>)
 80047e4:	f001 feb4 	bl	8006550 <__aeabi_cdrcmple>
 80047e8:	d801      	bhi.n	80047ee <??zcl_append_report_config_record_24>
 80047ea:	2001      	movs	r0, #1
 80047ec:	e051      	b.n	8004892 <??zcl_append_report_config_record_7>

080047ee <??zcl_append_report_config_record_24>:
 80047ee:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047f2:	f001 ff67 	bl	80066c4 <__aeabi_d2ulz>
 80047f6:	0002      	movs	r2, r0
 80047f8:	000b      	movs	r3, r1
 80047fa:	eb06 0007 	add.w	r0, r6, r7
 80047fe:	f7fd fa5b 	bl	8001cb8 <putle48>
 8004802:	1dbf      	adds	r7, r7, #6
 8004804:	e02b      	b.n	800485e <??zcl_append_report_config_record_8>

08004806 <??zcl_append_report_config_record_16>:
 8004806:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800480a:	2201      	movs	r2, #1
 800480c:	4b2c      	ldr	r3, [pc, #176]	; (80048c0 <??DataTable11_10>)
 800480e:	f001 fe9f 	bl	8006550 <__aeabi_cdrcmple>
 8004812:	d801      	bhi.n	8004818 <??zcl_append_report_config_record_25>
 8004814:	2001      	movs	r0, #1
 8004816:	e03c      	b.n	8004892 <??zcl_append_report_config_record_7>

08004818 <??zcl_append_report_config_record_25>:
 8004818:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800481c:	f001 ff52 	bl	80066c4 <__aeabi_d2ulz>
 8004820:	0002      	movs	r2, r0
 8004822:	000b      	movs	r3, r1
 8004824:	eb06 0007 	add.w	r0, r6, r7
 8004828:	f7fd fa55 	bl	8001cd6 <putle56>
 800482c:	1dff      	adds	r7, r7, #7
 800482e:	e016      	b.n	800485e <??zcl_append_report_config_record_8>

08004830 <??zcl_append_report_config_record_18>:
 8004830:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004834:	2201      	movs	r2, #1
 8004836:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <??DataTable11_11>)
 8004838:	f001 fe8a 	bl	8006550 <__aeabi_cdrcmple>
 800483c:	d801      	bhi.n	8004842 <??zcl_append_report_config_record_26>
 800483e:	2001      	movs	r0, #1
 8004840:	e027      	b.n	8004892 <??zcl_append_report_config_record_7>

08004842 <??zcl_append_report_config_record_26>:
 8004842:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004846:	f001 ff3d 	bl	80066c4 <__aeabi_d2ulz>
 800484a:	0002      	movs	r2, r0
 800484c:	000b      	movs	r3, r1
 800484e:	eb06 0007 	add.w	r0, r6, r7
 8004852:	f7fd fa4f 	bl	8001cf4 <putle64>
 8004856:	3708      	adds	r7, #8
 8004858:	e001      	b.n	800485e <??zcl_append_report_config_record_8>

0800485a <??zcl_append_report_config_record_11>:
 800485a:	2001      	movs	r0, #1
 800485c:	e019      	b.n	8004892 <??zcl_append_report_config_record_7>

0800485e <??zcl_append_report_config_record_8>:
 800485e:	e017      	b.n	8004890 <??zcl_append_report_config_record_27>

08004860 <??zcl_append_report_config_record_1>:
 8004860:	f1b8 0f08 	cmp.w	r8, #8
 8004864:	d202      	bcs.n	800486c <??zcl_append_report_config_record_28>
 8004866:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800486a:	e012      	b.n	8004892 <??zcl_append_report_config_record_7>

0800486c <??zcl_append_report_config_record_28>:
 800486c:	7828      	ldrb	r0, [r5, #0]
 800486e:	55f0      	strb	r0, [r6, r7]
 8004870:	1c7f      	adds	r7, r7, #1
 8004872:	8869      	ldrh	r1, [r5, #2]
 8004874:	eb06 0007 	add.w	r0, r6, r7
 8004878:	f7fd f9f7 	bl	8001c6a <putle16>
 800487c:	1cbf      	adds	r7, r7, #2
 800487e:	8b29      	ldrh	r1, [r5, #24]
 8004880:	eb06 0007 	add.w	r0, r6, r7
 8004884:	f7fd f9f1 	bl	8001c6a <putle16>
 8004888:	1cbf      	adds	r7, r7, #2
 800488a:	e001      	b.n	8004890 <??zcl_append_report_config_record_27>

0800488c <??zcl_append_report_config_record_2>:
 800488c:	2001      	movs	r0, #1
 800488e:	e000      	b.n	8004892 <??zcl_append_report_config_record_7>

08004890 <??zcl_append_report_config_record_27>:
 8004890:	0038      	movs	r0, r7

08004892 <??zcl_append_report_config_record_7>:
 8004892:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08004898 <??DataTable11>:
 8004898:	0000 3ff0                                   ...?

0800489c <??DataTable11_1>:
 800489c:	e000 406f                                   ..o@

080048a0 <??DataTable11_2>:
 80048a0:	ffe0 40ef                                   ...@

080048a4 <??DataTable11_3>:
 80048a4:	0001 e000                                   ....

080048a8 <??DataTable11_4>:
 80048a8:	ffff 416f                                   ..oA

080048ac <??DataTable11_5>:
 80048ac:	0001 ffe0                                   ....

080048b0 <??DataTable11_6>:
 80048b0:	ffff 41ef                                   ...A

080048b4 <??DataTable11_7>:
 80048b4:	e001 ffff                                   ....

080048b8 <??DataTable11_8>:
 80048b8:	ffff 426f                                   ..oB

080048bc <??DataTable11_9>:
 80048bc:	ffff 42ef                                   ...B

080048c0 <??DataTable11_10>:
 80048c0:	0000 4370                                   ..pC

080048c4 <??DataTable11_11>:
 80048c4:	0000 43f0                                   ...C

080048c8 <ZbZclAttrReportConfigReq>:
 80048c8:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	b09b      	sub	sp, #108	; 0x6c
 80048ce:	0004      	movs	r4, r0
 80048d0:	000d      	movs	r5, r1
 80048d2:	001e      	movs	r6, r3
 80048d4:	2700      	movs	r7, #0
 80048d6:	7c28      	ldrb	r0, [r5, #16]
 80048d8:	2800      	cmp	r0, #0
 80048da:	d002      	beq.n	80048e2 <??ZbZclAttrReportConfigReq_0>
 80048dc:	7c28      	ldrb	r0, [r5, #16]
 80048de:	2807      	cmp	r0, #7
 80048e0:	d301      	bcc.n	80048e6 <??ZbZclAttrReportConfigReq_1>

080048e2 <??ZbZclAttrReportConfigReq_0>:
 80048e2:	2001      	movs	r0, #1
 80048e4:	e059      	b.n	800499a <??ZbZclAttrReportConfigReq_2>

080048e6 <??ZbZclAttrReportConfigReq_1>:
 80048e6:	f05f 0800 	movs.w	r8, #0

080048ea <??ZbZclAttrReportConfigReq_3>:
 80048ea:	7c28      	ldrb	r0, [r5, #16]
 80048ec:	4580      	cmp	r8, r0
 80048ee:	d215      	bcs.n	800491c <??ZbZclAttrReportConfigReq_4>
 80048f0:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80048f4:	4428      	add	r0, r5
 80048f6:	f110 0918 	adds.w	r9, r0, #24
 80048fa:	f1d7 0239 	rsbs	r2, r7, #57	; 0x39
 80048fe:	a80c      	add	r0, sp, #48	; 0x30
 8004900:	eb00 0107 	add.w	r1, r0, r7
 8004904:	4648      	mov	r0, r9
 8004906:	f7ff feab 	bl	8004660 <zcl_append_report_config_record>
 800490a:	0001      	movs	r1, r0
 800490c:	2901      	cmp	r1, #1
 800490e:	da01      	bge.n	8004914 <??ZbZclAttrReportConfigReq_5>
 8004910:	2001      	movs	r0, #1
 8004912:	e042      	b.n	800499a <??ZbZclAttrReportConfigReq_2>

08004914 <??ZbZclAttrReportConfigReq_5>:
 8004914:	19cf      	adds	r7, r1, r7
 8004916:	f118 0801 	adds.w	r8, r8, #1
 800491a:	e7e6      	b.n	80048ea <??ZbZclAttrReportConfigReq_3>

0800491c <??ZbZclAttrReportConfigReq_4>:
 800491c:	f05f 0930 	movs.w	r9, #48	; 0x30
 8004920:	f05f 0a00 	movs.w	sl, #0
 8004924:	46eb      	mov	fp, sp
 8004926:	4652      	mov	r2, sl
 8004928:	4649      	mov	r1, r9
 800492a:	4658      	mov	r0, fp
 800492c:	f001 f953 	bl	8005bd6 <__aeabi_memset>
 8004930:	2000      	movs	r0, #0
 8004932:	f88d 001a 	strb.w	r0, [sp, #26]
 8004936:	8a20      	ldrh	r0, [r4, #16]
 8004938:	2800      	cmp	r0, #0
 800493a:	d001      	beq.n	8004940 <??ZbZclAttrReportConfigReq_6>
 800493c:	2001      	movs	r0, #1
 800493e:	e000      	b.n	8004942 <??ZbZclAttrReportConfigReq_7>

08004940 <??ZbZclAttrReportConfigReq_6>:
 8004940:	2000      	movs	r0, #0

08004942 <??ZbZclAttrReportConfigReq_7>:
 8004942:	f88d 001b 	strb.w	r0, [sp, #27]
 8004946:	8a20      	ldrh	r0, [r4, #16]
 8004948:	f8ad 001e 	strh.w	r0, [sp, #30]
 800494c:	2006      	movs	r0, #6
 800494e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8004952:	f00d fc6c 	bl	801222e <ZbZclGetNextSeqnum>
 8004956:	f88d 0020 	strb.w	r0, [sp, #32]
 800495a:	4668      	mov	r0, sp
 800495c:	0029      	movs	r1, r5
 800495e:	2210      	movs	r2, #16
 8004960:	f010 feaf 	bl	80156c2 <__aeabi_memcpy>
 8004964:	8aa0      	ldrh	r0, [r4, #20]
 8004966:	f8ad 0010 	strh.w	r0, [sp, #16]
 800496a:	89a0      	ldrh	r0, [r4, #12]
 800496c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004970:	7ba0      	ldrb	r0, [r4, #14]
 8004972:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004976:	8ae0      	ldrh	r0, [r4, #22]
 8004978:	f8ad 0016 	strh.w	r0, [sp, #22]
 800497c:	7e20      	ldrb	r0, [r4, #24]
 800497e:	f88d 0018 	strb.w	r0, [sp, #24]
 8004982:	7e60      	ldrb	r0, [r4, #25]
 8004984:	f88d 0019 	strb.w	r0, [sp, #25]
 8004988:	a80c      	add	r0, sp, #48	; 0x30
 800498a:	9009      	str	r0, [sp, #36]	; 0x24
 800498c:	970a      	str	r7, [sp, #40]	; 0x28
 800498e:	0033      	movs	r3, r6
 8004990:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004992:	4669      	mov	r1, sp
 8004994:	68a0      	ldr	r0, [r4, #8]
 8004996:	f00d fc75 	bl	8012284 <ZbZclCommandReq>

0800499a <??ZbZclAttrReportConfigReq_2>:
 800499a:	b01d      	add	sp, #116	; 0x74
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049a0 <ZbZclAttrReportReadReq>:
 80049a0:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	b09b      	sub	sp, #108	; 0x6c
 80049a6:	0005      	movs	r5, r0
 80049a8:	000e      	movs	r6, r1
 80049aa:	001f      	movs	r7, r3
 80049ac:	2400      	movs	r4, #0
 80049ae:	7c30      	ldrb	r0, [r6, #16]
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d002      	beq.n	80049ba <??ZbZclAttrReportReadReq_0>
 80049b4:	7c30      	ldrb	r0, [r6, #16]
 80049b6:	2807      	cmp	r0, #7
 80049b8:	d301      	bcc.n	80049be <??ZbZclAttrReportReadReq_1>

080049ba <??ZbZclAttrReportReadReq_0>:
 80049ba:	2001      	movs	r0, #1
 80049bc:	e050      	b.n	8004a60 <??ZbZclAttrReportReadReq_2>

080049be <??ZbZclAttrReportReadReq_1>:
 80049be:	f05f 0800 	movs.w	r8, #0

080049c2 <??ZbZclAttrReportReadReq_3>:
 80049c2:	7c30      	ldrb	r0, [r6, #16]
 80049c4:	4580      	cmp	r8, r0
 80049c6:	d217      	bcs.n	80049f8 <??ZbZclAttrReportReadReq_4>
 80049c8:	1ce0      	adds	r0, r4, #3
 80049ca:	283a      	cmp	r0, #58	; 0x3a
 80049cc:	d301      	bcc.n	80049d2 <??ZbZclAttrReportReadReq_5>
 80049ce:	2001      	movs	r0, #1
 80049d0:	e046      	b.n	8004a60 <??ZbZclAttrReportReadReq_2>

080049d2 <??ZbZclAttrReportReadReq_5>:
 80049d2:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80049d6:	4430      	add	r0, r6
 80049d8:	7e00      	ldrb	r0, [r0, #24]
 80049da:	a90c      	add	r1, sp, #48	; 0x30
 80049dc:	5508      	strb	r0, [r1, r4]
 80049de:	1c64      	adds	r4, r4, #1
 80049e0:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80049e4:	4430      	add	r0, r6
 80049e6:	8b41      	ldrh	r1, [r0, #26]
 80049e8:	a80c      	add	r0, sp, #48	; 0x30
 80049ea:	4420      	add	r0, r4
 80049ec:	f7fd f93d 	bl	8001c6a <putle16>
 80049f0:	1ca4      	adds	r4, r4, #2
 80049f2:	f118 0801 	adds.w	r8, r8, #1
 80049f6:	e7e4      	b.n	80049c2 <??ZbZclAttrReportReadReq_3>

080049f8 <??ZbZclAttrReportReadReq_4>:
 80049f8:	f05f 0930 	movs.w	r9, #48	; 0x30
 80049fc:	f05f 0a00 	movs.w	sl, #0
 8004a00:	46eb      	mov	fp, sp
 8004a02:	4652      	mov	r2, sl
 8004a04:	4649      	mov	r1, r9
 8004a06:	4658      	mov	r0, fp
 8004a08:	f001 f8e5 	bl	8005bd6 <__aeabi_memset>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f88d 001a 	strb.w	r0, [sp, #26]
 8004a12:	2008      	movs	r0, #8
 8004a14:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8004a18:	f00d fc09 	bl	801222e <ZbZclGetNextSeqnum>
 8004a1c:	f88d 0020 	strb.w	r0, [sp, #32]
 8004a20:	4668      	mov	r0, sp
 8004a22:	0031      	movs	r1, r6
 8004a24:	2210      	movs	r2, #16
 8004a26:	f010 fe4c 	bl	80156c2 <__aeabi_memcpy>
 8004a2a:	8aa8      	ldrh	r0, [r5, #20]
 8004a2c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004a30:	89a8      	ldrh	r0, [r5, #12]
 8004a32:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004a36:	7ba8      	ldrb	r0, [r5, #14]
 8004a38:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004a3c:	8ae8      	ldrh	r0, [r5, #22]
 8004a3e:	f8ad 0016 	strh.w	r0, [sp, #22]
 8004a42:	7e28      	ldrb	r0, [r5, #24]
 8004a44:	f88d 0018 	strb.w	r0, [sp, #24]
 8004a48:	7e68      	ldrb	r0, [r5, #25]
 8004a4a:	f88d 0019 	strb.w	r0, [sp, #25]
 8004a4e:	a80c      	add	r0, sp, #48	; 0x30
 8004a50:	9009      	str	r0, [sp, #36]	; 0x24
 8004a52:	940a      	str	r4, [sp, #40]	; 0x28
 8004a54:	003b      	movs	r3, r7
 8004a56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a58:	4669      	mov	r1, sp
 8004a5a:	68a8      	ldr	r0, [r5, #8]
 8004a5c:	f00d fc12 	bl	8012284 <ZbZclCommandReq>

08004a60 <??ZbZclAttrReportReadReq_2>:
 8004a60:	b01d      	add	sp, #116	; 0x74
 8004a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a66 <ZbZclAttrReportConfigDefault>:
 8004a66:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6a:	0007      	movs	r7, r0
 8004a6c:	4688      	mov	r8, r1
 8004a6e:	4691      	mov	r9, r2
 8004a70:	469a      	mov	sl, r3
 8004a72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a74:	4641      	mov	r1, r8
 8004a76:	b289      	uxth	r1, r1
 8004a78:	0038      	movs	r0, r7
 8004a7a:	f7fd f97a 	bl	8001d72 <ZbZclAttrFind>
 8004a7e:	0005      	movs	r5, r0
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	d101      	bne.n	8004a88 <??ZbZclAttrReportConfigDefault_0>
 8004a84:	2086      	movs	r0, #134	; 0x86
 8004a86:	e02b      	b.n	8004ae0 <??ZbZclAttrReportConfigDefault_1>

08004a88 <??ZbZclAttrReportConfigDefault_0>:
 8004a88:	68a8      	ldr	r0, [r5, #8]
 8004a8a:	7900      	ldrb	r0, [r0, #4]
 8004a8c:	0780      	lsls	r0, r0, #30
 8004a8e:	d401      	bmi.n	8004a94 <??ZbZclAttrReportConfigDefault_2>
 8004a90:	208c      	movs	r0, #140	; 0x8c
 8004a92:	e025      	b.n	8004ae0 <??ZbZclAttrReportConfigDefault_1>

08004a94 <??ZbZclAttrReportConfigDefault_2>:
 8004a94:	2200      	movs	r2, #0
 8004a96:	4641      	mov	r1, r8
 8004a98:	b289      	uxth	r1, r1
 8004a9a:	0038      	movs	r0, r7
 8004a9c:	f7fe ff45 	bl	800392a <zcl_reporting_find>
 8004aa0:	0006      	movs	r6, r0
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	d101      	bne.n	8004aaa <??ZbZclAttrReportConfigDefault_3>
 8004aa6:	208b      	movs	r0, #139	; 0x8b
 8004aa8:	e01a      	b.n	8004ae0 <??ZbZclAttrReportConfigDefault_1>

08004aaa <??ZbZclAttrReportConfigDefault_3>:
 8004aaa:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004aae:	f8ad a000 	strh.w	sl, [sp]
 8004ab2:	4669      	mov	r1, sp
 8004ab4:	f10d 0002 	add.w	r0, sp, #2
 8004ab8:	f7ff f894 	bl	8003be4 <zcl_reporting_check_default_intvl>
 8004abc:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004ac0:	84b0      	strh	r0, [r6, #36]	; 0x24
 8004ac2:	f8bd 0000 	ldrh.w	r0, [sp]
 8004ac6:	84f0      	strh	r0, [r6, #38]	; 0x26
 8004ac8:	2c00      	cmp	r4, #0
 8004aca:	d003      	beq.n	8004ad4 <??ZbZclAttrReportConfigDefault_4>
 8004acc:	ed94 0b00 	vldr	d0, [r4]
 8004ad0:	ed86 0b0c 	vstr	d0, [r6, #48]	; 0x30

08004ad4 <??ZbZclAttrReportConfigDefault_4>:
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	0031      	movs	r1, r6
 8004ad8:	68b8      	ldr	r0, [r7, #8]
 8004ada:	f7ff f8b3 	bl	8003c44 <zcl_reporting_reset_defaults>
 8004ade:	2000      	movs	r0, #0

08004ae0 <??ZbZclAttrReportConfigDefault_1>:
 8004ae0:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08004ae4 <ZbZclClusterReportCallbackAttach>:
 8004ae4:	65c1      	str	r1, [r0, #92]	; 0x5c
 8004ae6:	4770      	bx	lr

08004ae8 <zcl_cluster_command_dummy>:
 8004ae8:	0003      	movs	r3, r0
 8004aea:	20ff      	movs	r0, #255	; 0xff
 8004aec:	4770      	bx	lr

08004aee <ZbZclClusterAlloc>:
 8004aee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af2:	0006      	movs	r6, r0
 8004af4:	000f      	movs	r7, r1
 8004af6:	4698      	mov	r8, r3
 8004af8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004afa:	2f6c      	cmp	r7, #108	; 0x6c
 8004afc:	d201      	bcs.n	8004b02 <??ZbZclClusterAlloc_0>
 8004afe:	2000      	movs	r0, #0
 8004b00:	e083      	b.n	8004c0a <??ZbZclClusterAlloc_1>

08004b02 <??ZbZclClusterAlloc_0>:
 8004b02:	f20f 2914 	addw	r9, pc, #532	; 0x214
 8004b06:	2300      	movs	r3, #0
 8004b08:	464a      	mov	r2, r9
 8004b0a:	0039      	movs	r1, r7
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	f00d fd4f 	bl	80125b0 <zb_heap_alloc>
 8004b12:	0004      	movs	r4, r0
 8004b14:	2c00      	cmp	r4, #0
 8004b16:	d101      	bne.n	8004b1c <??ZbZclClusterAlloc_2>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e076      	b.n	8004c0a <??ZbZclClusterAlloc_1>

08004b1c <??ZbZclClusterAlloc_2>:
 8004b1c:	9701      	str	r7, [sp, #4]
 8004b1e:	f05f 0a00 	movs.w	sl, #0
 8004b22:	46a3      	mov	fp, r4
 8004b24:	4652      	mov	r2, sl
 8004b26:	9901      	ldr	r1, [sp, #4]
 8004b28:	4658      	mov	r0, fp
 8004b2a:	f001 f854 	bl	8005bd6 <__aeabi_memset>
 8004b2e:	6024      	str	r4, [r4, #0]
 8004b30:	6064      	str	r4, [r4, #4]
 8004b32:	60a6      	str	r6, [r4, #8]
 8004b34:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004b38:	81a0      	strh	r0, [r4, #12]
 8004b3a:	f884 800e 	strb.w	r8, [r4, #14]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	8220      	strh	r0, [r4, #16]
 8004b42:	f44f 7082 	mov.w	r0, #260	; 0x104
 8004b46:	82a0      	strh	r0, [r4, #20]
 8004b48:	200f      	movs	r0, #15
 8004b4a:	82e0      	strh	r0, [r4, #22]
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	7620      	strb	r0, [r4, #24]
 8004b50:	2000      	movs	r0, #0
 8004b52:	7660      	strb	r0, [r4, #25]
 8004b54:	2039      	movs	r0, #57	; 0x39
 8004b56:	8360      	strh	r0, [r4, #26]
 8004b58:	7725      	strb	r5, [r4, #28]
 8004b5a:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8004b5e:	6260      	str	r0, [r4, #36]	; 0x24
 8004b60:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8004b64:	62a0      	str	r0, [r4, #40]	; 0x28
 8004b66:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 8004b6a:	6320      	str	r0, [r4, #48]	; 0x30
 8004b6c:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 8004b70:	6360      	str	r0, [r4, #52]	; 0x34
 8004b72:	9400      	str	r4, [sp, #0]
 8004b74:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8004f4c <??DataTable5_1>
 8004b78:	2281      	movs	r2, #129	; 0x81
 8004b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b7e:	0030      	movs	r0, r6
 8004b80:	f00d f8e2 	bl	8011d48 <ZbMsgFilterRegister>
 8004b84:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004b86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d104      	bne.n	8004b96 <??ZbZclClusterAlloc_3>
 8004b8c:	0020      	movs	r0, r4
 8004b8e:	f000 f870 	bl	8004c72 <ZbZclClusterFree>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e039      	b.n	8004c0a <??ZbZclClusterAlloc_1>

08004b96 <??ZbZclClusterAlloc_3>:
 8004b96:	0022      	movs	r2, r4
 8004b98:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8004f50 <??DataTable5_2>
 8004b9c:	0030      	movs	r0, r6
 8004b9e:	f00d f98f 	bl	8011ec0 <ZbTimerAlloc>
 8004ba2:	63a0      	str	r0, [r4, #56]	; 0x38
 8004ba4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d104      	bne.n	8004bb4 <??ZbZclClusterAlloc_4>
 8004baa:	0020      	movs	r0, r4
 8004bac:	f000 f861 	bl	8004c72 <ZbZclClusterFree>
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e02a      	b.n	8004c0a <??ZbZclClusterAlloc_1>

08004bb4 <??ZbZclClusterAlloc_4>:
 8004bb4:	0022      	movs	r2, r4
 8004bb6:	f20f 1125 	addw	r1, pc, #293	; 0x125
 8004bba:	0030      	movs	r0, r6
 8004bbc:	f00d f980 	bl	8011ec0 <ZbTimerAlloc>
 8004bc0:	6520      	str	r0, [r4, #80]	; 0x50
 8004bc2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d104      	bne.n	8004bd2 <??ZbZclClusterAlloc_5>
 8004bc8:	0020      	movs	r0, r4
 8004bca:	f000 f852 	bl	8004c72 <ZbZclClusterFree>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e01b      	b.n	8004c0a <??ZbZclClusterAlloc_1>

08004bd2 <??ZbZclClusterAlloc_5>:
 8004bd2:	21ac      	movs	r1, #172	; 0xac
 8004bd4:	0020      	movs	r0, r4
 8004bd6:	f7fc f844 	bl	8000c62 <ZbZclClusterSetMinSecurity>
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f8df 1374 	ldr.w	r1, [pc, #884]	; 8004f54 <??DataTable5_3>
 8004be0:	0020      	movs	r0, r4
 8004be2:	f7fe f8d7 	bl	8002d94 <ZbZclAttrAppendList>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d007      	beq.n	8004bfa <??ZbZclClusterAlloc_6>
 8004bea:	2300      	movs	r3, #0
 8004bec:	464a      	mov	r2, r9
 8004bee:	0021      	movs	r1, r4
 8004bf0:	0030      	movs	r0, r6
 8004bf2:	f00d fcec 	bl	80125ce <zb_heap_free>
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	e007      	b.n	8004c0a <??ZbZclClusterAlloc_1>

08004bfa <??ZbZclClusterAlloc_6>:
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8004c02:	0020      	movs	r0, r4
 8004c04:	f7fb feed 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8004c08:	0020      	movs	r0, r4

08004c0a <??ZbZclClusterAlloc_1>:
 8004c0a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c0e <ZbZclClusterAttach>:
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	0004      	movs	r4, r0
 8004c12:	7ba0      	ldrb	r0, [r4, #14]
 8004c14:	28ff      	cmp	r0, #255	; 0xff
 8004c16:	d104      	bne.n	8004c22 <??ZbZclClusterAttach_0>
 8004c18:	89a0      	ldrh	r0, [r4, #12]
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d001      	beq.n	8004c22 <??ZbZclClusterAttach_0>
 8004c1e:	89a0      	ldrh	r0, [r4, #12]
 8004c20:	280a      	cmp	r0, #10

08004c22 <??ZbZclClusterAttach_0>:
 8004c22:	7ba0      	ldrb	r0, [r4, #14]
 8004c24:	28ff      	cmp	r0, #255	; 0xff
 8004c26:	d00b      	beq.n	8004c40 <??ZbZclClusterAttach_1>
 8004c28:	7f23      	ldrb	r3, [r4, #28]
 8004c2a:	8aa2      	ldrh	r2, [r4, #20]
 8004c2c:	7ba1      	ldrb	r1, [r4, #14]
 8004c2e:	0020      	movs	r0, r4
 8004c30:	f00d fc23 	bl	801247a <ZbZclClusterBind>
 8004c34:	0001      	movs	r1, r0
 8004c36:	b2c9      	uxtb	r1, r1
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d001      	beq.n	8004c40 <??ZbZclClusterAttach_1>
 8004c3c:	b2c0      	uxtb	r0, r0
 8004c3e:	e005      	b.n	8004c4c <??ZbZclClusterAttach_2>

08004c40 <??ZbZclClusterAttach_1>:
 8004c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d101      	bne.n	8004c4a <??ZbZclClusterAttach_3>
 8004c46:	48c4      	ldr	r0, [pc, #784]	; (8004f58 <??DataTable5_4>)
 8004c48:	65a0      	str	r0, [r4, #88]	; 0x58

08004c4a <??ZbZclClusterAttach_3>:
 8004c4a:	2000      	movs	r0, #0

08004c4c <??ZbZclClusterAttach_2>:
 8004c4c:	bd10      	pop	{r4, pc}

08004c4e <ZbZclClusterDetach>:
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	0004      	movs	r4, r0
 8004c52:	68a0      	ldr	r0, [r4, #8]
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d00b      	beq.n	8004c70 <??ZbZclClusterDetach_0>

08004c58 <??ZbZclClusterDetach_1>:
 8004c58:	0020      	movs	r0, r4
 8004c5a:	f00d fc51 	bl	8012500 <ZbZclClusterUnbind>
 8004c5e:	0020      	movs	r0, r4
 8004c60:	f00d fc7a 	bl	8012558 <ZbZclClusterRemoveAlarmResetHandler>
 8004c64:	7ba0      	ldrb	r0, [r4, #14]
 8004c66:	28ff      	cmp	r0, #255	; 0xff
 8004c68:	d002      	beq.n	8004c70 <??ZbZclClusterDetach_0>
 8004c6a:	0020      	movs	r0, r4
 8004c6c:	f00d fbd0 	bl	8012410 <ZbZclClusterEndpointRemove>

08004c70 <??ZbZclClusterDetach_0>:
 8004c70:	bd10      	pop	{r4, pc}

08004c72 <ZbZclClusterFree>:
 8004c72:	b538      	push	{r3, r4, r5, lr}
 8004c74:	0005      	movs	r5, r0
 8004c76:	68ac      	ldr	r4, [r5, #8]
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d02d      	beq.n	8004cd8 <??ZbZclClusterFree_0>

08004c7c <??ZbZclClusterFree_1>:
 8004c7c:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d004      	beq.n	8004c8c <??ZbZclClusterFree_2>
 8004c82:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004c84:	f00d f96e 	bl	8011f64 <ZbTimerFree>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	6528      	str	r0, [r5, #80]	; 0x50

08004c8c <??ZbZclClusterFree_2>:
 8004c8c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d004      	beq.n	8004c9c <??ZbZclClusterFree_3>
 8004c92:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c94:	f00d f966 	bl	8011f64 <ZbTimerFree>
 8004c98:	2000      	movs	r0, #0
 8004c9a:	63a8      	str	r0, [r5, #56]	; 0x38

08004c9c <??ZbZclClusterFree_3>:
 8004c9c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d005      	beq.n	8004cae <??ZbZclClusterFree_4>
 8004ca2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004ca4:	0020      	movs	r0, r4
 8004ca6:	f00d f8b3 	bl	8011e10 <ZbMsgFilterRemove>
 8004caa:	2000      	movs	r0, #0
 8004cac:	62e8      	str	r0, [r5, #44]	; 0x2c

08004cae <??ZbZclClusterFree_4>:
 8004cae:	0028      	movs	r0, r5
 8004cb0:	f7fe fe29 	bl	8003906 <ZbZclReportCleanup>
 8004cb4:	0028      	movs	r0, r5
 8004cb6:	f7ff ffca 	bl	8004c4e <ZbZclClusterDetach>
 8004cba:	0028      	movs	r0, r5
 8004cbc:	f7fe f976 	bl	8002fac <ZbZclAttrFreeList>
 8004cc0:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d002      	beq.n	8004ccc <??ZbZclClusterFree_5>
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8004cca:	4788      	blx	r1

08004ccc <??ZbZclClusterFree_5>:
 8004ccc:	2300      	movs	r3, #0
 8004cce:	a212      	add	r2, pc, #72	; (adr r2, 8004d18 <??DataTable4>)
 8004cd0:	0029      	movs	r1, r5
 8004cd2:	0020      	movs	r0, r4
 8004cd4:	f00d fc7b 	bl	80125ce <zb_heap_free>

08004cd8 <??ZbZclClusterFree_0>:
 8004cd8:	bd31      	pop	{r0, r4, r5, pc}
	...

08004cdc <zcl_cluster_persist_timer>:
 8004cdc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004cde:	0005      	movs	r5, r0
 8004ce0:	000e      	movs	r6, r1
 8004ce2:	0037      	movs	r7, r6
 8004ce4:	a902      	add	r1, sp, #8
 8004ce6:	0038      	movs	r0, r7
 8004ce8:	f000 f818 	bl	8004d1c <zcl_persist_read_attrs>
 8004cec:	0004      	movs	r4, r0
 8004cee:	2c00      	cmp	r4, #0
 8004cf0:	d010      	beq.n	8004d14 <??zcl_cluster_persist_timer_0>
 8004cf2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004cf6:	9001      	str	r0, [sp, #4]
 8004cf8:	9400      	str	r4, [sp, #0]
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	7f3a      	ldrb	r2, [r7, #28]
 8004d00:	89b9      	ldrh	r1, [r7, #12]
 8004d02:	68b8      	ldr	r0, [r7, #8]
 8004d04:	f000 f92a 	bl	8004f5c <zcl_persist_send_cache>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	a203      	add	r2, pc, #12	; (adr r2, 8004d18 <??DataTable4>)
 8004d0c:	0021      	movs	r1, r4
 8004d0e:	68b8      	ldr	r0, [r7, #8]
 8004d10:	f00d fc5d 	bl	80125ce <zb_heap_free>

08004d14 <??zcl_cluster_persist_timer_0>:
 8004d14:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08004d18 <??DataTable4>:
 8004d18:	0000 0000                                   ....

08004d1c <zcl_persist_read_attrs>:
 8004d1c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	b08c      	sub	sp, #48	; 0x30
 8004d22:	0007      	movs	r7, r0
 8004d24:	f05f 0b00 	movs.w	fp, #0
 8004d28:	f05f 0900 	movs.w	r9, #0
 8004d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2e:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004d32:	4288      	cmp	r0, r1
 8004d34:	d001      	beq.n	8004d3a <??zcl_persist_read_attrs_0>
 8004d36:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004d38:	e000      	b.n	8004d3c <??zcl_persist_read_attrs_1>

08004d3a <??zcl_persist_read_attrs_0>:
 8004d3a:	2400      	movs	r4, #0

08004d3c <??zcl_persist_read_attrs_1>:
 8004d3c:	2c00      	cmp	r4, #0
 8004d3e:	d01e      	beq.n	8004d7e <??zcl_persist_read_attrs_2>
 8004d40:	46a0      	mov	r8, r4
 8004d42:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004d46:	7900      	ldrb	r0, [r0, #4]
 8004d48:	0740      	lsls	r0, r0, #29
 8004d4a:	d50f      	bpl.n	8004d6c <??zcl_persist_read_attrs_3>

08004d4c <??zcl_persist_read_attrs_4>:
 8004d4c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d004      	beq.n	8004d5e <??zcl_persist_read_attrs_5>
 8004d54:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004d58:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004d5c:	d300      	bcc.n	8004d60 <??zcl_persist_read_attrs_6>

08004d5e <??zcl_persist_read_attrs_5>:
 8004d5e:	e005      	b.n	8004d6c <??zcl_persist_read_attrs_3>

08004d60 <??zcl_persist_read_attrs_6>:
 8004d60:	f119 0904 	adds.w	r9, r9, #4
 8004d64:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004d68:	eb10 0909 	adds.w	r9, r0, r9

08004d6c <??zcl_persist_read_attrs_3>:
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004d72:	4288      	cmp	r0, r1
 8004d74:	d001      	beq.n	8004d7a <??zcl_persist_read_attrs_7>
 8004d76:	6824      	ldr	r4, [r4, #0]
 8004d78:	e7e0      	b.n	8004d3c <??zcl_persist_read_attrs_1>

08004d7a <??zcl_persist_read_attrs_7>:
 8004d7a:	2400      	movs	r4, #0
 8004d7c:	e7de      	b.n	8004d3c <??zcl_persist_read_attrs_1>

08004d7e <??zcl_persist_read_attrs_2>:
 8004d7e:	4648      	mov	r0, r9
 8004d80:	b280      	uxth	r0, r0
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d101      	bne.n	8004d8a <??zcl_persist_read_attrs_8>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e0db      	b.n	8004f42 <??zcl_persist_read_attrs_9>

08004d8a <??zcl_persist_read_attrs_8>:
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	a26e      	add	r2, pc, #440	; (adr r2, 8004f48 <??DataTable5>)
 8004d8e:	4649      	mov	r1, r9
 8004d90:	b289      	uxth	r1, r1
 8004d92:	68b8      	ldr	r0, [r7, #8]
 8004d94:	f00d fc0c 	bl	80125b0 <zb_heap_alloc>
 8004d98:	0005      	movs	r5, r0
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	d101      	bne.n	8004da2 <??zcl_persist_read_attrs_10>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e0cf      	b.n	8004f42 <??zcl_persist_read_attrs_9>

08004da2 <??zcl_persist_read_attrs_10>:
 8004da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da4:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004da8:	4288      	cmp	r0, r1
 8004daa:	d001      	beq.n	8004db0 <??zcl_persist_read_attrs_11>
 8004dac:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004dae:	e000      	b.n	8004db2 <??zcl_persist_read_attrs_12>

08004db0 <??zcl_persist_read_attrs_11>:
 8004db0:	2400      	movs	r4, #0

08004db2 <??zcl_persist_read_attrs_12>:
 8004db2:	2c00      	cmp	r4, #0
 8004db4:	f000 80c1 	beq.w	8004f3a <??zcl_persist_read_attrs_13>
 8004db8:	46a0      	mov	r8, r4
 8004dba:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004dbe:	7900      	ldrb	r0, [r0, #4]
 8004dc0:	0740      	lsls	r0, r0, #29
 8004dc2:	f140 80b1 	bpl.w	8004f28 <??zcl_persist_read_attrs_14>

08004dc6 <??zcl_persist_read_attrs_15>:
 8004dc6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004dca:	7900      	ldrb	r0, [r0, #4]
 8004dcc:	06c0      	lsls	r0, r0, #27
 8004dce:	d566      	bpl.n	8004e9e <??zcl_persist_read_attrs_16>
 8004dd0:	4658      	mov	r0, fp
 8004dd2:	b280      	uxth	r0, r0
 8004dd4:	4428      	add	r0, r5
 8004dd6:	1d00      	adds	r0, r0, #4
 8004dd8:	9001      	str	r0, [sp, #4]
 8004dda:	4649      	mov	r1, r9
 8004ddc:	b289      	uxth	r1, r1
 8004dde:	4658      	mov	r0, fp
 8004de0:	b280      	uxth	r0, r0
 8004de2:	1a09      	subs	r1, r1, r0
 8004de4:	1f08      	subs	r0, r1, #4
 8004de6:	f8ad 0000 	strh.w	r0, [sp]
 8004dea:	2020      	movs	r0, #32
 8004dec:	9003      	str	r0, [sp, #12]
 8004dee:	2000      	movs	r0, #0
 8004df0:	9002      	str	r0, [sp, #8]
 8004df2:	f10d 0a10 	add.w	sl, sp, #16
 8004df6:	9a02      	ldr	r2, [sp, #8]
 8004df8:	9903      	ldr	r1, [sp, #12]
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f000 feeb 	bl	8005bd6 <__aeabi_memset>
 8004e00:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004e04:	9004      	str	r0, [sp, #16]
 8004e06:	2000      	movs	r0, #0
 8004e08:	f88d 0014 	strb.w	r0, [sp, #20]
 8004e0c:	9801      	ldr	r0, [sp, #4]
 8004e0e:	9006      	str	r0, [sp, #24]
 8004e10:	f8bd 0000 	ldrh.w	r0, [sp]
 8004e14:	9007      	str	r0, [sp, #28]
 8004e16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004e18:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e1a:	aa04      	add	r2, sp, #16
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	0038      	movs	r0, r7
 8004e20:	f7fe f890 	bl	8002f44 <ZbZclAttrCallbackExec>
 8004e24:	4682      	mov	sl, r0
 8004e26:	4650      	mov	r0, sl
 8004e28:	b2c0      	uxtb	r0, r0
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d17c      	bne.n	8004f28 <??zcl_persist_read_attrs_14>

08004e2e <??zcl_persist_read_attrs_17>:
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8bd 2000 	ldrh.w	r2, [sp]
 8004e34:	9901      	ldr	r1, [sp, #4]
 8004e36:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004e3a:	7880      	ldrb	r0, [r0, #2]
 8004e3c:	f7fd fec5 	bl	8002bca <ZbZclAttrParseLength>
 8004e40:	0006      	movs	r6, r0
 8004e42:	2e01      	cmp	r6, #1
 8004e44:	db02      	blt.n	8004e4c <??zcl_persist_read_attrs_18>
 8004e46:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8004e4a:	db00      	blt.n	8004e4e <??zcl_persist_read_attrs_19>

08004e4c <??zcl_persist_read_attrs_18>:
 8004e4c:	e06c      	b.n	8004f28 <??zcl_persist_read_attrs_14>

08004e4e <??zcl_persist_read_attrs_19>:
 8004e4e:	4648      	mov	r0, r9
 8004e50:	b280      	uxth	r0, r0
 8004e52:	4659      	mov	r1, fp
 8004e54:	b289      	uxth	r1, r1
 8004e56:	fa11 f186 	uxtah	r1, r1, r6
 8004e5a:	1d09      	adds	r1, r1, #4
 8004e5c:	4288      	cmp	r0, r1
 8004e5e:	d207      	bcs.n	8004e70 <??zcl_persist_read_attrs_20>
 8004e60:	2300      	movs	r3, #0
 8004e62:	a239      	add	r2, pc, #228	; (adr r2, 8004f48 <??DataTable5>)
 8004e64:	0029      	movs	r1, r5
 8004e66:	68b8      	ldr	r0, [r7, #8]
 8004e68:	f00d fbb1 	bl	80125ce <zb_heap_free>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e068      	b.n	8004f42 <??zcl_persist_read_attrs_9>

08004e70 <??zcl_persist_read_attrs_20>:
 8004e70:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004e74:	8801      	ldrh	r1, [r0, #0]
 8004e76:	4658      	mov	r0, fp
 8004e78:	b280      	uxth	r0, r0
 8004e7a:	4428      	add	r0, r5
 8004e7c:	f7fc fef5 	bl	8001c6a <putle16>
 8004e80:	f11b 0b02 	adds.w	fp, fp, #2
 8004e84:	0030      	movs	r0, r6
 8004e86:	0001      	movs	r1, r0
 8004e88:	b289      	uxth	r1, r1
 8004e8a:	4658      	mov	r0, fp
 8004e8c:	b280      	uxth	r0, r0
 8004e8e:	4428      	add	r0, r5
 8004e90:	f7fc feeb 	bl	8001c6a <putle16>
 8004e94:	f11b 0b02 	adds.w	fp, fp, #2
 8004e98:	eb16 0b0b 	adds.w	fp, r6, fp
 8004e9c:	e044      	b.n	8004f28 <??zcl_persist_read_attrs_14>

08004e9e <??zcl_persist_read_attrs_16>:
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004ea4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004ea8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004eac:	7880      	ldrb	r0, [r0, #2]
 8004eae:	f7fd fe8c 	bl	8002bca <ZbZclAttrParseLength>
 8004eb2:	0006      	movs	r6, r0
 8004eb4:	2e01      	cmp	r6, #1
 8004eb6:	db02      	blt.n	8004ebe <??zcl_persist_read_attrs_21>
 8004eb8:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8004ebc:	db00      	blt.n	8004ec0 <??zcl_persist_read_attrs_22>

08004ebe <??zcl_persist_read_attrs_21>:
 8004ebe:	e033      	b.n	8004f28 <??zcl_persist_read_attrs_14>

08004ec0 <??zcl_persist_read_attrs_22>:
 8004ec0:	4648      	mov	r0, r9
 8004ec2:	b280      	uxth	r0, r0
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	b289      	uxth	r1, r1
 8004ec8:	fa11 f186 	uxtah	r1, r1, r6
 8004ecc:	1d09      	adds	r1, r1, #4
 8004ece:	4288      	cmp	r0, r1
 8004ed0:	d207      	bcs.n	8004ee2 <??zcl_persist_read_attrs_23>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	a21c      	add	r2, pc, #112	; (adr r2, 8004f48 <??DataTable5>)
 8004ed6:	0029      	movs	r1, r5
 8004ed8:	68b8      	ldr	r0, [r7, #8]
 8004eda:	f00d fb78 	bl	80125ce <zb_heap_free>
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e02f      	b.n	8004f42 <??zcl_persist_read_attrs_9>

08004ee2 <??zcl_persist_read_attrs_23>:
 8004ee2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004ee6:	8801      	ldrh	r1, [r0, #0]
 8004ee8:	4658      	mov	r0, fp
 8004eea:	b280      	uxth	r0, r0
 8004eec:	4428      	add	r0, r5
 8004eee:	f7fc febc 	bl	8001c6a <putle16>
 8004ef2:	f11b 0b02 	adds.w	fp, fp, #2
 8004ef6:	0030      	movs	r0, r6
 8004ef8:	0001      	movs	r1, r0
 8004efa:	b289      	uxth	r1, r1
 8004efc:	4658      	mov	r0, fp
 8004efe:	b280      	uxth	r0, r0
 8004f00:	4428      	add	r0, r5
 8004f02:	f7fc feb2 	bl	8001c6a <putle16>
 8004f06:	f11b 0b02 	adds.w	fp, fp, #2
 8004f0a:	9601      	str	r6, [sp, #4]
 8004f0c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8004f10:	9000      	str	r0, [sp, #0]
 8004f12:	4658      	mov	r0, fp
 8004f14:	b280      	uxth	r0, r0
 8004f16:	eb05 0a00 	add.w	sl, r5, r0
 8004f1a:	9a01      	ldr	r2, [sp, #4]
 8004f1c:	9900      	ldr	r1, [sp, #0]
 8004f1e:	4650      	mov	r0, sl
 8004f20:	f010 fbcf 	bl	80156c2 <__aeabi_memcpy>
 8004f24:	eb16 0b0b 	adds.w	fp, r6, fp

08004f28 <??zcl_persist_read_attrs_14>:
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004f2e:	4288      	cmp	r0, r1
 8004f30:	d001      	beq.n	8004f36 <??zcl_persist_read_attrs_24>
 8004f32:	6824      	ldr	r4, [r4, #0]
 8004f34:	e73d      	b.n	8004db2 <??zcl_persist_read_attrs_12>

08004f36 <??zcl_persist_read_attrs_24>:
 8004f36:	2400      	movs	r4, #0
 8004f38:	e73b      	b.n	8004db2 <??zcl_persist_read_attrs_12>

08004f3a <??zcl_persist_read_attrs_13>:
 8004f3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004f3c:	f8a0 b000 	strh.w	fp, [r0]
 8004f40:	0028      	movs	r0, r5

08004f42 <??zcl_persist_read_attrs_9>:
 8004f42:	b00d      	add	sp, #52	; 0x34
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f48 <??DataTable5>:
 8004f48:	0000 0000                                   ....

08004f4c <??DataTable5_1>:
 8004f4c:	397b 0800                                   {9..

08004f50 <??DataTable5_2>:
 8004f50:	33f1 0800                                   .3..

08004f54 <??DataTable5_3>:
 8004f54:	6a30 0801                                   0j..

08004f58 <??DataTable5_4>:
 8004f58:	4ae9 0800                                   .J..

08004f5c <zcl_persist_send_cache>:
 8004f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	b098      	sub	sp, #96	; 0x60
 8004f62:	0005      	movs	r5, r0
 8004f64:	001e      	movs	r6, r3
 8004f66:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8004f68:	f05f 0900 	movs.w	r9, #0
 8004f6c:	0030      	movs	r0, r6
 8004f6e:	b280      	uxth	r0, r0
 8004f70:	28ff      	cmp	r0, #255	; 0xff
 8004f72:	d101      	bne.n	8004f78 <??zcl_persist_send_cache_0>
 8004f74:	2085      	movs	r0, #133	; 0x85
 8004f76:	e0a1      	b.n	80050bc <??zcl_persist_send_cache_1>

08004f78 <??zcl_persist_send_cache_0>:
 8004f78:	0020      	movs	r0, r4
 8004f7a:	b280      	uxth	r0, r0
 8004f7c:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 8004f80:	4288      	cmp	r0, r1
 8004f82:	d301      	bcc.n	8004f88 <??zcl_persist_send_cache_2>
 8004f84:	2089      	movs	r0, #137	; 0x89
 8004f86:	e099      	b.n	80050bc <??zcl_persist_send_cache_1>

08004f88 <??zcl_persist_send_cache_2>:
 8004f88:	f05f 0a08 	movs.w	sl, #8
 8004f8c:	f05f 0b00 	movs.w	fp, #0
 8004f90:	466f      	mov	r7, sp
 8004f92:	465a      	mov	r2, fp
 8004f94:	4651      	mov	r1, sl
 8004f96:	0038      	movs	r0, r7
 8004f98:	f000 fe1d 	bl	8005bd6 <__aeabi_memset>
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f88d 0000 	strb.w	r0, [sp]
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f88d 0001 	strb.w	r0, [sp, #1]
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f88d 0002 	strb.w	r0, [sp, #2]
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f88d 0003 	strb.w	r0, [sp, #3]
 8004fb4:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 8004fb8:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004fbc:	f00d f937 	bl	801222e <ZbZclGetNextSeqnum>
 8004fc0:	f88d 0006 	strb.w	r0, [sp, #6]
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f88d 0007 	strb.w	r0, [sp, #7]
 8004fca:	2205      	movs	r2, #5
 8004fcc:	a904      	add	r1, sp, #16
 8004fce:	4668      	mov	r0, sp
 8004fd0:	f7fc fcde 	bl	8001990 <ZbZclAppendHeader>
 8004fd4:	0007      	movs	r7, r0
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d501      	bpl.n	8004fde <??zcl_persist_send_cache_3>
 8004fda:	2085      	movs	r0, #133	; 0x85
 8004fdc:	e06e      	b.n	80050bc <??zcl_persist_send_cache_1>

08004fde <??zcl_persist_send_cache_3>:
 8004fde:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 8004fe2:	a804      	add	r0, sp, #16
 8004fe4:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8004fe8:	a812      	add	r0, sp, #72	; 0x48
 8004fea:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8004fee:	6047      	str	r7, [r0, #4]
 8004ff0:	f119 0901 	adds.w	r9, r9, #1
 8004ff4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8004ff8:	a802      	add	r0, sp, #8
 8004ffa:	f7fc fe36 	bl	8001c6a <putle16>
 8004ffe:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 8005002:	f88d 000a 	strb.w	r0, [sp, #10]
 8005006:	a802      	add	r0, sp, #8
 8005008:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800500c:	2003      	movs	r0, #3
 800500e:	a912      	add	r1, sp, #72	; 0x48
 8005010:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8005014:	6048      	str	r0, [r1, #4]
 8005016:	f119 0901 	adds.w	r9, r9, #1
 800501a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800501c:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8005020:	0020      	movs	r0, r4
 8005022:	b280      	uxth	r0, r0
 8005024:	a912      	add	r1, sp, #72	; 0x48
 8005026:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 800502a:	6048      	str	r0, [r1, #4]
 800502c:	f119 0901 	adds.w	r9, r9, #1
 8005030:	f8cd 900c 	str.w	r9, [sp, #12]
 8005034:	f05f 0a30 	movs.w	sl, #48	; 0x30
 8005038:	f05f 0900 	movs.w	r9, #0
 800503c:	f10d 0b18 	add.w	fp, sp, #24
 8005040:	464a      	mov	r2, r9
 8005042:	4651      	mov	r1, sl
 8005044:	4658      	mov	r0, fp
 8005046:	f000 fdc6 	bl	8005bd6 <__aeabi_memset>
 800504a:	2003      	movs	r0, #3
 800504c:	f88d 0018 	strb.w	r0, [sp, #24]
 8005050:	0028      	movs	r0, r5
 8005052:	f00c fbe7 	bl	8011824 <ZbExtendedAddress>
 8005056:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800505a:	20ff      	movs	r0, #255	; 0xff
 800505c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8005060:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005064:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8005068:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 800506c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8005070:	a812      	add	r0, sp, #72	; 0x48
 8005072:	900c      	str	r0, [sp, #48]	; 0x30
 8005074:	9803      	ldr	r0, [sp, #12]
 8005076:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 800507a:	2000      	movs	r0, #0
 800507c:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 8005080:	2000      	movs	r0, #0
 8005082:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8005086:	f44f 7080 	mov.w	r0, #256	; 0x100
 800508a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800508e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8005092:	f050 0008 	orrs.w	r0, r0, #8
 8005096:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800509a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800509e:	f050 0004 	orrs.w	r0, r0, #4
 80050a2:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80050a6:	2300      	movs	r3, #0
 80050a8:	2200      	movs	r2, #0
 80050aa:	a906      	add	r1, sp, #24
 80050ac:	0028      	movs	r0, r5
 80050ae:	f00c fccf 	bl	8011a50 <ZbApsdeDataReqCallback>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d001      	beq.n	80050ba <??zcl_persist_send_cache_4>
 80050b6:	2001      	movs	r0, #1
 80050b8:	e000      	b.n	80050bc <??zcl_persist_send_cache_1>

080050ba <??zcl_persist_send_cache_4>:
 80050ba:	2000      	movs	r0, #0

080050bc <??zcl_persist_send_cache_1>:
 80050bc:	b01b      	add	sp, #108	; 0x6c
 80050be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080050c2 <ZbZclHandleGetSceneData>:
 80050c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c6:	b0a2      	sub	sp, #136	; 0x88
 80050c8:	0004      	movs	r4, r0
 80050ca:	000d      	movs	r5, r1
 80050cc:	0016      	movs	r6, r2
 80050ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d106      	bne.n	80050e2 <??ZbZclHandleGetSceneData_0>
 80050d4:	2381      	movs	r3, #129	; 0x81
 80050d6:	002a      	movs	r2, r5
 80050d8:	0031      	movs	r1, r6
 80050da:	0020      	movs	r0, r4
 80050dc:	f00d f92b 	bl	8012336 <ZbZclSendDefaultResponse>
 80050e0:	e06b      	b.n	80051ba <??ZbZclHandleGetSceneData_1>

080050e2 <??ZbZclHandleGetSceneData_0>:
 80050e2:	2708      	movs	r7, #8
 80050e4:	f05f 0800 	movs.w	r8, #0
 80050e8:	46e9      	mov	r9, sp
 80050ea:	4642      	mov	r2, r8
 80050ec:	0039      	movs	r1, r7
 80050ee:	4648      	mov	r0, r9
 80050f0:	f000 fd71 	bl	8005bd6 <__aeabi_memset>
 80050f4:	2000      	movs	r0, #0
 80050f6:	f88d 0000 	strb.w	r0, [sp]
 80050fa:	2001      	movs	r0, #1
 80050fc:	f88d 0001 	strb.w	r0, [sp, #1]
 8005100:	78a8      	ldrb	r0, [r5, #2]
 8005102:	2800      	cmp	r0, #0
 8005104:	d103      	bne.n	800510e <??ZbZclHandleGetSceneData_2>
 8005106:	2001      	movs	r0, #1
 8005108:	f88d 0002 	strb.w	r0, [sp, #2]
 800510c:	e002      	b.n	8005114 <??ZbZclHandleGetSceneData_3>

0800510e <??ZbZclHandleGetSceneData_2>:
 800510e:	2000      	movs	r0, #0
 8005110:	f88d 0002 	strb.w	r0, [sp, #2]

08005114 <??ZbZclHandleGetSceneData_3>:
 8005114:	2001      	movs	r0, #1
 8005116:	f88d 0003 	strb.w	r0, [sp, #3]
 800511a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800511e:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005122:	79a8      	ldrb	r0, [r5, #6]
 8005124:	f88d 0006 	strb.w	r0, [sp, #6]
 8005128:	20f0      	movs	r0, #240	; 0xf0
 800512a:	f88d 0007 	strb.w	r0, [sp, #7]
 800512e:	8b62      	ldrh	r2, [r4, #26]
 8005130:	a90e      	add	r1, sp, #56	; 0x38
 8005132:	4668      	mov	r0, sp
 8005134:	f7fc fc2c 	bl	8001990 <ZbZclAppendHeader>
 8005138:	0007      	movs	r7, r0
 800513a:	2f00      	cmp	r7, #0
 800513c:	d506      	bpl.n	800514c <??ZbZclHandleGetSceneData_4>
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	002a      	movs	r2, r5
 8005142:	0031      	movs	r1, r6
 8005144:	0020      	movs	r0, r4
 8005146:	f00d f8f6 	bl	8012336 <ZbZclSendDefaultResponse>
 800514a:	e036      	b.n	80051ba <??ZbZclHandleGetSceneData_1>

0800514c <??ZbZclHandleGetSceneData_4>:
 800514c:	46b9      	mov	r9, r7
 800514e:	f1d9 024d 	rsbs	r2, r9, #77	; 0x4d
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	a80e      	add	r0, sp, #56	; 0x38
 8005156:	eb00 0109 	add.w	r1, r0, r9
 800515a:	0020      	movs	r0, r4
 800515c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800515e:	4798      	blx	r3
 8005160:	4680      	mov	r8, r0
 8005162:	4640      	mov	r0, r8
 8005164:	b2c0      	uxtb	r0, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	d106      	bne.n	8005178 <??ZbZclHandleGetSceneData_5>
 800516a:	2381      	movs	r3, #129	; 0x81
 800516c:	002a      	movs	r2, r5
 800516e:	0031      	movs	r1, r6
 8005170:	0020      	movs	r0, r4
 8005172:	f00d f8e0 	bl	8012336 <ZbZclSendDefaultResponse>
 8005176:	e020      	b.n	80051ba <??ZbZclHandleGetSceneData_1>

08005178 <??ZbZclHandleGetSceneData_5>:
 8005178:	fa59 f988 	uxtab	r9, r9, r8
 800517c:	0032      	movs	r2, r6
 800517e:	a902      	add	r1, sp, #8
 8005180:	0020      	movs	r0, r4
 8005182:	f7fb fea4 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8005186:	a802      	add	r0, sp, #8
 8005188:	f116 0110 	adds.w	r1, r6, #16
 800518c:	2210      	movs	r2, #16
 800518e:	f010 fa98 	bl	80156c2 <__aeabi_memcpy>
 8005192:	2000      	movs	r0, #0
 8005194:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8005198:	2000      	movs	r0, #0
 800519a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
 800519e:	2000      	movs	r0, #0
 80051a0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80051a4:	a80e      	add	r0, sp, #56	; 0x38
 80051a6:	9008      	str	r0, [sp, #32]
 80051a8:	4648      	mov	r0, r9
 80051aa:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 80051ae:	2300      	movs	r3, #0
 80051b0:	2200      	movs	r2, #0
 80051b2:	a902      	add	r1, sp, #8
 80051b4:	68a0      	ldr	r0, [r4, #8]
 80051b6:	f00c fc4b 	bl	8011a50 <ZbApsdeDataReqCallback>

080051ba <??ZbZclHandleGetSceneData_1>:
 80051ba:	b023      	add	sp, #140	; 0x8c
 80051bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080051c0 <ZbZclHandleSetSceneData>:
 80051c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	b0a4      	sub	sp, #144	; 0x90
 80051c6:	0004      	movs	r4, r0
 80051c8:	000d      	movs	r5, r1
 80051ca:	0016      	movs	r6, r2
 80051cc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d106      	bne.n	80051e0 <??ZbZclHandleSetSceneData_0>
 80051d2:	2381      	movs	r3, #129	; 0x81
 80051d4:	002a      	movs	r2, r5
 80051d6:	0031      	movs	r1, r6
 80051d8:	0020      	movs	r0, r4
 80051da:	f00d f8ac 	bl	8012336 <ZbZclSendDefaultResponse>
 80051de:	e086      	b.n	80052ee <??ZbZclHandleSetSceneData_1>

080051e0 <??ZbZclHandleSetSceneData_0>:
 80051e0:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80051e2:	2805      	cmp	r0, #5
 80051e4:	da06      	bge.n	80051f4 <??ZbZclHandleSetSceneData_2>
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	002a      	movs	r2, r5
 80051ea:	0031      	movs	r1, r6
 80051ec:	0020      	movs	r0, r4
 80051ee:	f00d f8a2 	bl	8012336 <ZbZclSendDefaultResponse>
 80051f2:	e07c      	b.n	80052ee <??ZbZclHandleSetSceneData_1>

080051f4 <??ZbZclHandleSetSceneData_2>:
 80051f4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80051f6:	f7fc fcfd 	bl	8001bf4 <pletoh32>
 80051fa:	0007      	movs	r7, r0
 80051fc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80051fe:	7900      	ldrb	r0, [r0, #4]
 8005200:	f88d 0000 	strb.w	r0, [sp]
 8005204:	f89d 0000 	ldrb.w	r0, [sp]
 8005208:	1d40      	adds	r0, r0, #5
 800520a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800520c:	4288      	cmp	r0, r1
 800520e:	d206      	bcs.n	800521e <??ZbZclHandleSetSceneData_3>
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	002a      	movs	r2, r5
 8005214:	0031      	movs	r1, r6
 8005216:	0020      	movs	r0, r4
 8005218:	f00d f88d 	bl	8012336 <ZbZclSendDefaultResponse>
 800521c:	e067      	b.n	80052ee <??ZbZclHandleSetSceneData_1>

0800521e <??ZbZclHandleSetSceneData_3>:
 800521e:	003b      	movs	r3, r7
 8005220:	b29b      	uxth	r3, r3
 8005222:	f89d 2000 	ldrb.w	r2, [sp]
 8005226:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005228:	1d41      	adds	r1, r0, #5
 800522a:	0020      	movs	r0, r4
 800522c:	f8d4 c064 	ldr.w	ip, [r4, #100]	; 0x64
 8005230:	47e0      	blx	ip
 8005232:	4680      	mov	r8, r0
 8005234:	f05f 0908 	movs.w	r9, #8
 8005238:	f05f 0a00 	movs.w	sl, #0
 800523c:	f10d 0b04 	add.w	fp, sp, #4
 8005240:	4652      	mov	r2, sl
 8005242:	4649      	mov	r1, r9
 8005244:	4658      	mov	r0, fp
 8005246:	f000 fcc6 	bl	8005bd6 <__aeabi_memset>
 800524a:	2000      	movs	r0, #0
 800524c:	f88d 0004 	strb.w	r0, [sp, #4]
 8005250:	2001      	movs	r0, #1
 8005252:	f88d 0005 	strb.w	r0, [sp, #5]
 8005256:	78a8      	ldrb	r0, [r5, #2]
 8005258:	2800      	cmp	r0, #0
 800525a:	d103      	bne.n	8005264 <??ZbZclHandleSetSceneData_4>
 800525c:	2001      	movs	r0, #1
 800525e:	f88d 0006 	strb.w	r0, [sp, #6]
 8005262:	e002      	b.n	800526a <??ZbZclHandleSetSceneData_5>

08005264 <??ZbZclHandleSetSceneData_4>:
 8005264:	2000      	movs	r0, #0
 8005266:	f88d 0006 	strb.w	r0, [sp, #6]

0800526a <??ZbZclHandleSetSceneData_5>:
 800526a:	2001      	movs	r0, #1
 800526c:	f88d 0007 	strb.w	r0, [sp, #7]
 8005270:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8005274:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005278:	79a8      	ldrb	r0, [r5, #6]
 800527a:	f88d 000a 	strb.w	r0, [sp, #10]
 800527e:	20f1      	movs	r0, #241	; 0xf1
 8005280:	f88d 000b 	strb.w	r0, [sp, #11]
 8005284:	8b62      	ldrh	r2, [r4, #26]
 8005286:	a910      	add	r1, sp, #64	; 0x40
 8005288:	a801      	add	r0, sp, #4
 800528a:	f7fc fb81 	bl	8001990 <ZbZclAppendHeader>
 800528e:	4681      	mov	r9, r0
 8005290:	f1b9 0f00 	cmp.w	r9, #0
 8005294:	d506      	bpl.n	80052a4 <??ZbZclHandleSetSceneData_6>
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	002a      	movs	r2, r5
 800529a:	0031      	movs	r1, r6
 800529c:	0020      	movs	r0, r4
 800529e:	f00d f84a 	bl	8012336 <ZbZclSendDefaultResponse>
 80052a2:	e024      	b.n	80052ee <??ZbZclHandleSetSceneData_1>

080052a4 <??ZbZclHandleSetSceneData_6>:
 80052a4:	46ca      	mov	sl, r9
 80052a6:	a810      	add	r0, sp, #64	; 0x40
 80052a8:	f800 800a 	strb.w	r8, [r0, sl]
 80052ac:	f11a 0a01 	adds.w	sl, sl, #1
 80052b0:	0032      	movs	r2, r6
 80052b2:	a904      	add	r1, sp, #16
 80052b4:	0020      	movs	r0, r4
 80052b6:	f7fb fe0a 	bl	8000ece <ZbZclClusterInitApsdeReq>
 80052ba:	a804      	add	r0, sp, #16
 80052bc:	f116 0110 	adds.w	r1, r6, #16
 80052c0:	2210      	movs	r2, #16
 80052c2:	f010 f9fe 	bl	80156c2 <__aeabi_memcpy>
 80052c6:	2000      	movs	r0, #0
 80052c8:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80052cc:	2000      	movs	r0, #0
 80052ce:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
 80052d2:	2000      	movs	r0, #0
 80052d4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 80052d8:	a810      	add	r0, sp, #64	; 0x40
 80052da:	900a      	str	r0, [sp, #40]	; 0x28
 80052dc:	4650      	mov	r0, sl
 80052de:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 80052e2:	2300      	movs	r3, #0
 80052e4:	2200      	movs	r2, #0
 80052e6:	a904      	add	r1, sp, #16
 80052e8:	68a0      	ldr	r0, [r4, #8]
 80052ea:	f00c fbb1 	bl	8011a50 <ZbApsdeDataReqCallback>

080052ee <??ZbZclHandleSetSceneData_1>:
 80052ee:	b025      	add	sp, #148	; 0x94
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052f4 <ZbZclAppendFloat>:
 80052f4:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	b081      	sub	sp, #4
 80052fa:	ed2d 8b04 	vpush	{d8-d9}
 80052fe:	b084      	sub	sp, #16
 8005300:	eeb0 8a40 	vmov.f32	s16, s0
 8005304:	eef0 8a60 	vmov.f32	s17, s1
 8005308:	000e      	movs	r6, r1
 800530a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800530e:	2838      	cmp	r0, #56	; 0x38
 8005310:	d149      	bne.n	80053a6 <??ZbZclAppendFloat_0>
 8005312:	2400      	movs	r4, #0
 8005314:	2510      	movs	r5, #16
 8005316:	f07f 070e 	mvns.w	r7, #14
 800531a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800531c:	2802      	cmp	r0, #2
 800531e:	d202      	bcs.n	8005326 <??ZbZclAppendFloat_1>
 8005320:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8005324:	e120      	b.n	8005568 <??ZbZclAppendFloat_2>

08005326 <??ZbZclAppendFloat_1>:
 8005326:	003a      	movs	r2, r7
 8005328:	0029      	movs	r1, r5
 800532a:	4668      	mov	r0, sp
 800532c:	eeb0 0a48 	vmov.f32	s0, s16
 8005330:	eef0 0a68 	vmov.f32	s1, s17
 8005334:	f000 fb08 	bl	8005948 <ZbZclFloatFrexp>
 8005338:	eeb0 9a40 	vmov.f32	s18, s0
 800533c:	eef0 9a60 	vmov.f32	s19, s1
 8005340:	f8dd 8000 	ldr.w	r8, [sp]
 8005344:	ebb8 0807 	subs.w	r8, r8, r7
 8005348:	ea5f 2888 	movs.w	r8, r8, lsl #10
 800534c:	f418 48f8 	ands.w	r8, r8, #31744	; 0x7c00
 8005350:	ec51 0b19 	vmov	r0, r1, d9
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	f001 f902 	bl	8006560 <__aeabi_cdcmpeq>
 800535c:	d210      	bcs.n	8005380 <??ZbZclAppendFloat_3>
 800535e:	ec51 0b19 	vmov	r0, r1, d9
 8005362:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005366:	f001 f935 	bl	80065d4 <__aeabi_d2iz>
 800536a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800536e:	fb10 f101 	smulbb	r1, r0, r1
 8005372:	0589      	lsls	r1, r1, #22
 8005374:	0d89      	lsrs	r1, r1, #22
 8005376:	ea58 0101 	orrs.w	r1, r8, r1
 800537a:	f451 4100 	orrs.w	r1, r1, #32768	; 0x8000
 800537e:	e00b      	b.n	8005398 <??ZbZclAppendFloat_4>

08005380 <??ZbZclAppendFloat_3>:
 8005380:	ec51 0b19 	vmov	r0, r1, d9
 8005384:	f001 f926 	bl	80065d4 <__aeabi_d2iz>
 8005388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800538c:	fb10 f101 	smulbb	r1, r0, r1
 8005390:	0589      	lsls	r1, r1, #22
 8005392:	0d89      	lsrs	r1, r1, #22
 8005394:	ea58 0101 	orrs.w	r1, r8, r1

08005398 <??ZbZclAppendFloat_4>:
 8005398:	7031      	strb	r1, [r6, #0]
 800539a:	0008      	movs	r0, r1
 800539c:	b280      	uxth	r0, r0
 800539e:	0a00      	lsrs	r0, r0, #8
 80053a0:	7070      	strb	r0, [r6, #1]
 80053a2:	2002      	movs	r0, #2
 80053a4:	e0e0      	b.n	8005568 <??ZbZclAppendFloat_2>

080053a6 <??ZbZclAppendFloat_0>:
 80053a6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80053aa:	2839      	cmp	r0, #57	; 0x39
 80053ac:	d14e      	bne.n	800544c <??ZbZclAppendFloat_5>
 80053ae:	2400      	movs	r4, #0
 80053b0:	2580      	movs	r5, #128	; 0x80
 80053b2:	f07f 077e 	mvns.w	r7, #126	; 0x7e
 80053b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053b8:	2804      	cmp	r0, #4
 80053ba:	d202      	bcs.n	80053c2 <??ZbZclAppendFloat_6>
 80053bc:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80053c0:	e0d2      	b.n	8005568 <??ZbZclAppendFloat_2>

080053c2 <??ZbZclAppendFloat_6>:
 80053c2:	003a      	movs	r2, r7
 80053c4:	0029      	movs	r1, r5
 80053c6:	4668      	mov	r0, sp
 80053c8:	eeb0 0a48 	vmov.f32	s0, s16
 80053cc:	eef0 0a68 	vmov.f32	s1, s17
 80053d0:	f000 faba 	bl	8005948 <ZbZclFloatFrexp>
 80053d4:	eeb0 9a40 	vmov.f32	s18, s0
 80053d8:	eef0 9a60 	vmov.f32	s19, s1
 80053dc:	f8dd 8000 	ldr.w	r8, [sp]
 80053e0:	ebb8 0807 	subs.w	r8, r8, r7
 80053e4:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 80053e8:	f018 48ff 	ands.w	r8, r8, #2139095040	; 0x7f800000
 80053ec:	ec51 0b19 	vmov	r0, r1, d9
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	f001 f8b4 	bl	8006560 <__aeabi_cdcmpeq>
 80053f8:	d210      	bcs.n	800541c <??ZbZclAppendFloat_7>
 80053fa:	ec51 0b19 	vmov	r0, r1, d9
 80053fe:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005402:	f001 f90f 	bl	8006624 <__aeabi_d2uiz>
 8005406:	0001      	movs	r1, r0
 8005408:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 800540c:	4341      	muls	r1, r0
 800540e:	0249      	lsls	r1, r1, #9
 8005410:	0a49      	lsrs	r1, r1, #9
 8005412:	ea58 0101 	orrs.w	r1, r8, r1
 8005416:	f051 4100 	orrs.w	r1, r1, #2147483648	; 0x80000000
 800541a:	e00b      	b.n	8005434 <??ZbZclAppendFloat_8>

0800541c <??ZbZclAppendFloat_7>:
 800541c:	ec51 0b19 	vmov	r0, r1, d9
 8005420:	f001 f900 	bl	8006624 <__aeabi_d2uiz>
 8005424:	0001      	movs	r1, r0
 8005426:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 800542a:	4341      	muls	r1, r0
 800542c:	0249      	lsls	r1, r1, #9
 800542e:	0a49      	lsrs	r1, r1, #9
 8005430:	ea58 0101 	orrs.w	r1, r8, r1

08005434 <??ZbZclAppendFloat_8>:
 8005434:	7031      	strb	r1, [r6, #0]
 8005436:	0008      	movs	r0, r1
 8005438:	0a00      	lsrs	r0, r0, #8
 800543a:	7070      	strb	r0, [r6, #1]
 800543c:	0008      	movs	r0, r1
 800543e:	0c00      	lsrs	r0, r0, #16
 8005440:	70b0      	strb	r0, [r6, #2]
 8005442:	0008      	movs	r0, r1
 8005444:	0e00      	lsrs	r0, r0, #24
 8005446:	70f0      	strb	r0, [r6, #3]
 8005448:	2004      	movs	r0, #4
 800544a:	e08d      	b.n	8005568 <??ZbZclAppendFloat_2>

0800544c <??ZbZclAppendFloat_5>:
 800544c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8005450:	283a      	cmp	r0, #58	; 0x3a
 8005452:	f040 8087 	bne.w	8005564 <??ZbZclAppendFloat_9>
 8005456:	2400      	movs	r4, #0
 8005458:	2500      	movs	r5, #0
 800545a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800545e:	f8df 8744 	ldr.w	r8, [pc, #1860]	; 8005ba4 <??DataTable3>
 8005462:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005464:	2808      	cmp	r0, #8
 8005466:	d202      	bcs.n	800546e <??ZbZclAppendFloat_10>
 8005468:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800546c:	e07c      	b.n	8005568 <??ZbZclAppendFloat_2>

0800546e <??ZbZclAppendFloat_10>:
 800546e:	4642      	mov	r2, r8
 8005470:	0039      	movs	r1, r7
 8005472:	4668      	mov	r0, sp
 8005474:	eeb0 0a48 	vmov.f32	s0, s16
 8005478:	eef0 0a68 	vmov.f32	s1, s17
 800547c:	f000 fa64 	bl	8005948 <ZbZclFloatFrexp>
 8005480:	eeb0 9a40 	vmov.f32	s18, s0
 8005484:	eef0 9a60 	vmov.f32	s19, s1
 8005488:	9800      	ldr	r0, [sp, #0]
 800548a:	17c1      	asrs	r1, r0, #31
 800548c:	ea5f 79e8 	movs.w	r9, r8, asr #31
 8005490:	ebb0 0008 	subs.w	r0, r0, r8
 8005494:	eb71 0109 	sbcs.w	r1, r1, r9
 8005498:	0501      	lsls	r1, r0, #20
 800549a:	2000      	movs	r0, #0
 800549c:	2200      	movs	r2, #0
 800549e:	f8df 3708 	ldr.w	r3, [pc, #1800]	; 8005ba8 <??DataTable3_1>
 80054a2:	4010      	ands	r0, r2
 80054a4:	4019      	ands	r1, r3
 80054a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054aa:	ec51 0b19 	vmov	r0, r1, d9
 80054ae:	2200      	movs	r2, #0
 80054b0:	2300      	movs	r3, #0
 80054b2:	f001 f855 	bl	8006560 <__aeabi_cdcmpeq>
 80054b6:	d21f      	bcs.n	80054f8 <??ZbZclAppendFloat_11>
 80054b8:	ec51 0b19 	vmov	r0, r1, d9
 80054bc:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80054c0:	f001 f900 	bl	80066c4 <__aeabi_d2ulz>
 80054c4:	2200      	movs	r2, #0
 80054c6:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 80054ca:	fba2 ab00 	umull	sl, fp, r2, r0
 80054ce:	fb02 bb01 	mla	fp, r2, r1, fp
 80054d2:	fb03 bb00 	mla	fp, r3, r0, fp
 80054d6:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80054da:	f8df 16d0 	ldr.w	r1, [pc, #1744]	; 8005bac <??DataTable3_2>
 80054de:	ea1a 0000 	ands.w	r0, sl, r0
 80054e2:	ea1b 0101 	ands.w	r1, fp, r1
 80054e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054ea:	4310      	orrs	r0, r2
 80054ec:	4319      	orrs	r1, r3
 80054ee:	f050 0200 	orrs.w	r2, r0, #0
 80054f2:	f051 4300 	orrs.w	r3, r1, #2147483648	; 0x80000000
 80054f6:	e018      	b.n	800552a <??ZbZclAppendFloat_12>

080054f8 <??ZbZclAppendFloat_11>:
 80054f8:	ec51 0b19 	vmov	r0, r1, d9
 80054fc:	f001 f8e2 	bl	80066c4 <__aeabi_d2ulz>
 8005500:	2200      	movs	r2, #0
 8005502:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 8005506:	fba2 ab00 	umull	sl, fp, r2, r0
 800550a:	fb02 bb01 	mla	fp, r2, r1, fp
 800550e:	fb03 bb00 	mla	fp, r3, r0, fp
 8005512:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8005516:	f8df 1694 	ldr.w	r1, [pc, #1684]	; 8005bac <??DataTable3_2>
 800551a:	ea1a 0000 	ands.w	r0, sl, r0
 800551e:	ea1b 0101 	ands.w	r1, fp, r1
 8005522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005526:	4302      	orrs	r2, r0
 8005528:	430b      	orrs	r3, r1

0800552a <??ZbZclAppendFloat_12>:
 800552a:	7032      	strb	r2, [r6, #0]
 800552c:	0010      	movs	r0, r2
 800552e:	b280      	uxth	r0, r0
 8005530:	0a00      	lsrs	r0, r0, #8
 8005532:	7070      	strb	r0, [r6, #1]
 8005534:	0010      	movs	r0, r2
 8005536:	0c00      	lsrs	r0, r0, #16
 8005538:	70b0      	strb	r0, [r6, #2]
 800553a:	0010      	movs	r0, r2
 800553c:	0e00      	lsrs	r0, r0, #24
 800553e:	70f0      	strb	r0, [r6, #3]
 8005540:	7133      	strb	r3, [r6, #4]
 8005542:	0010      	movs	r0, r2
 8005544:	0019      	movs	r1, r3
 8005546:	0a08      	lsrs	r0, r1, #8
 8005548:	2100      	movs	r1, #0
 800554a:	7170      	strb	r0, [r6, #5]
 800554c:	0010      	movs	r0, r2
 800554e:	0019      	movs	r1, r3
 8005550:	0c08      	lsrs	r0, r1, #16
 8005552:	2100      	movs	r1, #0
 8005554:	71b0      	strb	r0, [r6, #6]
 8005556:	0010      	movs	r0, r2
 8005558:	0019      	movs	r1, r3
 800555a:	0e08      	lsrs	r0, r1, #24
 800555c:	2100      	movs	r1, #0
 800555e:	71f0      	strb	r0, [r6, #7]
 8005560:	2008      	movs	r0, #8
 8005562:	e001      	b.n	8005568 <??ZbZclAppendFloat_2>

08005564 <??ZbZclAppendFloat_9>:
 8005564:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff

08005568 <??ZbZclAppendFloat_2>:
 8005568:	b004      	add	sp, #16
 800556a:	ecbd 8b04 	vpop	{d8-d9}
 800556e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005572 <ZbZclParseFloat>:
 8005572:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005576:	ed2d 8b02 	vpush	{d8}
 800557a:	000e      	movs	r6, r1
 800557c:	4691      	mov	r9, r2
 800557e:	2000      	movs	r0, #0
 8005580:	f889 0000 	strb.w	r0, [r9]
 8005584:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005588:	2838      	cmp	r0, #56	; 0x38
 800558a:	d006      	beq.n	800559a <??ZbZclParseFloat_0>
 800558c:	f0c0 8138 	bcc.w	8005800 <??ZbZclParseFloat_1>
 8005590:	283a      	cmp	r0, #58	; 0x3a
 8005592:	f000 80ad 	beq.w	80056f0 <??ZbZclParseFloat_2>
 8005596:	d354      	bcc.n	8005642 <??ZbZclParseFloat_3>
 8005598:	e132      	b.n	8005800 <??ZbZclParseFloat_1>

0800559a <??ZbZclParseFloat_0>:
 800559a:	0030      	movs	r0, r6
 800559c:	f7fc fb19 	bl	8001bd2 <pletoh16>
 80055a0:	0004      	movs	r4, r0
 80055a2:	0020      	movs	r0, r4
 80055a4:	b280      	uxth	r0, r0
 80055a6:	f410 40f8 	ands.w	r0, r0, #31744	; 0x7c00
 80055aa:	f5b0 4ff8 	cmp.w	r0, #31744	; 0x7c00
 80055ae:	d121      	bne.n	80055f4 <??ZbZclParseFloat_4>
 80055b0:	05a0      	lsls	r0, r4, #22
 80055b2:	d008      	beq.n	80055c6 <??ZbZclParseFloat_5>
 80055b4:	2000      	movs	r0, #0
 80055b6:	2100      	movs	r1, #0
 80055b8:	2200      	movs	r2, #0
 80055ba:	2300      	movs	r3, #0
 80055bc:	f000 fe9a 	bl	80062f4 <__aeabi_ddiv>
 80055c0:	ec41 0b10 	vmov	d0, r0, r1
 80055c4:	e127      	b.n	8005816 <??ZbZclParseFloat_6>

080055c6 <??ZbZclParseFloat_5>:
 80055c6:	0420      	lsls	r0, r4, #16
 80055c8:	d50a      	bpl.n	80055e0 <??ZbZclParseFloat_7>
 80055ca:	2000      	movs	r0, #0
 80055cc:	f8df 15e0 	ldr.w	r1, [pc, #1504]	; 8005bb0 <??DataTable3_3>
 80055d0:	2200      	movs	r2, #0
 80055d2:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 80055d6:	f000 fe8d 	bl	80062f4 <__aeabi_ddiv>
 80055da:	ec41 0b10 	vmov	d0, r0, r1
 80055de:	e008      	b.n	80055f2 <??ZbZclParseFloat_8>

080055e0 <??ZbZclParseFloat_7>:
 80055e0:	2000      	movs	r0, #0
 80055e2:	f8df 15cc 	ldr.w	r1, [pc, #1484]	; 8005bb0 <??DataTable3_3>
 80055e6:	2200      	movs	r2, #0
 80055e8:	2300      	movs	r3, #0
 80055ea:	f000 fe83 	bl	80062f4 <__aeabi_ddiv>
 80055ee:	ec41 0b10 	vmov	d0, r0, r1

080055f2 <??ZbZclParseFloat_8>:
 80055f2:	e110      	b.n	8005816 <??ZbZclParseFloat_6>

080055f4 <??ZbZclParseFloat_4>:
 80055f4:	f3c4 2884 	ubfx	r8, r4, #10, #5
 80055f8:	4645      	mov	r5, r8
 80055fa:	b2ad      	uxth	r5, r5
 80055fc:	3d0f      	subs	r5, #15
 80055fe:	3d0a      	subs	r5, #10
 8005600:	f414 4ff8 	tst.w	r4, #31744	; 0x7c00
 8005604:	d004      	beq.n	8005610 <??ZbZclParseFloat_9>
 8005606:	05a7      	lsls	r7, r4, #22
 8005608:	0dbf      	lsrs	r7, r7, #22
 800560a:	f517 6780 	adds.w	r7, r7, #1024	; 0x400
 800560e:	e002      	b.n	8005616 <??ZbZclParseFloat_10>

08005610 <??ZbZclParseFloat_9>:
 8005610:	1c6d      	adds	r5, r5, #1
 8005612:	05a7      	lsls	r7, r4, #22
 8005614:	0dbf      	lsrs	r7, r7, #22

08005616 <??ZbZclParseFloat_10>:
 8005616:	0038      	movs	r0, r7
 8005618:	b280      	uxth	r0, r0
 800561a:	f000 fcc7 	bl	8005fac <__aeabi_ui2d>
 800561e:	ec41 0b18 	vmov	d8, r0, r1
 8005622:	0420      	lsls	r0, r4, #16
 8005624:	d505      	bpl.n	8005632 <??ZbZclParseFloat_11>
 8005626:	ec51 0b18 	vmov	r0, r1, d8
 800562a:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 800562e:	ec41 0b18 	vmov	d8, r0, r1

08005632 <??ZbZclParseFloat_11>:
 8005632:	0028      	movs	r0, r5
 8005634:	eeb0 0a48 	vmov.f32	s0, s16
 8005638:	eef0 0a68 	vmov.f32	s1, s17
 800563c:	f000 f8ef 	bl	800581e <ZbZclFloatLdexp>
 8005640:	e0e9      	b.n	8005816 <??ZbZclParseFloat_6>

08005642 <??ZbZclParseFloat_3>:
 8005642:	0030      	movs	r0, r6
 8005644:	f7fc fad6 	bl	8001bf4 <pletoh32>
 8005648:	0004      	movs	r4, r0
 800564a:	f014 40ff 	ands.w	r0, r4, #2139095040	; 0x7f800000
 800564e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005652:	d121      	bne.n	8005698 <??ZbZclParseFloat_12>
 8005654:	0260      	lsls	r0, r4, #9
 8005656:	d008      	beq.n	800566a <??ZbZclParseFloat_13>
 8005658:	2000      	movs	r0, #0
 800565a:	2100      	movs	r1, #0
 800565c:	2200      	movs	r2, #0
 800565e:	2300      	movs	r3, #0
 8005660:	f000 fe48 	bl	80062f4 <__aeabi_ddiv>
 8005664:	ec41 0b10 	vmov	d0, r0, r1
 8005668:	e0d5      	b.n	8005816 <??ZbZclParseFloat_6>

0800566a <??ZbZclParseFloat_13>:
 800566a:	2c00      	cmp	r4, #0
 800566c:	d50a      	bpl.n	8005684 <??ZbZclParseFloat_14>
 800566e:	2000      	movs	r0, #0
 8005670:	f8df 153c 	ldr.w	r1, [pc, #1340]	; 8005bb0 <??DataTable3_3>
 8005674:	2200      	movs	r2, #0
 8005676:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 800567a:	f000 fe3b 	bl	80062f4 <__aeabi_ddiv>
 800567e:	ec41 0b10 	vmov	d0, r0, r1
 8005682:	e008      	b.n	8005696 <??ZbZclParseFloat_15>

08005684 <??ZbZclParseFloat_14>:
 8005684:	2000      	movs	r0, #0
 8005686:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 8005bb0 <??DataTable3_3>
 800568a:	2200      	movs	r2, #0
 800568c:	2300      	movs	r3, #0
 800568e:	f000 fe31 	bl	80062f4 <__aeabi_ddiv>
 8005692:	ec41 0b10 	vmov	d0, r0, r1

08005696 <??ZbZclParseFloat_15>:
 8005696:	e0be      	b.n	8005816 <??ZbZclParseFloat_6>

08005698 <??ZbZclParseFloat_12>:
 8005698:	0025      	movs	r5, r4
 800569a:	0ded      	lsrs	r5, r5, #23
 800569c:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80056a0:	002f      	movs	r7, r5
 80056a2:	b2bf      	uxth	r7, r7
 80056a4:	3f7f      	subs	r7, #127	; 0x7f
 80056a6:	3f17      	subs	r7, #23
 80056a8:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 80056ac:	d006      	beq.n	80056bc <??ZbZclParseFloat_16>
 80056ae:	ea5f 2844 	movs.w	r8, r4, lsl #9
 80056b2:	ea5f 2858 	movs.w	r8, r8, lsr #9
 80056b6:	f518 0800 	adds.w	r8, r8, #8388608	; 0x800000
 80056ba:	e004      	b.n	80056c6 <??ZbZclParseFloat_17>

080056bc <??ZbZclParseFloat_16>:
 80056bc:	1c7f      	adds	r7, r7, #1
 80056be:	ea5f 2844 	movs.w	r8, r4, lsl #9
 80056c2:	ea5f 2858 	movs.w	r8, r8, lsr #9

080056c6 <??ZbZclParseFloat_17>:
 80056c6:	4640      	mov	r0, r8
 80056c8:	f000 fc70 	bl	8005fac <__aeabi_ui2d>
 80056cc:	ec41 0b18 	vmov	d8, r0, r1
 80056d0:	2c00      	cmp	r4, #0
 80056d2:	d505      	bpl.n	80056e0 <??ZbZclParseFloat_18>
 80056d4:	ec51 0b18 	vmov	r0, r1, d8
 80056d8:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80056dc:	ec41 0b18 	vmov	d8, r0, r1

080056e0 <??ZbZclParseFloat_18>:
 80056e0:	0038      	movs	r0, r7
 80056e2:	eeb0 0a48 	vmov.f32	s0, s16
 80056e6:	eef0 0a68 	vmov.f32	s1, s17
 80056ea:	f000 f898 	bl	800581e <ZbZclFloatLdexp>
 80056ee:	e092      	b.n	8005816 <??ZbZclParseFloat_6>

080056f0 <??ZbZclParseFloat_2>:
 80056f0:	0030      	movs	r0, r6
 80056f2:	f7fc faac 	bl	8001c4e <pletoh64>
 80056f6:	0004      	movs	r4, r0
 80056f8:	000d      	movs	r5, r1
 80056fa:	2000      	movs	r0, #0
 80056fc:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005ba8 <??DataTable3_1>
 8005700:	ea14 0200 	ands.w	r2, r4, r0
 8005704:	ea15 0301 	ands.w	r3, r5, r1
 8005708:	f05f 0a00 	movs.w	sl, #0
 800570c:	f8df b498 	ldr.w	fp, [pc, #1176]	; 8005ba8 <??DataTable3_1>
 8005710:	455b      	cmp	r3, fp
 8005712:	d131      	bne.n	8005778 <??ZbZclParseFloat_19>
 8005714:	4552      	cmp	r2, sl
 8005716:	d12f      	bne.n	8005778 <??ZbZclParseFloat_19>
 8005718:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 800571c:	f8df 148c 	ldr.w	r1, [pc, #1164]	; 8005bac <??DataTable3_2>
 8005720:	4020      	ands	r0, r4
 8005722:	4029      	ands	r1, r5
 8005724:	2900      	cmp	r1, #0
 8005726:	d101      	bne.n	800572c <??ZbZclParseFloat_20>
 8005728:	2800      	cmp	r0, #0
 800572a:	d008      	beq.n	800573e <??ZbZclParseFloat_21>

0800572c <??ZbZclParseFloat_20>:
 800572c:	2000      	movs	r0, #0
 800572e:	2100      	movs	r1, #0
 8005730:	2200      	movs	r2, #0
 8005732:	2300      	movs	r3, #0
 8005734:	f000 fdde 	bl	80062f4 <__aeabi_ddiv>
 8005738:	ec41 0b10 	vmov	d0, r0, r1
 800573c:	e06b      	b.n	8005816 <??ZbZclParseFloat_6>

0800573e <??ZbZclParseFloat_21>:
 800573e:	f014 0000 	ands.w	r0, r4, #0
 8005742:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 8005746:	2900      	cmp	r1, #0
 8005748:	d101      	bne.n	800574e <??ZbZclParseFloat_22>
 800574a:	2800      	cmp	r0, #0
 800574c:	d00a      	beq.n	8005764 <??ZbZclParseFloat_23>

0800574e <??ZbZclParseFloat_22>:
 800574e:	2000      	movs	r0, #0
 8005750:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 8005bb0 <??DataTable3_3>
 8005754:	2200      	movs	r2, #0
 8005756:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 800575a:	f000 fdcb 	bl	80062f4 <__aeabi_ddiv>
 800575e:	ec41 0b10 	vmov	d0, r0, r1
 8005762:	e008      	b.n	8005776 <??ZbZclParseFloat_24>

08005764 <??ZbZclParseFloat_23>:
 8005764:	2000      	movs	r0, #0
 8005766:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8005bb0 <??DataTable3_3>
 800576a:	2200      	movs	r2, #0
 800576c:	2300      	movs	r3, #0
 800576e:	f000 fdc1 	bl	80062f4 <__aeabi_ddiv>
 8005772:	ec41 0b10 	vmov	d0, r0, r1

08005776 <??ZbZclParseFloat_24>:
 8005776:	e04e      	b.n	8005816 <??ZbZclParseFloat_6>

08005778 <??ZbZclParseFloat_19>:
 8005778:	0022      	movs	r2, r4
 800577a:	002b      	movs	r3, r5
 800577c:	0d1a      	lsrs	r2, r3, #20
 800577e:	2300      	movs	r3, #0
 8005780:	4690      	mov	r8, r2
 8005782:	ea5f 5848 	movs.w	r8, r8, lsl #21
 8005786:	ea5f 5858 	movs.w	r8, r8, lsr #21
 800578a:	4647      	mov	r7, r8
 800578c:	b2bf      	uxth	r7, r7
 800578e:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8005792:	3f34      	subs	r7, #52	; 0x34
 8005794:	4020      	ands	r0, r4
 8005796:	4029      	ands	r1, r5
 8005798:	2900      	cmp	r1, #0
 800579a:	d101      	bne.n	80057a0 <??ZbZclParseFloat_25>
 800579c:	2800      	cmp	r0, #0
 800579e:	d00a      	beq.n	80057b6 <??ZbZclParseFloat_26>

080057a0 <??ZbZclParseFloat_25>:
 80057a0:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80057a4:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 8005bac <??DataTable3_2>
 80057a8:	4020      	ands	r0, r4
 80057aa:	4029      	ands	r1, r5
 80057ac:	f110 0a00 	adds.w	sl, r0, #0
 80057b0:	f551 1b80 	adcs.w	fp, r1, #1048576	; 0x100000
 80057b4:	e008      	b.n	80057c8 <??ZbZclParseFloat_27>

080057b6 <??ZbZclParseFloat_26>:
 80057b6:	1c7f      	adds	r7, r7, #1
 80057b8:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 80057bc:	f8df 13ec 	ldr.w	r1, [pc, #1004]	; 8005bac <??DataTable3_2>
 80057c0:	ea14 0a00 	ands.w	sl, r4, r0
 80057c4:	ea15 0b01 	ands.w	fp, r5, r1

080057c8 <??ZbZclParseFloat_27>:
 80057c8:	4650      	mov	r0, sl
 80057ca:	4659      	mov	r1, fp
 80057cc:	f000 fc32 	bl	8006034 <__aeabi_ul2d>
 80057d0:	ec41 0b18 	vmov	d8, r0, r1
 80057d4:	f014 0000 	ands.w	r0, r4, #0
 80057d8:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 80057dc:	2900      	cmp	r1, #0
 80057de:	d101      	bne.n	80057e4 <??ZbZclParseFloat_28>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d005      	beq.n	80057f0 <??ZbZclParseFloat_29>

080057e4 <??ZbZclParseFloat_28>:
 80057e4:	ec51 0b18 	vmov	r0, r1, d8
 80057e8:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80057ec:	ec41 0b18 	vmov	d8, r0, r1

080057f0 <??ZbZclParseFloat_29>:
 80057f0:	0038      	movs	r0, r7
 80057f2:	eeb0 0a48 	vmov.f32	s0, s16
 80057f6:	eef0 0a68 	vmov.f32	s1, s17
 80057fa:	f000 f810 	bl	800581e <ZbZclFloatLdexp>
 80057fe:	e00a      	b.n	8005816 <??ZbZclParseFloat_6>

08005800 <??ZbZclParseFloat_1>:
 8005800:	208d      	movs	r0, #141	; 0x8d
 8005802:	f889 0000 	strb.w	r0, [r9]
 8005806:	2000      	movs	r0, #0
 8005808:	2100      	movs	r1, #0
 800580a:	2200      	movs	r2, #0
 800580c:	2300      	movs	r3, #0
 800580e:	f000 fd71 	bl	80062f4 <__aeabi_ddiv>
 8005812:	ec41 0b10 	vmov	d0, r0, r1

08005816 <??ZbZclParseFloat_6>:
 8005816:	ecbd 8b02 	vpop	{d8}
 800581a:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800581e <ZbZclFloatLdexp>:
 800581e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005822:	ed2d 8b04 	vpush	{d8-d9}
 8005826:	b084      	sub	sp, #16
 8005828:	eeb0 8a40 	vmov.f32	s16, s0
 800582c:	eef0 8a60 	vmov.f32	s17, s1
 8005830:	0006      	movs	r6, r0
 8005832:	2730      	movs	r7, #48	; 0x30
 8005834:	ec53 2b18 	vmov	r2, r3, d8
 8005838:	ec51 0b18 	vmov	r0, r1, d8
 800583c:	f000 fe90 	bl	8006560 <__aeabi_cdcmpeq>
 8005840:	d10c      	bne.n	800585c <??ZbZclFloatLdexp_0>
 8005842:	ec53 2b18 	vmov	r2, r3, d8
 8005846:	ec51 0b18 	vmov	r0, r1, d8
 800584a:	f000 fa73 	bl	8005d34 <__adddf3>
 800584e:	0002      	movs	r2, r0
 8005850:	000b      	movs	r3, r1
 8005852:	ec51 0b18 	vmov	r0, r1, d8
 8005856:	f000 fe83 	bl	8006560 <__aeabi_cdcmpeq>
 800585a:	d104      	bne.n	8005866 <??ZbZclFloatLdexp_1>

0800585c <??ZbZclFloatLdexp_0>:
 800585c:	eeb0 0a48 	vmov.f32	s0, s16
 8005860:	eef0 0a68 	vmov.f32	s1, s17
 8005864:	e06b      	b.n	800593e <??ZbZclFloatLdexp_2>

08005866 <??ZbZclFloatLdexp_1>:
 8005866:	2e01      	cmp	r6, #1
 8005868:	db2c      	blt.n	80058c4 <??ZbZclFloatLdexp_3>
 800586a:	2401      	movs	r4, #1
 800586c:	2500      	movs	r5, #0
 800586e:	0020      	movs	r0, r4
 8005870:	0029      	movs	r1, r5
 8005872:	003a      	movs	r2, r7
 8005874:	f000 fa4c 	bl	8005d10 <__aeabi_llsl>
 8005878:	4680      	mov	r8, r0
 800587a:	4689      	mov	r9, r1
 800587c:	4640      	mov	r0, r8
 800587e:	4649      	mov	r1, r9
 8005880:	f000 fbd8 	bl	8006034 <__aeabi_ul2d>
 8005884:	ec41 0b19 	vmov	d9, r0, r1

08005888 <??ZbZclFloatLdexp_4>:
 8005888:	42be      	cmp	r6, r7
 800588a:	db09      	blt.n	80058a0 <??ZbZclFloatLdexp_5>
 800588c:	ec51 0b18 	vmov	r0, r1, d8
 8005890:	ec53 2b19 	vmov	r2, r3, d9
 8005894:	f000 fc04 	bl	80060a0 <__aeabi_dmul>
 8005898:	ec41 0b18 	vmov	d8, r0, r1
 800589c:	1bf6      	subs	r6, r6, r7
 800589e:	e7f3      	b.n	8005888 <??ZbZclFloatLdexp_4>

080058a0 <??ZbZclFloatLdexp_5>:
 80058a0:	0020      	movs	r0, r4
 80058a2:	0029      	movs	r1, r5
 80058a4:	0032      	movs	r2, r6
 80058a6:	f000 fa33 	bl	8005d10 <__aeabi_llsl>
 80058aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b2:	f000 fbbf 	bl	8006034 <__aeabi_ul2d>
 80058b6:	ec53 2b18 	vmov	r2, r3, d8
 80058ba:	f000 fbf1 	bl	80060a0 <__aeabi_dmul>
 80058be:	ec41 0b18 	vmov	d8, r0, r1
 80058c2:	e038      	b.n	8005936 <??ZbZclFloatLdexp_6>

080058c4 <??ZbZclFloatLdexp_3>:
 80058c4:	2e00      	cmp	r6, #0
 80058c6:	d536      	bpl.n	8005936 <??ZbZclFloatLdexp_6>
 80058c8:	2401      	movs	r4, #1
 80058ca:	2500      	movs	r5, #0
 80058cc:	0020      	movs	r0, r4
 80058ce:	0029      	movs	r1, r5
 80058d0:	003a      	movs	r2, r7
 80058d2:	f000 fa1d 	bl	8005d10 <__aeabi_llsl>
 80058d6:	4682      	mov	sl, r0
 80058d8:	468b      	mov	fp, r1
 80058da:	4650      	mov	r0, sl
 80058dc:	4659      	mov	r1, fp
 80058de:	f000 fba9 	bl	8006034 <__aeabi_ul2d>
 80058e2:	0002      	movs	r2, r0
 80058e4:	000b      	movs	r3, r1
 80058e6:	2000      	movs	r0, #0
 80058e8:	49b1      	ldr	r1, [pc, #708]	; (8005bb0 <??DataTable3_3>)
 80058ea:	f000 fd03 	bl	80062f4 <__aeabi_ddiv>
 80058ee:	ec41 0b19 	vmov	d9, r0, r1
 80058f2:	f1d6 0800 	rsbs	r8, r6, #0

080058f6 <??ZbZclFloatLdexp_7>:
 80058f6:	45b8      	cmp	r8, r7
 80058f8:	db0a      	blt.n	8005910 <??ZbZclFloatLdexp_8>
 80058fa:	ec53 2b18 	vmov	r2, r3, d8
 80058fe:	ec51 0b19 	vmov	r0, r1, d9
 8005902:	f000 fbcd 	bl	80060a0 <__aeabi_dmul>
 8005906:	ec41 0b18 	vmov	d8, r0, r1
 800590a:	ebb8 0807 	subs.w	r8, r8, r7
 800590e:	e7f2      	b.n	80058f6 <??ZbZclFloatLdexp_7>

08005910 <??ZbZclFloatLdexp_8>:
 8005910:	0020      	movs	r0, r4
 8005912:	0029      	movs	r1, r5
 8005914:	4642      	mov	r2, r8
 8005916:	f000 f9fb 	bl	8005d10 <__aeabi_llsl>
 800591a:	e9cd 0100 	strd	r0, r1, [sp]
 800591e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005922:	f000 fb87 	bl	8006034 <__aeabi_ul2d>
 8005926:	0002      	movs	r2, r0
 8005928:	000b      	movs	r3, r1
 800592a:	ec51 0b18 	vmov	r0, r1, d8
 800592e:	f000 fce1 	bl	80062f4 <__aeabi_ddiv>
 8005932:	ec41 0b18 	vmov	d8, r0, r1

08005936 <??ZbZclFloatLdexp_6>:
 8005936:	eeb0 0a48 	vmov.f32	s0, s16
 800593a:	eef0 0a68 	vmov.f32	s1, s17

0800593e <??ZbZclFloatLdexp_2>:
 800593e:	b004      	add	sp, #16
 8005940:	ecbd 8b04 	vpop	{d8-d9}
 8005944:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005948 <ZbZclFloatFrexp>:
 8005948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	ed2d 8b06 	vpush	{d8-d10}
 8005950:	b086      	sub	sp, #24
 8005952:	eeb0 8a40 	vmov.f32	s16, s0
 8005956:	eef0 8a60 	vmov.f32	s17, s1
 800595a:	4682      	mov	sl, r0
 800595c:	000e      	movs	r6, r1
 800595e:	4693      	mov	fp, r2
 8005960:	2730      	movs	r7, #48	; 0x30
 8005962:	f05f 0800 	movs.w	r8, #0
 8005966:	f05f 0901 	movs.w	r9, #1
 800596a:	eeb0 9a48 	vmov.f32	s18, s16
 800596e:	eef0 9a68 	vmov.f32	s19, s17
 8005972:	ec51 0b18 	vmov	r0, r1, d8
 8005976:	2200      	movs	r2, #0
 8005978:	2300      	movs	r3, #0
 800597a:	f000 fdf1 	bl	8006560 <__aeabi_cdcmpeq>
 800597e:	d208      	bcs.n	8005992 <??ZbZclFloatFrexp_0>
 8005980:	f05f 30ff 	movs.w	r0, #4294967295	; 0xffffffff
 8005984:	4681      	mov	r9, r0
 8005986:	ec51 0b19 	vmov	r0, r1, d9
 800598a:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 800598e:	ec41 0b19 	vmov	d9, r0, r1

08005992 <??ZbZclFloatFrexp_0>:
 8005992:	ec53 2b19 	vmov	r2, r3, d9
 8005996:	ec51 0b19 	vmov	r0, r1, d9
 800599a:	f000 fde1 	bl	8006560 <__aeabi_cdcmpeq>
 800599e:	d00b      	beq.n	80059b8 <??ZbZclFloatFrexp_1>
 80059a0:	f8ca 6000 	str.w	r6, [sl]
 80059a4:	4648      	mov	r0, r9
 80059a6:	f000 fb11 	bl	8005fcc <__aeabi_i2d>
 80059aa:	2200      	movs	r2, #0
 80059ac:	4b81      	ldr	r3, [pc, #516]	; (8005bb4 <??DataTable3_4>)
 80059ae:	f000 fb77 	bl	80060a0 <__aeabi_dmul>
 80059b2:	ec41 0b10 	vmov	d0, r0, r1
 80059b6:	e0ef      	b.n	8005b98 <??ZbZclFloatFrexp_2>

080059b8 <??ZbZclFloatFrexp_1>:
 80059b8:	2000      	movs	r0, #0
 80059ba:	497d      	ldr	r1, [pc, #500]	; (8005bb0 <??DataTable3_3>)
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	f000 fc98 	bl	80062f4 <__aeabi_ddiv>
 80059c4:	ec53 2b19 	vmov	r2, r3, d9
 80059c8:	f000 fdca 	bl	8006560 <__aeabi_cdcmpeq>
 80059cc:	d00b      	beq.n	80059e6 <??ZbZclFloatFrexp_3>
 80059ce:	2000      	movs	r0, #0
 80059d0:	4977      	ldr	r1, [pc, #476]	; (8005bb0 <??DataTable3_3>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 80059d8:	f000 fc8c 	bl	80062f4 <__aeabi_ddiv>
 80059dc:	ec53 2b19 	vmov	r2, r3, d9
 80059e0:	f000 fdbe 	bl	8006560 <__aeabi_cdcmpeq>
 80059e4:	d107      	bne.n	80059f6 <??ZbZclFloatFrexp_4>

080059e6 <??ZbZclFloatFrexp_3>:
 80059e6:	f8ca 6000 	str.w	r6, [sl]
 80059ea:	4648      	mov	r0, r9
 80059ec:	f000 faee 	bl	8005fcc <__aeabi_i2d>
 80059f0:	ec41 0b10 	vmov	d0, r0, r1
 80059f4:	e0d0      	b.n	8005b98 <??ZbZclFloatFrexp_2>

080059f6 <??ZbZclFloatFrexp_4>:
 80059f6:	ec53 2b19 	vmov	r2, r3, d9
 80059fa:	ec51 0b19 	vmov	r0, r1, d9
 80059fe:	f000 f999 	bl	8005d34 <__adddf3>
 8005a02:	ec53 2b19 	vmov	r2, r3, d9
 8005a06:	f000 fdab 	bl	8006560 <__aeabi_cdcmpeq>
 8005a0a:	d10b      	bne.n	8005a24 <??ZbZclFloatFrexp_5>
 8005a0c:	f8ca b000 	str.w	fp, [sl]
 8005a10:	4648      	mov	r0, r9
 8005a12:	f000 fadb 	bl	8005fcc <__aeabi_i2d>
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f000 fb41 	bl	80060a0 <__aeabi_dmul>
 8005a1e:	ec41 0b10 	vmov	d0, r0, r1
 8005a22:	e0b9      	b.n	8005b98 <??ZbZclFloatFrexp_2>

08005a24 <??ZbZclFloatFrexp_5>:
 8005a24:	ec51 0b19 	vmov	r0, r1, d9
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 8005a2e:	f000 fd8f 	bl	8006550 <__aeabi_cdrcmple>
 8005a32:	d854      	bhi.n	8005ade <??ZbZclFloatFrexp_6>
 8005a34:	2001      	movs	r0, #1
 8005a36:	2100      	movs	r1, #0
 8005a38:	003a      	movs	r2, r7
 8005a3a:	f000 f969 	bl	8005d10 <__aeabi_llsl>
 8005a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a46:	f000 faf5 	bl	8006034 <__aeabi_ul2d>
 8005a4a:	0002      	movs	r2, r0
 8005a4c:	000b      	movs	r3, r1
 8005a4e:	2000      	movs	r0, #0
 8005a50:	4957      	ldr	r1, [pc, #348]	; (8005bb0 <??DataTable3_3>)
 8005a52:	f000 fc4f 	bl	80062f4 <__aeabi_ddiv>
 8005a56:	ec41 0b1a 	vmov	d10, r0, r1
 8005a5a:	2002      	movs	r0, #2
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	003a      	movs	r2, r7
 8005a60:	f000 f956 	bl	8005d10 <__aeabi_llsl>
 8005a64:	e9cd 0100 	strd	r0, r1, [sp]

08005a68 <??ZbZclFloatFrexp_7>:
 8005a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a6c:	f000 fae2 	bl	8006034 <__aeabi_ul2d>
 8005a70:	0002      	movs	r2, r0
 8005a72:	000b      	movs	r3, r1
 8005a74:	ec51 0b19 	vmov	r0, r1, d9
 8005a78:	f000 fd6a 	bl	8006550 <__aeabi_cdrcmple>
 8005a7c:	d813      	bhi.n	8005aa6 <??ZbZclFloatFrexp_8>
 8005a7e:	ec53 2b19 	vmov	r2, r3, d9
 8005a82:	ec51 0b1a 	vmov	r0, r1, d10
 8005a86:	f000 fb0b 	bl	80060a0 <__aeabi_dmul>
 8005a8a:	ec41 0b19 	vmov	d9, r0, r1
 8005a8e:	eb17 0808 	adds.w	r8, r7, r8
 8005a92:	45b0      	cmp	r8, r6
 8005a94:	dbe8      	blt.n	8005a68 <??ZbZclFloatFrexp_7>
 8005a96:	f8ca 6000 	str.w	r6, [sl]
 8005a9a:	4648      	mov	r0, r9
 8005a9c:	f000 fa96 	bl	8005fcc <__aeabi_i2d>
 8005aa0:	ec41 0b10 	vmov	d0, r0, r1
 8005aa4:	e078      	b.n	8005b98 <??ZbZclFloatFrexp_2>

08005aa6 <??ZbZclFloatFrexp_8>:
 8005aa6:	ec51 0b19 	vmov	r0, r1, d9
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 8005ab0:	f000 fd4e 	bl	8006550 <__aeabi_cdrcmple>
 8005ab4:	d865      	bhi.n	8005b82 <??ZbZclFloatFrexp_9>
 8005ab6:	ec53 2b19 	vmov	r2, r3, d9
 8005aba:	2000      	movs	r0, #0
 8005abc:	493e      	ldr	r1, [pc, #248]	; (8005bb8 <??DataTable3_5>)
 8005abe:	f000 faef 	bl	80060a0 <__aeabi_dmul>
 8005ac2:	ec41 0b19 	vmov	d9, r0, r1
 8005ac6:	f118 0801 	adds.w	r8, r8, #1
 8005aca:	45b0      	cmp	r8, r6
 8005acc:	dbeb      	blt.n	8005aa6 <??ZbZclFloatFrexp_8>
 8005ace:	f8ca 6000 	str.w	r6, [sl]
 8005ad2:	4648      	mov	r0, r9
 8005ad4:	f000 fa7a 	bl	8005fcc <__aeabi_i2d>
 8005ad8:	ec41 0b10 	vmov	d0, r0, r1
 8005adc:	e05c      	b.n	8005b98 <??ZbZclFloatFrexp_2>

08005ade <??ZbZclFloatFrexp_6>:
 8005ade:	ec51 0b19 	vmov	r0, r1, d9
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <??DataTable3_3>)
 8005ae6:	f000 fd3b 	bl	8006560 <__aeabi_cdcmpeq>
 8005aea:	d24a      	bcs.n	8005b82 <??ZbZclFloatFrexp_9>
 8005aec:	2401      	movs	r4, #1
 8005aee:	2500      	movs	r5, #0
 8005af0:	0020      	movs	r0, r4
 8005af2:	0029      	movs	r1, r5
 8005af4:	003a      	movs	r2, r7
 8005af6:	f000 f90b 	bl	8005d10 <__aeabi_llsl>
 8005afa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005afe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b02:	f000 fa97 	bl	8006034 <__aeabi_ul2d>
 8005b06:	ec41 0b1a 	vmov	d10, r0, r1
 8005b0a:	0020      	movs	r0, r4
 8005b0c:	0029      	movs	r1, r5
 8005b0e:	003a      	movs	r2, r7
 8005b10:	f000 f8fe 	bl	8005d10 <__aeabi_llsl>
 8005b14:	e9cd 0100 	strd	r0, r1, [sp]

08005b18 <??ZbZclFloatFrexp_10>:
 8005b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b1c:	f000 fa8a 	bl	8006034 <__aeabi_ul2d>
 8005b20:	0002      	movs	r2, r0
 8005b22:	000b      	movs	r3, r1
 8005b24:	2000      	movs	r0, #0
 8005b26:	4922      	ldr	r1, [pc, #136]	; (8005bb0 <??DataTable3_3>)
 8005b28:	f000 fbe4 	bl	80062f4 <__aeabi_ddiv>
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	000b      	movs	r3, r1
 8005b30:	ec51 0b18 	vmov	r0, r1, d8
 8005b34:	f000 fd14 	bl	8006560 <__aeabi_cdcmpeq>
 8005b38:	d20e      	bcs.n	8005b58 <??ZbZclFloatFrexp_11>
 8005b3a:	ebb8 0007 	subs.w	r0, r8, r7
 8005b3e:	4583      	cmp	fp, r0
 8005b40:	da0a      	bge.n	8005b58 <??ZbZclFloatFrexp_11>

08005b42 <??ZbZclFloatFrexp_12>:
 8005b42:	ec53 2b19 	vmov	r2, r3, d9
 8005b46:	ec51 0b1a 	vmov	r0, r1, d10
 8005b4a:	f000 faa9 	bl	80060a0 <__aeabi_dmul>
 8005b4e:	ec41 0b19 	vmov	d9, r0, r1
 8005b52:	ebb8 0807 	subs.w	r8, r8, r7
 8005b56:	e7df      	b.n	8005b18 <??ZbZclFloatFrexp_10>

08005b58 <??ZbZclFloatFrexp_11>:
 8005b58:	ec51 0b19 	vmov	r0, r1, d9
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <??DataTable3_3>)
 8005b60:	f000 fcfe 	bl	8006560 <__aeabi_cdcmpeq>
 8005b64:	d20d      	bcs.n	8005b82 <??ZbZclFloatFrexp_9>
 8005b66:	f1b8 0801 	subs.w	r8, r8, #1
 8005b6a:	45d8      	cmp	r8, fp
 8005b6c:	d009      	beq.n	8005b82 <??ZbZclFloatFrexp_9>

08005b6e <??ZbZclFloatFrexp_13>:
 8005b6e:	ec53 2b19 	vmov	r2, r3, d9
 8005b72:	2000      	movs	r0, #0
 8005b74:	f05f 4180 	movs.w	r1, #1073741824	; 0x40000000
 8005b78:	f000 fa92 	bl	80060a0 <__aeabi_dmul>
 8005b7c:	ec41 0b19 	vmov	d9, r0, r1
 8005b80:	e7ea      	b.n	8005b58 <??ZbZclFloatFrexp_11>

08005b82 <??ZbZclFloatFrexp_9>:
 8005b82:	f8ca 8000 	str.w	r8, [sl]
 8005b86:	4648      	mov	r0, r9
 8005b88:	f000 fa20 	bl	8005fcc <__aeabi_i2d>
 8005b8c:	ec53 2b19 	vmov	r2, r3, d9
 8005b90:	f000 fa86 	bl	80060a0 <__aeabi_dmul>
 8005b94:	ec41 0b10 	vmov	d0, r0, r1

08005b98 <??ZbZclFloatFrexp_2>:
 8005b98:	b006      	add	sp, #24
 8005b9a:	ecbd 8b06 	vpop	{d8-d10}
 8005b9e:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005ba4 <??DataTable3>:
 8005ba4:	fc01 ffff                                   ....

08005ba8 <??DataTable3_1>:
 8005ba8:	0000 7ff0                                   ....

08005bac <??DataTable3_2>:
 8005bac:	ffff 000f                                   ....

08005bb0 <??DataTable3_3>:
 8005bb0:	0000 3ff0                                   ...?

08005bb4 <??DataTable3_4>:
 8005bb4:	0000 3ff8                                   ...?

08005bb8 <??DataTable3_5>:
 8005bb8:	0000 3fe0                                   ...?

08005bbc <ZbZclAttrIsFloat>:
 8005bbc:	0001      	movs	r1, r0
 8005bbe:	0008      	movs	r0, r1
 8005bc0:	b2c0      	uxtb	r0, r0
 8005bc2:	2838      	cmp	r0, #56	; 0x38
 8005bc4:	db05      	blt.n	8005bd2 <??ZbZclAttrIsFloat_0>
 8005bc6:	0008      	movs	r0, r1
 8005bc8:	b2c0      	uxtb	r0, r0
 8005bca:	283b      	cmp	r0, #59	; 0x3b
 8005bcc:	da01      	bge.n	8005bd2 <??ZbZclAttrIsFloat_0>
 8005bce:	2001      	movs	r0, #1
 8005bd0:	e000      	b.n	8005bd4 <??ZbZclAttrIsFloat_1>

08005bd2 <??ZbZclAttrIsFloat_0>:
 8005bd2:	2000      	movs	r0, #0

08005bd4 <??ZbZclAttrIsFloat_1>:
 8005bd4:	4770      	bx	lr

08005bd6 <__aeabi_memset>:
 8005bd6:	b470      	push	{r4, r5, r6}
 8005bd8:	0784      	lsls	r4, r0, #30
 8005bda:	d046      	beq.n	8005c6a <__aeabi_memset+0x94>
 8005bdc:	1e4c      	subs	r4, r1, #1
 8005bde:	2900      	cmp	r1, #0
 8005be0:	d041      	beq.n	8005c66 <__aeabi_memset+0x90>
 8005be2:	b2d5      	uxtb	r5, r2
 8005be4:	4603      	mov	r3, r0
 8005be6:	e002      	b.n	8005bee <__aeabi_memset+0x18>
 8005be8:	1e61      	subs	r1, r4, #1
 8005bea:	b3e4      	cbz	r4, 8005c66 <__aeabi_memset+0x90>
 8005bec:	460c      	mov	r4, r1
 8005bee:	f803 5b01 	strb.w	r5, [r3], #1
 8005bf2:	0799      	lsls	r1, r3, #30
 8005bf4:	d1f8      	bne.n	8005be8 <__aeabi_memset+0x12>
 8005bf6:	2c03      	cmp	r4, #3
 8005bf8:	d92e      	bls.n	8005c58 <__aeabi_memset+0x82>
 8005bfa:	b2d5      	uxtb	r5, r2
 8005bfc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005c00:	2c0f      	cmp	r4, #15
 8005c02:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005c06:	d919      	bls.n	8005c3c <__aeabi_memset+0x66>
 8005c08:	4626      	mov	r6, r4
 8005c0a:	f103 0110 	add.w	r1, r3, #16
 8005c0e:	3e10      	subs	r6, #16
 8005c10:	2e0f      	cmp	r6, #15
 8005c12:	f841 5c10 	str.w	r5, [r1, #-16]
 8005c16:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005c1a:	f841 5c08 	str.w	r5, [r1, #-8]
 8005c1e:	f841 5c04 	str.w	r5, [r1, #-4]
 8005c22:	f101 0110 	add.w	r1, r1, #16
 8005c26:	d8f2      	bhi.n	8005c0e <__aeabi_memset+0x38>
 8005c28:	f1a4 0110 	sub.w	r1, r4, #16
 8005c2c:	f021 010f 	bic.w	r1, r1, #15
 8005c30:	f004 040f 	and.w	r4, r4, #15
 8005c34:	3110      	adds	r1, #16
 8005c36:	2c03      	cmp	r4, #3
 8005c38:	440b      	add	r3, r1
 8005c3a:	d90d      	bls.n	8005c58 <__aeabi_memset+0x82>
 8005c3c:	461e      	mov	r6, r3
 8005c3e:	4621      	mov	r1, r4
 8005c40:	3904      	subs	r1, #4
 8005c42:	2903      	cmp	r1, #3
 8005c44:	f846 5b04 	str.w	r5, [r6], #4
 8005c48:	d8fa      	bhi.n	8005c40 <__aeabi_memset+0x6a>
 8005c4a:	1f21      	subs	r1, r4, #4
 8005c4c:	f021 0103 	bic.w	r1, r1, #3
 8005c50:	3104      	adds	r1, #4
 8005c52:	440b      	add	r3, r1
 8005c54:	f004 0403 	and.w	r4, r4, #3
 8005c58:	b12c      	cbz	r4, 8005c66 <__aeabi_memset+0x90>
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	441c      	add	r4, r3
 8005c5e:	f803 2b01 	strb.w	r2, [r3], #1
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	d1fb      	bne.n	8005c5e <__aeabi_memset+0x88>
 8005c66:	bc70      	pop	{r4, r5, r6}
 8005c68:	4770      	bx	lr
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	e7c2      	b.n	8005bf6 <__aeabi_memset+0x20>

08005c70 <memchr>:
 8005c70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005c74:	2a10      	cmp	r2, #16
 8005c76:	db2b      	blt.n	8005cd0 <memchr+0x60>
 8005c78:	f010 0f07 	tst.w	r0, #7
 8005c7c:	d008      	beq.n	8005c90 <memchr+0x20>
 8005c7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005c82:	3a01      	subs	r2, #1
 8005c84:	428b      	cmp	r3, r1
 8005c86:	d02d      	beq.n	8005ce4 <memchr+0x74>
 8005c88:	f010 0f07 	tst.w	r0, #7
 8005c8c:	b342      	cbz	r2, 8005ce0 <memchr+0x70>
 8005c8e:	d1f6      	bne.n	8005c7e <memchr+0xe>
 8005c90:	b4f0      	push	{r4, r5, r6, r7}
 8005c92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005c96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005c9a:	f022 0407 	bic.w	r4, r2, #7
 8005c9e:	f07f 0700 	mvns.w	r7, #0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005ca8:	3c08      	subs	r4, #8
 8005caa:	ea85 0501 	eor.w	r5, r5, r1
 8005cae:	ea86 0601 	eor.w	r6, r6, r1
 8005cb2:	fa85 f547 	uadd8	r5, r5, r7
 8005cb6:	faa3 f587 	sel	r5, r3, r7
 8005cba:	fa86 f647 	uadd8	r6, r6, r7
 8005cbe:	faa5 f687 	sel	r6, r5, r7
 8005cc2:	b98e      	cbnz	r6, 8005ce8 <memchr+0x78>
 8005cc4:	d1ee      	bne.n	8005ca4 <memchr+0x34>
 8005cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8005cc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005ccc:	f002 0207 	and.w	r2, r2, #7
 8005cd0:	b132      	cbz	r2, 8005ce0 <memchr+0x70>
 8005cd2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005cd6:	3a01      	subs	r2, #1
 8005cd8:	ea83 0301 	eor.w	r3, r3, r1
 8005cdc:	b113      	cbz	r3, 8005ce4 <memchr+0x74>
 8005cde:	d1f8      	bne.n	8005cd2 <memchr+0x62>
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	4770      	bx	lr
 8005ce4:	3801      	subs	r0, #1
 8005ce6:	4770      	bx	lr
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	bf06      	itte	eq
 8005cec:	4635      	moveq	r5, r6
 8005cee:	3803      	subeq	r0, #3
 8005cf0:	3807      	subne	r0, #7
 8005cf2:	f015 0f01 	tst.w	r5, #1
 8005cf6:	d107      	bne.n	8005d08 <memchr+0x98>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005cfe:	bf02      	ittt	eq
 8005d00:	3001      	addeq	r0, #1
 8005d02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005d06:	3001      	addeq	r0, #1
 8005d08:	bcf0      	pop	{r4, r5, r6, r7}
 8005d0a:	3801      	subs	r0, #1
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop

08005d10 <__aeabi_llsl>:
 8005d10:	4091      	lsls	r1, r2
 8005d12:	0003      	movs	r3, r0
 8005d14:	4090      	lsls	r0, r2
 8005d16:	469c      	mov	ip, r3
 8005d18:	3a20      	subs	r2, #32
 8005d1a:	4093      	lsls	r3, r2
 8005d1c:	4319      	orrs	r1, r3
 8005d1e:	4252      	negs	r2, r2
 8005d20:	4663      	mov	r3, ip
 8005d22:	40d3      	lsrs	r3, r2
 8005d24:	4319      	orrs	r1, r3
 8005d26:	4770      	bx	lr

08005d28 <__aeabi_drsub>:
 8005d28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005d2c:	e002      	b.n	8005d34 <__adddf3>
 8005d2e:	bf00      	nop

08005d30 <__aeabi_dsub>:
 8005d30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005d34 <__adddf3>:
 8005d34:	b530      	push	{r4, r5, lr}
 8005d36:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005d3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005d3e:	ea94 0f05 	teq	r4, r5
 8005d42:	bf08      	it	eq
 8005d44:	ea90 0f02 	teqeq	r0, r2
 8005d48:	bf1f      	itttt	ne
 8005d4a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005d4e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005d52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005d56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005d5a:	f000 80e2 	beq.w	8005f22 <__adddf3+0x1ee>
 8005d5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005d62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005d66:	bfb8      	it	lt
 8005d68:	426d      	neglt	r5, r5
 8005d6a:	dd0c      	ble.n	8005d86 <__adddf3+0x52>
 8005d6c:	442c      	add	r4, r5
 8005d6e:	ea80 0202 	eor.w	r2, r0, r2
 8005d72:	ea81 0303 	eor.w	r3, r1, r3
 8005d76:	ea82 0000 	eor.w	r0, r2, r0
 8005d7a:	ea83 0101 	eor.w	r1, r3, r1
 8005d7e:	ea80 0202 	eor.w	r2, r0, r2
 8005d82:	ea81 0303 	eor.w	r3, r1, r3
 8005d86:	2d36      	cmp	r5, #54	; 0x36
 8005d88:	bf88      	it	hi
 8005d8a:	bd30      	pophi	{r4, r5, pc}
 8005d8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005d90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005d94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005d98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005d9c:	d002      	beq.n	8005da4 <__adddf3+0x70>
 8005d9e:	4240      	negs	r0, r0
 8005da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005da4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005da8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005dac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005db0:	d002      	beq.n	8005db8 <__adddf3+0x84>
 8005db2:	4252      	negs	r2, r2
 8005db4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005db8:	ea94 0f05 	teq	r4, r5
 8005dbc:	f000 80a7 	beq.w	8005f0e <__adddf3+0x1da>
 8005dc0:	f1a4 0401 	sub.w	r4, r4, #1
 8005dc4:	f1d5 0e20 	rsbs	lr, r5, #32
 8005dc8:	db0d      	blt.n	8005de6 <__adddf3+0xb2>
 8005dca:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005dce:	fa22 f205 	lsr.w	r2, r2, r5
 8005dd2:	1880      	adds	r0, r0, r2
 8005dd4:	f141 0100 	adc.w	r1, r1, #0
 8005dd8:	fa03 f20e 	lsl.w	r2, r3, lr
 8005ddc:	1880      	adds	r0, r0, r2
 8005dde:	fa43 f305 	asr.w	r3, r3, r5
 8005de2:	4159      	adcs	r1, r3
 8005de4:	e00e      	b.n	8005e04 <__adddf3+0xd0>
 8005de6:	f1a5 0520 	sub.w	r5, r5, #32
 8005dea:	f10e 0e20 	add.w	lr, lr, #32
 8005dee:	2a01      	cmp	r2, #1
 8005df0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005df4:	bf28      	it	cs
 8005df6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005dfa:	fa43 f305 	asr.w	r3, r3, r5
 8005dfe:	18c0      	adds	r0, r0, r3
 8005e00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005e08:	d507      	bpl.n	8005e1a <__adddf3+0xe6>
 8005e0a:	f04f 0e00 	mov.w	lr, #0
 8005e0e:	f1dc 0c00 	rsbs	ip, ip, #0
 8005e12:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005e16:	eb6e 0101 	sbc.w	r1, lr, r1
 8005e1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005e1e:	d31b      	bcc.n	8005e58 <__adddf3+0x124>
 8005e20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005e24:	d30c      	bcc.n	8005e40 <__adddf3+0x10c>
 8005e26:	0849      	lsrs	r1, r1, #1
 8005e28:	ea5f 0030 	movs.w	r0, r0, rrx
 8005e2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005e30:	f104 0401 	add.w	r4, r4, #1
 8005e34:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005e38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005e3c:	f080 809a 	bcs.w	8005f74 <__adddf3+0x240>
 8005e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005e44:	bf08      	it	eq
 8005e46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005e4a:	f150 0000 	adcs.w	r0, r0, #0
 8005e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005e52:	ea41 0105 	orr.w	r1, r1, r5
 8005e56:	bd30      	pop	{r4, r5, pc}
 8005e58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005e5c:	4140      	adcs	r0, r0
 8005e5e:	eb41 0101 	adc.w	r1, r1, r1
 8005e62:	3c01      	subs	r4, #1
 8005e64:	bf28      	it	cs
 8005e66:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005e6a:	d2e9      	bcs.n	8005e40 <__adddf3+0x10c>
 8005e6c:	f091 0f00 	teq	r1, #0
 8005e70:	bf04      	itt	eq
 8005e72:	4601      	moveq	r1, r0
 8005e74:	2000      	moveq	r0, #0
 8005e76:	fab1 f381 	clz	r3, r1
 8005e7a:	bf08      	it	eq
 8005e7c:	3320      	addeq	r3, #32
 8005e7e:	f1a3 030b 	sub.w	r3, r3, #11
 8005e82:	f1b3 0220 	subs.w	r2, r3, #32
 8005e86:	da0c      	bge.n	8005ea2 <__adddf3+0x16e>
 8005e88:	320c      	adds	r2, #12
 8005e8a:	dd08      	ble.n	8005e9e <__adddf3+0x16a>
 8005e8c:	f102 0c14 	add.w	ip, r2, #20
 8005e90:	f1c2 020c 	rsb	r2, r2, #12
 8005e94:	fa01 f00c 	lsl.w	r0, r1, ip
 8005e98:	fa21 f102 	lsr.w	r1, r1, r2
 8005e9c:	e00c      	b.n	8005eb8 <__adddf3+0x184>
 8005e9e:	f102 0214 	add.w	r2, r2, #20
 8005ea2:	bfd8      	it	le
 8005ea4:	f1c2 0c20 	rsble	ip, r2, #32
 8005ea8:	fa01 f102 	lsl.w	r1, r1, r2
 8005eac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005eb0:	bfdc      	itt	le
 8005eb2:	ea41 010c 	orrle.w	r1, r1, ip
 8005eb6:	4090      	lslle	r0, r2
 8005eb8:	1ae4      	subs	r4, r4, r3
 8005eba:	bfa2      	ittt	ge
 8005ebc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005ec0:	4329      	orrge	r1, r5
 8005ec2:	bd30      	popge	{r4, r5, pc}
 8005ec4:	ea6f 0404 	mvn.w	r4, r4
 8005ec8:	3c1f      	subs	r4, #31
 8005eca:	da1c      	bge.n	8005f06 <__adddf3+0x1d2>
 8005ecc:	340c      	adds	r4, #12
 8005ece:	dc0e      	bgt.n	8005eee <__adddf3+0x1ba>
 8005ed0:	f104 0414 	add.w	r4, r4, #20
 8005ed4:	f1c4 0220 	rsb	r2, r4, #32
 8005ed8:	fa20 f004 	lsr.w	r0, r0, r4
 8005edc:	fa01 f302 	lsl.w	r3, r1, r2
 8005ee0:	ea40 0003 	orr.w	r0, r0, r3
 8005ee4:	fa21 f304 	lsr.w	r3, r1, r4
 8005ee8:	ea45 0103 	orr.w	r1, r5, r3
 8005eec:	bd30      	pop	{r4, r5, pc}
 8005eee:	f1c4 040c 	rsb	r4, r4, #12
 8005ef2:	f1c4 0220 	rsb	r2, r4, #32
 8005ef6:	fa20 f002 	lsr.w	r0, r0, r2
 8005efa:	fa01 f304 	lsl.w	r3, r1, r4
 8005efe:	ea40 0003 	orr.w	r0, r0, r3
 8005f02:	4629      	mov	r1, r5
 8005f04:	bd30      	pop	{r4, r5, pc}
 8005f06:	fa21 f004 	lsr.w	r0, r1, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	bd30      	pop	{r4, r5, pc}
 8005f0e:	f094 0f00 	teq	r4, #0
 8005f12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005f16:	bf06      	itte	eq
 8005f18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005f1c:	3401      	addeq	r4, #1
 8005f1e:	3d01      	subne	r5, #1
 8005f20:	e74e      	b.n	8005dc0 <__adddf3+0x8c>
 8005f22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005f26:	bf18      	it	ne
 8005f28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005f2c:	d029      	beq.n	8005f82 <__adddf3+0x24e>
 8005f2e:	ea94 0f05 	teq	r4, r5
 8005f32:	bf08      	it	eq
 8005f34:	ea90 0f02 	teqeq	r0, r2
 8005f38:	d005      	beq.n	8005f46 <__adddf3+0x212>
 8005f3a:	ea54 0c00 	orrs.w	ip, r4, r0
 8005f3e:	bf04      	itt	eq
 8005f40:	4619      	moveq	r1, r3
 8005f42:	4610      	moveq	r0, r2
 8005f44:	bd30      	pop	{r4, r5, pc}
 8005f46:	ea91 0f03 	teq	r1, r3
 8005f4a:	bf1e      	ittt	ne
 8005f4c:	2100      	movne	r1, #0
 8005f4e:	2000      	movne	r0, #0
 8005f50:	bd30      	popne	{r4, r5, pc}
 8005f52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005f56:	d105      	bne.n	8005f64 <__adddf3+0x230>
 8005f58:	0040      	lsls	r0, r0, #1
 8005f5a:	4149      	adcs	r1, r1
 8005f5c:	bf28      	it	cs
 8005f5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005f62:	bd30      	pop	{r4, r5, pc}
 8005f64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005f68:	bf3c      	itt	cc
 8005f6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005f6e:	bd30      	popcc	{r4, r5, pc}
 8005f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005f74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005f78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f7c:	f04f 0000 	mov.w	r0, #0
 8005f80:	bd30      	pop	{r4, r5, pc}
 8005f82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005f86:	bf1a      	itte	ne
 8005f88:	4619      	movne	r1, r3
 8005f8a:	4610      	movne	r0, r2
 8005f8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005f90:	bf1c      	itt	ne
 8005f92:	460b      	movne	r3, r1
 8005f94:	4602      	movne	r2, r0
 8005f96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005f9a:	bf06      	itte	eq
 8005f9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005fa0:	ea91 0f03 	teqeq	r1, r3
 8005fa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005fa8:	bd30      	pop	{r4, r5, pc}
 8005faa:	bf00      	nop

08005fac <__aeabi_ui2d>:
 8005fac:	f090 0f00 	teq	r0, #0
 8005fb0:	bf04      	itt	eq
 8005fb2:	2100      	moveq	r1, #0
 8005fb4:	4770      	bxeq	lr
 8005fb6:	b530      	push	{r4, r5, lr}
 8005fb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005fbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005fc0:	f04f 0500 	mov.w	r5, #0
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	e750      	b.n	8005e6c <__adddf3+0x138>
 8005fca:	bf00      	nop

08005fcc <__aeabi_i2d>:
 8005fcc:	f090 0f00 	teq	r0, #0
 8005fd0:	bf04      	itt	eq
 8005fd2:	2100      	moveq	r1, #0
 8005fd4:	4770      	bxeq	lr
 8005fd6:	b530      	push	{r4, r5, lr}
 8005fd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005fdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005fe0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005fe4:	bf48      	it	mi
 8005fe6:	4240      	negmi	r0, r0
 8005fe8:	f04f 0100 	mov.w	r1, #0
 8005fec:	e73e      	b.n	8005e6c <__adddf3+0x138>
 8005fee:	bf00      	nop

08005ff0 <__aeabi_f2d>:
 8005ff0:	0042      	lsls	r2, r0, #1
 8005ff2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005ff6:	ea4f 0131 	mov.w	r1, r1, rrx
 8005ffa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005ffe:	bf1f      	itttt	ne
 8006000:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006004:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006008:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800600c:	4770      	bxne	lr
 800600e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006012:	bf08      	it	eq
 8006014:	4770      	bxeq	lr
 8006016:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800601a:	bf04      	itt	eq
 800601c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006020:	4770      	bxeq	lr
 8006022:	b530      	push	{r4, r5, lr}
 8006024:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006028:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800602c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006030:	e71c      	b.n	8005e6c <__adddf3+0x138>
 8006032:	bf00      	nop

08006034 <__aeabi_ul2d>:
 8006034:	ea50 0201 	orrs.w	r2, r0, r1
 8006038:	bf08      	it	eq
 800603a:	4770      	bxeq	lr
 800603c:	b530      	push	{r4, r5, lr}
 800603e:	f04f 0500 	mov.w	r5, #0
 8006042:	e00a      	b.n	800605a <__aeabi_l2d+0x16>

08006044 <__aeabi_l2d>:
 8006044:	ea50 0201 	orrs.w	r2, r0, r1
 8006048:	bf08      	it	eq
 800604a:	4770      	bxeq	lr
 800604c:	b530      	push	{r4, r5, lr}
 800604e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006052:	d502      	bpl.n	800605a <__aeabi_l2d+0x16>
 8006054:	4240      	negs	r0, r0
 8006056:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800605a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800605e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006062:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006066:	f43f aed8 	beq.w	8005e1a <__adddf3+0xe6>
 800606a:	f04f 0203 	mov.w	r2, #3
 800606e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006072:	bf18      	it	ne
 8006074:	3203      	addne	r2, #3
 8006076:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800607a:	bf18      	it	ne
 800607c:	3203      	addne	r2, #3
 800607e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006082:	f1c2 0320 	rsb	r3, r2, #32
 8006086:	fa00 fc03 	lsl.w	ip, r0, r3
 800608a:	fa20 f002 	lsr.w	r0, r0, r2
 800608e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006092:	ea40 000e 	orr.w	r0, r0, lr
 8006096:	fa21 f102 	lsr.w	r1, r1, r2
 800609a:	4414      	add	r4, r2
 800609c:	e6bd      	b.n	8005e1a <__adddf3+0xe6>
 800609e:	bf00      	nop

080060a0 <__aeabi_dmul>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80060a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80060aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80060ae:	bf1d      	ittte	ne
 80060b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80060b4:	ea94 0f0c 	teqne	r4, ip
 80060b8:	ea95 0f0c 	teqne	r5, ip
 80060bc:	f000 f8de 	bleq	800627c <__aeabi_dmul+0x1dc>
 80060c0:	442c      	add	r4, r5
 80060c2:	ea81 0603 	eor.w	r6, r1, r3
 80060c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80060ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80060ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80060d2:	bf18      	it	ne
 80060d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80060d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80060dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e0:	d038      	beq.n	8006154 <__aeabi_dmul+0xb4>
 80060e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80060e6:	f04f 0500 	mov.w	r5, #0
 80060ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80060ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80060f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80060f6:	f04f 0600 	mov.w	r6, #0
 80060fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80060fe:	f09c 0f00 	teq	ip, #0
 8006102:	bf18      	it	ne
 8006104:	f04e 0e01 	orrne.w	lr, lr, #1
 8006108:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800610c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006110:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006114:	d204      	bcs.n	8006120 <__aeabi_dmul+0x80>
 8006116:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800611a:	416d      	adcs	r5, r5
 800611c:	eb46 0606 	adc.w	r6, r6, r6
 8006120:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006124:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006128:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800612c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006130:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006134:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006138:	bf88      	it	hi
 800613a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800613e:	d81e      	bhi.n	800617e <__aeabi_dmul+0xde>
 8006140:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006144:	bf08      	it	eq
 8006146:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800614a:	f150 0000 	adcs.w	r0, r0, #0
 800614e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006158:	ea46 0101 	orr.w	r1, r6, r1
 800615c:	ea40 0002 	orr.w	r0, r0, r2
 8006160:	ea81 0103 	eor.w	r1, r1, r3
 8006164:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006168:	bfc2      	ittt	gt
 800616a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800616e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006172:	bd70      	popgt	{r4, r5, r6, pc}
 8006174:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006178:	f04f 0e00 	mov.w	lr, #0
 800617c:	3c01      	subs	r4, #1
 800617e:	f300 80ab 	bgt.w	80062d8 <__aeabi_dmul+0x238>
 8006182:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006186:	bfde      	ittt	le
 8006188:	2000      	movle	r0, #0
 800618a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800618e:	bd70      	pople	{r4, r5, r6, pc}
 8006190:	f1c4 0400 	rsb	r4, r4, #0
 8006194:	3c20      	subs	r4, #32
 8006196:	da35      	bge.n	8006204 <__aeabi_dmul+0x164>
 8006198:	340c      	adds	r4, #12
 800619a:	dc1b      	bgt.n	80061d4 <__aeabi_dmul+0x134>
 800619c:	f104 0414 	add.w	r4, r4, #20
 80061a0:	f1c4 0520 	rsb	r5, r4, #32
 80061a4:	fa00 f305 	lsl.w	r3, r0, r5
 80061a8:	fa20 f004 	lsr.w	r0, r0, r4
 80061ac:	fa01 f205 	lsl.w	r2, r1, r5
 80061b0:	ea40 0002 	orr.w	r0, r0, r2
 80061b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80061b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80061bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80061c0:	fa21 f604 	lsr.w	r6, r1, r4
 80061c4:	eb42 0106 	adc.w	r1, r2, r6
 80061c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80061cc:	bf08      	it	eq
 80061ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	f1c4 040c 	rsb	r4, r4, #12
 80061d8:	f1c4 0520 	rsb	r5, r4, #32
 80061dc:	fa00 f304 	lsl.w	r3, r0, r4
 80061e0:	fa20 f005 	lsr.w	r0, r0, r5
 80061e4:	fa01 f204 	lsl.w	r2, r1, r4
 80061e8:	ea40 0002 	orr.w	r0, r0, r2
 80061ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80061f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80061f4:	f141 0100 	adc.w	r1, r1, #0
 80061f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80061fc:	bf08      	it	eq
 80061fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f1c4 0520 	rsb	r5, r4, #32
 8006208:	fa00 f205 	lsl.w	r2, r0, r5
 800620c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006210:	fa20 f304 	lsr.w	r3, r0, r4
 8006214:	fa01 f205 	lsl.w	r2, r1, r5
 8006218:	ea43 0302 	orr.w	r3, r3, r2
 800621c:	fa21 f004 	lsr.w	r0, r1, r4
 8006220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006224:	fa21 f204 	lsr.w	r2, r1, r4
 8006228:	ea20 0002 	bic.w	r0, r0, r2
 800622c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006234:	bf08      	it	eq
 8006236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f094 0f00 	teq	r4, #0
 8006240:	d10f      	bne.n	8006262 <__aeabi_dmul+0x1c2>
 8006242:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006246:	0040      	lsls	r0, r0, #1
 8006248:	eb41 0101 	adc.w	r1, r1, r1
 800624c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006250:	bf08      	it	eq
 8006252:	3c01      	subeq	r4, #1
 8006254:	d0f7      	beq.n	8006246 <__aeabi_dmul+0x1a6>
 8006256:	ea41 0106 	orr.w	r1, r1, r6
 800625a:	f095 0f00 	teq	r5, #0
 800625e:	bf18      	it	ne
 8006260:	4770      	bxne	lr
 8006262:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006266:	0052      	lsls	r2, r2, #1
 8006268:	eb43 0303 	adc.w	r3, r3, r3
 800626c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006270:	bf08      	it	eq
 8006272:	3d01      	subeq	r5, #1
 8006274:	d0f7      	beq.n	8006266 <__aeabi_dmul+0x1c6>
 8006276:	ea43 0306 	orr.w	r3, r3, r6
 800627a:	4770      	bx	lr
 800627c:	ea94 0f0c 	teq	r4, ip
 8006280:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006284:	bf18      	it	ne
 8006286:	ea95 0f0c 	teqne	r5, ip
 800628a:	d00c      	beq.n	80062a6 <__aeabi_dmul+0x206>
 800628c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006290:	bf18      	it	ne
 8006292:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006296:	d1d1      	bne.n	800623c <__aeabi_dmul+0x19c>
 8006298:	ea81 0103 	eor.w	r1, r1, r3
 800629c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062a0:	f04f 0000 	mov.w	r0, #0
 80062a4:	bd70      	pop	{r4, r5, r6, pc}
 80062a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80062aa:	bf06      	itte	eq
 80062ac:	4610      	moveq	r0, r2
 80062ae:	4619      	moveq	r1, r3
 80062b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80062b4:	d019      	beq.n	80062ea <__aeabi_dmul+0x24a>
 80062b6:	ea94 0f0c 	teq	r4, ip
 80062ba:	d102      	bne.n	80062c2 <__aeabi_dmul+0x222>
 80062bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80062c0:	d113      	bne.n	80062ea <__aeabi_dmul+0x24a>
 80062c2:	ea95 0f0c 	teq	r5, ip
 80062c6:	d105      	bne.n	80062d4 <__aeabi_dmul+0x234>
 80062c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80062cc:	bf1c      	itt	ne
 80062ce:	4610      	movne	r0, r2
 80062d0:	4619      	movne	r1, r3
 80062d2:	d10a      	bne.n	80062ea <__aeabi_dmul+0x24a>
 80062d4:	ea81 0103 	eor.w	r1, r1, r3
 80062d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80062e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80062ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80062f2:	bd70      	pop	{r4, r5, r6, pc}

080062f4 <__aeabi_ddiv>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80062fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80062fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006302:	bf1d      	ittte	ne
 8006304:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006308:	ea94 0f0c 	teqne	r4, ip
 800630c:	ea95 0f0c 	teqne	r5, ip
 8006310:	f000 f8a7 	bleq	8006462 <__aeabi_ddiv+0x16e>
 8006314:	eba4 0405 	sub.w	r4, r4, r5
 8006318:	ea81 0e03 	eor.w	lr, r1, r3
 800631c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006324:	f000 8088 	beq.w	8006438 <__aeabi_ddiv+0x144>
 8006328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800632c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006330:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006334:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006338:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800633c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006340:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006344:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006348:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800634c:	429d      	cmp	r5, r3
 800634e:	bf08      	it	eq
 8006350:	4296      	cmpeq	r6, r2
 8006352:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006356:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800635a:	d202      	bcs.n	8006362 <__aeabi_ddiv+0x6e>
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006362:	1ab6      	subs	r6, r6, r2
 8006364:	eb65 0503 	sbc.w	r5, r5, r3
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	ea4f 0232 	mov.w	r2, r2, rrx
 800636e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006372:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006376:	ebb6 0e02 	subs.w	lr, r6, r2
 800637a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800637e:	bf22      	ittt	cs
 8006380:	1ab6      	subcs	r6, r6, r2
 8006382:	4675      	movcs	r5, lr
 8006384:	ea40 000c 	orrcs.w	r0, r0, ip
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	ea4f 0232 	mov.w	r2, r2, rrx
 800638e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006392:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006396:	bf22      	ittt	cs
 8006398:	1ab6      	subcs	r6, r6, r2
 800639a:	4675      	movcs	r5, lr
 800639c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80063a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80063aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80063ae:	bf22      	ittt	cs
 80063b0:	1ab6      	subcs	r6, r6, r2
 80063b2:	4675      	movcs	r5, lr
 80063b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80063be:	ebb6 0e02 	subs.w	lr, r6, r2
 80063c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80063c6:	bf22      	ittt	cs
 80063c8:	1ab6      	subcs	r6, r6, r2
 80063ca:	4675      	movcs	r5, lr
 80063cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80063d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80063d4:	d018      	beq.n	8006408 <__aeabi_ddiv+0x114>
 80063d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80063da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80063de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80063e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80063e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80063ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80063ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80063f2:	d1c0      	bne.n	8006376 <__aeabi_ddiv+0x82>
 80063f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80063f8:	d10b      	bne.n	8006412 <__aeabi_ddiv+0x11e>
 80063fa:	ea41 0100 	orr.w	r1, r1, r0
 80063fe:	f04f 0000 	mov.w	r0, #0
 8006402:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006406:	e7b6      	b.n	8006376 <__aeabi_ddiv+0x82>
 8006408:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800640c:	bf04      	itt	eq
 800640e:	4301      	orreq	r1, r0
 8006410:	2000      	moveq	r0, #0
 8006412:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006416:	bf88      	it	hi
 8006418:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800641c:	f63f aeaf 	bhi.w	800617e <__aeabi_dmul+0xde>
 8006420:	ebb5 0c03 	subs.w	ip, r5, r3
 8006424:	bf04      	itt	eq
 8006426:	ebb6 0c02 	subseq.w	ip, r6, r2
 800642a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800642e:	f150 0000 	adcs.w	r0, r0, #0
 8006432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006436:	bd70      	pop	{r4, r5, r6, pc}
 8006438:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800643c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006440:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006444:	bfc2      	ittt	gt
 8006446:	ebd4 050c 	rsbsgt	r5, r4, ip
 800644a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800644e:	bd70      	popgt	{r4, r5, r6, pc}
 8006450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006454:	f04f 0e00 	mov.w	lr, #0
 8006458:	3c01      	subs	r4, #1
 800645a:	e690      	b.n	800617e <__aeabi_dmul+0xde>
 800645c:	ea45 0e06 	orr.w	lr, r5, r6
 8006460:	e68d      	b.n	800617e <__aeabi_dmul+0xde>
 8006462:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006466:	ea94 0f0c 	teq	r4, ip
 800646a:	bf08      	it	eq
 800646c:	ea95 0f0c 	teqeq	r5, ip
 8006470:	f43f af3b 	beq.w	80062ea <__aeabi_dmul+0x24a>
 8006474:	ea94 0f0c 	teq	r4, ip
 8006478:	d10a      	bne.n	8006490 <__aeabi_ddiv+0x19c>
 800647a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800647e:	f47f af34 	bne.w	80062ea <__aeabi_dmul+0x24a>
 8006482:	ea95 0f0c 	teq	r5, ip
 8006486:	f47f af25 	bne.w	80062d4 <__aeabi_dmul+0x234>
 800648a:	4610      	mov	r0, r2
 800648c:	4619      	mov	r1, r3
 800648e:	e72c      	b.n	80062ea <__aeabi_dmul+0x24a>
 8006490:	ea95 0f0c 	teq	r5, ip
 8006494:	d106      	bne.n	80064a4 <__aeabi_ddiv+0x1b0>
 8006496:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800649a:	f43f aefd 	beq.w	8006298 <__aeabi_dmul+0x1f8>
 800649e:	4610      	mov	r0, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	e722      	b.n	80062ea <__aeabi_dmul+0x24a>
 80064a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80064a8:	bf18      	it	ne
 80064aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80064ae:	f47f aec5 	bne.w	800623c <__aeabi_dmul+0x19c>
 80064b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80064b6:	f47f af0d 	bne.w	80062d4 <__aeabi_dmul+0x234>
 80064ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80064be:	f47f aeeb 	bne.w	8006298 <__aeabi_dmul+0x1f8>
 80064c2:	e712      	b.n	80062ea <__aeabi_dmul+0x24a>

080064c4 <__gedf2>:
 80064c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80064c8:	e006      	b.n	80064d8 <__cmpdf2+0x4>
 80064ca:	bf00      	nop

080064cc <__ledf2>:
 80064cc:	f04f 0c01 	mov.w	ip, #1
 80064d0:	e002      	b.n	80064d8 <__cmpdf2+0x4>
 80064d2:	bf00      	nop

080064d4 <__cmpdf2>:
 80064d4:	f04f 0c01 	mov.w	ip, #1
 80064d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80064dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80064e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80064e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80064e8:	bf18      	it	ne
 80064ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80064ee:	d01b      	beq.n	8006528 <__cmpdf2+0x54>
 80064f0:	b001      	add	sp, #4
 80064f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80064f6:	bf0c      	ite	eq
 80064f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80064fc:	ea91 0f03 	teqne	r1, r3
 8006500:	bf02      	ittt	eq
 8006502:	ea90 0f02 	teqeq	r0, r2
 8006506:	2000      	moveq	r0, #0
 8006508:	4770      	bxeq	lr
 800650a:	f110 0f00 	cmn.w	r0, #0
 800650e:	ea91 0f03 	teq	r1, r3
 8006512:	bf58      	it	pl
 8006514:	4299      	cmppl	r1, r3
 8006516:	bf08      	it	eq
 8006518:	4290      	cmpeq	r0, r2
 800651a:	bf2c      	ite	cs
 800651c:	17d8      	asrcs	r0, r3, #31
 800651e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006522:	f040 0001 	orr.w	r0, r0, #1
 8006526:	4770      	bx	lr
 8006528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800652c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006530:	d102      	bne.n	8006538 <__cmpdf2+0x64>
 8006532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006536:	d107      	bne.n	8006548 <__cmpdf2+0x74>
 8006538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800653c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006540:	d1d6      	bne.n	80064f0 <__cmpdf2+0x1c>
 8006542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006546:	d0d3      	beq.n	80064f0 <__cmpdf2+0x1c>
 8006548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <__aeabi_cdrcmple>:
 8006550:	4684      	mov	ip, r0
 8006552:	4610      	mov	r0, r2
 8006554:	4662      	mov	r2, ip
 8006556:	468c      	mov	ip, r1
 8006558:	4619      	mov	r1, r3
 800655a:	4663      	mov	r3, ip
 800655c:	e000      	b.n	8006560 <__aeabi_cdcmpeq>
 800655e:	bf00      	nop

08006560 <__aeabi_cdcmpeq>:
 8006560:	b501      	push	{r0, lr}
 8006562:	f7ff ffb7 	bl	80064d4 <__cmpdf2>
 8006566:	2800      	cmp	r0, #0
 8006568:	bf48      	it	mi
 800656a:	f110 0f00 	cmnmi.w	r0, #0
 800656e:	bd01      	pop	{r0, pc}

08006570 <__aeabi_dcmpeq>:
 8006570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006574:	f7ff fff4 	bl	8006560 <__aeabi_cdcmpeq>
 8006578:	bf0c      	ite	eq
 800657a:	2001      	moveq	r0, #1
 800657c:	2000      	movne	r0, #0
 800657e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006582:	bf00      	nop

08006584 <__aeabi_dcmplt>:
 8006584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006588:	f7ff ffea 	bl	8006560 <__aeabi_cdcmpeq>
 800658c:	bf34      	ite	cc
 800658e:	2001      	movcc	r0, #1
 8006590:	2000      	movcs	r0, #0
 8006592:	f85d fb08 	ldr.w	pc, [sp], #8
 8006596:	bf00      	nop

08006598 <__aeabi_dcmple>:
 8006598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800659c:	f7ff ffe0 	bl	8006560 <__aeabi_cdcmpeq>
 80065a0:	bf94      	ite	ls
 80065a2:	2001      	movls	r0, #1
 80065a4:	2000      	movhi	r0, #0
 80065a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80065aa:	bf00      	nop

080065ac <__aeabi_dcmpge>:
 80065ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80065b0:	f7ff ffce 	bl	8006550 <__aeabi_cdrcmple>
 80065b4:	bf94      	ite	ls
 80065b6:	2001      	movls	r0, #1
 80065b8:	2000      	movhi	r0, #0
 80065ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80065be:	bf00      	nop

080065c0 <__aeabi_dcmpgt>:
 80065c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80065c4:	f7ff ffc4 	bl	8006550 <__aeabi_cdrcmple>
 80065c8:	bf34      	ite	cc
 80065ca:	2001      	movcc	r0, #1
 80065cc:	2000      	movcs	r0, #0
 80065ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80065d2:	bf00      	nop

080065d4 <__aeabi_d2iz>:
 80065d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80065d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80065dc:	d215      	bcs.n	800660a <__aeabi_d2iz+0x36>
 80065de:	d511      	bpl.n	8006604 <__aeabi_d2iz+0x30>
 80065e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80065e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80065e8:	d912      	bls.n	8006610 <__aeabi_d2iz+0x3c>
 80065ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80065ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80065f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80065fa:	fa23 f002 	lsr.w	r0, r3, r2
 80065fe:	bf18      	it	ne
 8006600:	4240      	negne	r0, r0
 8006602:	4770      	bx	lr
 8006604:	f04f 0000 	mov.w	r0, #0
 8006608:	4770      	bx	lr
 800660a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800660e:	d105      	bne.n	800661c <__aeabi_d2iz+0x48>
 8006610:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006614:	bf08      	it	eq
 8006616:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800661a:	4770      	bx	lr
 800661c:	f04f 0000 	mov.w	r0, #0
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <__aeabi_d2uiz>:
 8006624:	004a      	lsls	r2, r1, #1
 8006626:	d211      	bcs.n	800664c <__aeabi_d2uiz+0x28>
 8006628:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800662c:	d211      	bcs.n	8006652 <__aeabi_d2uiz+0x2e>
 800662e:	d50d      	bpl.n	800664c <__aeabi_d2uiz+0x28>
 8006630:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006634:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006638:	d40e      	bmi.n	8006658 <__aeabi_d2uiz+0x34>
 800663a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800663e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006642:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006646:	fa23 f002 	lsr.w	r0, r3, r2
 800664a:	4770      	bx	lr
 800664c:	f04f 0000 	mov.w	r0, #0
 8006650:	4770      	bx	lr
 8006652:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006656:	d102      	bne.n	800665e <__aeabi_d2uiz+0x3a>
 8006658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800665c:	4770      	bx	lr
 800665e:	f04f 0000 	mov.w	r0, #0
 8006662:	4770      	bx	lr

08006664 <__aeabi_uldivmod>:
 8006664:	b953      	cbnz	r3, 800667c <__aeabi_uldivmod+0x18>
 8006666:	b94a      	cbnz	r2, 800667c <__aeabi_uldivmod+0x18>
 8006668:	2900      	cmp	r1, #0
 800666a:	bf08      	it	eq
 800666c:	2800      	cmpeq	r0, #0
 800666e:	bf1c      	itt	ne
 8006670:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006674:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006678:	f000 b9a6 	b.w	80069c8 <__aeabi_idiv0>
 800667c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006680:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006684:	f000 f83c 	bl	8006700 <__udivmoddi4>
 8006688:	f8dd e004 	ldr.w	lr, [sp, #4]
 800668c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006690:	b004      	add	sp, #16
 8006692:	4770      	bx	lr

08006694 <__aeabi_d2lz>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	460d      	mov	r5, r1
 800669e:	f7ff ff71 	bl	8006584 <__aeabi_dcmplt>
 80066a2:	b928      	cbnz	r0, 80066b0 <__aeabi_d2lz+0x1c>
 80066a4:	4620      	mov	r0, r4
 80066a6:	4629      	mov	r1, r5
 80066a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ac:	f000 b80a 	b.w	80066c4 <__aeabi_d2ulz>
 80066b0:	4620      	mov	r0, r4
 80066b2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80066b6:	f000 f805 	bl	80066c4 <__aeabi_d2ulz>
 80066ba:	4240      	negs	r0, r0
 80066bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop

080066c4 <__aeabi_d2ulz>:
 80066c4:	b5d0      	push	{r4, r6, r7, lr}
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <__aeabi_d2ulz+0x34>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	f7ff fce7 	bl	80060a0 <__aeabi_dmul>
 80066d2:	f7ff ffa7 	bl	8006624 <__aeabi_d2uiz>
 80066d6:	4604      	mov	r4, r0
 80066d8:	f7ff fc68 	bl	8005fac <__aeabi_ui2d>
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <__aeabi_d2ulz+0x38>)
 80066de:	2200      	movs	r2, #0
 80066e0:	f7ff fcde 	bl	80060a0 <__aeabi_dmul>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7ff fb20 	bl	8005d30 <__aeabi_dsub>
 80066f0:	f7ff ff98 	bl	8006624 <__aeabi_d2uiz>
 80066f4:	4621      	mov	r1, r4
 80066f6:	bdd0      	pop	{r4, r6, r7, pc}
 80066f8:	3df00000 	.word	0x3df00000
 80066fc:	41f00000 	.word	0x41f00000

08006700 <__udivmoddi4>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	9e08      	ldr	r6, [sp, #32]
 8006706:	460d      	mov	r5, r1
 8006708:	4604      	mov	r4, r0
 800670a:	460f      	mov	r7, r1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d14a      	bne.n	80067a6 <__udivmoddi4+0xa6>
 8006710:	428a      	cmp	r2, r1
 8006712:	4694      	mov	ip, r2
 8006714:	d965      	bls.n	80067e2 <__udivmoddi4+0xe2>
 8006716:	fab2 f382 	clz	r3, r2
 800671a:	b143      	cbz	r3, 800672e <__udivmoddi4+0x2e>
 800671c:	fa02 fc03 	lsl.w	ip, r2, r3
 8006720:	f1c3 0220 	rsb	r2, r3, #32
 8006724:	409f      	lsls	r7, r3
 8006726:	fa20 f202 	lsr.w	r2, r0, r2
 800672a:	4317      	orrs	r7, r2
 800672c:	409c      	lsls	r4, r3
 800672e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8006732:	fa1f f58c 	uxth.w	r5, ip
 8006736:	fbb7 f1fe 	udiv	r1, r7, lr
 800673a:	0c22      	lsrs	r2, r4, #16
 800673c:	fb0e 7711 	mls	r7, lr, r1, r7
 8006740:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006744:	fb01 f005 	mul.w	r0, r1, r5
 8006748:	4290      	cmp	r0, r2
 800674a:	d90a      	bls.n	8006762 <__udivmoddi4+0x62>
 800674c:	eb1c 0202 	adds.w	r2, ip, r2
 8006750:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8006754:	f080 811c 	bcs.w	8006990 <__udivmoddi4+0x290>
 8006758:	4290      	cmp	r0, r2
 800675a:	f240 8119 	bls.w	8006990 <__udivmoddi4+0x290>
 800675e:	3902      	subs	r1, #2
 8006760:	4462      	add	r2, ip
 8006762:	1a12      	subs	r2, r2, r0
 8006764:	b2a4      	uxth	r4, r4
 8006766:	fbb2 f0fe 	udiv	r0, r2, lr
 800676a:	fb0e 2210 	mls	r2, lr, r0, r2
 800676e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006772:	fb00 f505 	mul.w	r5, r0, r5
 8006776:	42a5      	cmp	r5, r4
 8006778:	d90a      	bls.n	8006790 <__udivmoddi4+0x90>
 800677a:	eb1c 0404 	adds.w	r4, ip, r4
 800677e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006782:	f080 8107 	bcs.w	8006994 <__udivmoddi4+0x294>
 8006786:	42a5      	cmp	r5, r4
 8006788:	f240 8104 	bls.w	8006994 <__udivmoddi4+0x294>
 800678c:	4464      	add	r4, ip
 800678e:	3802      	subs	r0, #2
 8006790:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006794:	1b64      	subs	r4, r4, r5
 8006796:	2100      	movs	r1, #0
 8006798:	b11e      	cbz	r6, 80067a2 <__udivmoddi4+0xa2>
 800679a:	40dc      	lsrs	r4, r3
 800679c:	2300      	movs	r3, #0
 800679e:	e9c6 4300 	strd	r4, r3, [r6]
 80067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a6:	428b      	cmp	r3, r1
 80067a8:	d908      	bls.n	80067bc <__udivmoddi4+0xbc>
 80067aa:	2e00      	cmp	r6, #0
 80067ac:	f000 80ed 	beq.w	800698a <__udivmoddi4+0x28a>
 80067b0:	2100      	movs	r1, #0
 80067b2:	e9c6 0500 	strd	r0, r5, [r6]
 80067b6:	4608      	mov	r0, r1
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	fab3 f183 	clz	r1, r3
 80067c0:	2900      	cmp	r1, #0
 80067c2:	d149      	bne.n	8006858 <__udivmoddi4+0x158>
 80067c4:	42ab      	cmp	r3, r5
 80067c6:	d302      	bcc.n	80067ce <__udivmoddi4+0xce>
 80067c8:	4282      	cmp	r2, r0
 80067ca:	f200 80f8 	bhi.w	80069be <__udivmoddi4+0x2be>
 80067ce:	1a84      	subs	r4, r0, r2
 80067d0:	eb65 0203 	sbc.w	r2, r5, r3
 80067d4:	2001      	movs	r0, #1
 80067d6:	4617      	mov	r7, r2
 80067d8:	2e00      	cmp	r6, #0
 80067da:	d0e2      	beq.n	80067a2 <__udivmoddi4+0xa2>
 80067dc:	e9c6 4700 	strd	r4, r7, [r6]
 80067e0:	e7df      	b.n	80067a2 <__udivmoddi4+0xa2>
 80067e2:	b902      	cbnz	r2, 80067e6 <__udivmoddi4+0xe6>
 80067e4:	deff      	udf	#255	; 0xff
 80067e6:	fab2 f382 	clz	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f040 8090 	bne.w	8006910 <__udivmoddi4+0x210>
 80067f0:	1a8a      	subs	r2, r1, r2
 80067f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80067f6:	fa1f fe8c 	uxth.w	lr, ip
 80067fa:	2101      	movs	r1, #1
 80067fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8006800:	fb07 2015 	mls	r0, r7, r5, r2
 8006804:	0c22      	lsrs	r2, r4, #16
 8006806:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800680a:	fb0e f005 	mul.w	r0, lr, r5
 800680e:	4290      	cmp	r0, r2
 8006810:	d908      	bls.n	8006824 <__udivmoddi4+0x124>
 8006812:	eb1c 0202 	adds.w	r2, ip, r2
 8006816:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800681a:	d202      	bcs.n	8006822 <__udivmoddi4+0x122>
 800681c:	4290      	cmp	r0, r2
 800681e:	f200 80cb 	bhi.w	80069b8 <__udivmoddi4+0x2b8>
 8006822:	4645      	mov	r5, r8
 8006824:	1a12      	subs	r2, r2, r0
 8006826:	b2a4      	uxth	r4, r4
 8006828:	fbb2 f0f7 	udiv	r0, r2, r7
 800682c:	fb07 2210 	mls	r2, r7, r0, r2
 8006830:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006834:	fb0e fe00 	mul.w	lr, lr, r0
 8006838:	45a6      	cmp	lr, r4
 800683a:	d908      	bls.n	800684e <__udivmoddi4+0x14e>
 800683c:	eb1c 0404 	adds.w	r4, ip, r4
 8006840:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006844:	d202      	bcs.n	800684c <__udivmoddi4+0x14c>
 8006846:	45a6      	cmp	lr, r4
 8006848:	f200 80bb 	bhi.w	80069c2 <__udivmoddi4+0x2c2>
 800684c:	4610      	mov	r0, r2
 800684e:	eba4 040e 	sub.w	r4, r4, lr
 8006852:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006856:	e79f      	b.n	8006798 <__udivmoddi4+0x98>
 8006858:	f1c1 0720 	rsb	r7, r1, #32
 800685c:	408b      	lsls	r3, r1
 800685e:	fa22 fc07 	lsr.w	ip, r2, r7
 8006862:	ea4c 0c03 	orr.w	ip, ip, r3
 8006866:	fa05 f401 	lsl.w	r4, r5, r1
 800686a:	fa20 f307 	lsr.w	r3, r0, r7
 800686e:	40fd      	lsrs	r5, r7
 8006870:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006874:	4323      	orrs	r3, r4
 8006876:	fbb5 f8f9 	udiv	r8, r5, r9
 800687a:	fa1f fe8c 	uxth.w	lr, ip
 800687e:	fb09 5518 	mls	r5, r9, r8, r5
 8006882:	0c1c      	lsrs	r4, r3, #16
 8006884:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006888:	fb08 f50e 	mul.w	r5, r8, lr
 800688c:	42a5      	cmp	r5, r4
 800688e:	fa02 f201 	lsl.w	r2, r2, r1
 8006892:	fa00 f001 	lsl.w	r0, r0, r1
 8006896:	d90b      	bls.n	80068b0 <__udivmoddi4+0x1b0>
 8006898:	eb1c 0404 	adds.w	r4, ip, r4
 800689c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80068a0:	f080 8088 	bcs.w	80069b4 <__udivmoddi4+0x2b4>
 80068a4:	42a5      	cmp	r5, r4
 80068a6:	f240 8085 	bls.w	80069b4 <__udivmoddi4+0x2b4>
 80068aa:	f1a8 0802 	sub.w	r8, r8, #2
 80068ae:	4464      	add	r4, ip
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	b29d      	uxth	r5, r3
 80068b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80068b8:	fb09 4413 	mls	r4, r9, r3, r4
 80068bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80068c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80068c4:	45a6      	cmp	lr, r4
 80068c6:	d908      	bls.n	80068da <__udivmoddi4+0x1da>
 80068c8:	eb1c 0404 	adds.w	r4, ip, r4
 80068cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80068d0:	d26c      	bcs.n	80069ac <__udivmoddi4+0x2ac>
 80068d2:	45a6      	cmp	lr, r4
 80068d4:	d96a      	bls.n	80069ac <__udivmoddi4+0x2ac>
 80068d6:	3b02      	subs	r3, #2
 80068d8:	4464      	add	r4, ip
 80068da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80068de:	fba3 9502 	umull	r9, r5, r3, r2
 80068e2:	eba4 040e 	sub.w	r4, r4, lr
 80068e6:	42ac      	cmp	r4, r5
 80068e8:	46c8      	mov	r8, r9
 80068ea:	46ae      	mov	lr, r5
 80068ec:	d356      	bcc.n	800699c <__udivmoddi4+0x29c>
 80068ee:	d053      	beq.n	8006998 <__udivmoddi4+0x298>
 80068f0:	b156      	cbz	r6, 8006908 <__udivmoddi4+0x208>
 80068f2:	ebb0 0208 	subs.w	r2, r0, r8
 80068f6:	eb64 040e 	sbc.w	r4, r4, lr
 80068fa:	fa04 f707 	lsl.w	r7, r4, r7
 80068fe:	40ca      	lsrs	r2, r1
 8006900:	40cc      	lsrs	r4, r1
 8006902:	4317      	orrs	r7, r2
 8006904:	e9c6 7400 	strd	r7, r4, [r6]
 8006908:	4618      	mov	r0, r3
 800690a:	2100      	movs	r1, #0
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	f1c3 0120 	rsb	r1, r3, #32
 8006914:	fa02 fc03 	lsl.w	ip, r2, r3
 8006918:	fa20 f201 	lsr.w	r2, r0, r1
 800691c:	fa25 f101 	lsr.w	r1, r5, r1
 8006920:	409d      	lsls	r5, r3
 8006922:	432a      	orrs	r2, r5
 8006924:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006928:	fa1f fe8c 	uxth.w	lr, ip
 800692c:	fbb1 f0f7 	udiv	r0, r1, r7
 8006930:	fb07 1510 	mls	r5, r7, r0, r1
 8006934:	0c11      	lsrs	r1, r2, #16
 8006936:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800693a:	fb00 f50e 	mul.w	r5, r0, lr
 800693e:	428d      	cmp	r5, r1
 8006940:	fa04 f403 	lsl.w	r4, r4, r3
 8006944:	d908      	bls.n	8006958 <__udivmoddi4+0x258>
 8006946:	eb1c 0101 	adds.w	r1, ip, r1
 800694a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800694e:	d22f      	bcs.n	80069b0 <__udivmoddi4+0x2b0>
 8006950:	428d      	cmp	r5, r1
 8006952:	d92d      	bls.n	80069b0 <__udivmoddi4+0x2b0>
 8006954:	3802      	subs	r0, #2
 8006956:	4461      	add	r1, ip
 8006958:	1b49      	subs	r1, r1, r5
 800695a:	b292      	uxth	r2, r2
 800695c:	fbb1 f5f7 	udiv	r5, r1, r7
 8006960:	fb07 1115 	mls	r1, r7, r5, r1
 8006964:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006968:	fb05 f10e 	mul.w	r1, r5, lr
 800696c:	4291      	cmp	r1, r2
 800696e:	d908      	bls.n	8006982 <__udivmoddi4+0x282>
 8006970:	eb1c 0202 	adds.w	r2, ip, r2
 8006974:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8006978:	d216      	bcs.n	80069a8 <__udivmoddi4+0x2a8>
 800697a:	4291      	cmp	r1, r2
 800697c:	d914      	bls.n	80069a8 <__udivmoddi4+0x2a8>
 800697e:	3d02      	subs	r5, #2
 8006980:	4462      	add	r2, ip
 8006982:	1a52      	subs	r2, r2, r1
 8006984:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8006988:	e738      	b.n	80067fc <__udivmoddi4+0xfc>
 800698a:	4631      	mov	r1, r6
 800698c:	4630      	mov	r0, r6
 800698e:	e708      	b.n	80067a2 <__udivmoddi4+0xa2>
 8006990:	4639      	mov	r1, r7
 8006992:	e6e6      	b.n	8006762 <__udivmoddi4+0x62>
 8006994:	4610      	mov	r0, r2
 8006996:	e6fb      	b.n	8006790 <__udivmoddi4+0x90>
 8006998:	4548      	cmp	r0, r9
 800699a:	d2a9      	bcs.n	80068f0 <__udivmoddi4+0x1f0>
 800699c:	ebb9 0802 	subs.w	r8, r9, r2
 80069a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80069a4:	3b01      	subs	r3, #1
 80069a6:	e7a3      	b.n	80068f0 <__udivmoddi4+0x1f0>
 80069a8:	4645      	mov	r5, r8
 80069aa:	e7ea      	b.n	8006982 <__udivmoddi4+0x282>
 80069ac:	462b      	mov	r3, r5
 80069ae:	e794      	b.n	80068da <__udivmoddi4+0x1da>
 80069b0:	4640      	mov	r0, r8
 80069b2:	e7d1      	b.n	8006958 <__udivmoddi4+0x258>
 80069b4:	46d0      	mov	r8, sl
 80069b6:	e77b      	b.n	80068b0 <__udivmoddi4+0x1b0>
 80069b8:	3d02      	subs	r5, #2
 80069ba:	4462      	add	r2, ip
 80069bc:	e732      	b.n	8006824 <__udivmoddi4+0x124>
 80069be:	4608      	mov	r0, r1
 80069c0:	e70a      	b.n	80067d8 <__udivmoddi4+0xd8>
 80069c2:	4464      	add	r4, ip
 80069c4:	3802      	subs	r0, #2
 80069c6:	e742      	b.n	800684e <__udivmoddi4+0x14e>

080069c8 <__aeabi_idiv0>:
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80069d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069da:	f023 0207 	bic.w	r2, r3, #7
 80069de:	4905      	ldr	r1, [pc, #20]	; (80069f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	58000400 	.word	0x58000400

080069f8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <LL_EXTI_EnableIT_32_63+0x24>)
 8006a02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a06:	4905      	ldr	r1, [pc, #20]	; (8006a1c <LL_EXTI_EnableIT_32_63+0x24>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	58000800 	.word	0x58000800

08006a20 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	4a0a      	ldr	r2, [pc, #40]	; (8006a58 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8006a2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8006a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a3a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a46:	4313      	orrs	r3, r2
 8006a48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	cafecafe 	.word	0xcafecafe

08006a5c <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a6e:	6013      	str	r3, [r2, #0]
}
 8006a70:	bf00      	nop
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8006a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <LL_LPM_EnableSleep+0x1c>)
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	4a04      	ldr	r2, [pc, #16]	; (8006ac0 <LL_LPM_EnableSleep+0x1c>)
 8006aae:	f023 0304 	bic.w	r3, r3, #4
 8006ab2:	6113      	str	r3, [r2, #16]
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	e000ed00 	.word	0xe000ed00

08006ac4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	22ff      	movs	r2, #255	; 0xff
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	22ca      	movs	r2, #202	; 0xca
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2253      	movs	r2, #83	; 0x53
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f023 0207 	bic.w	r2, r3, #7
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006b28:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <MX_APPE_Config+0x18>)
 8006b2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b2e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8006b30:	f000 f824 	bl	8006b7c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8006b34:	f000 f829 	bl	8006b8a <Config_HSE>

  return;
 8006b38:	bf00      	nop
}
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	58004000 	.word	0x58004000

08006b40 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8006b44:	f000 f835 	bl	8006bb2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8006b48:	f000 f84e 	bl	8006be8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8006b4c:	4903      	ldr	r1, [pc, #12]	; (8006b5c <MX_APPE_Init+0x1c>)
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f000 f9aa 	bl	8006ea8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8006b54:	f000 f860 	bl	8006c18 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8006b58:	bf00      	nop
}
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	200001fc 	.word	0x200001fc

08006b60 <Init_Smps>:

void Init_Smps(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8006b64:	bf00      	nop
}
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <Init_Exti>:

void Init_Exti(void)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8006b72:	2050      	movs	r0, #80	; 0x50
 8006b74:	f7ff ff40 	bl	80069f8 <LL_EXTI_EnableIT_32_63>

  return;
 8006b78:	bf00      	nop
}
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8006b80:	bf00      	nop
}
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006b90:	2000      	movs	r0, #0
 8006b92:	f00a f893 	bl	8010cbc <OTP_Read>
 8006b96:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	799b      	ldrb	r3, [r3, #6]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ff3c 	bl	8006a20 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
}
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <System_Init>:

static void System_Init(void)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	af00      	add	r7, sp, #0
  Init_Smps();
 8006bb6:	f7ff ffd3 	bl	8006b60 <Init_Smps>

  Init_Exti();
 8006bba:	f7ff ffd8 	bl	8006b6e <Init_Exti>

  Init_Rtc();
 8006bbe:	f000 f803 	bl	8006bc8 <Init_Rtc>

  return;
 8006bc2:	bf00      	nop
}
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <Init_Rtc>:

static void Init_Rtc(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8006bcc:	4805      	ldr	r0, [pc, #20]	; (8006be4 <Init_Rtc+0x1c>)
 8006bce:	f7ff ff86 	bl	8006ade <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4803      	ldr	r0, [pc, #12]	; (8006be4 <Init_Rtc+0x1c>)
 8006bd6:	f7ff ff92 	bl	8006afe <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8006bda:	4802      	ldr	r0, [pc, #8]	; (8006be4 <Init_Rtc+0x1c>)
 8006bdc:	f7ff ff72 	bl	8006ac4 <LL_RTC_EnableWriteProtection>

  return;
 8006be0:	bf00      	nop
}
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40002800 	.word	0x40002800

08006be8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock start on HSI automatically */
  LL_RCC_HSI_EnableAutoFromStop();
 8006bec:	f7ff ff36 	bl	8006a5c <LL_RCC_HSI_EnableAutoFromStop>

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8006bf0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006bf4:	f7ff ff41 	bl	8006a7a <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8006bf8:	f00d ffca 	bl	8014b90 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8006bfc:	2004      	movs	r0, #4
 8006bfe:	f7ff fee5 	bl	80069cc <LL_C2_PWR_SetPowerMode>

  /* Disable Stop & Off Modes until Initialisation is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8006c02:	2101      	movs	r1, #1
 8006c04:	2001      	movs	r0, #1
 8006c06:	f00e f805 	bl	8014c14 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	f00d ffd1 	bl	8014bb4 <UTIL_LPM_SetStopMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8006c12:	bf00      	nop
}
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8006c1e:	f009 fd53 	bl	80106c8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8006c22:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <appe_Tl_Init+0x50>)
 8006c24:	2100      	movs	r1, #0
 8006c26:	2008      	movs	r0, #8
 8006c28:	f00e f920 	bl	8014e6c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <appe_Tl_Init+0x54>)
 8006c2e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8006c30:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <appe_Tl_Init+0x58>)
 8006c32:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8006c34:	463b      	mov	r3, r7
 8006c36:	4619      	mov	r1, r3
 8006c38:	480e      	ldr	r0, [pc, #56]	; (8006c74 <appe_Tl_Init+0x5c>)
 8006c3a:	f009 fc07 	bl	801044c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <appe_Tl_Init+0x60>)
 8006c44:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <appe_Tl_Init+0x64>)
 8006c48:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8006c4a:	f240 533c 	movw	r3, #1340	; 0x53c
 8006c4e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	4618      	mov	r0, r3
 8006c56:	f009 fe93 	bl	8010980 <TL_MM_Init>

  TL_Enable();
 8006c5a:	f009 fd2f 	bl	80106bc <TL_Enable>

  return;
 8006c5e:	bf00      	nop
}
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	08010485 	.word	0x08010485
 8006c6c:	20030620 	.word	0x20030620
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006c97 	.word	0x08006c97
 8006c78:	2003072c 	.word	0x2003072c
 8006c7c:	200300e4 	.word	0x200300e4

08006c80 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8006c8a:	bf00      	nop
}
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	330b      	adds	r3, #11
 8006ca4:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8006cb0:	d004      	beq.n	8006cbc <APPE_SysUserEvtRx+0x26>
 8006cb2:	f249 2201 	movw	r2, #37377	; 0x9201
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8006cba:	e008      	b.n	8006cce <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8006cbc:	f000 f82a 	bl	8006d14 <APPE_SysEvtReadyProcessing>
         break;
 8006cc0:	e005      	b.n	8006cce <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	789b      	ldrb	r3, [r3, #2]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f806 	bl	8006cd8 <APPE_SysEvtError>
         break;
 8006ccc:	bf00      	nop
  }
  return;
 8006cce:	bf00      	nop
}
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	2bc8      	cmp	r3, #200	; 0xc8
 8006ce6:	d105      	bne.n	8006cf4 <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8006ce8:	4a08      	ldr	r2, [pc, #32]	; (8006d0c <APPE_SysEvtError+0x34>)
 8006cea:	2101      	movs	r1, #1
 8006cec:	2000      	movs	r0, #0
 8006cee:	f000 ff47 	bl	8007b80 <logApplication>
       break;
 8006cf2:	e006      	b.n	8006d02 <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	4a06      	ldr	r2, [pc, #24]	; (8006d10 <APPE_SysEvtError+0x38>)
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	f000 ff40 	bl	8007b80 <logApplication>
       break;
 8006d00:	bf00      	nop
  }
  return;
 8006d02:	bf00      	nop
}
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	080164b8 	.word	0x080164b8
 8006d10:	080164d8 	.word	0x080164d8

08006d14 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8006d18:	f009 fea6 	bl	8010a68 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 8006d1c:	f00d f8d6 	bl	8013ecc <APP_ZIGBEE_Init>
  return;
 8006d20:	bf00      	nop
}
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d2c:	f001 f9f2 	bl	8008114 <HAL_GetTick>
 8006d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3c:	d00a      	beq.n	8006d54 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8006d3e:	f001 fa01 	bl	8008144 <HAL_GetTickFreq>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d4c:	e002      	b.n	8006d54 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8006d4e:	f7ff fea9 	bl	8006aa4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8006d52:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8006d54:	f001 f9de 	bl	8008114 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d8f4      	bhi.n	8006d4e <HAL_Delay+0x2a>
  }
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d76:	f00d ff7d 	bl	8014c74 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8006d7a:	bf00      	nop
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8006d82:	bf00      	nop
}
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d003      	beq.n	8006da4 <UTIL_SEQ_EvtIdle+0x18>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d004      	beq.n	8006dac <UTIL_SEQ_EvtIdle+0x20>
 8006da2:	e00a      	b.n	8006dba <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8006da4:	2002      	movs	r0, #2
 8006da6:	f00d ff65 	bl	8014c74 <UTIL_SEQ_Run>
    break;
 8006daa:	e00b      	b.n	8006dc4 <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8006dac:	2004      	movs	r0, #4
 8006dae:	f00e f8ab 	bl	8014f08 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8006db2:	2003      	movs	r0, #3
 8006db4:	f00d ff5e 	bl	8014c74 <UTIL_SEQ_Run>
    break;
 8006db8:	e004      	b.n	8006dc4 <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8006dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dbe:	f00d ff59 	bl	8014c74 <UTIL_SEQ_Run>
    break;
 8006dc2:	bf00      	nop
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	2008      	movs	r0, #8
 8006dd8:	f00e f86a 	bl	8014eb0 <UTIL_SEQ_SetTask>
  return;
 8006ddc:	bf00      	nop
}
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8006dec:	2001      	movs	r0, #1
 8006dee:	f00e f88b 	bl	8014f08 <UTIL_SEQ_SetEvt>
  return;
 8006df2:	bf00      	nop
}
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8006e02:	2001      	movs	r0, #1
 8006e04:	f00e f8a0 	bl	8014f48 <UTIL_SEQ_WaitEvt>
  return;
 8006e08:	bf00      	nop
}
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	330b      	adds	r3, #11
 8006e1c:	1c99      	adds	r1, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7a9b      	ldrb	r3, [r3, #10]
 8006e22:	3b02      	subs	r3, #2
 8006e24:	461a      	mov	r2, r3
 8006e26:	2001      	movs	r0, #1
 8006e28:	f009 fef0 	bl	8010c0c <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f009 fde3 	bl	80109f8 <TL_MM_EvtDone>
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	460b      	mov	r3, r1
 8006e44:	607a      	str	r2, [r7, #4]
 8006e46:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8006e48:	897a      	ldrh	r2, [r7, #10]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68f9      	ldr	r1, [r7, #12]
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f000 f904 	bl	800705c <HW_UART_Transmit_DMA>

  return;
 8006e54:	bf00      	nop
}
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <LL_EXTI_EnableIT_0_31>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <LL_EXTI_EnableIT_0_31+0x24>)
 8006e66:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006e6a:	4905      	ldr	r1, [pc, #20]	; (8006e80 <LL_EXTI_EnableIT_0_31+0x24>)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	58000800 	.word	0x58000800

08006e84 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	4904      	ldr	r1, [pc, #16]	; (8006ea4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]

}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	58000800 	.word	0x58000800

08006ea8 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006eb4:	4b5e      	ldr	r3, [pc, #376]	; (8007030 <HW_TS_Init+0x188>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	22ca      	movs	r2, #202	; 0xca
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24
 8006ebc:	4b5c      	ldr	r3, [pc, #368]	; (8007030 <HW_TS_Init+0x188>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2253      	movs	r2, #83	; 0x53
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ec4:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <HW_TS_Init+0x18c>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4a5a      	ldr	r2, [pc, #360]	; (8007034 <HW_TS_Init+0x18c>)
 8006eca:	f043 0320 	orr.w	r3, r3, #32
 8006ece:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8006ed0:	4b58      	ldr	r3, [pc, #352]	; (8007034 <HW_TS_Init+0x18c>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f1c3 0304 	rsb	r3, r3, #4
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	4b55      	ldr	r3, [pc, #340]	; (8007038 <HW_TS_Init+0x190>)
 8006ee4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8006ee6:	4b53      	ldr	r3, [pc, #332]	; (8007034 <HW_TS_Init+0x18c>)
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eee:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8006ef2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	fa92 f2a2 	rbit	r2, r2
 8006efa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	d101      	bne.n	8006f0a <HW_TS_Init+0x62>
  {
    return 32U;
 8006f06:	2220      	movs	r2, #32
 8006f08:	e003      	b.n	8006f12 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	fab2 f282 	clz	r2, r2
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	40d3      	lsrs	r3, r2
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	4b48      	ldr	r3, [pc, #288]	; (800703c <HW_TS_Init+0x194>)
 8006f1c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8006f1e:	4b45      	ldr	r3, [pc, #276]	; (8007034 <HW_TS_Init+0x18c>)
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	4b44      	ldr	r3, [pc, #272]	; (8007040 <HW_TS_Init+0x198>)
 8006f30:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8006f32:	4b43      	ldr	r3, [pc, #268]	; (8007040 <HW_TS_Init+0x198>)
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	4a40      	ldr	r2, [pc, #256]	; (800703c <HW_TS_Init+0x194>)
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006f44:	4a3c      	ldr	r2, [pc, #240]	; (8007038 <HW_TS_Init+0x190>)
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	40d3      	lsrs	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d904      	bls.n	8006f60 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8006f56:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <HW_TS_Init+0x19c>)
 8006f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e003      	b.n	8006f68 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	4b37      	ldr	r3, [pc, #220]	; (8007044 <HW_TS_Init+0x19c>)
 8006f66:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8006f68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006f6c:	f7ff ff8a 	bl	8006e84 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8006f70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006f74:	f7ff ff72 	bl	8006e5c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d13d      	bne.n	8006ffa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8006f7e:	4b32      	ldr	r3, [pc, #200]	; (8007048 <HW_TS_Init+0x1a0>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8006f84:	4b31      	ldr	r3, [pc, #196]	; (800704c <HW_TS_Init+0x1a4>)
 8006f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f8a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e00c      	b.n	8006fac <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8006f92:	7ffa      	ldrb	r2, [r7, #31]
 8006f94:	492e      	ldr	r1, [pc, #184]	; (8007050 <HW_TS_Init+0x1a8>)
 8006f96:	4613      	mov	r3, r2
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4413      	add	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	440b      	add	r3, r1
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8006fa6:	7ffb      	ldrb	r3, [r7, #31]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	7ffb      	ldrb	r3, [r7, #31]
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	d9ef      	bls.n	8006f92 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8006fb2:	4b28      	ldr	r3, [pc, #160]	; (8007054 <HW_TS_Init+0x1ac>)
 8006fb4:	2206      	movs	r2, #6
 8006fb6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8006fb8:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <HW_TS_Init+0x188>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	; (8007030 <HW_TS_Init+0x188>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8006fc8:	4b19      	ldr	r3, [pc, #100]	; (8007030 <HW_TS_Init+0x188>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	4b17      	ldr	r3, [pc, #92]	; (8007030 <HW_TS_Init+0x188>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006fd8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8006fda:	4b1f      	ldr	r3, [pc, #124]	; (8007058 <HW_TS_Init+0x1b0>)
 8006fdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006fe0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8006fe2:	2003      	movs	r0, #3
 8006fe4:	f002 fc0d 	bl	8009802 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8006fe8:	4b11      	ldr	r3, [pc, #68]	; (8007030 <HW_TS_Init+0x188>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	4b10      	ldr	r3, [pc, #64]	; (8007030 <HW_TS_Init+0x188>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff6:	609a      	str	r2, [r3, #8]
 8006ff8:	e009      	b.n	800700e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <HW_TS_Init+0x188>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8007008:	2003      	movs	r0, #3
 800700a:	f002 fbec 	bl	80097e6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <HW_TS_Init+0x188>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	22ff      	movs	r2, #255	; 0xff
 8007014:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8007016:	2200      	movs	r2, #0
 8007018:	2103      	movs	r1, #3
 800701a:	2003      	movs	r0, #3
 800701c:	f002 fbaf 	bl	800977e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007020:	2003      	movs	r0, #3
 8007022:	f002 fbc6 	bl	80097b2 <HAL_NVIC_EnableIRQ>

  return;
 8007026:	bf00      	nop
}
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	200001fc 	.word	0x200001fc
 8007034:	40002800 	.word	0x40002800
 8007038:	20000151 	.word	0x20000151
 800703c:	20000152 	.word	0x20000152
 8007040:	20000154 	.word	0x20000154
 8007044:	20000156 	.word	0x20000156
 8007048:	20000150 	.word	0x20000150
 800704c:	2000014c 	.word	0x2000014c
 8007050:	200000b8 	.word	0x200000b8
 8007054:	20000148 	.word	0x20000148
 8007058:	58000800 	.word	0x58000800

0800705c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
 800706a:	4613      	mov	r3, r2
 800706c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8007072:	2300      	movs	r3, #0
 8007074:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10e      	bne.n	800709a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 800707c:	4a17      	ldr	r2, [pc, #92]	; (80070dc <HW_UART_Transmit_DMA+0x80>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8007082:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <HW_UART_Transmit_DMA+0x84>)
 8007084:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <HW_UART_Transmit_DMA+0x88>)
 8007086:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8007088:	89bb      	ldrh	r3, [r7, #12]
 800708a:	461a      	mov	r2, r3
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	4814      	ldr	r0, [pc, #80]	; (80070e0 <HW_UART_Transmit_DMA+0x84>)
 8007090:	f006 fa34 	bl	800d4fc <HAL_UART_Transmit_DMA>
 8007094:	4603      	mov	r3, r0
 8007096:	75fb      	strb	r3, [r7, #23]
            break;
 8007098:	e000      	b.n	800709c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800709a:	bf00      	nop
    }

    switch (hal_status)
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d816      	bhi.n	80070d0 <HW_UART_Transmit_DMA+0x74>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <HW_UART_Transmit_DMA+0x4c>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	080070bf 	.word	0x080070bf
 80070b0:	080070c5 	.word	0x080070c5
 80070b4:	080070cb 	.word	0x080070cb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75bb      	strb	r3, [r7, #22]
            break;
 80070bc:	e009      	b.n	80070d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80070be:	2301      	movs	r3, #1
 80070c0:	75bb      	strb	r3, [r7, #22]
            break;
 80070c2:	e006      	b.n	80070d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80070c4:	2302      	movs	r3, #2
 80070c6:	75bb      	strb	r3, [r7, #22]
            break;
 80070c8:	e003      	b.n	80070d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80070ca:	2303      	movs	r3, #3
 80070cc:	75bb      	strb	r3, [r7, #22]
            break;
 80070ce:	e000      	b.n	80070d2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80070d0:	bf00      	nop
    }

    return hw_status;
 80070d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000158 	.word	0x20000158
 80070e0:	20000220 	.word	0x20000220
 80070e4:	40013800 	.word	0x40013800

080070e8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	4b09      	ldr	r3, [pc, #36]	; (800711c <HAL_UART_TxCpltCallback+0x34>)
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d107      	bne.n	800710c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80070fc:	4b08      	ldr	r3, [pc, #32]	; (8007120 <HAL_UART_TxCpltCallback+0x38>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <HAL_UART_TxCpltCallback+0x38>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4798      	blx	r3
            }
            break;
 800710a:	e001      	b.n	8007110 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8007110:	bf00      	nop
    }

    return;
 8007112:	bf00      	nop
}
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40013800 	.word	0x40013800
 8007120:	20000158 	.word	0x20000158

08007124 <LL_RCC_LSE_SetDriveCapability>:
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800712c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007134:	f023 0218 	bic.w	r2, r3, #24
 8007138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800715c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800715e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4313      	orrs	r3, r2
 8007166:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007174:	68fb      	ldr	r3, [r7, #12]
}
 8007176:	bf00      	nop
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007188:	f000 ff56 	bl	8008038 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800718c:	f7ff fcca 	bl	8006b24 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007190:	f000 f824 	bl	80071dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007194:	f000 f89a 	bl	80072cc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8007198:	f000 f930 	bl	80073fc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800719c:	f000 f9ea 	bl	8007574 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80071a0:	f000 f972 	bl	8007488 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80071a4:	f000 f9be 	bl	8007524 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80071a8:	f000 f8c4 	bl	8007334 <MX_ADC1_Init>
  MX_RTC_Init();
 80071ac:	f000 f942 	bl	8007434 <MX_RTC_Init>
  MX_RF_Init();
 80071b0:	f000 f938 	bl	8007424 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_RED);
 80071b4:	2002      	movs	r0, #2
 80071b6:	f000 fed1 	bl	8007f5c <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80071ba:	f7ff fcc1 	bl	8006b40 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 80071be:	4805      	ldr	r0, [pc, #20]	; (80071d4 <main+0x50>)
 80071c0:	f001 fb00 	bl	80087c4 <HAL_ADC_Start_IT>

  UTIL_SEQ_RegTask(1U << CFG_TASK_WRITE_ADC, UTIL_SEQ_RFU, ADC_SEQ_Proc);
 80071c4:	4a04      	ldr	r2, [pc, #16]	; (80071d8 <main+0x54>)
 80071c6:	2100      	movs	r1, #0
 80071c8:	2010      	movs	r0, #16
 80071ca:	f00d fe4f 	bl	8014e6c <UTIL_SEQ_RegTask>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80071ce:	f7ff fdce 	bl	8006d6e <MX_APPE_Process>
 80071d2:	e7fc      	b.n	80071ce <main+0x4a>
 80071d4:	2000015c 	.word	0x2000015c
 80071d8:	0800761d 	.word	0x0800761d

080071dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b09a      	sub	sp, #104	; 0x68
 80071e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071e2:	f107 0320 	add.w	r3, r7, #32
 80071e6:	2248      	movs	r2, #72	; 0x48
 80071e8:	2100      	movs	r1, #0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f00e f9d0 	bl	8015590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071f0:	1d3b      	adds	r3, r7, #4
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	605a      	str	r2, [r3, #4]
 80071f8:	609a      	str	r2, [r3, #8]
 80071fa:	60da      	str	r2, [r3, #12]
 80071fc:	611a      	str	r2, [r3, #16]
 80071fe:	615a      	str	r2, [r3, #20]
 8007200:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8007202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800720c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007210:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8007212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f023 0303 	bic.w	r3, r3, #3
 800721c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007220:	f043 0301 	orr.w	r3, r3, #1
 8007224:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007226:	f004 fa17 	bl	800b658 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800722a:	2000      	movs	r0, #0
 800722c:	f7ff ff7a 	bl	8007124 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007230:	4b25      	ldr	r3, [pc, #148]	; (80072c8 <SystemClock_Config+0xec>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007238:	4a23      	ldr	r2, [pc, #140]	; (80072c8 <SystemClock_Config+0xec>)
 800723a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	4b21      	ldr	r3, [pc, #132]	; (80072c8 <SystemClock_Config+0xec>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800724c:	232f      	movs	r3, #47	; 0x2f
 800724e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007256:	2301      	movs	r3, #1
 8007258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800725a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800725e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007260:	2301      	movs	r3, #1
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007264:	2340      	movs	r3, #64	; 0x40
 8007266:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007268:	2300      	movs	r3, #0
 800726a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800726c:	2360      	movs	r3, #96	; 0x60
 800726e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007270:	2305      	movs	r3, #5
 8007272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007274:	2300      	movs	r3, #0
 8007276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007278:	f107 0320 	add.w	r3, r7, #32
 800727c:	4618      	mov	r0, r3
 800727e:	f004 fd7f 	bl	800bd80 <HAL_RCC_OscConfig>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8007288:	f000 f9f8 	bl	800767c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800728c:	236f      	movs	r3, #111	; 0x6f
 800728e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8007290:	2302      	movs	r3, #2
 8007292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80072a8:	1d3b      	adds	r3, r7, #4
 80072aa:	2101      	movs	r1, #1
 80072ac:	4618      	mov	r0, r3
 80072ae:	f005 f8db 	bl	800c468 <HAL_RCC_ClockConfig>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80072b8:	f000 f9e0 	bl	800767c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80072bc:	f005 fe96 	bl	800cfec <HAL_RCCEx_EnableMSIPLLMode>
}
 80072c0:	bf00      	nop
 80072c2:	3768      	adds	r7, #104	; 0x68
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	58000400 	.word	0x58000400

080072cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b094      	sub	sp, #80	; 0x50
 80072d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072d2:	463b      	mov	r3, r7
 80072d4:	2250      	movs	r2, #80	; 0x50
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f00e f959 	bl	8015590 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80072de:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 80072e2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80072e4:	2318      	movs	r3, #24
 80072e6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80072e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80072ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80072f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80072f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80072fa:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80072fe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007300:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007306:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800730c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007310:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8007312:	2300      	movs	r3, #0
 8007314:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8007316:	2300      	movs	r3, #0
 8007318:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800731a:	463b      	mov	r3, r7
 800731c:	4618      	mov	r0, r3
 800731e:	f005 fcef 	bl	800cd00 <HAL_RCCEx_PeriphCLKConfig>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8007328:	f000 f9a8 	bl	800767c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800732c:	bf00      	nop
 800732e:	3750      	adds	r7, #80	; 0x50
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800733a:	463b      	mov	r3, r7
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	60da      	str	r2, [r3, #12]
 8007346:	611a      	str	r2, [r3, #16]
 8007348:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800734a:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <MX_ADC1_Init+0xbc>)
 800734c:	4a29      	ldr	r2, [pc, #164]	; (80073f4 <MX_ADC1_Init+0xc0>)
 800734e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007350:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007352:	2200      	movs	r2, #0
 8007354:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007356:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007358:	2200      	movs	r2, #0
 800735a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800735c:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <MX_ADC1_Init+0xbc>)
 800735e:	2200      	movs	r2, #0
 8007360:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007362:	4b23      	ldr	r3, [pc, #140]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007364:	2200      	movs	r2, #0
 8007366:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007368:	4b21      	ldr	r3, [pc, #132]	; (80073f0 <MX_ADC1_Init+0xbc>)
 800736a:	2204      	movs	r2, #4
 800736c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800736e:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007370:	2200      	movs	r2, #0
 8007372:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007374:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007376:	2200      	movs	r2, #0
 8007378:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800737a:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <MX_ADC1_Init+0xbc>)
 800737c:	2201      	movs	r2, #1
 800737e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <MX_ADC1_Init+0xbc>)
 800738a:	2200      	movs	r2, #0
 800738c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007390:	2200      	movs	r2, #0
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007394:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <MX_ADC1_Init+0xbc>)
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <MX_ADC1_Init+0xbc>)
 800739e:	2200      	movs	r2, #0
 80073a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <MX_ADC1_Init+0xbc>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073aa:	4811      	ldr	r0, [pc, #68]	; (80073f0 <MX_ADC1_Init+0xbc>)
 80073ac:	f001 f8be 	bl	800852c <HAL_ADC_Init>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80073b6:	f000 f961 	bl	800767c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80073ba:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <MX_ADC1_Init+0xc4>)
 80073bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80073be:	2306      	movs	r3, #6
 80073c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80073c6:	237f      	movs	r3, #127	; 0x7f
 80073c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80073ca:	2304      	movs	r3, #4
 80073cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073d2:	463b      	mov	r3, r7
 80073d4:	4619      	mov	r1, r3
 80073d6:	4806      	ldr	r0, [pc, #24]	; (80073f0 <MX_ADC1_Init+0xbc>)
 80073d8:	f001 fc48 	bl	8008c6c <HAL_ADC_ConfigChannel>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80073e2:	f000 f94b 	bl	800767c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	2000015c 	.word	0x2000015c
 80073f4:	50040000 	.word	0x50040000
 80073f8:	04300002 	.word	0x04300002

080073fc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <MX_IPCC_Init+0x20>)
 8007402:	4a07      	ldr	r2, [pc, #28]	; (8007420 <MX_IPCC_Init+0x24>)
 8007404:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8007406:	4805      	ldr	r0, [pc, #20]	; (800741c <MX_IPCC_Init+0x20>)
 8007408:	f002 fd46 	bl	8009e98 <HAL_IPCC_Init>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8007412:	f000 f933 	bl	800767c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200001c0 	.word	0x200001c0
 8007420:	58000c00 	.word	0x58000c00

08007424 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8007428:	bf00      	nop
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007438:	4b11      	ldr	r3, [pc, #68]	; (8007480 <MX_RTC_Init+0x4c>)
 800743a:	4a12      	ldr	r2, [pc, #72]	; (8007484 <MX_RTC_Init+0x50>)
 800743c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800743e:	4b10      	ldr	r3, [pc, #64]	; (8007480 <MX_RTC_Init+0x4c>)
 8007440:	2200      	movs	r2, #0
 8007442:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8007444:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <MX_RTC_Init+0x4c>)
 8007446:	220f      	movs	r2, #15
 8007448:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800744a:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <MX_RTC_Init+0x4c>)
 800744c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007450:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007452:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <MX_RTC_Init+0x4c>)
 8007454:	2200      	movs	r2, #0
 8007456:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <MX_RTC_Init+0x4c>)
 800745a:	2200      	movs	r2, #0
 800745c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800745e:	4b08      	ldr	r3, [pc, #32]	; (8007480 <MX_RTC_Init+0x4c>)
 8007460:	2200      	movs	r2, #0
 8007462:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <MX_RTC_Init+0x4c>)
 8007466:	2200      	movs	r2, #0
 8007468:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800746a:	4805      	ldr	r0, [pc, #20]	; (8007480 <MX_RTC_Init+0x4c>)
 800746c:	f005 fed6 	bl	800d21c <HAL_RTC_Init>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8007476:	f000 f901 	bl	800767c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800747a:	bf00      	nop
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200001fc 	.word	0x200001fc
 8007484:	40002800 	.word	0x40002800

08007488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800748c:	4b23      	ldr	r3, [pc, #140]	; (800751c <MX_USART1_UART_Init+0x94>)
 800748e:	4a24      	ldr	r2, [pc, #144]	; (8007520 <MX_USART1_UART_Init+0x98>)
 8007490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007492:	4b22      	ldr	r3, [pc, #136]	; (800751c <MX_USART1_UART_Init+0x94>)
 8007494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800749a:	4b20      	ldr	r3, [pc, #128]	; (800751c <MX_USART1_UART_Init+0x94>)
 800749c:	2200      	movs	r2, #0
 800749e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80074a0:	4b1e      	ldr	r3, [pc, #120]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80074a6:	4b1d      	ldr	r3, [pc, #116]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074ac:	4b1b      	ldr	r3, [pc, #108]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074ae:	220c      	movs	r2, #12
 80074b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074b2:	4b1a      	ldr	r3, [pc, #104]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80074b8:	4b18      	ldr	r3, [pc, #96]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80074be:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074c0:	4b16      	ldr	r3, [pc, #88]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074cc:	4b13      	ldr	r3, [pc, #76]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80074d2:	4812      	ldr	r0, [pc, #72]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074d4:	f005 ffc2 	bl	800d45c <HAL_UART_Init>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80074de:	f000 f8cd 	bl	800767c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80074e2:	2100      	movs	r1, #0
 80074e4:	480d      	ldr	r0, [pc, #52]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074e6:	f007 f988 	bl	800e7fa <HAL_UARTEx_SetTxFifoThreshold>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80074f0:	f000 f8c4 	bl	800767c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80074f4:	2100      	movs	r1, #0
 80074f6:	4809      	ldr	r0, [pc, #36]	; (800751c <MX_USART1_UART_Init+0x94>)
 80074f8:	f007 f9bd 	bl	800e876 <HAL_UARTEx_SetRxFifoThreshold>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8007502:	f000 f8bb 	bl	800767c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007506:	4805      	ldr	r0, [pc, #20]	; (800751c <MX_USART1_UART_Init+0x94>)
 8007508:	f007 f93e 	bl	800e788 <HAL_UARTEx_DisableFifoMode>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8007512:	f000 f8b3 	bl	800767c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000220 	.word	0x20000220
 8007520:	40013800 	.word	0x40013800

08007524 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007528:	4b10      	ldr	r3, [pc, #64]	; (800756c <MX_USB_PCD_Init+0x48>)
 800752a:	4a11      	ldr	r2, [pc, #68]	; (8007570 <MX_USB_PCD_Init+0x4c>)
 800752c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800752e:	4b0f      	ldr	r3, [pc, #60]	; (800756c <MX_USB_PCD_Init+0x48>)
 8007530:	2208      	movs	r2, #8
 8007532:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <MX_USB_PCD_Init+0x48>)
 8007536:	2202      	movs	r2, #2
 8007538:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <MX_USB_PCD_Init+0x48>)
 800753c:	2202      	movs	r2, #2
 800753e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <MX_USB_PCD_Init+0x48>)
 8007542:	2200      	movs	r2, #0
 8007544:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <MX_USB_PCD_Init+0x48>)
 8007548:	2200      	movs	r2, #0
 800754a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <MX_USB_PCD_Init+0x48>)
 800754e:	2200      	movs	r2, #0
 8007550:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <MX_USB_PCD_Init+0x48>)
 8007554:	2200      	movs	r2, #0
 8007556:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <MX_USB_PCD_Init+0x48>)
 800755a:	f002 fd23 	bl	8009fa4 <HAL_PCD_Init>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8007564:	f000 f88a 	bl	800767c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007568:	bf00      	nop
 800756a:	bd80      	pop	{r7, pc}
 800756c:	200002b4 	.word	0x200002b4
 8007570:	40006800 	.word	0x40006800

08007574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	605a      	str	r2, [r3, #4]
 8007582:	609a      	str	r2, [r3, #8]
 8007584:	60da      	str	r2, [r3, #12]
 8007586:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007588:	2004      	movs	r0, #4
 800758a:	f7ff fde1 	bl	8007150 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800758e:	2002      	movs	r0, #2
 8007590:	f7ff fdde 	bl	8007150 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007594:	2001      	movs	r0, #1
 8007596:	f7ff fddb 	bl	8007150 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800759a:	2008      	movs	r0, #8
 800759c:	f7ff fdd8 	bl	8007150 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80075a0:	2200      	movs	r2, #0
 80075a2:	2123      	movs	r1, #35	; 0x23
 80075a4:	4814      	ldr	r0, [pc, #80]	; (80075f8 <MX_GPIO_Init+0x84>)
 80075a6:	f002 fc21 	bl	8009dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80075aa:	2310      	movs	r3, #16
 80075ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4810      	ldr	r0, [pc, #64]	; (80075fc <MX_GPIO_Init+0x88>)
 80075bc:	f002 faa6 	bl	8009b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80075c0:	2323      	movs	r3, #35	; 0x23
 80075c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c4:	2301      	movs	r3, #1
 80075c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075d0:	1d3b      	adds	r3, r7, #4
 80075d2:	4619      	mov	r1, r3
 80075d4:	4808      	ldr	r0, [pc, #32]	; (80075f8 <MX_GPIO_Init+0x84>)
 80075d6:	f002 fa99 	bl	8009b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80075da:	2303      	movs	r3, #3
 80075dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075e6:	1d3b      	adds	r3, r7, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4805      	ldr	r0, [pc, #20]	; (8007600 <MX_GPIO_Init+0x8c>)
 80075ec:	f002 fa8e 	bl	8009b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80075f0:	bf00      	nop
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	48000400 	.word	0x48000400
 80075fc:	48000800 	.word	0x48000800
 8007600:	48000c00 	.word	0x48000c00

08007604 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_SetTask(1U << CFG_TASK_WRITE_ADC, CFG_SCH_PRIO_0);
 800760c:	2100      	movs	r1, #0
 800760e:	2010      	movs	r0, #16
 8007610:	f00d fc4e 	bl	8014eb0 <UTIL_SEQ_SetTask>
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <ADC_SEQ_Proc>:

void ADC_SEQ_Proc() {
 800761c:	b5b0      	push	{r4, r5, r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
	uint32_t adc_res = HAL_ADC_GetValue(&hadc1);
 8007622:	4814      	ldr	r0, [pc, #80]	; (8007674 <ADC_SEQ_Proc+0x58>)
 8007624:	f001 f94b 	bl	80088be <HAL_ADC_GetValue>
 8007628:	60f8      	str	r0, [r7, #12]
	long long new_temp = (long long) (50000*adc_res/4096);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007630:	fb02 f303 	mul.w	r3, r2, r3
 8007634:	0b1b      	lsrs	r3, r3, #12
 8007636:	2200      	movs	r2, #0
 8007638:	461c      	mov	r4, r3
 800763a:	4615      	mov	r5, r2
 800763c:	e9c7 4500 	strd	r4, r5, [r7]

	if(new_temp == 0)
 8007640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007644:	4313      	orrs	r3, r2
 8007646:	d102      	bne.n	800764e <ADC_SEQ_Proc+0x32>
		BSP_LED_Toggle(LED_GREEN);
 8007648:	2001      	movs	r0, #1
 800764a:	f000 fcdb 	bl	8008004 <BSP_LED_Toggle>

	updateAttr(new_temp);
 800764e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007652:	f00c ffab 	bl	80145ac <updateAttr>

	printf("Temp: %l\n", new_temp);
 8007656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765a:	4807      	ldr	r0, [pc, #28]	; (8007678 <ADC_SEQ_Proc+0x5c>)
 800765c:	f00d feb6 	bl	80153cc <iprintf>

	HAL_Delay(200);
 8007660:	20c8      	movs	r0, #200	; 0xc8
 8007662:	f7ff fb5f 	bl	8006d24 <HAL_Delay>
	HAL_ADC_Start_IT(&hadc1);
 8007666:	4803      	ldr	r0, [pc, #12]	; (8007674 <ADC_SEQ_Proc+0x58>)
 8007668:	f001 f8ac 	bl	80087c4 <HAL_ADC_Start_IT>
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bdb0      	pop	{r4, r5, r7, pc}
 8007674:	2000015c 	.word	0x2000015c
 8007678:	080164f8 	.word	0x080164f8

0800767c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007680:	b672      	cpsid	i
}
 8007682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007684:	e7fe      	b.n	8007684 <Error_Handler+0x8>

08007686 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8007686:	b480      	push	{r7}
 8007688:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800768a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800769e:	bf00      	nop
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <LL_AHB2_GRP1_EnableClock>:
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80076b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4313      	orrs	r3, r2
 80076be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80076c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4013      	ands	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80076e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80076f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4013      	ands	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80076fe:	68fb      	ldr	r3, [r7, #12]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800771a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4313      	orrs	r3, r2
 8007722:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007728:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007730:	68fb      	ldr	r3, [r7, #12]
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800774c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4313      	orrs	r3, r2
 8007754:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800775a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4013      	ands	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8007774:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007778:	f7ff ffaf 	bl	80076da <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800777c:	2200      	movs	r2, #0
 800777e:	2100      	movs	r1, #0
 8007780:	202e      	movs	r0, #46	; 0x2e
 8007782:	f001 fffc 	bl	800977e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8007786:	202e      	movs	r0, #46	; 0x2e
 8007788:	f002 f813 	bl	80097b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800778c:	bf00      	nop
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007798:	f107 030c 	add.w	r3, r7, #12
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	609a      	str	r2, [r3, #8]
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <HAL_ADC_MspInit+0x60>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d11a      	bne.n	80077e8 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80077b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80077b6:	f7ff ff77 	bl	80076a8 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077ba:	2004      	movs	r0, #4
 80077bc:	f7ff ff74 	bl	80076a8 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80077c0:	2301      	movs	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077c4:	2303      	movs	r3, #3
 80077c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	4619      	mov	r1, r3
 80077d2:	4808      	ldr	r0, [pc, #32]	; (80077f4 <HAL_ADC_MspInit+0x64>)
 80077d4:	f002 f99a 	bl	8009b0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	2012      	movs	r0, #18
 80077de:	f001 ffce 	bl	800977e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80077e2:	2012      	movs	r0, #18
 80077e4:	f001 ffe5 	bl	80097b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80077e8:	bf00      	nop
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	50040000 	.word	0x50040000
 80077f4:	48000800 	.word	0x48000800

080077f8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <HAL_IPCC_MspInit+0x44>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d113      	bne.n	8007832 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800780a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800780e:	f7ff ff64 	bl	80076da <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8007812:	2200      	movs	r2, #0
 8007814:	2100      	movs	r1, #0
 8007816:	202c      	movs	r0, #44	; 0x2c
 8007818:	f001 ffb1 	bl	800977e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800781c:	202c      	movs	r0, #44	; 0x2c
 800781e:	f001 ffc8 	bl	80097b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	202d      	movs	r0, #45	; 0x2d
 8007828:	f001 ffa9 	bl	800977e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800782c:	202d      	movs	r0, #45	; 0x2d
 800782e:	f001 ffc0 	bl	80097b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	58000c00 	.word	0x58000c00

08007840 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b096      	sub	sp, #88	; 0x58
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007848:	f107 0308 	add.w	r3, r7, #8
 800784c:	2250      	movs	r2, #80	; 0x50
 800784e:	2100      	movs	r1, #0
 8007850:	4618      	mov	r0, r3
 8007852:	f00d fe9d 	bl	8015590 <memset>
  if(hrtc->Instance==RTC)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a0f      	ldr	r2, [pc, #60]	; (8007898 <HAL_RTC_MspInit+0x58>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d117      	bne.n	8007890 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8007860:	f003 fefa 	bl	800b658 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007868:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800786a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007870:	f107 0308 	add.w	r3, r7, #8
 8007874:	4618      	mov	r0, r3
 8007876:	f005 fa43 	bl	800cd00 <HAL_RCCEx_PeriphCLKConfig>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8007880:	f7ff fefc 	bl	800767c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007884:	f7ff feff 	bl	8007686 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007888:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800788c:	f7ff ff3e 	bl	800770c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007890:	bf00      	nop
 8007892:	3758      	adds	r7, #88	; 0x58
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40002800 	.word	0x40002800

0800789c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b09c      	sub	sp, #112	; 0x70
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	605a      	str	r2, [r3, #4]
 80078ae:	609a      	str	r2, [r3, #8]
 80078b0:	60da      	str	r2, [r3, #12]
 80078b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078b4:	f107 030c 	add.w	r3, r7, #12
 80078b8:	2250      	movs	r2, #80	; 0x50
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f00d fe67 	bl	8015590 <memset>
  if(huart->Instance==USART1)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <HAL_UART_MspInit+0x94>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d12c      	bne.n	8007926 <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80078cc:	2301      	movs	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80078d0:	2300      	movs	r3, #0
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	4618      	mov	r0, r3
 80078da:	f005 fa11 	bl	800cd00 <HAL_RCCEx_PeriphCLKConfig>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80078e4:	f7ff feca 	bl	800767c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80078e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80078ec:	f7ff ff27 	bl	800773e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078f0:	2002      	movs	r0, #2
 80078f2:	f7ff fed9 	bl	80076a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80078f6:	23c0      	movs	r3, #192	; 0xc0
 80078f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078fa:	2302      	movs	r3, #2
 80078fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078fe:	2301      	movs	r3, #1
 8007900:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007902:	2300      	movs	r3, #0
 8007904:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007906:	2307      	movs	r3, #7
 8007908:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800790a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800790e:	4619      	mov	r1, r3
 8007910:	4808      	ldr	r0, [pc, #32]	; (8007934 <HAL_UART_MspInit+0x98>)
 8007912:	f002 f8fb 	bl	8009b0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	2024      	movs	r0, #36	; 0x24
 800791c:	f001 ff2f 	bl	800977e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007920:	2024      	movs	r0, #36	; 0x24
 8007922:	f001 ff46 	bl	80097b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007926:	bf00      	nop
 8007928:	3770      	adds	r7, #112	; 0x70
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40013800 	.word	0x40013800
 8007934:	48000400 	.word	0x48000400

08007938 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007940:	f107 030c 	add.w	r3, r7, #12
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a17      	ldr	r2, [pc, #92]	; (80079b4 <HAL_PCD_MspInit+0x7c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d128      	bne.n	80079ac <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800795a:	2001      	movs	r0, #1
 800795c:	f7ff fea4 	bl	80076a8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007960:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007964:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007966:	2302      	movs	r3, #2
 8007968:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800796e:	2300      	movs	r3, #0
 8007970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007972:	230a      	movs	r3, #10
 8007974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007976:	f107 030c 	add.w	r3, r7, #12
 800797a:	4619      	mov	r1, r3
 800797c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007980:	f002 f8c4 	bl	8009b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007984:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007988:	f7ff fec0 	bl	800770c <LL_APB1_GRP1_EnableClock>
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800798c:	2200      	movs	r2, #0
 800798e:	2100      	movs	r1, #0
 8007990:	2013      	movs	r0, #19
 8007992:	f001 fef4 	bl	800977e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8007996:	2013      	movs	r0, #19
 8007998:	f001 ff0b 	bl	80097b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	2014      	movs	r0, #20
 80079a2:	f001 feec 	bl	800977e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80079a6:	2014      	movs	r0, #20
 80079a8:	f001 ff03 	bl	80097b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80079ac:	bf00      	nop
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40006800 	.word	0x40006800

080079b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80079bc:	e7fe      	b.n	80079bc <NMI_Handler+0x4>

080079be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079be:	b480      	push	{r7}
 80079c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079c2:	e7fe      	b.n	80079c2 <HardFault_Handler+0x4>

080079c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079c8:	e7fe      	b.n	80079c8 <MemManage_Handler+0x4>

080079ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079ca:	b480      	push	{r7}
 80079cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079ce:	e7fe      	b.n	80079ce <BusFault_Handler+0x4>

080079d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079d4:	e7fe      	b.n	80079d4 <UsageFault_Handler+0x4>

080079d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079d6:	b480      	push	{r7}
 80079d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079da:	bf00      	nop
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079f2:	b480      	push	{r7}
 80079f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079f6:	bf00      	nop
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a04:	f000 fb72 	bl	80080ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a08:	bf00      	nop
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007a10:	4802      	ldr	r0, [pc, #8]	; (8007a1c <ADC1_IRQHandler+0x10>)
 8007a12:	f000 ff61 	bl	80088d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	2000015c 	.word	0x2000015c

08007a20 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <USB_HP_IRQHandler+0x10>)
 8007a26:	f002 fb8b 	bl	800a140 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	200002b4 	.word	0x200002b4

08007a34 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007a38:	4802      	ldr	r0, [pc, #8]	; (8007a44 <USB_LP_IRQHandler+0x10>)
 8007a3a:	f002 fb81 	bl	800a140 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007a3e:	bf00      	nop
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200002b4 	.word	0x200002b4

08007a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007a4c:	4802      	ldr	r0, [pc, #8]	; (8007a58 <USART1_IRQHandler+0x10>)
 8007a4e:	f005 fdd5 	bl	800d5fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000220 	.word	0x20000220

08007a5c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007a60:	f00c fee0 	bl	8014824 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007a64:	bf00      	nop
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8007a6c:	f00c ff30 	bl	80148d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007a70:	bf00      	nop
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007a78:	f002 f9ea 	bl	8009e50 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007a7c:	bf00      	nop
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8007a80:	b5b0      	push	{r4, r5, r7, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	807b      	strh	r3, [r7, #2]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8007a90:	787b      	ldrb	r3, [r7, #1]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d002      	beq.n	8007a9c <logRegion+0x1c>
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d00a      	beq.n	8007ab0 <logRegion+0x30>
 8007a9a:	e012      	b.n	8007ac2 <logRegion+0x42>
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8007a9c:	f107 0308 	add.w	r3, r7, #8
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <logRegion+0x70>)
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	4615      	mov	r5, r2
 8007aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aaa:	682b      	ldr	r3, [r5, #0]
 8007aac:	7023      	strb	r3, [r4, #0]
      break;
 8007aae:	e011      	b.n	8007ad4 <logRegion+0x54>
    case APPLI_LOG_REGION_ZIGBEE_API:
      strcpy(logRegionString, "[M4 ZIGBEE API]");
 8007ab0:	f107 0308 	add.w	r3, r7, #8
 8007ab4:	4a0f      	ldr	r2, [pc, #60]	; (8007af4 <logRegion+0x74>)
 8007ab6:	461c      	mov	r4, r3
 8007ab8:	4613      	mov	r3, r2
 8007aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8007ac0:	e008      	b.n	8007ad4 <logRegion+0x54>
    default:
      strcpy(logRegionString, "[M4]");
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <logRegion+0x78>)
 8007ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007acc:	6018      	str	r0, [r3, #0]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	7019      	strb	r1, [r3, #0]
      break;
 8007ad2:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8007ad4:	8879      	ldrh	r1, [r7, #2]
 8007ad6:	f107 0308 	add.w	r3, r7, #8
 8007ada:	4a08      	ldr	r2, [pc, #32]	; (8007afc <logRegion+0x7c>)
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f00d fc87 	bl	80153f0 <sniprintf>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	b29b      	uxth	r3, r3
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3728      	adds	r7, #40	; 0x28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bdb0      	pop	{r4, r5, r7, pc}
 8007aee:	bf00      	nop
 8007af0:	08016504 	.word	0x08016504
 8007af4:	08016518 	.word	0x08016518
 8007af8:	08016528 	.word	0x08016528
 8007afc:	08016530 	.word	0x08016530

08007b00 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d00a      	beq.n	8007b26 <levelToString+0x26>
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	dc0a      	bgt.n	8007b2a <levelToString+0x2a>
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d002      	beq.n	8007b1e <levelToString+0x1e>
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d002      	beq.n	8007b22 <levelToString+0x22>
 8007b1c:	e005      	b.n	8007b2a <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <levelToString+0x38>)
 8007b20:	e004      	b.n	8007b2c <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8007b22:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <levelToString+0x3c>)
 8007b24:	e002      	b.n	8007b2c <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <levelToString+0x40>)
 8007b28:	e000      	b.n	8007b2c <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8007b2a:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <levelToString+0x44>)
  }
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	08016534 	.word	0x08016534
 8007b3c:	0801653c 	.word	0x0801653c
 8007b40:	08016544 	.word	0x08016544
 8007b44:	0801654c 	.word	0x0801654c

08007b48 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8007b48:	b590      	push	{r4, r7, lr}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	807b      	strh	r3, [r7, #2]
 8007b54:	4613      	mov	r3, r2
 8007b56:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8007b58:	887c      	ldrh	r4, [r7, #2]
 8007b5a:	787b      	ldrb	r3, [r7, #1]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff ffcf 	bl	8007b00 <levelToString>
 8007b62:	4603      	mov	r3, r0
 8007b64:	4a05      	ldr	r2, [pc, #20]	; (8007b7c <logLevel+0x34>)
 8007b66:	4621      	mov	r1, r4
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f00d fc41 	bl	80153f0 <sniprintf>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	b29b      	uxth	r3, r3
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd90      	pop	{r4, r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08016554 	.word	0x08016554

08007b80 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8007b80:	b40c      	push	{r2, r3}
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b0c4      	sub	sp, #272	; 0x110
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	4602      	mov	r2, r0
 8007b8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b8e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b98:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8007ba6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007baa:	f107 020c 	add.w	r2, r7, #12
 8007bae:	18d0      	adds	r0, r2, r3
 8007bb0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007bb4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007bb8:	b299      	uxth	r1, r3
 8007bba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bbe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	f7ff ffbf 	bl	8007b48 <logLevel>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8007bd8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007bdc:	f107 020c 	add.w	r2, r7, #12
 8007be0:	18d0      	adds	r0, r2, r3
 8007be2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007be6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007bea:	b299      	uxth	r1, r3
 8007bec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bf0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f7ff ff42 	bl	8007a80 <logRegion>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007c04:	4413      	add	r3, r2
 8007c06:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8007c0a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8007c0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c16:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8007c18:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007c1c:	f107 020c 	add.w	r2, r7, #12
 8007c20:	18d0      	adds	r0, r2, r3
 8007c22:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007c26:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8007c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007c38:	f00d fc9c 	bl	8015574 <vsniprintf>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007c44:	4413      	add	r3, r2
 8007c46:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8007c4a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8007c54:	461a      	mov	r2, r3
 8007c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c5e:	210d      	movs	r1, #13
 8007c60:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8007c62:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c76:	210a      	movs	r1, #10
 8007c78:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8007c7a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8007c84:	461a      	mov	r2, r3
 8007c86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c8e:	2100      	movs	r1, #0
 8007c90:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8007c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c96:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d805      	bhi.n	8007cac <logApplication+0x12c>
  {
    printf("%s", logString);
 8007ca0:	f107 030c 	add.w	r3, r7, #12
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4805      	ldr	r0, [pc, #20]	; (8007cbc <logApplication+0x13c>)
 8007ca8:	f00d fb90 	bl	80153cc <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8007cac:	bf00      	nop
 8007cae:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cb8:	b002      	add	sp, #8
 8007cba:	4770      	bx	lr
 8007cbc:	08016554 	.word	0x08016554

08007cc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  return 1;
 8007cc4:	2301      	movs	r3, #1
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <_kill>:

int _kill(int pid, int sig)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007cda:	f00d fcc5 	bl	8015668 <__errno>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2216      	movs	r2, #22
 8007ce2:	601a      	str	r2, [r3, #0]
  return -1;
 8007ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_exit>:

void _exit (int status)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff ffe7 	bl	8007cd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007d02:	e7fe      	b.n	8007d02 <_exit+0x12>

08007d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d10:	2300      	movs	r3, #0
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	e00a      	b.n	8007d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007d16:	f3af 8000 	nop.w
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	60ba      	str	r2, [r7, #8]
 8007d22:	b2ca      	uxtb	r2, r1
 8007d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	dbf0      	blt.n	8007d16 <_read+0x12>
  }

  return len;
 8007d34:	687b      	ldr	r3, [r7, #4]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d66:	605a      	str	r2, [r3, #4]
  return 0;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <_isatty>:

int _isatty(int file)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007d7e:	2301      	movs	r3, #1
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007db0:	4a14      	ldr	r2, [pc, #80]	; (8007e04 <_sbrk+0x5c>)
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <_sbrk+0x60>)
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <_sbrk+0x64>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d102      	bne.n	8007dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007dc4:	4b11      	ldr	r3, [pc, #68]	; (8007e0c <_sbrk+0x64>)
 8007dc6:	4a12      	ldr	r2, [pc, #72]	; (8007e10 <_sbrk+0x68>)
 8007dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <_sbrk+0x64>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d207      	bcs.n	8007de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007dd8:	f00d fc46 	bl	8015668 <__errno>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	220c      	movs	r2, #12
 8007de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007de6:	e009      	b.n	8007dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007de8:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <_sbrk+0x64>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007dee:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <_sbrk+0x64>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <_sbrk+0x64>)
 8007df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20030000 	.word	0x20030000
 8007e08:	00000400 	.word	0x00000400
 8007e0c:	20000590 	.word	0x20000590
 8007e10:	20000a28 	.word	0x20000a28

08007e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8007e18:	4b24      	ldr	r3, [pc, #144]	; (8007eac <SystemInit+0x98>)
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1e:	4a23      	ldr	r2, [pc, #140]	; (8007eac <SystemInit+0x98>)
 8007e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e3c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007e40:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e4c:	4b18      	ldr	r3, [pc, #96]	; (8007eb0 <SystemInit+0x9c>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e5e:	f023 0305 	bic.w	r3, r3, #5
 8007e62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e7e:	4a0d      	ldr	r2, [pc, #52]	; (8007eb4 <SystemInit+0xa0>)
 8007e80:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e86:	4a0b      	ldr	r2, [pc, #44]	; (8007eb4 <SystemInit+0xa0>)
 8007e88:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	619a      	str	r2, [r3, #24]
}
 8007ea2:	bf00      	nop
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	e000ed00 	.word	0xe000ed00
 8007eb0:	faf6fefb 	.word	0xfaf6fefb
 8007eb4:	22041000 	.word	0x22041000

08007eb8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007eb8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007eba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ebc:	3304      	adds	r3, #4

08007ebe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ebe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ec0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007ec2:	d3f9      	bcc.n	8007eb8 <CopyDataInit>
  bx lr
 8007ec4:	4770      	bx	lr

08007ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007ec6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007ec8:	3004      	adds	r0, #4

08007eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007eca:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007ecc:	d3fb      	bcc.n	8007ec6 <FillZerobss>
  bx lr
 8007ece:	4770      	bx	lr

08007ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007ed0:	480c      	ldr	r0, [pc, #48]	; (8007f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007ed2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007ed4:	f7ff ff9e 	bl	8007e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007ed8:	480b      	ldr	r0, [pc, #44]	; (8007f08 <LoopForever+0x6>)
 8007eda:	490c      	ldr	r1, [pc, #48]	; (8007f0c <LoopForever+0xa>)
 8007edc:	4a0c      	ldr	r2, [pc, #48]	; (8007f10 <LoopForever+0xe>)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f7ff ffed 	bl	8007ebe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007ee4:	480b      	ldr	r0, [pc, #44]	; (8007f14 <LoopForever+0x12>)
 8007ee6:	490c      	ldr	r1, [pc, #48]	; (8007f18 <LoopForever+0x16>)
 8007ee8:	4a0c      	ldr	r2, [pc, #48]	; (8007f1c <LoopForever+0x1a>)
 8007eea:	2300      	movs	r3, #0
 8007eec:	f7ff ffe7 	bl	8007ebe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007ef0:	480b      	ldr	r0, [pc, #44]	; (8007f20 <LoopForever+0x1e>)
 8007ef2:	490c      	ldr	r1, [pc, #48]	; (8007f24 <LoopForever+0x22>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f7ff ffe8 	bl	8007eca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007efa:	f00d fbbb 	bl	8015674 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007efe:	f7ff f941 	bl	8007184 <main>

08007f02 <LoopForever>:

LoopForever:
  b LoopForever
 8007f02:	e7fe      	b.n	8007f02 <LoopForever>
  ldr   r0, =_estack
 8007f04:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007f08:	20000008 	.word	0x20000008
 8007f0c:	20000088 	.word	0x20000088
 8007f10:	08016e78 	.word	0x08016e78
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007f14:	200300e4 	.word	0x200300e4
 8007f18:	20030b5a 	.word	0x20030b5a
 8007f1c:	08016f09 	.word	0x08016f09
  INIT_BSS _sbss, _ebss
 8007f20:	2000009c 	.word	0x2000009c
 8007f24:	20000a28 	.word	0x20000a28

08007f28 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007f28:	e7fe      	b.n	8007f28 <AES1_IRQHandler>

08007f2a <LL_AHB2_GRP1_EnableClock>:
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8007f66:	f107 030c 	add.w	r3, r7, #12
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	605a      	str	r2, [r3, #4]
 8007f70:	609a      	str	r2, [r3, #8]
 8007f72:	60da      	str	r2, [r3, #12]
 8007f74:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8007f76:	2002      	movs	r0, #2
 8007f78:	f7ff ffd7 	bl	8007f2a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	4a12      	ldr	r2, [pc, #72]	; (8007fc8 <BSP_LED_Init+0x6c>)
 8007f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f84:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f86:	2301      	movs	r3, #1
 8007f88:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	4a0d      	ldr	r2, [pc, #52]	; (8007fcc <BSP_LED_Init+0x70>)
 8007f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9a:	f107 020c 	add.w	r2, r7, #12
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fdb3 	bl	8009b0c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <BSP_LED_Init+0x70>)
 8007faa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	4a05      	ldr	r2, [pc, #20]	; (8007fc8 <BSP_LED_Init+0x6c>)
 8007fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4619      	mov	r1, r3
 8007fba:	f001 ff17 	bl	8009dec <HAL_GPIO_WritePin>
}
 8007fbe:	bf00      	nop
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	08016af8 	.word	0x08016af8
 8007fcc:	2000000c 	.word	0x2000000c

08007fd0 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	4a07      	ldr	r2, [pc, #28]	; (8007ffc <BSP_LED_On+0x2c>)
 8007fde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	4a06      	ldr	r2, [pc, #24]	; (8008000 <BSP_LED_On+0x30>)
 8007fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fea:	2201      	movs	r2, #1
 8007fec:	4619      	mov	r1, r3
 8007fee:	f001 fefd 	bl	8009dec <HAL_GPIO_WritePin>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	2000000c 	.word	0x2000000c
 8008000:	08016af8 	.word	0x08016af8

08008004 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	4a07      	ldr	r2, [pc, #28]	; (8008030 <BSP_LED_Toggle+0x2c>)
 8008012:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	4906      	ldr	r1, [pc, #24]	; (8008034 <BSP_LED_Toggle+0x30>)
 800801a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f001 fefb 	bl	8009e1c <HAL_GPIO_TogglePin>
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	2000000c 	.word	0x2000000c
 8008034:	08016af8 	.word	0x08016af8

08008038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008042:	4b0c      	ldr	r3, [pc, #48]	; (8008074 <HAL_Init+0x3c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a0b      	ldr	r2, [pc, #44]	; (8008074 <HAL_Init+0x3c>)
 8008048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800804e:	2003      	movs	r0, #3
 8008050:	f001 fb8a 	bl	8009768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008054:	2000      	movs	r0, #0
 8008056:	f000 f80f 	bl	8008078 <HAL_InitTick>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	71fb      	strb	r3, [r7, #7]
 8008064:	e001      	b.n	800806a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008066:	f7ff fb83 	bl	8007770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800806a:	79fb      	ldrb	r3, [r7, #7]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	58004000 	.word	0x58004000

08008078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <HAL_InitTick+0x6c>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d024      	beq.n	80080d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800808c:	f004 fb98 	bl	800c7c0 <HAL_RCC_GetHCLKFreq>
 8008090:	4602      	mov	r2, r0
 8008092:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <HAL_InitTick+0x6c>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800809c:	fbb3 f3f1 	udiv	r3, r3, r1
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fb92 	bl	80097ce <HAL_SYSTICK_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10f      	bne.n	80080d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b0f      	cmp	r3, #15
 80080b4:	d809      	bhi.n	80080ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80080b6:	2200      	movs	r2, #0
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080be:	f001 fb5e 	bl	800977e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80080c2:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <HAL_InitTick+0x70>)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e007      	b.n	80080da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
 80080ce:	e004      	b.n	80080da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]
 80080d4:	e001      	b.n	80080da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	2000001c 	.word	0x2000001c
 80080e8:	20000018 	.word	0x20000018

080080ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <HAL_IncTick+0x20>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <HAL_IncTick+0x24>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4413      	add	r3, r2
 80080fc:	4a04      	ldr	r2, [pc, #16]	; (8008110 <HAL_IncTick+0x24>)
 80080fe:	6013      	str	r3, [r2, #0]
}
 8008100:	bf00      	nop
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	2000001c 	.word	0x2000001c
 8008110:	20000594 	.word	0x20000594

08008114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
  return uwTick;
 8008118:	4b03      	ldr	r3, [pc, #12]	; (8008128 <HAL_GetTick+0x14>)
 800811a:	681b      	ldr	r3, [r3, #0]
}
 800811c:	4618      	mov	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20000594 	.word	0x20000594

0800812c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8008130:	4b03      	ldr	r3, [pc, #12]	; (8008140 <HAL_GetTickPrio+0x14>)
 8008132:	681b      	ldr	r3, [r3, #0]
}
 8008134:	4618      	mov	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000018 	.word	0x20000018

08008144 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8008148:	4b03      	ldr	r3, [pc, #12]	; (8008158 <HAL_GetTickFreq+0x14>)
 800814a:	781b      	ldrb	r3, [r3, #0]
}
 800814c:	4618      	mov	r0, r3
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	2000001c 	.word	0x2000001c

0800815c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	609a      	str	r2, [r3, #8]
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3360      	adds	r3, #96	; 0x60
 80081d6:	461a      	mov	r2, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	4b08      	ldr	r3, [pc, #32]	; (8008208 <LL_ADC_SetOffset+0x44>)
 80081e6:	4013      	ands	r3, r2
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	4313      	orrs	r3, r2
 80081f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80081fc:	bf00      	nop
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	03fff000 	.word	0x03fff000

0800820c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3360      	adds	r3, #96	; 0x60
 800821a:	461a      	mov	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3360      	adds	r3, #96	; 0x60
 8008248:	461a      	mov	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	431a      	orrs	r2, r3
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008286:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3330      	adds	r3, #48	; 0x30
 80082a4:	461a      	mov	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	0a1b      	lsrs	r3, r3, #8
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	f003 030c 	and.w	r3, r3, #12
 80082b0:	4413      	add	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f003 031f 	and.w	r3, r3, #31
 80082be:	211f      	movs	r1, #31
 80082c0:	fa01 f303 	lsl.w	r3, r1, r3
 80082c4:	43db      	mvns	r3, r3
 80082c6:	401a      	ands	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	0e9b      	lsrs	r3, r3, #26
 80082cc:	f003 011f 	and.w	r1, r3, #31
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f003 031f 	and.w	r3, r3, #31
 80082d6:	fa01 f303 	lsl.w	r3, r1, r3
 80082da:	431a      	orrs	r2, r3
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80082e0:	bf00      	nop
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800832e:	b480      	push	{r7}
 8008330:	b087      	sub	sp, #28
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3314      	adds	r3, #20
 800833e:	461a      	mov	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	0e5b      	lsrs	r3, r3, #25
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	4413      	add	r3, r2
 800834c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	0d1b      	lsrs	r3, r3, #20
 8008356:	f003 031f 	and.w	r3, r3, #31
 800835a:	2107      	movs	r1, #7
 800835c:	fa01 f303 	lsl.w	r3, r1, r3
 8008360:	43db      	mvns	r3, r3
 8008362:	401a      	ands	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	0d1b      	lsrs	r3, r3, #20
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	431a      	orrs	r2, r3
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008378:	bf00      	nop
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800839c:	43db      	mvns	r3, r3
 800839e:	401a      	ands	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f003 0318 	and.w	r3, r3, #24
 80083a6:	4908      	ldr	r1, [pc, #32]	; (80083c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80083a8:	40d9      	lsrs	r1, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	400b      	ands	r3, r1
 80083ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083b2:	431a      	orrs	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80083ba:	bf00      	nop
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	0007ffff 	.word	0x0007ffff

080083cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80083dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6093      	str	r3, [r2, #8]
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008404:	d101      	bne.n	800840a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800842c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008454:	d101      	bne.n	800845a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800847c:	f043 0201 	orr.w	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <LL_ADC_IsEnabled+0x18>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e000      	b.n	80084aa <LL_ADC_IsEnabled+0x1a>
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084ca:	f043 0204 	orr.w	r2, r3, #4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d101      	bne.n	80084f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b08      	cmp	r3, #8
 8008516:	d101      	bne.n	800851c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008518:	2301      	movs	r3, #1
 800851a:	e000      	b.n	800851e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8008538:	2300      	movs	r3, #0
 800853a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800853c:	2300      	movs	r3, #0
 800853e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e12e      	b.n	80087a8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008554:	2b00      	cmp	r3, #0
 8008556:	d109      	bne.n	800856c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff f919 	bl	8007790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff ff3d 	bl	80083f0 <LL_ADC_IsDeepPowerDownEnabled>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff ff23 	bl	80083cc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff ff58 	bl	8008440 <LL_ADC_IsInternalRegulatorEnabled>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d115      	bne.n	80085c2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff ff3c 	bl	8008418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80085a0:	4b83      	ldr	r3, [pc, #524]	; (80087b0 <HAL_ADC_Init+0x284>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	099b      	lsrs	r3, r3, #6
 80085a6:	4a83      	ldr	r2, [pc, #524]	; (80087b4 <HAL_ADC_Init+0x288>)
 80085a8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ac:	099b      	lsrs	r3, r3, #6
 80085ae:	3301      	adds	r3, #1
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085b4:	e002      	b.n	80085bc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f9      	bne.n	80085b6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff ff3a 	bl	8008440 <LL_ADC_IsInternalRegulatorEnabled>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10d      	bne.n	80085ee <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d6:	f043 0210 	orr.w	r2, r3, #16
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e2:	f043 0201 	orr.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7ff ff73 	bl	80084de <LL_ADC_REG_IsConversionOngoing>
 80085f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 80c7 	bne.w	8008796 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f040 80c3 	bne.w	8008796 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008614:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008618:	f043 0202 	orr.w	r2, r3, #2
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff ff33 	bl	8008490 <LL_ADC_IsEnabled>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10b      	bne.n	8008648 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008630:	4861      	ldr	r0, [pc, #388]	; (80087b8 <HAL_ADC_Init+0x28c>)
 8008632:	f7ff ff2d 	bl	8008490 <LL_ADC_IsEnabled>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	4619      	mov	r1, r3
 8008642:	485e      	ldr	r0, [pc, #376]	; (80087bc <HAL_ADC_Init+0x290>)
 8008644:	f7ff fd8a 	bl	800815c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7e5b      	ldrb	r3, [r3, #25]
 800864c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008652:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008658:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800865e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008666:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8008668:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	4313      	orrs	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d106      	bne.n	8008688 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	3b01      	subs	r3, #1
 8008680:	045b      	lsls	r3, r3, #17
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	4313      	orrs	r3, r2
 8008686:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008694:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	4b45      	ldr	r3, [pc, #276]	; (80087c0 <HAL_ADC_Init+0x294>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6812      	ldr	r2, [r2, #0]
 80086b2:	69b9      	ldr	r1, [r7, #24]
 80086b4:	430b      	orrs	r3, r1
 80086b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff ff0e 	bl	80084de <LL_ADC_REG_IsConversionOngoing>
 80086c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff ff1b 	bl	8008504 <LL_ADC_INJ_IsConversionOngoing>
 80086ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d13d      	bne.n	8008752 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d13a      	bne.n	8008752 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80086e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80086ea:	4313      	orrs	r3, r2
 80086ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f8:	f023 0302 	bic.w	r3, r3, #2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6812      	ldr	r2, [r2, #0]
 8008700:	69b9      	ldr	r1, [r7, #24]
 8008702:	430b      	orrs	r3, r1
 8008704:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800870c:	2b01      	cmp	r3, #1
 800870e:	d118      	bne.n	8008742 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800871a:	f023 0304 	bic.w	r3, r3, #4
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008726:	4311      	orrs	r1, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800872c:	4311      	orrs	r1, r2
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008732:	430a      	orrs	r2, r1
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	611a      	str	r2, [r3, #16]
 8008740:	e007      	b.n	8008752 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 0201 	bic.w	r2, r2, #1
 8008750:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d10c      	bne.n	8008774 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	f023 010f 	bic.w	r1, r3, #15
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	1e5a      	subs	r2, r3, #1
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	631a      	str	r2, [r3, #48]	; 0x30
 8008772:	e007      	b.n	8008784 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 020f 	bic.w	r2, r2, #15
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008788:	f023 0303 	bic.w	r3, r3, #3
 800878c:	f043 0201 	orr.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	655a      	str	r2, [r3, #84]	; 0x54
 8008794:	e007      	b.n	80087a6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879a:	f043 0210 	orr.w	r2, r3, #16
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20000008 	.word	0x20000008
 80087b4:	053e2d63 	.word	0x053e2d63
 80087b8:	50040000 	.word	0x50040000
 80087bc:	50040300 	.word	0x50040300
 80087c0:	fff0c007 	.word	0xfff0c007

080087c4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff fe84 	bl	80084de <LL_ADC_REG_IsConversionOngoing>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d169      	bne.n	80088b0 <HAL_ADC_Start_IT+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_ADC_Start_IT+0x26>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e065      	b.n	80088b6 <HAL_ADC_Start_IT+0xf2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fe00 	bl	80093f8 <ADC_Enable>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d151      	bne.n	80088a6 <HAL_ADC_Start_IT+0xe2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008806:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800880a:	f023 0301 	bic.w	r3, r3, #1
 800880e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d006      	beq.n	8008830 <HAL_ADC_Start_IT+0x6c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008826:	f023 0206 	bic.w	r2, r3, #6
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	659a      	str	r2, [r3, #88]	; 0x58
 800882e:	e002      	b.n	8008836 <HAL_ADC_Start_IT+0x72>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	221c      	movs	r2, #28
 800883c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 021c 	bic.w	r2, r2, #28
 8008854:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	2b08      	cmp	r3, #8
 800885c:	d108      	bne.n	8008870 <HAL_ADC_Start_IT+0xac>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f042 0208 	orr.w	r2, r2, #8
 800886c:	605a      	str	r2, [r3, #4]
          break;
 800886e:	e008      	b.n	8008882 <HAL_ADC_Start_IT+0xbe>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0204 	orr.w	r2, r2, #4
 800887e:	605a      	str	r2, [r3, #4]
          break;
 8008880:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008886:	2b00      	cmp	r3, #0
 8008888:	d107      	bne.n	800889a <HAL_ADC_Start_IT+0xd6>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0210 	orr.w	r2, r2, #16
 8008898:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7ff fe09 	bl	80084b6 <LL_ADC_REG_StartConversion>
 80088a4:	e006      	b.n	80088b4 <HAL_ADC_Start_IT+0xf0>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80088ae:	e001      	b.n	80088b4 <HAL_ADC_Start_IT+0xf0>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80088b0:	2302      	movs	r3, #2
 80088b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d017      	beq.n	800892e <HAL_ADC_IRQHandler+0x56>
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d012      	beq.n	800892e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	2b00      	cmp	r3, #0
 8008912:	d105      	bne.n	8008920 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008918:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fe0b 	bl	800953c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2202      	movs	r2, #2
 800892c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <HAL_ADC_IRQHandler+0x6a>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008948:	2b00      	cmp	r3, #0
 800894a:	d05d      	beq.n	8008a08 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	2b00      	cmp	r3, #0
 8008954:	d058      	beq.n	8008a08 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	2b00      	cmp	r3, #0
 8008960:	d105      	bne.n	800896e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008966:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff fc7b 	bl	800826e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d03d      	beq.n	80089fa <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800898c:	d035      	beq.n	80089fa <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b08      	cmp	r3, #8
 800899a:	d12e      	bne.n	80089fa <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff fd9c 	bl	80084de <LL_ADC_REG_IsConversionOngoing>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d11a      	bne.n	80089e2 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 020c 	bic.w	r2, r2, #12
 80089ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d112      	bne.n	80089fa <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d8:	f043 0201 	orr.w	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	655a      	str	r2, [r3, #84]	; 0x54
 80089e0:	e00b      	b.n	80089fa <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e6:	f043 0210 	orr.w	r2, r3, #16
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f2:	f043 0201 	orr.w	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fe fe02 	bl	8007604 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	220c      	movs	r2, #12
 8008a06:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d004      	beq.n	8008a1c <HAL_ADC_IRQHandler+0x144>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d109      	bne.n	8008a30 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d074      	beq.n	8008b10 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d06f      	beq.n	8008b10 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d105      	bne.n	8008a48 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fc5b 	bl	8008308 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008a52:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fc08 	bl	800826e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008a5e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d049      	beq.n	8008b02 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <HAL_ADC_IRQHandler+0x1b0>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d041      	beq.n	8008b02 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d13c      	bne.n	8008b02 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a92:	2b40      	cmp	r3, #64	; 0x40
 8008a94:	d135      	bne.n	8008b02 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d12e      	bne.n	8008b02 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff fd2b 	bl	8008504 <LL_ADC_INJ_IsConversionOngoing>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d11a      	bne.n	8008aea <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ac2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d112      	bne.n	8008b02 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae0:	f043 0201 	orr.w	r2, r3, #1
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	655a      	str	r2, [r3, #84]	; 0x54
 8008ae8:	e00b      	b.n	8008b02 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f043 0210 	orr.w	r2, r3, #16
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afa:	f043 0201 	orr.w	r2, r3, #1
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fcf2 	bl	80094ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2260      	movs	r2, #96	; 0x60
 8008b0e:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <HAL_ADC_IRQHandler+0x266>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f887 	bl	8008c44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2280      	movs	r2, #128	; 0x80
 8008b3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d012      	beq.n	8008b6e <HAL_ADC_IRQHandler+0x296>
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00d      	beq.n	8008b6e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fcd8 	bl	8009514 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d012      	beq.n	8008b9e <HAL_ADC_IRQHandler+0x2c6>
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00d      	beq.n	8008b9e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fcca 	bl	8009528 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d02b      	beq.n	8008c00 <HAL_ADC_IRQHandler+0x328>
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f003 0310 	and.w	r3, r3, #16
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d026      	beq.n	8008c00 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	e009      	b.n	8008bd4 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fb91 	bl	80082ec <LL_ADC_REG_GetDMATransfer>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10e      	bne.n	8008bf8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bea:	f043 0202 	orr.w	r2, r3, #2
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f830 	bl	8008c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2210      	movs	r2, #16
 8008bfe:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d018      	beq.n	8008c3c <HAL_ADC_IRQHandler+0x364>
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d013      	beq.n	8008c3c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c18:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c24:	f043 0208 	orr.w	r2, r3, #8
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c34:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fc62 	bl	8009500 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8008c3c:	bf00      	nop
 8008c3e:	3720      	adds	r7, #32
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b0b6      	sub	sp, #216	; 0xd8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d101      	bne.n	8008c8e <HAL_ADC_ConfigChannel+0x22>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	e39f      	b.n	80093ce <HAL_ADC_ConfigChannel+0x762>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff fc1f 	bl	80084de <LL_ADC_REG_IsConversionOngoing>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f040 8384 	bne.w	80093b0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6818      	ldr	r0, [r3, #0]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	6859      	ldr	r1, [r3, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f7ff faed 	bl	8008294 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fc0d 	bl	80084de <LL_ADC_REG_IsConversionOngoing>
 8008cc4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fc19 	bl	8008504 <LL_ADC_INJ_IsConversionOngoing>
 8008cd2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008cd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f040 81a6 	bne.w	800902c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f040 81a1 	bne.w	800902c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6819      	ldr	r1, [r3, #0]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f7ff fb19 	bl	800832e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	695a      	ldr	r2, [r3, #20]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	08db      	lsrs	r3, r3, #3
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d00a      	beq.n	8008d34 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	6919      	ldr	r1, [r3, #16]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d2e:	f7ff fa49 	bl	80081c4 <LL_ADC_SetOffset>
 8008d32:	e17b      	b.n	800902c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fa66 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10a      	bne.n	8008d60 <HAL_ADC_ConfigChannel+0xf4>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff fa5b 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008d56:	4603      	mov	r3, r0
 8008d58:	0e9b      	lsrs	r3, r3, #26
 8008d5a:	f003 021f 	and.w	r2, r3, #31
 8008d5e:	e01e      	b.n	8008d9e <HAL_ADC_ConfigChannel+0x132>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2100      	movs	r1, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff fa50 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d76:	fa93 f3a3 	rbit	r3, r3
 8008d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8008d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8008d86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8008d8e:	2320      	movs	r3, #32
 8008d90:	e004      	b.n	8008d9c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8008d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d96:	fab3 f383 	clz	r3, r3
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d105      	bne.n	8008db6 <HAL_ADC_ConfigChannel+0x14a>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	0e9b      	lsrs	r3, r3, #26
 8008db0:	f003 031f 	and.w	r3, r3, #31
 8008db4:	e018      	b.n	8008de8 <HAL_ADC_ConfigChannel+0x17c>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008dc2:	fa93 f3a3 	rbit	r3, r3
 8008dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8008dda:	2320      	movs	r3, #32
 8008ddc:	e004      	b.n	8008de8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8008dde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008de2:	fab3 f383 	clz	r3, r3
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d106      	bne.n	8008dfa <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2200      	movs	r2, #0
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fa1f 	bl	8008238 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2101      	movs	r1, #1
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fa03 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <HAL_ADC_ConfigChannel+0x1ba>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2101      	movs	r1, #1
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff f9f8 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	0e9b      	lsrs	r3, r3, #26
 8008e20:	f003 021f 	and.w	r2, r3, #31
 8008e24:	e01e      	b.n	8008e64 <HAL_ADC_ConfigChannel+0x1f8>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff f9ed 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e3c:	fa93 f3a3 	rbit	r3, r3
 8008e40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008e44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008e4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8008e54:	2320      	movs	r3, #32
 8008e56:	e004      	b.n	8008e62 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8008e58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e5c:	fab3 f383 	clz	r3, r3
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <HAL_ADC_ConfigChannel+0x210>
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	0e9b      	lsrs	r3, r3, #26
 8008e76:	f003 031f 	and.w	r3, r3, #31
 8008e7a:	e018      	b.n	8008eae <HAL_ADC_ConfigChannel+0x242>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e88:	fa93 f3a3 	rbit	r3, r3
 8008e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	e004      	b.n	8008eae <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8008ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ea8:	fab3 f383 	clz	r3, r3
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d106      	bne.n	8008ec0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2101      	movs	r1, #1
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff f9bc 	bl	8008238 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2102      	movs	r1, #2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff f9a0 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10a      	bne.n	8008eec <HAL_ADC_ConfigChannel+0x280>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2102      	movs	r1, #2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff f995 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	0e9b      	lsrs	r3, r3, #26
 8008ee6:	f003 021f 	and.w	r2, r3, #31
 8008eea:	e01e      	b.n	8008f2a <HAL_ADC_ConfigChannel+0x2be>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff f98a 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f02:	fa93 f3a3 	rbit	r3, r3
 8008f06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008f12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8008f1a:	2320      	movs	r3, #32
 8008f1c:	e004      	b.n	8008f28 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008f1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f22:	fab3 f383 	clz	r3, r3
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <HAL_ADC_ConfigChannel+0x2d6>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	0e9b      	lsrs	r3, r3, #26
 8008f3c:	f003 031f 	and.w	r3, r3, #31
 8008f40:	e016      	b.n	8008f70 <HAL_ADC_ConfigChannel+0x304>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f4e:	fa93 f3a3 	rbit	r3, r3
 8008f52:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008f54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8008f62:	2320      	movs	r3, #32
 8008f64:	e004      	b.n	8008f70 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8008f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f6a:	fab3 f383 	clz	r3, r3
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d106      	bne.n	8008f82 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2102      	movs	r1, #2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff f95b 	bl	8008238 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2103      	movs	r1, #3
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff f93f 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <HAL_ADC_ConfigChannel+0x342>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2103      	movs	r1, #3
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff f934 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	0e9b      	lsrs	r3, r3, #26
 8008fa8:	f003 021f 	and.w	r2, r3, #31
 8008fac:	e017      	b.n	8008fde <HAL_ADC_ConfigChannel+0x372>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2103      	movs	r1, #3
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff f929 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc0:	fa93 f3a3 	rbit	r3, r3
 8008fc4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fc8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8008fd0:	2320      	movs	r3, #32
 8008fd2:	e003      	b.n	8008fdc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8008fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd6:	fab3 f383 	clz	r3, r3
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d105      	bne.n	8008ff6 <HAL_ADC_ConfigChannel+0x38a>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	0e9b      	lsrs	r3, r3, #26
 8008ff0:	f003 031f 	and.w	r3, r3, #31
 8008ff4:	e011      	b.n	800901a <HAL_ADC_ConfigChannel+0x3ae>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ffe:	fa93 f3a3 	rbit	r3, r3
 8009002:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009006:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8009008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800900e:	2320      	movs	r3, #32
 8009010:	e003      	b.n	800901a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8009012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009014:	fab3 f383 	clz	r3, r3
 8009018:	b2db      	uxtb	r3, r3
 800901a:	429a      	cmp	r2, r3
 800901c:	d106      	bne.n	800902c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	2103      	movs	r1, #3
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff f906 	bl	8008238 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff fa2d 	bl	8008490 <LL_ADC_IsEnabled>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	f040 81c2 	bne.w	80093c2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	6819      	ldr	r1, [r3, #0]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	461a      	mov	r2, r3
 800904c:	f7ff f99a 	bl	8008384 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	4a8e      	ldr	r2, [pc, #568]	; (8009290 <HAL_ADC_ConfigChannel+0x624>)
 8009056:	4293      	cmp	r3, r2
 8009058:	f040 8130 	bne.w	80092bc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10b      	bne.n	8009084 <HAL_ADC_ConfigChannel+0x418>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	0e9b      	lsrs	r3, r3, #26
 8009072:	3301      	adds	r3, #1
 8009074:	f003 031f 	and.w	r3, r3, #31
 8009078:	2b09      	cmp	r3, #9
 800907a:	bf94      	ite	ls
 800907c:	2301      	movls	r3, #1
 800907e:	2300      	movhi	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	e019      	b.n	80090b8 <HAL_ADC_ConfigChannel+0x44c>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800908c:	fa93 f3a3 	rbit	r3, r3
 8009090:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8009092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009094:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8009096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800909c:	2320      	movs	r3, #32
 800909e:	e003      	b.n	80090a8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80090a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090a2:	fab3 f383 	clz	r3, r3
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	3301      	adds	r3, #1
 80090aa:	f003 031f 	and.w	r3, r3, #31
 80090ae:	2b09      	cmp	r3, #9
 80090b0:	bf94      	ite	ls
 80090b2:	2301      	movls	r3, #1
 80090b4:	2300      	movhi	r3, #0
 80090b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d079      	beq.n	80091b0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d107      	bne.n	80090d8 <HAL_ADC_ConfigChannel+0x46c>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	0e9b      	lsrs	r3, r3, #26
 80090ce:	3301      	adds	r3, #1
 80090d0:	069b      	lsls	r3, r3, #26
 80090d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090d6:	e015      	b.n	8009104 <HAL_ADC_ConfigChannel+0x498>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e0:	fa93 f3a3 	rbit	r3, r3
 80090e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80090e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80090ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80090f0:	2320      	movs	r3, #32
 80090f2:	e003      	b.n	80090fc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80090f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f6:	fab3 f383 	clz	r3, r3
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	3301      	adds	r3, #1
 80090fe:	069b      	lsls	r3, r3, #26
 8009100:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800910c:	2b00      	cmp	r3, #0
 800910e:	d109      	bne.n	8009124 <HAL_ADC_ConfigChannel+0x4b8>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	0e9b      	lsrs	r3, r3, #26
 8009116:	3301      	adds	r3, #1
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	2101      	movs	r1, #1
 800911e:	fa01 f303 	lsl.w	r3, r1, r3
 8009122:	e017      	b.n	8009154 <HAL_ADC_ConfigChannel+0x4e8>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800912a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912c:	fa93 f3a3 	rbit	r3, r3
 8009130:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8009132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009134:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8009136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800913c:	2320      	movs	r3, #32
 800913e:	e003      	b.n	8009148 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8009140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009142:	fab3 f383 	clz	r3, r3
 8009146:	b2db      	uxtb	r3, r3
 8009148:	3301      	adds	r3, #1
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	2101      	movs	r1, #1
 8009150:	fa01 f303 	lsl.w	r3, r1, r3
 8009154:	ea42 0103 	orr.w	r1, r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <HAL_ADC_ConfigChannel+0x50e>
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	0e9b      	lsrs	r3, r3, #26
 800916a:	3301      	adds	r3, #1
 800916c:	f003 021f 	and.w	r2, r3, #31
 8009170:	4613      	mov	r3, r2
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	4413      	add	r3, r2
 8009176:	051b      	lsls	r3, r3, #20
 8009178:	e018      	b.n	80091ac <HAL_ADC_ConfigChannel+0x540>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	fa93 f3a3 	rbit	r3, r3
 8009186:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800918c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009192:	2320      	movs	r3, #32
 8009194:	e003      	b.n	800919e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	fab3 f383 	clz	r3, r3
 800919c:	b2db      	uxtb	r3, r3
 800919e:	3301      	adds	r3, #1
 80091a0:	f003 021f 	and.w	r2, r3, #31
 80091a4:	4613      	mov	r3, r2
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091ac:	430b      	orrs	r3, r1
 80091ae:	e080      	b.n	80092b2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d107      	bne.n	80091cc <HAL_ADC_ConfigChannel+0x560>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	0e9b      	lsrs	r3, r3, #26
 80091c2:	3301      	adds	r3, #1
 80091c4:	069b      	lsls	r3, r3, #26
 80091c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091ca:	e015      	b.n	80091f8 <HAL_ADC_ConfigChannel+0x58c>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	fa93 f3a3 	rbit	r3, r3
 80091d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80091e4:	2320      	movs	r3, #32
 80091e6:	e003      	b.n	80091f0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	fab3 f383 	clz	r3, r3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	3301      	adds	r3, #1
 80091f2:	069b      	lsls	r3, r3, #26
 80091f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <HAL_ADC_ConfigChannel+0x5ac>
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	0e9b      	lsrs	r3, r3, #26
 800920a:	3301      	adds	r3, #1
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	2101      	movs	r1, #1
 8009212:	fa01 f303 	lsl.w	r3, r1, r3
 8009216:	e017      	b.n	8009248 <HAL_ADC_ConfigChannel+0x5dc>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	fa93 f3a3 	rbit	r3, r3
 8009224:	61fb      	str	r3, [r7, #28]
  return result;
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8009230:	2320      	movs	r3, #32
 8009232:	e003      	b.n	800923c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	fab3 f383 	clz	r3, r3
 800923a:	b2db      	uxtb	r3, r3
 800923c:	3301      	adds	r3, #1
 800923e:	f003 031f 	and.w	r3, r3, #31
 8009242:	2101      	movs	r1, #1
 8009244:	fa01 f303 	lsl.w	r3, r1, r3
 8009248:	ea42 0103 	orr.w	r1, r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10d      	bne.n	8009274 <HAL_ADC_ConfigChannel+0x608>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	0e9b      	lsrs	r3, r3, #26
 800925e:	3301      	adds	r3, #1
 8009260:	f003 021f 	and.w	r2, r3, #31
 8009264:	4613      	mov	r3, r2
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	4413      	add	r3, r2
 800926a:	3b1e      	subs	r3, #30
 800926c:	051b      	lsls	r3, r3, #20
 800926e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009272:	e01d      	b.n	80092b0 <HAL_ADC_ConfigChannel+0x644>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	fa93 f3a3 	rbit	r3, r3
 8009280:	613b      	str	r3, [r7, #16]
  return result;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800928c:	2320      	movs	r3, #32
 800928e:	e005      	b.n	800929c <HAL_ADC_ConfigChannel+0x630>
 8009290:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	fab3 f383 	clz	r3, r3
 800929a:	b2db      	uxtb	r3, r3
 800929c:	3301      	adds	r3, #1
 800929e:	f003 021f 	and.w	r2, r3, #31
 80092a2:	4613      	mov	r3, r2
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	3b1e      	subs	r3, #30
 80092aa:	051b      	lsls	r3, r3, #20
 80092ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092b0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092b6:	4619      	mov	r1, r3
 80092b8:	f7ff f839 	bl	800832e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	4b45      	ldr	r3, [pc, #276]	; (80093d8 <HAL_ADC_ConfigChannel+0x76c>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d07c      	beq.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80092c8:	4844      	ldr	r0, [pc, #272]	; (80093dc <HAL_ADC_ConfigChannel+0x770>)
 80092ca:	f7fe ff6d 	bl	80081a8 <LL_ADC_GetCommonPathInternalCh>
 80092ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80092d2:	4843      	ldr	r0, [pc, #268]	; (80093e0 <HAL_ADC_ConfigChannel+0x774>)
 80092d4:	f7ff f8dc 	bl	8008490 <LL_ADC_IsEnabled>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d15e      	bne.n	800939c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a40      	ldr	r2, [pc, #256]	; (80093e4 <HAL_ADC_ConfigChannel+0x778>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d127      	bne.n	8009338 <HAL_ADC_ConfigChannel+0x6cc>
 80092e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d121      	bne.n	8009338 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a39      	ldr	r2, [pc, #228]	; (80093e0 <HAL_ADC_ConfigChannel+0x774>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d161      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80092fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009302:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009306:	4619      	mov	r1, r3
 8009308:	4834      	ldr	r0, [pc, #208]	; (80093dc <HAL_ADC_ConfigChannel+0x770>)
 800930a:	f7fe ff3a 	bl	8008182 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800930e:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <HAL_ADC_ConfigChannel+0x77c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	099b      	lsrs	r3, r3, #6
 8009314:	4a35      	ldr	r2, [pc, #212]	; (80093ec <HAL_ADC_ConfigChannel+0x780>)
 8009316:	fba2 2303 	umull	r2, r3, r2, r3
 800931a:	099b      	lsrs	r3, r3, #6
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	4613      	mov	r3, r2
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009328:	e002      	b.n	8009330 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b01      	subs	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f9      	bne.n	800932a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009336:	e044      	b.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a2c      	ldr	r2, [pc, #176]	; (80093f0 <HAL_ADC_ConfigChannel+0x784>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d113      	bne.n	800936a <HAL_ADC_ConfigChannel+0x6fe>
 8009342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10d      	bne.n	800936a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a23      	ldr	r2, [pc, #140]	; (80093e0 <HAL_ADC_ConfigChannel+0x774>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d134      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800935c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009360:	4619      	mov	r1, r3
 8009362:	481e      	ldr	r0, [pc, #120]	; (80093dc <HAL_ADC_ConfigChannel+0x770>)
 8009364:	f7fe ff0d 	bl	8008182 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009368:	e02b      	b.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a21      	ldr	r2, [pc, #132]	; (80093f4 <HAL_ADC_ConfigChannel+0x788>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d126      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
 8009374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d120      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a16      	ldr	r2, [pc, #88]	; (80093e0 <HAL_ADC_ConfigChannel+0x774>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d11b      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800938a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800938e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009392:	4619      	mov	r1, r3
 8009394:	4811      	ldr	r0, [pc, #68]	; (80093dc <HAL_ADC_ConfigChannel+0x770>)
 8009396:	f7fe fef4 	bl	8008182 <LL_ADC_SetCommonPathInternalCh>
 800939a:	e012      	b.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a0:	f043 0220 	orr.w	r2, r3, #32
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80093ae:	e008      	b.n	80093c2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b4:	f043 0220 	orr.w	r2, r3, #32
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80093ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	37d8      	adds	r7, #216	; 0xd8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	80080000 	.word	0x80080000
 80093dc:	50040300 	.word	0x50040300
 80093e0:	50040000 	.word	0x50040000
 80093e4:	c7520000 	.word	0xc7520000
 80093e8:	20000008 	.word	0x20000008
 80093ec:	053e2d63 	.word	0x053e2d63
 80093f0:	cb840000 	.word	0xcb840000
 80093f4:	80000001 	.word	0x80000001

080093f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009400:	2300      	movs	r3, #0
 8009402:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f7ff f841 	bl	8008490 <LL_ADC_IsEnabled>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d15e      	bne.n	80094d2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689a      	ldr	r2, [r3, #8]
 800941a:	4b30      	ldr	r3, [pc, #192]	; (80094dc <ADC_Enable+0xe4>)
 800941c:	4013      	ands	r3, r2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00d      	beq.n	800943e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009426:	f043 0210 	orr.w	r2, r3, #16
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009432:	f043 0201 	orr.w	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e04a      	b.n	80094d4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff f810 	bl	8008468 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009448:	4825      	ldr	r0, [pc, #148]	; (80094e0 <ADC_Enable+0xe8>)
 800944a:	f7fe fead 	bl	80081a8 <LL_ADC_GetCommonPathInternalCh>
 800944e:	4603      	mov	r3, r0
 8009450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00f      	beq.n	8009478 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009458:	4b22      	ldr	r3, [pc, #136]	; (80094e4 <ADC_Enable+0xec>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	099b      	lsrs	r3, r3, #6
 800945e:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <ADC_Enable+0xf0>)
 8009460:	fba2 2303 	umull	r2, r3, r2, r3
 8009464:	099b      	lsrs	r3, r3, #6
 8009466:	3301      	adds	r3, #1
 8009468:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800946a:	e002      	b.n	8009472 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	3b01      	subs	r3, #1
 8009470:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1f9      	bne.n	800946c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009478:	f7fe fe4c 	bl	8008114 <HAL_GetTick>
 800947c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800947e:	e021      	b.n	80094c4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff f803 	bl	8008490 <LL_ADC_IsEnabled>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d104      	bne.n	800949a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	f7fe ffe7 	bl	8008468 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800949a:	f7fe fe3b 	bl	8008114 <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d90d      	bls.n	80094c4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ac:	f043 0210 	orr.w	r2, r3, #16
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b8:	f043 0201 	orr.w	r2, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e007      	b.n	80094d4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d1d6      	bne.n	8009480 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	8000003f 	.word	0x8000003f
 80094e0:	50040300 	.word	0x50040300
 80094e4:	20000008 	.word	0x20000008
 80094e8:	053e2d63 	.word	0x053e2d63

080094ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f003 0307 	and.w	r3, r3, #7
 800955e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009560:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <__NVIC_SetPriorityGrouping+0x44>)
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800956c:	4013      	ands	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800957c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009582:	4a04      	ldr	r2, [pc, #16]	; (8009594 <__NVIC_SetPriorityGrouping+0x44>)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	60d3      	str	r3, [r2, #12]
}
 8009588:	bf00      	nop
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	e000ed00 	.word	0xe000ed00

08009598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800959c:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <__NVIC_GetPriorityGrouping+0x18>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	0a1b      	lsrs	r3, r3, #8
 80095a2:	f003 0307 	and.w	r3, r3, #7
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	e000ed00 	.word	0xe000ed00

080095b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	db0b      	blt.n	80095de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	f003 021f 	and.w	r2, r3, #31
 80095cc:	4907      	ldr	r1, [pc, #28]	; (80095ec <__NVIC_EnableIRQ+0x38>)
 80095ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	2001      	movs	r0, #1
 80095d6:	fa00 f202 	lsl.w	r2, r0, r2
 80095da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	e000e100 	.word	0xe000e100

080095f0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	db0c      	blt.n	800961c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	f003 021f 	and.w	r2, r3, #31
 8009608:	4907      	ldr	r1, [pc, #28]	; (8009628 <__NVIC_SetPendingIRQ+0x38>)
 800960a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800960e:	095b      	lsrs	r3, r3, #5
 8009610:	2001      	movs	r0, #1
 8009612:	fa00 f202 	lsl.w	r2, r0, r2
 8009616:	3340      	adds	r3, #64	; 0x40
 8009618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	e000e100 	.word	0xe000e100

0800962c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800963a:	2b00      	cmp	r3, #0
 800963c:	db0c      	blt.n	8009658 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800963e:	79fb      	ldrb	r3, [r7, #7]
 8009640:	f003 021f 	and.w	r2, r3, #31
 8009644:	4907      	ldr	r1, [pc, #28]	; (8009664 <__NVIC_ClearPendingIRQ+0x38>)
 8009646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800964a:	095b      	lsrs	r3, r3, #5
 800964c:	2001      	movs	r0, #1
 800964e:	fa00 f202 	lsl.w	r2, r0, r2
 8009652:	3360      	adds	r3, #96	; 0x60
 8009654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	e000e100 	.word	0xe000e100

08009668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	6039      	str	r1, [r7, #0]
 8009672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009678:	2b00      	cmp	r3, #0
 800967a:	db0a      	blt.n	8009692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	b2da      	uxtb	r2, r3
 8009680:	490c      	ldr	r1, [pc, #48]	; (80096b4 <__NVIC_SetPriority+0x4c>)
 8009682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009686:	0112      	lsls	r2, r2, #4
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	440b      	add	r3, r1
 800968c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009690:	e00a      	b.n	80096a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	b2da      	uxtb	r2, r3
 8009696:	4908      	ldr	r1, [pc, #32]	; (80096b8 <__NVIC_SetPriority+0x50>)
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	3b04      	subs	r3, #4
 80096a0:	0112      	lsls	r2, r2, #4
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	440b      	add	r3, r1
 80096a6:	761a      	strb	r2, [r3, #24]
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	e000e100 	.word	0xe000e100
 80096b8:	e000ed00 	.word	0xe000ed00

080096bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80096bc:	b480      	push	{r7}
 80096be:	b089      	sub	sp, #36	; 0x24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	f1c3 0307 	rsb	r3, r3, #7
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	bf28      	it	cs
 80096da:	2304      	movcs	r3, #4
 80096dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	3304      	adds	r3, #4
 80096e2:	2b06      	cmp	r3, #6
 80096e4:	d902      	bls.n	80096ec <NVIC_EncodePriority+0x30>
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3b03      	subs	r3, #3
 80096ea:	e000      	b.n	80096ee <NVIC_EncodePriority+0x32>
 80096ec:	2300      	movs	r3, #0
 80096ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	fa02 f303 	lsl.w	r3, r2, r3
 80096fa:	43da      	mvns	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	401a      	ands	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	fa01 f303 	lsl.w	r3, r1, r3
 800970e:	43d9      	mvns	r1, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009714:	4313      	orrs	r3, r2
         );
}
 8009716:	4618      	mov	r0, r3
 8009718:	3724      	adds	r7, #36	; 0x24
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3b01      	subs	r3, #1
 8009730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009734:	d301      	bcc.n	800973a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009736:	2301      	movs	r3, #1
 8009738:	e00f      	b.n	800975a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800973a:	4a0a      	ldr	r2, [pc, #40]	; (8009764 <SysTick_Config+0x40>)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3b01      	subs	r3, #1
 8009740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009742:	210f      	movs	r1, #15
 8009744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009748:	f7ff ff8e 	bl	8009668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800974c:	4b05      	ldr	r3, [pc, #20]	; (8009764 <SysTick_Config+0x40>)
 800974e:	2200      	movs	r2, #0
 8009750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009752:	4b04      	ldr	r3, [pc, #16]	; (8009764 <SysTick_Config+0x40>)
 8009754:	2207      	movs	r2, #7
 8009756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	e000e010 	.word	0xe000e010

08009768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff feed 	bl	8009550 <__NVIC_SetPriorityGrouping>
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b086      	sub	sp, #24
 8009782:	af00      	add	r7, sp, #0
 8009784:	4603      	mov	r3, r0
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	607a      	str	r2, [r7, #4]
 800978a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800978c:	f7ff ff04 	bl	8009598 <__NVIC_GetPriorityGrouping>
 8009790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	6978      	ldr	r0, [r7, #20]
 8009798:	f7ff ff90 	bl	80096bc <NVIC_EncodePriority>
 800979c:	4602      	mov	r2, r0
 800979e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097a2:	4611      	mov	r1, r2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff ff5f 	bl	8009668 <__NVIC_SetPriority>
}
 80097aa:	bf00      	nop
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	4603      	mov	r3, r0
 80097ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80097bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff fef7 	bl	80095b4 <__NVIC_EnableIRQ>
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff ffa4 	bl	8009724 <SysTick_Config>
 80097dc:	4603      	mov	r3, r0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	4603      	mov	r3, r0
 80097ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80097f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7ff fefb 	bl	80095f0 <__NVIC_SetPendingIRQ>
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	4603      	mov	r3, r0
 800980a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800980c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff ff0b 	bl	800962c <__NVIC_ClearPendingIRQ>
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b086      	sub	sp, #24
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009836:	2b01      	cmp	r3, #1
 8009838:	d101      	bne.n	800983e <HAL_DMA_Start_IT+0x20>
 800983a:	2302      	movs	r3, #2
 800983c:	e066      	b.n	800990c <HAL_DMA_Start_IT+0xee>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b01      	cmp	r3, #1
 8009850:	d155      	bne.n	80098fe <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2202      	movs	r2, #2
 8009856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0201 	bic.w	r2, r2, #1
 800986e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 f90a 	bl	8009a90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	2b00      	cmp	r3, #0
 8009882:	d008      	beq.n	8009896 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 020e 	orr.w	r2, r2, #14
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	e00f      	b.n	80098b6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0204 	bic.w	r2, r2, #4
 80098a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f042 020a 	orr.w	r2, r2, #10
 80098b4:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098d2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d007      	beq.n	80098ec <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098ea:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	e005      	b.n	800990a <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009906:	2302      	movs	r3, #2
 8009908:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800990a:	7dfb      	ldrb	r3, [r7, #23]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e04f      	b.n	80099c6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b02      	cmp	r3, #2
 8009930:	d008      	beq.n	8009944 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2204      	movs	r2, #4
 8009936:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e040      	b.n	80099c6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f022 020e 	bic.w	r2, r2, #14
 8009952:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800995e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009962:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f022 0201 	bic.w	r2, r2, #1
 8009972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	f003 021c 	and.w	r2, r3, #28
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009980:	2101      	movs	r1, #1
 8009982:	fa01 f202 	lsl.w	r2, r1, r2
 8009986:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009990:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00c      	beq.n	80099b4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80099b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d005      	beq.n	80099f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2204      	movs	r2, #4
 80099ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	73fb      	strb	r3, [r7, #15]
 80099f4:	e047      	b.n	8009a86 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 020e 	bic.w	r2, r2, #14
 8009a04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0201 	bic.w	r2, r2, #1
 8009a14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2a:	f003 021c 	and.w	r2, r3, #28
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	2101      	movs	r1, #1
 8009a34:	fa01 f202 	lsl.w	r2, r1, r2
 8009a38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a42:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00c      	beq.n	8009a66 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009a64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	4798      	blx	r3
    }
  }
  return status;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009aa6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d004      	beq.n	8009aba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009ab8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abe:	f003 021c 	and.w	r2, r3, #28
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8009acc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2b10      	cmp	r3, #16
 8009adc:	d108      	bne.n	8009af0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009aee:	e007      	b.n	8009b00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]
}
 8009b00:	bf00      	nop
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b1a:	e14c      	b.n	8009db6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	2101      	movs	r1, #1
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	fa01 f303 	lsl.w	r3, r1, r3
 8009b28:	4013      	ands	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 813e 	beq.w	8009db0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d005      	beq.n	8009b4c <HAL_GPIO_Init+0x40>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d130      	bne.n	8009bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	2203      	movs	r2, #3
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	43db      	mvns	r3, r3
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4013      	ands	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	68da      	ldr	r2, [r3, #12]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b82:	2201      	movs	r2, #1
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8a:	43db      	mvns	r3, r3
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	091b      	lsrs	r3, r3, #4
 8009b98:	f003 0201 	and.w	r2, r3, #1
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d017      	beq.n	8009bea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bca:	43db      	mvns	r3, r3
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	fa02 f303 	lsl.w	r3, r2, r3
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d123      	bne.n	8009c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	08da      	lsrs	r2, r3, #3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3208      	adds	r2, #8
 8009bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	220f      	movs	r2, #15
 8009c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c12:	43db      	mvns	r3, r3
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4013      	ands	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	691a      	ldr	r2, [r3, #16]
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	08da      	lsrs	r2, r3, #3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3208      	adds	r2, #8
 8009c38:	6939      	ldr	r1, [r7, #16]
 8009c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	2203      	movs	r2, #3
 8009c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4e:	43db      	mvns	r3, r3
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	4013      	ands	r3, r2
 8009c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f003 0203 	and.w	r2, r3, #3
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 8098 	beq.w	8009db0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009c80:	4a54      	ldr	r2, [pc, #336]	; (8009dd4 <HAL_GPIO_Init+0x2c8>)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	089b      	lsrs	r3, r3, #2
 8009c86:	3302      	adds	r3, #2
 8009c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	220f      	movs	r2, #15
 8009c98:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009caa:	d019      	beq.n	8009ce0 <HAL_GPIO_Init+0x1d4>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a4a      	ldr	r2, [pc, #296]	; (8009dd8 <HAL_GPIO_Init+0x2cc>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d013      	beq.n	8009cdc <HAL_GPIO_Init+0x1d0>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a49      	ldr	r2, [pc, #292]	; (8009ddc <HAL_GPIO_Init+0x2d0>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d00d      	beq.n	8009cd8 <HAL_GPIO_Init+0x1cc>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a48      	ldr	r2, [pc, #288]	; (8009de0 <HAL_GPIO_Init+0x2d4>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d007      	beq.n	8009cd4 <HAL_GPIO_Init+0x1c8>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a47      	ldr	r2, [pc, #284]	; (8009de4 <HAL_GPIO_Init+0x2d8>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d101      	bne.n	8009cd0 <HAL_GPIO_Init+0x1c4>
 8009ccc:	2304      	movs	r3, #4
 8009cce:	e008      	b.n	8009ce2 <HAL_GPIO_Init+0x1d6>
 8009cd0:	2307      	movs	r3, #7
 8009cd2:	e006      	b.n	8009ce2 <HAL_GPIO_Init+0x1d6>
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e004      	b.n	8009ce2 <HAL_GPIO_Init+0x1d6>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	e002      	b.n	8009ce2 <HAL_GPIO_Init+0x1d6>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <HAL_GPIO_Init+0x1d6>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	f002 0203 	and.w	r2, r2, #3
 8009ce8:	0092      	lsls	r2, r2, #2
 8009cea:	4093      	lsls	r3, r2
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009cf2:	4938      	ldr	r1, [pc, #224]	; (8009dd4 <HAL_GPIO_Init+0x2c8>)
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	089b      	lsrs	r3, r3, #2
 8009cf8:	3302      	adds	r3, #2
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d00:	4b39      	ldr	r3, [pc, #228]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009d24:	4a30      	ldr	r2, [pc, #192]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d2a:	4b2f      	ldr	r3, [pc, #188]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	43db      	mvns	r3, r3
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4013      	ands	r3, r2
 8009d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009d4e:	4a26      	ldr	r2, [pc, #152]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009d54:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	4013      	ands	r3, r2
 8009d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009d7a:	4a1b      	ldr	r2, [pc, #108]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8009d82:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	43db      	mvns	r3, r3
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4013      	ands	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009da8:	4a0f      	ldr	r2, [pc, #60]	; (8009de8 <HAL_GPIO_Init+0x2dc>)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	3301      	adds	r3, #1
 8009db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f47f aeab 	bne.w	8009b1c <HAL_GPIO_Init+0x10>
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	bf00      	nop
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	40010000 	.word	0x40010000
 8009dd8:	48000400 	.word	0x48000400
 8009ddc:	48000800 	.word	0x48000800
 8009de0:	48000c00 	.word	0x48000c00
 8009de4:	48001000 	.word	0x48001000
 8009de8:	58000800 	.word	0x58000800

08009dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	807b      	strh	r3, [r7, #2]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009dfc:	787b      	ldrb	r3, [r7, #1]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009e02:	887a      	ldrh	r2, [r7, #2]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009e08:	e002      	b.n	8009e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009e0a:	887a      	ldrh	r2, [r7, #2]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e2e:	887a      	ldrh	r2, [r7, #2]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4013      	ands	r3, r2
 8009e34:	041a      	lsls	r2, r3, #16
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	43d9      	mvns	r1, r3
 8009e3a:	887b      	ldrh	r3, [r7, #2]
 8009e3c:	400b      	ands	r3, r1
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	619a      	str	r2, [r3, #24]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009e56:	4b0a      	ldr	r3, [pc, #40]	; (8009e80 <HAL_HSEM_IRQHandler+0x30>)
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009e5c:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <HAL_HSEM_IRQHandler+0x30>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	43db      	mvns	r3, r3
 8009e64:	4906      	ldr	r1, [pc, #24]	; (8009e80 <HAL_HSEM_IRQHandler+0x30>)
 8009e66:	4013      	ands	r3, r2
 8009e68:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009e6a:	4a05      	ldr	r2, [pc, #20]	; (8009e80 <HAL_HSEM_IRQHandler+0x30>)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f807 	bl	8009e84 <HAL_HSEM_FreeCallback>
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	58001500 	.word	0x58001500

08009e84 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d01e      	beq.n	8009ee8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009eaa:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <HAL_IPCC_Init+0x60>)
 8009eac:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d102      	bne.n	8009ec0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7fd fc9c 	bl	80077f8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009ec0:	68b8      	ldr	r0, [r7, #8]
 8009ec2:	f000 f85b 	bl	8009f7c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f82c 	bl	8009f30 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009ee6:	e001      	b.n	8009eec <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	58000c00 	.word	0x58000c00

08009efc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	4613      	mov	r3, r2
 8009f08:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009f0a:	bf00      	nop
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b085      	sub	sp, #20
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	4613      	mov	r3, r2
 8009f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e00f      	b.n	8009f5e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	4a0b      	ldr	r2, [pc, #44]	; (8009f74 <IPCC_SetDefaultCallbacks+0x44>)
 8009f48:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3306      	adds	r3, #6
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	4a08      	ldr	r2, [pc, #32]	; (8009f78 <IPCC_SetDefaultCallbacks+0x48>)
 8009f56:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	d9ec      	bls.n	8009f3e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	08009efd 	.word	0x08009efd
 8009f78:	08009f17 	.word	0x08009f17

08009f7c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8009f90:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	223f      	movs	r2, #63	; 0x3f
 8009f96:	609a      	str	r2, [r3, #8]
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e0c0      	b.n	800a138 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d106      	bne.n	8009fd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7fd fcb4 	bl	8007938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f004 fcd7 	bl	800e990 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]
 8009fe6:	e03e      	b.n	800a066 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009fe8:	7bfa      	ldrb	r2, [r7, #15]
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	440b      	add	r3, r1
 8009ff6:	3311      	adds	r3, #17
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009ffc:	7bfa      	ldrb	r2, [r7, #15]
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	440b      	add	r3, r1
 800a00a:	3310      	adds	r3, #16
 800a00c:	7bfa      	ldrb	r2, [r7, #15]
 800a00e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a010:	7bfa      	ldrb	r2, [r7, #15]
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	440b      	add	r3, r1
 800a01e:	3313      	adds	r3, #19
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a024:	7bfa      	ldrb	r2, [r7, #15]
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	440b      	add	r3, r1
 800a032:	3320      	adds	r3, #32
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a038:	7bfa      	ldrb	r2, [r7, #15]
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	440b      	add	r3, r1
 800a046:	3324      	adds	r3, #36	; 0x24
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	440b      	add	r3, r1
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	3301      	adds	r3, #1
 800a064:	73fb      	strb	r3, [r7, #15]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	791b      	ldrb	r3, [r3, #4]
 800a06a:	7bfa      	ldrb	r2, [r7, #15]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d3bb      	bcc.n	8009fe8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]
 800a074:	e044      	b.n	800a100 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a076:	7bfa      	ldrb	r2, [r7, #15]
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	4613      	mov	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	00db      	lsls	r3, r3, #3
 800a082:	440b      	add	r3, r1
 800a084:	f203 1351 	addw	r3, r3, #337	; 0x151
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a08c:	7bfa      	ldrb	r2, [r7, #15]
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	440b      	add	r3, r1
 800a09a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a09e:	7bfa      	ldrb	r2, [r7, #15]
 800a0a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a0a2:	7bfa      	ldrb	r2, [r7, #15]
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	440b      	add	r3, r1
 800a0b0:	f203 1353 	addw	r3, r3, #339	; 0x153
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a0b8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	440b      	add	r3, r1
 800a0c6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a0ce:	7bfa      	ldrb	r2, [r7, #15]
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	440b      	add	r3, r1
 800a0dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a0e4:	7bfa      	ldrb	r2, [r7, #15]
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	440b      	add	r3, r1
 800a0f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	73fb      	strb	r3, [r7, #15]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	791b      	ldrb	r3, [r3, #4]
 800a104:	7bfa      	ldrb	r2, [r7, #15]
 800a106:	429a      	cmp	r2, r3
 800a108:	d3b5      	bcc.n	800a076 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3304      	adds	r3, #4
 800a112:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a116:	f004 fc56 	bl	800e9c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7a9b      	ldrb	r3, [r3, #10]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d102      	bne.n	800a136 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 fa5b 	bl	800b5ec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f006 f81d 	bl	801018c <USB_ReadInterrupts>
 800a152:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f983 	bl	800a46a <PCD_EP_ISR_Handler>

    return;
 800a164:	e110      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d013      	beq.n	800a198 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a178:	b29a      	uxth	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a182:	b292      	uxth	r2, r2
 800a184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f92c 	bl	800a3e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a18e:	2100      	movs	r1, #0
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f946 	bl	800a422 <HAL_PCD_SetAddress>

    return;
 800a196:	e0f7      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00c      	beq.n	800a1bc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a1b4:	b292      	uxth	r2, r2
 800a1b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a1ba:	e0e5      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00c      	beq.n	800a1e0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1d8:	b292      	uxth	r2, r2
 800a1da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a1de:	e0d3      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d034      	beq.n	800a254 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 0204 	bic.w	r2, r2, #4
 800a1fc:	b292      	uxth	r2, r2
 800a1fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f022 0208 	bic.w	r2, r2, #8
 800a214:	b292      	uxth	r2, r2
 800a216:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a220:	2b01      	cmp	r3, #1
 800a222:	d107      	bne.n	800a234 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a22c:	2100      	movs	r1, #0
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 fa06 	bl	800b640 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f8ea 	bl	800a40e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a242:	b29a      	uxth	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a24c:	b292      	uxth	r2, r2
 800a24e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a252:	e099      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d027      	beq.n	800a2ae <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f042 0208 	orr.w	r2, r2, #8
 800a270:	b292      	uxth	r2, r2
 800a272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a27e:	b29a      	uxth	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a288:	b292      	uxth	r2, r2
 800a28a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a296:	b29a      	uxth	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 0204 	orr.w	r2, r2, #4
 800a2a0:	b292      	uxth	r2, r2
 800a2a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f8a7 	bl	800a3fa <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a2ac:	e06c      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d040      	beq.n	800a33a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2ca:	b292      	uxth	r2, r2
 800a2cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d12b      	bne.n	800a332 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f042 0204 	orr.w	r2, r2, #4
 800a2ec:	b292      	uxth	r2, r2
 800a2ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f042 0208 	orr.w	r2, r2, #8
 800a304:	b292      	uxth	r2, r2
 800a306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	089b      	lsrs	r3, r3, #2
 800a31e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a328:	2101      	movs	r1, #1
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f001 f988 	bl	800b640 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a330:	e02a      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f861 	bl	800a3fa <HAL_PCD_SuspendCallback>
    return;
 800a338:	e026      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00f      	beq.n	800a364 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a356:	b292      	uxth	r2, r2
 800a358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f838 	bl	800a3d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a362:	e011      	b.n	800a388 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00c      	beq.n	800a388 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a376:	b29a      	uxth	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a380:	b292      	uxth	r2, r2
 800a382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a386:	bf00      	nop
  }
}
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a38e:	b480      	push	{r7}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	460b      	mov	r3, r1
 800a398:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800a402:	bf00      	nop
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a434:	2b01      	cmp	r3, #1
 800a436:	d101      	bne.n	800a43c <HAL_PCD_SetAddress+0x1a>
 800a438:	2302      	movs	r3, #2
 800a43a:	e012      	b.n	800a462 <HAL_PCD_SetAddress+0x40>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	78fa      	ldrb	r2, [r7, #3]
 800a450:	4611      	mov	r1, r2
 800a452:	4618      	mov	r0, r3
 800a454:	f005 fe86 	bl	8010164 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b096      	sub	sp, #88	; 0x58
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a472:	e3ae      	b.n	800abd2 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a47c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a484:	b2db      	uxtb	r3, r3
 800a486:	f003 030f 	and.w	r3, r3, #15
 800a48a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a48e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a492:	2b00      	cmp	r3, #0
 800a494:	f040 8170 	bne.w	800a778 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d14d      	bne.n	800a540 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a4b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4b4:	81fb      	strh	r3, [r7, #14]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	89fb      	ldrh	r3, [r7, #14]
 800a4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3310      	adds	r3, #16
 800a4cc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	4413      	add	r3, r2
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6812      	ldr	r2, [r2, #0]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a4f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	441a      	add	r2, r3
 800a500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a502:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a504:	2100      	movs	r1, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff ff4d 	bl	800a3a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	7b1b      	ldrb	r3, [r3, #12]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 835d 	beq.w	800abd2 <PCD_EP_ISR_Handler+0x768>
 800a518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 8358 	bne.w	800abd2 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	7b1b      	ldrb	r3, [r3, #12]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	b292      	uxth	r2, r2
 800a534:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	731a      	strb	r2, [r3, #12]
 800a53e:	e348      	b.n	800abd2 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a546:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a552:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d032      	beq.n	800a5c4 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a566:	b29b      	uxth	r3, r3
 800a568:	461a      	mov	r2, r3
 800a56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	4413      	add	r3, r2
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	4413      	add	r3, r2
 800a578:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a584:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800a590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a592:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a596:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f005 fe49 	bl	8010230 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	823b      	strh	r3, [r7, #16]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	8a3a      	ldrh	r2, [r7, #16]
 800a5b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fefe 	bl	800a3be <HAL_PCD_SetupStageCallback>
 800a5c2:	e306      	b.n	800abd2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a5c4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f280 8302 	bge.w	800abd2 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a5da:	4013      	ands	r3, r2
 800a5dc:	83fb      	strh	r3, [r7, #30]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	8bfa      	ldrh	r2, [r7, #30]
 800a5e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5e8:	b292      	uxth	r2, r2
 800a5ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	4413      	add	r3, r2
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	4413      	add	r3, r2
 800a606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a612:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d019      	beq.n	800a650 <PCD_EP_ISR_Handler+0x1e6>
 800a61c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d015      	beq.n	800a650 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a62a:	6959      	ldr	r1, [r3, #20]
 800a62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a62e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a632:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a634:	b29b      	uxth	r3, r3
 800a636:	f005 fdfb 	bl	8010230 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a63c:	695a      	ldr	r2, [r3, #20]
 800a63e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	441a      	add	r2, r3
 800a644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a646:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a648:	2100      	movs	r1, #0
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fe9f 	bl	800a38e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a65a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a65e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a662:	2b00      	cmp	r3, #0
 800a664:	f040 82b5 	bne.w	800abd2 <PCD_EP_ISR_Handler+0x768>
 800a668:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a66c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a670:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a674:	f000 82ad 	beq.w	800abd2 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	61bb      	str	r3, [r7, #24]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a686:	b29b      	uxth	r3, r3
 800a688:	461a      	mov	r2, r3
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	4413      	add	r3, r2
 800a68e:	61bb      	str	r3, [r7, #24]
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	801a      	strh	r2, [r3, #0]
 800a6a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a6ae:	d91d      	bls.n	800a6ec <PCD_EP_ISR_Handler+0x282>
 800a6b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f003 031f 	and.w	r3, r3, #31
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <PCD_EP_ISR_Handler+0x260>
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	029b      	lsls	r3, r3, #10
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	801a      	strh	r2, [r3, #0]
 800a6ea:	e026      	b.n	800a73a <PCD_EP_ISR_Handler+0x2d0>
 800a6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <PCD_EP_ISR_Handler+0x2a0>
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a702:	b29a      	uxth	r2, r3
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	801a      	strh	r2, [r3, #0]
 800a708:	e017      	b.n	800a73a <PCD_EP_ISR_Handler+0x2d0>
 800a70a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	085b      	lsrs	r3, r3, #1
 800a710:	647b      	str	r3, [r7, #68]	; 0x44
 800a712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <PCD_EP_ISR_Handler+0x2ba>
 800a71e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a720:	3301      	adds	r3, #1
 800a722:	647b      	str	r3, [r7, #68]	; 0x44
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	b29a      	uxth	r2, r3
 800a72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	029b      	lsls	r3, r3, #10
 800a730:	b29b      	uxth	r3, r3
 800a732:	4313      	orrs	r3, r2
 800a734:	b29a      	uxth	r2, r3
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74a:	827b      	strh	r3, [r7, #18]
 800a74c:	8a7b      	ldrh	r3, [r7, #18]
 800a74e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a752:	827b      	strh	r3, [r7, #18]
 800a754:	8a7b      	ldrh	r3, [r7, #18]
 800a756:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a75a:	827b      	strh	r3, [r7, #18]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	8a7b      	ldrh	r3, [r7, #18]
 800a762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a76a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a772:	b29b      	uxth	r3, r3
 800a774:	8013      	strh	r3, [r2, #0]
 800a776:	e22c      	b.n	800abd2 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a78c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a790:	2b00      	cmp	r3, #0
 800a792:	f280 80f6 	bge.w	800a982 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a7c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7c8:	b292      	uxth	r2, r2
 800a7ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a7cc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e4:	7b1b      	ldrb	r3, [r3, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d123      	bne.n	800a832 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	00db      	lsls	r3, r3, #3
 800a7fc:	4413      	add	r3, r2
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	4413      	add	r3, r2
 800a804:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a80e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a812:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 808e 	beq.w	800a938 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a822:	6959      	ldr	r1, [r3, #20]
 800a824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a826:	88da      	ldrh	r2, [r3, #6]
 800a828:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a82c:	f005 fd00 	bl	8010230 <USB_ReadPMA>
 800a830:	e082      	b.n	800a938 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a834:	78db      	ldrb	r3, [r3, #3]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d10a      	bne.n	800a850 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a83a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a83e:	461a      	mov	r2, r3
 800a840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f9d3 	bl	800abee <HAL_PCD_EP_DB_Receive>
 800a848:	4603      	mov	r3, r0
 800a84a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a84e:	e073      	b.n	800a938 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
 800a856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	b29b      	uxth	r3, r3
 800a862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	441a      	add	r2, r3
 800a87c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a88c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a890:	b29b      	uxth	r3, r3
 800a892:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	461a      	mov	r2, r3
 800a89a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d022      	beq.n	800a8f4 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	00db      	lsls	r3, r3, #3
 800a8c0:	4413      	add	r3, r2
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a8d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d02c      	beq.n	800a938 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6818      	ldr	r0, [r3, #0]
 800a8e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8e4:	6959      	ldr	r1, [r3, #20]
 800a8e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8e8:	891a      	ldrh	r2, [r3, #8]
 800a8ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a8ee:	f005 fc9f 	bl	8010230 <USB_ReadPMA>
 800a8f2:	e021      	b.n	800a938 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	461a      	mov	r2, r3
 800a900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	4413      	add	r3, r2
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6812      	ldr	r2, [r2, #0]
 800a90c:	4413      	add	r3, r2
 800a90e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a918:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a91c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a920:	2b00      	cmp	r3, #0
 800a922:	d009      	beq.n	800a938 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6818      	ldr	r0, [r3, #0]
 800a928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a92a:	6959      	ldr	r1, [r3, #20]
 800a92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a92e:	895a      	ldrh	r2, [r3, #10]
 800a930:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a934:	f005 fc7c 	bl	8010230 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93a:	69da      	ldr	r2, [r3, #28]
 800a93c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a940:	441a      	add	r2, r3
 800a942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a944:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a948:	695a      	ldr	r2, [r3, #20]
 800a94a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a94e:	441a      	add	r2, r3
 800a950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a952:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d005      	beq.n	800a968 <PCD_EP_ISR_Handler+0x4fe>
 800a95c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	429a      	cmp	r2, r3
 800a966:	d206      	bcs.n	800a976 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff fd0d 	bl	800a38e <HAL_PCD_DataOutStageCallback>
 800a974:	e005      	b.n	800a982 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a97c:	4618      	mov	r0, r3
 800a97e:	f004 f840 	bl	800ea02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a982:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 8121 	beq.w	800abd2 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800a990:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a994:	4613      	mov	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	3310      	adds	r3, #16
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	441a      	add	r2, r3
 800a9d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a9d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e2:	78db      	ldrb	r3, [r3, #3]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	f040 80a2 	bne.w	800ab2e <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800a9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a9f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9f2:	7b1b      	ldrb	r3, [r3, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8093 	beq.w	800ab20 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d046      	beq.n	800aa94 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d126      	bne.n	800aa5c <PCD_EP_ISR_Handler+0x5f2>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	461a      	mov	r2, r3
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	4413      	add	r3, r2
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24
 800aa26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	00da      	lsls	r2, r3, #3
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	4413      	add	r3, r2
 800aa30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa34:	623b      	str	r3, [r7, #32]
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	801a      	strh	r2, [r3, #0]
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	e061      	b.n	800ab20 <PCD_EP_ISR_Handler+0x6b6>
 800aa5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d15d      	bne.n	800ab20 <PCD_EP_ISR_Handler+0x6b6>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	461a      	mov	r2, r3
 800aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa78:	4413      	add	r3, r2
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	00da      	lsls	r2, r3, #3
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	4413      	add	r3, r2
 800aa86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	2200      	movs	r2, #0
 800aa90:	801a      	strh	r2, [r3, #0]
 800aa92:	e045      	b.n	800ab20 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa9c:	785b      	ldrb	r3, [r3, #1]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d126      	bne.n	800aaf0 <PCD_EP_ISR_Handler+0x686>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	461a      	mov	r2, r3
 800aab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab6:	4413      	add	r3, r2
 800aab8:	637b      	str	r3, [r7, #52]	; 0x34
 800aaba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	00da      	lsls	r2, r3, #3
 800aac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac2:	4413      	add	r3, r2
 800aac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aac8:	633b      	str	r3, [r7, #48]	; 0x30
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	801a      	strh	r2, [r3, #0]
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	801a      	strh	r2, [r3, #0]
 800aaee:	e017      	b.n	800ab20 <PCD_EP_ISR_Handler+0x6b6>
 800aaf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d113      	bne.n	800ab20 <PCD_EP_ISR_Handler+0x6b6>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	461a      	mov	r2, r3
 800ab04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab06:	4413      	add	r3, r2
 800ab08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	00da      	lsls	r2, r3, #3
 800ab10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab12:	4413      	add	r3, r2
 800ab14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	4619      	mov	r1, r3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fc3d 	bl	800a3a6 <HAL_PCD_DataInStageCallback>
 800ab2c:	e051      	b.n	800abd2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ab2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d144      	bne.n	800abc4 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	461a      	mov	r2, r3
 800ab46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	4413      	add	r3, r2
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	6812      	ldr	r2, [r2, #0]
 800ab52:	4413      	add	r3, r2
 800ab54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800ab62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab64:	699a      	ldr	r2, [r3, #24]
 800ab66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d907      	bls.n	800ab7e <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800ab6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab76:	1ad2      	subs	r2, r2, r3
 800ab78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab7a:	619a      	str	r2, [r3, #24]
 800ab7c:	e002      	b.n	800ab84 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800ab7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab80:	2200      	movs	r2, #0
 800ab82:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ab84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d106      	bne.n	800ab9a <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7ff fc07 	bl	800a3a6 <HAL_PCD_DataInStageCallback>
 800ab98:	e01b      	b.n	800abd2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ab9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab9c:	695a      	ldr	r2, [r3, #20]
 800ab9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aba2:	441a      	add	r2, r3
 800aba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800aba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abaa:	69da      	ldr	r2, [r3, #28]
 800abac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abb0:	441a      	add	r2, r3
 800abb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abb4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abbc:	4618      	mov	r0, r3
 800abbe:	f003 ff20 	bl	800ea02 <USB_EPStartXfer>
 800abc2:	e006      	b.n	800abd2 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800abc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800abc8:	461a      	mov	r2, r3
 800abca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f917 	bl	800ae00 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800abda:	b29b      	uxth	r3, r3
 800abdc:	b21b      	sxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f6ff ac48 	blt.w	800a474 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3758      	adds	r7, #88	; 0x58
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b088      	sub	sp, #32
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	4613      	mov	r3, r2
 800abfa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800abfc:	88fb      	ldrh	r3, [r7, #6]
 800abfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d07c      	beq.n	800ad00 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	461a      	mov	r2, r3
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	00db      	lsls	r3, r3, #3
 800ac18:	4413      	add	r3, r2
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	6812      	ldr	r2, [r2, #0]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	699a      	ldr	r2, [r3, #24]
 800ac30:	8b7b      	ldrh	r3, [r7, #26]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d306      	bcc.n	800ac44 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	699a      	ldr	r2, [r3, #24]
 800ac3a:	8b7b      	ldrh	r3, [r7, #26]
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	619a      	str	r2, [r3, #24]
 800ac42:	e002      	b.n	800ac4a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d123      	bne.n	800ac9a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac6c:	833b      	strh	r3, [r7, #24]
 800ac6e:	8b3b      	ldrh	r3, [r7, #24]
 800ac70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac74:	833b      	strh	r3, [r7, #24]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	441a      	add	r2, r3
 800ac84:	8b3b      	ldrh	r3, [r7, #24]
 800ac86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ac9a:	88fb      	ldrh	r3, [r7, #6]
 800ac9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01f      	beq.n	800ace4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	461a      	mov	r2, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acbe:	82fb      	strh	r3, [r7, #22]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	441a      	add	r2, r3
 800acce:	8afb      	ldrh	r3, [r7, #22]
 800acd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ace4:	8b7b      	ldrh	r3, [r7, #26]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 8085 	beq.w	800adf6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	6959      	ldr	r1, [r3, #20]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	891a      	ldrh	r2, [r3, #8]
 800acf8:	8b7b      	ldrh	r3, [r7, #26]
 800acfa:	f005 fa99 	bl	8010230 <USB_ReadPMA>
 800acfe:	e07a      	b.n	800adf6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	4413      	add	r3, r2
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	6812      	ldr	r2, [r2, #0]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	699a      	ldr	r2, [r3, #24]
 800ad2a:	8b7b      	ldrh	r3, [r7, #26]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d306      	bcc.n	800ad3e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	699a      	ldr	r2, [r3, #24]
 800ad34:	8b7b      	ldrh	r3, [r7, #26]
 800ad36:	1ad2      	subs	r2, r2, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	619a      	str	r2, [r3, #24]
 800ad3c:	e002      	b.n	800ad44 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2200      	movs	r2, #0
 800ad42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d123      	bne.n	800ad94 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	461a      	mov	r2, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad66:	83fb      	strh	r3, [r7, #30]
 800ad68:	8bfb      	ldrh	r3, [r7, #30]
 800ad6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad6e:	83fb      	strh	r3, [r7, #30]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	441a      	add	r2, r3
 800ad7e:	8bfb      	ldrh	r3, [r7, #30]
 800ad80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d11f      	bne.n	800adde <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb8:	83bb      	strh	r3, [r7, #28]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	441a      	add	r2, r3
 800adc8:	8bbb      	ldrh	r3, [r7, #28]
 800adca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800add2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800add6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800adda:	b29b      	uxth	r3, r3
 800addc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800adde:	8b7b      	ldrh	r3, [r7, #26]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d008      	beq.n	800adf6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	6959      	ldr	r1, [r3, #20]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	895a      	ldrh	r2, [r3, #10]
 800adf0:	8b7b      	ldrh	r3, [r7, #26]
 800adf2:	f005 fa1d 	bl	8010230 <USB_ReadPMA>
    }
  }

  return count;
 800adf6:	8b7b      	ldrh	r3, [r7, #26]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3720      	adds	r7, #32
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b0a4      	sub	sp, #144	; 0x90
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 81db 	beq.w	800b1d0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	6812      	ldr	r2, [r2, #0]
 800ae32:	4413      	add	r3, r2
 800ae34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae3e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	699a      	ldr	r2, [r3, #24]
 800ae46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d907      	bls.n	800ae5e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	699a      	ldr	r2, [r3, #24]
 800ae52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ae56:	1ad2      	subs	r2, r2, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	619a      	str	r2, [r3, #24]
 800ae5c:	e002      	b.n	800ae64 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2200      	movs	r2, #0
 800ae62:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f040 80b9 	bne.w	800afe0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d126      	bne.n	800aec4 <HAL_PCD_EP_DB_Transmit+0xc4>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	461a      	mov	r2, r3
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8a:	4413      	add	r3, r2
 800ae8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	00da      	lsls	r2, r3, #3
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	4413      	add	r3, r2
 800ae98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	801a      	strh	r2, [r3, #0]
 800aeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	801a      	strh	r2, [r3, #0]
 800aec2:	e01a      	b.n	800aefa <HAL_PCD_EP_DB_Transmit+0xfa>
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	785b      	ldrb	r3, [r3, #1]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d116      	bne.n	800aefa <HAL_PCD_EP_DB_Transmit+0xfa>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	461a      	mov	r2, r3
 800aede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee0:	4413      	add	r3, r2
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	00da      	lsls	r2, r3, #3
 800aeea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeec:	4413      	add	r3, r2
 800aeee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aef2:	633b      	str	r3, [r7, #48]	; 0x30
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	2200      	movs	r2, #0
 800aef8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	627b      	str	r3, [r7, #36]	; 0x24
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	785b      	ldrb	r3, [r3, #1]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d126      	bne.n	800af56 <HAL_PCD_EP_DB_Transmit+0x156>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	61fb      	str	r3, [r7, #28]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af16:	b29b      	uxth	r3, r3
 800af18:	461a      	mov	r2, r3
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	4413      	add	r3, r2
 800af1e:	61fb      	str	r3, [r7, #28]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	00da      	lsls	r2, r3, #3
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	4413      	add	r3, r2
 800af2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af2e:	61bb      	str	r3, [r7, #24]
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	b29b      	uxth	r3, r3
 800af36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	801a      	strh	r2, [r3, #0]
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	b29b      	uxth	r3, r3
 800af46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af4e:	b29a      	uxth	r2, r3
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	801a      	strh	r2, [r3, #0]
 800af54:	e017      	b.n	800af86 <HAL_PCD_EP_DB_Transmit+0x186>
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	785b      	ldrb	r3, [r3, #1]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d113      	bne.n	800af86 <HAL_PCD_EP_DB_Transmit+0x186>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af66:	b29b      	uxth	r3, r3
 800af68:	461a      	mov	r2, r3
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	4413      	add	r3, r2
 800af6e:	627b      	str	r3, [r7, #36]	; 0x24
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	00da      	lsls	r2, r3, #3
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	4413      	add	r3, r2
 800af7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af7e:	623b      	str	r3, [r7, #32]
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	2200      	movs	r2, #0
 800af84:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7ff fa0a 	bl	800a3a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 82fa 	beq.w	800b592 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb8:	82fb      	strh	r3, [r7, #22]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	441a      	add	r2, r3
 800afc8:	8afb      	ldrh	r3, [r7, #22]
 800afca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afda:	b29b      	uxth	r3, r3
 800afdc:	8013      	strh	r3, [r2, #0]
 800afde:	e2d8      	b.n	800b592 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800afe0:	88fb      	ldrh	r3, [r7, #6]
 800afe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d021      	beq.n	800b02e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	b29b      	uxth	r3, r3
 800affc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b004:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	441a      	add	r2, r3
 800b016:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b01a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b01e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b034:	2b01      	cmp	r3, #1
 800b036:	f040 82ac 	bne.w	800b592 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	695a      	ldr	r2, [r3, #20]
 800b03e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b042:	441a      	add	r2, r3
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	69da      	ldr	r2, [r3, #28]
 800b04c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b050:	441a      	add	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	6a1a      	ldr	r2, [r3, #32]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d30b      	bcc.n	800b07a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	6a1a      	ldr	r2, [r3, #32]
 800b06e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b072:	1ad2      	subs	r2, r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	621a      	str	r2, [r3, #32]
 800b078:	e017      	b.n	800b0aa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d108      	bne.n	800b094 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800b082:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b092:	e00a      	b.n	800b0aa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	785b      	ldrb	r3, [r3, #1]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d165      	bne.n	800b17e <HAL_PCD_EP_DB_Transmit+0x37e>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c6:	4413      	add	r3, r2
 800b0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	00da      	lsls	r2, r3, #3
 800b0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	801a      	strh	r2, [r3, #0]
 800b0ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0ee:	2b3e      	cmp	r3, #62	; 0x3e
 800b0f0:	d91d      	bls.n	800b12e <HAL_PCD_EP_DB_Transmit+0x32e>
 800b0f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0f6:	095b      	lsrs	r3, r3, #5
 800b0f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0fe:	f003 031f 	and.w	r3, r3, #31
 800b102:	2b00      	cmp	r3, #0
 800b104:	d102      	bne.n	800b10c <HAL_PCD_EP_DB_Transmit+0x30c>
 800b106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b108:	3b01      	subs	r3, #1
 800b10a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	b29a      	uxth	r2, r3
 800b112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b114:	b29b      	uxth	r3, r3
 800b116:	029b      	lsls	r3, r3, #10
 800b118:	b29b      	uxth	r3, r3
 800b11a:	4313      	orrs	r3, r2
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b126:	b29a      	uxth	r2, r3
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	801a      	strh	r2, [r3, #0]
 800b12c:	e044      	b.n	800b1b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10a      	bne.n	800b14c <HAL_PCD_EP_DB_Transmit+0x34c>
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b144:	b29a      	uxth	r2, r3
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	e035      	b.n	800b1b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b14c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b150:	085b      	lsrs	r3, r3, #1
 800b152:	64bb      	str	r3, [r7, #72]	; 0x48
 800b154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <HAL_PCD_EP_DB_Transmit+0x366>
 800b160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b162:	3301      	adds	r3, #1
 800b164:	64bb      	str	r3, [r7, #72]	; 0x48
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b16e:	b29b      	uxth	r3, r3
 800b170:	029b      	lsls	r3, r3, #10
 800b172:	b29b      	uxth	r3, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	b29a      	uxth	r2, r3
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	801a      	strh	r2, [r3, #0]
 800b17c:	e01c      	b.n	800b1b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d118      	bne.n	800b1b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	647b      	str	r3, [r7, #68]	; 0x44
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b194:	b29b      	uxth	r3, r3
 800b196:	461a      	mov	r2, r3
 800b198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b19a:	4413      	add	r3, r2
 800b19c:	647b      	str	r3, [r7, #68]	; 0x44
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	00da      	lsls	r2, r3, #3
 800b1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	6959      	ldr	r1, [r3, #20]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	891a      	ldrh	r2, [r3, #8]
 800b1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f004 ffef 	bl	80101ac <USB_WritePMA>
 800b1ce:	e1e0      	b.n	800b592 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	461a      	mov	r2, r3
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	6812      	ldr	r2, [r2, #0]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1f4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	699a      	ldr	r2, [r3, #24]
 800b1fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b200:	429a      	cmp	r2, r3
 800b202:	d307      	bcc.n	800b214 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	699a      	ldr	r2, [r3, #24]
 800b208:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b20c:	1ad2      	subs	r2, r2, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	619a      	str	r2, [r3, #24]
 800b212:	e002      	b.n	800b21a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2200      	movs	r2, #0
 800b218:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f040 80c0 	bne.w	800b3a4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	785b      	ldrb	r3, [r3, #1]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d126      	bne.n	800b27a <HAL_PCD_EP_DB_Transmit+0x47a>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b240:	4413      	add	r3, r2
 800b242:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	00da      	lsls	r2, r3, #3
 800b24a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b24c:	4413      	add	r3, r2
 800b24e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b252:	67bb      	str	r3, [r7, #120]	; 0x78
 800b254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	b29b      	uxth	r3, r3
 800b25a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b25e:	b29a      	uxth	r2, r3
 800b260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b262:	801a      	strh	r2, [r3, #0]
 800b264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b26e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b272:	b29a      	uxth	r2, r3
 800b274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b276:	801a      	strh	r2, [r3, #0]
 800b278:	e01a      	b.n	800b2b0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	785b      	ldrb	r3, [r3, #1]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d116      	bne.n	800b2b0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	667b      	str	r3, [r7, #100]	; 0x64
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b290:	b29b      	uxth	r3, r3
 800b292:	461a      	mov	r2, r3
 800b294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b296:	4413      	add	r3, r2
 800b298:	667b      	str	r3, [r7, #100]	; 0x64
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	00da      	lsls	r2, r3, #3
 800b2a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2a8:	663b      	str	r3, [r7, #96]	; 0x60
 800b2aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	677b      	str	r3, [r7, #116]	; 0x74
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d12b      	bne.n	800b316 <HAL_PCD_EP_DB_Transmit+0x516>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2d2:	4413      	add	r3, r2
 800b2d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	00da      	lsls	r2, r3, #3
 800b2dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2de:	4413      	add	r3, r2
 800b2e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2fa:	801a      	strh	r2, [r3, #0]
 800b2fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b300:	881b      	ldrh	r3, [r3, #0]
 800b302:	b29b      	uxth	r3, r3
 800b304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b312:	801a      	strh	r2, [r3, #0]
 800b314:	e017      	b.n	800b346 <HAL_PCD_EP_DB_Transmit+0x546>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	785b      	ldrb	r3, [r3, #1]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d113      	bne.n	800b346 <HAL_PCD_EP_DB_Transmit+0x546>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b326:	b29b      	uxth	r3, r3
 800b328:	461a      	mov	r2, r3
 800b32a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b32c:	4413      	add	r3, r2
 800b32e:	677b      	str	r3, [r7, #116]	; 0x74
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	00da      	lsls	r2, r3, #3
 800b336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b338:	4413      	add	r3, r2
 800b33a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b33e:	673b      	str	r3, [r7, #112]	; 0x70
 800b340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b342:	2200      	movs	r2, #0
 800b344:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	4619      	mov	r1, r3
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f7ff f82a 	bl	800a3a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b352:	88fb      	ldrh	r3, [r7, #6]
 800b354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f040 811a 	bne.w	800b592 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	881b      	ldrh	r3, [r3, #0]
 800b36e:	b29b      	uxth	r3, r3
 800b370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b378:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	441a      	add	r2, r3
 800b38a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b38e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	8013      	strh	r3, [r2, #0]
 800b3a2:	e0f6      	b.n	800b592 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b3a4:	88fb      	ldrh	r3, [r7, #6]
 800b3a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d121      	bne.n	800b3f2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	441a      	add	r2, r3
 800b3da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b3de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	f040 80ca 	bne.w	800b592 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	695a      	ldr	r2, [r3, #20]
 800b402:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b406:	441a      	add	r2, r3
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	69da      	ldr	r2, [r3, #28]
 800b410:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b414:	441a      	add	r2, r3
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	6a1a      	ldr	r2, [r3, #32]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	429a      	cmp	r2, r3
 800b424:	d30b      	bcc.n	800b43e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	6a1a      	ldr	r2, [r3, #32]
 800b432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	621a      	str	r2, [r3, #32]
 800b43c:	e017      	b.n	800b46e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d108      	bne.n	800b458 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800b446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b44a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b456:	e00a      	b.n	800b46e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2200      	movs	r2, #0
 800b464:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	657b      	str	r3, [r7, #84]	; 0x54
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d165      	bne.n	800b548 <HAL_PCD_EP_DB_Transmit+0x748>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	461a      	mov	r2, r3
 800b48e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b490:	4413      	add	r3, r2
 800b492:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	00da      	lsls	r2, r3, #3
 800b49a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b49c:	4413      	add	r3, r2
 800b49e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4b2:	801a      	strh	r2, [r3, #0]
 800b4b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4b8:	2b3e      	cmp	r3, #62	; 0x3e
 800b4ba:	d91d      	bls.n	800b4f8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b4bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4c0:	095b      	lsrs	r3, r3, #5
 800b4c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4c8:	f003 031f 	and.w	r3, r3, #31
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b4d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	029b      	lsls	r3, r3, #10
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4f4:	801a      	strh	r2, [r3, #0]
 800b4f6:	e041      	b.n	800b57c <HAL_PCD_EP_DB_Transmit+0x77c>
 800b4f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10a      	bne.n	800b516 <HAL_PCD_EP_DB_Transmit+0x716>
 800b500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	b29b      	uxth	r3, r3
 800b506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b50a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b50e:	b29a      	uxth	r2, r3
 800b510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b512:	801a      	strh	r2, [r3, #0]
 800b514:	e032      	b.n	800b57c <HAL_PCD_EP_DB_Transmit+0x77c>
 800b516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b51a:	085b      	lsrs	r3, r3, #1
 800b51c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <HAL_PCD_EP_DB_Transmit+0x730>
 800b52a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b52c:	3301      	adds	r3, #1
 800b52e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	b29a      	uxth	r2, r3
 800b536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b538:	b29b      	uxth	r3, r3
 800b53a:	029b      	lsls	r3, r3, #10
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	4313      	orrs	r3, r2
 800b540:	b29a      	uxth	r2, r3
 800b542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b544:	801a      	strh	r2, [r3, #0]
 800b546:	e019      	b.n	800b57c <HAL_PCD_EP_DB_Transmit+0x77c>
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d115      	bne.n	800b57c <HAL_PCD_EP_DB_Transmit+0x77c>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b558:	b29b      	uxth	r3, r3
 800b55a:	461a      	mov	r2, r3
 800b55c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b55e:	4413      	add	r3, r2
 800b560:	657b      	str	r3, [r7, #84]	; 0x54
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	00da      	lsls	r2, r3, #3
 800b568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b56a:	4413      	add	r3, r2
 800b56c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b570:	653b      	str	r3, [r7, #80]	; 0x50
 800b572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b576:	b29a      	uxth	r2, r3
 800b578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b57a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	6959      	ldr	r1, [r3, #20]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	895a      	ldrh	r2, [r3, #10]
 800b588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	f004 fe0d 	bl	80101ac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ac:	82bb      	strh	r3, [r7, #20]
 800b5ae:	8abb      	ldrh	r3, [r7, #20]
 800b5b0:	f083 0310 	eor.w	r3, r3, #16
 800b5b4:	82bb      	strh	r3, [r7, #20]
 800b5b6:	8abb      	ldrh	r3, [r7, #20]
 800b5b8:	f083 0320 	eor.w	r3, r3, #32
 800b5bc:	82bb      	strh	r3, [r7, #20]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	441a      	add	r2, r3
 800b5cc:	8abb      	ldrh	r3, [r7, #20]
 800b5ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3790      	adds	r7, #144	; 0x90
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b610:	b29b      	uxth	r3, r3
 800b612:	f043 0301 	orr.w	r3, r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b624:	b29b      	uxth	r3, r3
 800b626:	f043 0302 	orr.w	r3, r3, #2
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b658:	b480      	push	{r7}
 800b65a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b65c:	4b05      	ldr	r3, [pc, #20]	; (800b674 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a04      	ldr	r2, [pc, #16]	; (800b674 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b666:	6013      	str	r3, [r2, #0]
}
 800b668:	bf00      	nop
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	58000400 	.word	0x58000400

0800b678 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b678:	b480      	push	{r7}
 800b67a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b67c:	4b04      	ldr	r3, [pc, #16]	; (800b690 <HAL_PWREx_GetVoltageRange+0x18>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800b684:	4618      	mov	r0, r3
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	58000400 	.word	0x58000400

0800b694 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b694:	b480      	push	{r7}
 800b696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6a6:	d101      	bne.n	800b6ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <LL_RCC_HSE_Enable>:
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b6bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6ca:	6013      	str	r3, [r2, #0]
}
 800b6cc:	bf00      	nop
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <LL_RCC_HSE_Disable>:
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b6da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6e8:	6013      	str	r3, [r2, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <LL_RCC_HSE_IsReady>:
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b6f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b706:	d101      	bne.n	800b70c <LL_RCC_HSE_IsReady+0x18>
 800b708:	2301      	movs	r3, #1
 800b70a:	e000      	b.n	800b70e <LL_RCC_HSE_IsReady+0x1a>
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <LL_RCC_HSI_Enable>:
{
 800b718:	b480      	push	{r7}
 800b71a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b71c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b72a:	6013      	str	r3, [r2, #0]
}
 800b72c:	bf00      	nop
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <LL_RCC_HSI_Disable>:
{
 800b736:	b480      	push	{r7}
 800b738:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b73a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b748:	6013      	str	r3, [r2, #0]
}
 800b74a:	bf00      	nop
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <LL_RCC_HSI_IsReady>:
{
 800b754:	b480      	push	{r7}
 800b756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b766:	d101      	bne.n	800b76c <LL_RCC_HSI_IsReady+0x18>
 800b768:	2301      	movs	r3, #1
 800b76a:	e000      	b.n	800b76e <LL_RCC_HSI_IsReady+0x1a>
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <LL_RCC_HSI_SetCalibTrimming>:
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	061b      	lsls	r3, r3, #24
 800b78e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b792:	4313      	orrs	r3, r2
 800b794:	604b      	str	r3, [r1, #4]
}
 800b796:	bf00      	nop
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <LL_RCC_HSI48_Enable>:
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b7a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b7b2:	f043 0301 	orr.w	r3, r3, #1
 800b7b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800b7ba:	bf00      	nop
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <LL_RCC_HSI48_Disable>:
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b7c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b7d4:	f023 0301 	bic.w	r3, r3, #1
 800b7d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800b7dc:	bf00      	nop
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <LL_RCC_HSI48_IsReady>:
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b7ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d101      	bne.n	800b7fe <LL_RCC_HSI48_IsReady+0x18>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e000      	b.n	800b800 <LL_RCC_HSI48_IsReady+0x1a>
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <LL_RCC_LSE_Enable>:
{
 800b80a:	b480      	push	{r7}
 800b80c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b80e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b81a:	f043 0301 	orr.w	r3, r3, #1
 800b81e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b822:	bf00      	nop
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <LL_RCC_LSE_Disable>:
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b83c:	f023 0301 	bic.w	r3, r3, #1
 800b840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b844:	bf00      	nop
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <LL_RCC_LSE_EnableBypass>:
{
 800b84e:	b480      	push	{r7}
 800b850:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b85a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b85e:	f043 0304 	orr.w	r3, r3, #4
 800b862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b866:	bf00      	nop
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <LL_RCC_LSE_DisableBypass>:
{
 800b870:	b480      	push	{r7}
 800b872:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b87c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b880:	f023 0304 	bic.w	r3, r3, #4
 800b884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b888:	bf00      	nop
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <LL_RCC_LSE_IsReady>:
{
 800b892:	b480      	push	{r7}
 800b894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89e:	f003 0302 	and.w	r3, r3, #2
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d101      	bne.n	800b8aa <LL_RCC_LSE_IsReady+0x18>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e000      	b.n	800b8ac <LL_RCC_LSE_IsReady+0x1a>
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <LL_RCC_LSI1_Enable>:
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b8ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8c6:	f043 0301 	orr.w	r3, r3, #1
 800b8ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b8ce:	bf00      	nop
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <LL_RCC_LSI1_Disable>:
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8e8:	f023 0301 	bic.w	r3, r3, #1
 800b8ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b8f0:	bf00      	nop
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <LL_RCC_LSI1_IsReady>:
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b906:	f003 0302 	and.w	r3, r3, #2
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d101      	bne.n	800b912 <LL_RCC_LSI1_IsReady+0x18>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <LL_RCC_LSI1_IsReady+0x1a>
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <LL_RCC_LSI2_Enable>:
{
 800b91e:	b480      	push	{r7}
 800b920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b92a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b92e:	f043 0304 	orr.w	r3, r3, #4
 800b932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b936:	bf00      	nop
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <LL_RCC_LSI2_Disable>:
{
 800b940:	b480      	push	{r7}
 800b942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b94c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b950:	f023 0304 	bic.w	r3, r3, #4
 800b954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b958:	bf00      	nop
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <LL_RCC_LSI2_IsReady>:
{
 800b962:	b480      	push	{r7}
 800b964:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b96a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b96e:	f003 0308 	and.w	r3, r3, #8
 800b972:	2b08      	cmp	r3, #8
 800b974:	d101      	bne.n	800b97a <LL_RCC_LSI2_IsReady+0x18>
 800b976:	2301      	movs	r3, #1
 800b978:	e000      	b.n	800b97c <LL_RCC_LSI2_IsReady+0x1a>
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <LL_RCC_LSI2_SetTrimming>:
{
 800b986:	b480      	push	{r7}
 800b988:	b083      	sub	sp, #12
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b98e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b996:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	021b      	lsls	r3, r3, #8
 800b99e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <LL_RCC_MSI_Enable>:
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b9b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	6013      	str	r3, [r2, #0]
}
 800b9c8:	bf00      	nop
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <LL_RCC_MSI_Disable>:
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b9d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b9e0:	f023 0301 	bic.w	r3, r3, #1
 800b9e4:	6013      	str	r3, [r2, #0]
}
 800b9e6:	bf00      	nop
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <LL_RCC_MSI_IsReady>:
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b9f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d101      	bne.n	800ba06 <LL_RCC_MSI_IsReady+0x16>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e000      	b.n	800ba08 <LL_RCC_MSI_IsReady+0x18>
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <LL_RCC_MSI_SetRange>:
{
 800ba12:	b480      	push	{r7}
 800ba14:	b083      	sub	sp, #12
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ba1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	600b      	str	r3, [r1, #0]
}
 800ba2e:	bf00      	nop
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <LL_RCC_MSI_GetRange>:
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ba40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba4a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2bb0      	cmp	r3, #176	; 0xb0
 800ba50:	d901      	bls.n	800ba56 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800ba52:	23b0      	movs	r3, #176	; 0xb0
 800ba54:	607b      	str	r3, [r7, #4]
  return msiRange;
 800ba56:	687b      	ldr	r3, [r7, #4]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <LL_RCC_MSI_SetCalibTrimming>:
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800ba6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	021b      	lsls	r3, r3, #8
 800ba7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	604b      	str	r3, [r1, #4]
}
 800ba82:	bf00      	nop
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <LL_RCC_SetSysClkSource>:
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b083      	sub	sp, #12
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ba96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f023 0203 	bic.w	r2, r3, #3
 800baa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	608b      	str	r3, [r1, #8]
}
 800baaa:	bf00      	nop
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <LL_RCC_GetSysClkSource>:
{
 800bab6:	b480      	push	{r7}
 800bab8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800baba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f003 030c 	and.w	r3, r3, #12
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <LL_RCC_SetAHBPrescaler>:
{
 800bace:	b480      	push	{r7}
 800bad0:	b083      	sub	sp, #12
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	608b      	str	r3, [r1, #8]
}
 800baea:	bf00      	nop
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <LL_C2_RCC_SetAHBPrescaler>:
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bafe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bb06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800bb16:	bf00      	nop
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <LL_RCC_SetAHB4Prescaler>:
{
 800bb22:	b480      	push	{r7}
 800bb24:	b083      	sub	sp, #12
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bb2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bb32:	f023 020f 	bic.w	r2, r3, #15
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	091b      	lsrs	r3, r3, #4
 800bb3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <LL_RCC_SetAPB1Prescaler>:
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bb58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	608b      	str	r3, [r1, #8]
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <LL_RCC_SetAPB2Prescaler>:
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bb80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bb8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	608b      	str	r3, [r1, #8]
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <LL_RCC_GetAHBPrescaler>:
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <LL_RCC_GetAHB4Prescaler>:
{
 800bbb8:	b480      	push	{r7}
 800bbba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bbbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bbc4:	011b      	lsls	r3, r3, #4
 800bbc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <LL_RCC_GetAPB1Prescaler>:
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800bbd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <LL_RCC_GetAPB2Prescaler>:
{
 800bbec:	b480      	push	{r7}
 800bbee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800bbf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800bc08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc16:	6013      	str	r3, [r2, #0]
}
 800bc18:	bf00      	nop
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800bc22:	b480      	push	{r7}
 800bc24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800bc26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc34:	6013      	str	r3, [r2, #0]
}
 800bc36:	bf00      	nop
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800bc40:	b480      	push	{r7}
 800bc42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800bc44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc52:	d101      	bne.n	800bc58 <LL_RCC_PLL_IsReady+0x18>
 800bc54:	2301      	movs	r3, #1
 800bc56:	e000      	b.n	800bc5a <LL_RCC_PLL_IsReady+0x1a>
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800bc64:	b480      	push	{r7}
 800bc66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bc68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	0a1b      	lsrs	r3, r3, #8
 800bc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bc82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800bc96:	b480      	push	{r7}
 800bc98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bc9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bcb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f003 0303 	and.w	r3, r3, #3
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bcca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcd8:	d101      	bne.n	800bcde <LL_RCC_IsActiveFlag_HPRE+0x18>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e000      	b.n	800bce0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800bcea:	b480      	push	{r7}
 800bcec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bcee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bcf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcfe:	d101      	bne.n	800bd04 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e000      	b.n	800bd06 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800bd10:	b480      	push	{r7}
 800bd12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bd14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bd1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd24:	d101      	bne.n	800bd2a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bd26:	2301      	movs	r3, #1
 800bd28:	e000      	b.n	800bd2c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800bd36:	b480      	push	{r7}
 800bd38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bd3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd48:	d101      	bne.n	800bd4e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e000      	b.n	800bd50 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800bd5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd6c:	d101      	bne.n	800bd72 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e000      	b.n	800bd74 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
	...

0800bd80 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b08d      	sub	sp, #52	; 0x34
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e363      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0320 	and.w	r3, r3, #32
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 808d 	beq.w	800beba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bda0:	f7ff fe89 	bl	800bab6 <LL_RCC_GetSysClkSource>
 800bda4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bda6:	f7ff ff82 	bl	800bcae <LL_RCC_PLL_GetMainSource>
 800bdaa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d005      	beq.n	800bdbe <HAL_RCC_OscConfig+0x3e>
 800bdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb4:	2b0c      	cmp	r3, #12
 800bdb6:	d147      	bne.n	800be48 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d144      	bne.n	800be48 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e347      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bdce:	f7ff fe34 	bl	800ba3a <LL_RCC_MSI_GetRange>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	429c      	cmp	r4, r3
 800bdd6:	d914      	bls.n	800be02 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fd2f 	bl	800c840 <RCC_SetFlashLatencyFromMSIRange>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e336      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff fe0e 	bl	800ba12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fe32 	bl	800ba64 <LL_RCC_MSI_SetCalibTrimming>
 800be00:	e013      	b.n	800be2a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be06:	4618      	mov	r0, r3
 800be08:	f7ff fe03 	bl	800ba12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff fe27 	bl	800ba64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 fd10 	bl	800c840 <RCC_SetFlashLatencyFromMSIRange>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e317      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800be2a:	f000 fcc9 	bl	800c7c0 <HAL_RCC_GetHCLKFreq>
 800be2e:	4603      	mov	r3, r0
 800be30:	4aa4      	ldr	r2, [pc, #656]	; (800c0c4 <HAL_RCC_OscConfig+0x344>)
 800be32:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800be34:	4ba4      	ldr	r3, [pc, #656]	; (800c0c8 <HAL_RCC_OscConfig+0x348>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fc f91d 	bl	8008078 <HAL_InitTick>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d039      	beq.n	800beb8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e308      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	69db      	ldr	r3, [r3, #28]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01e      	beq.n	800be8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800be50:	f7ff fdb0 	bl	800b9b4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800be54:	f7fc f95e 	bl	8008114 <HAL_GetTick>
 800be58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800be5a:	e008      	b.n	800be6e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800be5c:	f7fc f95a 	bl	8008114 <HAL_GetTick>
 800be60:	4602      	mov	r2, r0
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	2b02      	cmp	r3, #2
 800be68:	d901      	bls.n	800be6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e2f5      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800be6e:	f7ff fdbf 	bl	800b9f0 <LL_RCC_MSI_IsReady>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d0f1      	beq.n	800be5c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff fdc8 	bl	800ba12 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff fdec 	bl	800ba64 <LL_RCC_MSI_SetCalibTrimming>
 800be8c:	e015      	b.n	800beba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800be8e:	f7ff fda0 	bl	800b9d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800be92:	f7fc f93f 	bl	8008114 <HAL_GetTick>
 800be96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800be98:	e008      	b.n	800beac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800be9a:	f7fc f93b 	bl	8008114 <HAL_GetTick>
 800be9e:	4602      	mov	r2, r0
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d901      	bls.n	800beac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bea8:	2303      	movs	r3, #3
 800beaa:	e2d6      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800beac:	f7ff fda0 	bl	800b9f0 <LL_RCC_MSI_IsReady>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1f1      	bne.n	800be9a <HAL_RCC_OscConfig+0x11a>
 800beb6:	e000      	b.n	800beba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800beb8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d047      	beq.n	800bf56 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bec6:	f7ff fdf6 	bl	800bab6 <LL_RCC_GetSysClkSource>
 800beca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800becc:	f7ff feef 	bl	800bcae <LL_RCC_PLL_GetMainSource>
 800bed0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	2b08      	cmp	r3, #8
 800bed6:	d005      	beq.n	800bee4 <HAL_RCC_OscConfig+0x164>
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	2b0c      	cmp	r3, #12
 800bedc:	d108      	bne.n	800bef0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	d105      	bne.n	800bef0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d134      	bne.n	800bf56 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e2b4      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef8:	d102      	bne.n	800bf00 <HAL_RCC_OscConfig+0x180>
 800befa:	f7ff fbdd 	bl	800b6b8 <LL_RCC_HSE_Enable>
 800befe:	e001      	b.n	800bf04 <HAL_RCC_OscConfig+0x184>
 800bf00:	f7ff fbe9 	bl	800b6d6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d012      	beq.n	800bf32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf0c:	f7fc f902 	bl	8008114 <HAL_GetTick>
 800bf10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bf12:	e008      	b.n	800bf26 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf14:	f7fc f8fe 	bl	8008114 <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	2b64      	cmp	r3, #100	; 0x64
 800bf20:	d901      	bls.n	800bf26 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e299      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bf26:	f7ff fbe5 	bl	800b6f4 <LL_RCC_HSE_IsReady>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0f1      	beq.n	800bf14 <HAL_RCC_OscConfig+0x194>
 800bf30:	e011      	b.n	800bf56 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf32:	f7fc f8ef 	bl	8008114 <HAL_GetTick>
 800bf36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bf38:	e008      	b.n	800bf4c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf3a:	f7fc f8eb 	bl	8008114 <HAL_GetTick>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b64      	cmp	r3, #100	; 0x64
 800bf46:	d901      	bls.n	800bf4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e286      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800bf4c:	f7ff fbd2 	bl	800b6f4 <LL_RCC_HSE_IsReady>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1f1      	bne.n	800bf3a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d04c      	beq.n	800bffc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf62:	f7ff fda8 	bl	800bab6 <LL_RCC_GetSysClkSource>
 800bf66:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf68:	f7ff fea1 	bl	800bcae <LL_RCC_PLL_GetMainSource>
 800bf6c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b04      	cmp	r3, #4
 800bf72:	d005      	beq.n	800bf80 <HAL_RCC_OscConfig+0x200>
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	2b0c      	cmp	r3, #12
 800bf78:	d10e      	bne.n	800bf98 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d10b      	bne.n	800bf98 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e266      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7ff fbf1 	bl	800b778 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bf96:	e031      	b.n	800bffc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d019      	beq.n	800bfd4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bfa0:	f7ff fbba 	bl	800b718 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa4:	f7fc f8b6 	bl	8008114 <HAL_GetTick>
 800bfa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800bfaa:	e008      	b.n	800bfbe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfac:	f7fc f8b2 	bl	8008114 <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d901      	bls.n	800bfbe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e24d      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800bfbe:	f7ff fbc9 	bl	800b754 <LL_RCC_HSI_IsReady>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d0f1      	beq.n	800bfac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff fbd3 	bl	800b778 <LL_RCC_HSI_SetCalibTrimming>
 800bfd2:	e013      	b.n	800bffc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bfd4:	f7ff fbaf 	bl	800b736 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfd8:	f7fc f89c 	bl	8008114 <HAL_GetTick>
 800bfdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800bfde:	e008      	b.n	800bff2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfe0:	f7fc f898 	bl	8008114 <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d901      	bls.n	800bff2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800bfee:	2303      	movs	r3, #3
 800bff0:	e233      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800bff2:	f7ff fbaf 	bl	800b754 <LL_RCC_HSI_IsReady>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1f1      	bne.n	800bfe0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0308 	and.w	r3, r3, #8
 800c004:	2b00      	cmp	r3, #0
 800c006:	d106      	bne.n	800c016 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 80a3 	beq.w	800c15c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d076      	beq.n	800c10c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 0310 	and.w	r3, r3, #16
 800c026:	2b00      	cmp	r3, #0
 800c028:	d046      	beq.n	800c0b8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c02a:	f7ff fc66 	bl	800b8fa <LL_RCC_LSI1_IsReady>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d113      	bne.n	800c05c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c034:	f7ff fc3f 	bl	800b8b6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c038:	f7fc f86c 	bl	8008114 <HAL_GetTick>
 800c03c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c03e:	e008      	b.n	800c052 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c040:	f7fc f868 	bl	8008114 <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e203      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c052:	f7ff fc52 	bl	800b8fa <LL_RCC_LSI1_IsReady>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d0f1      	beq.n	800c040 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c05c:	f7ff fc5f 	bl	800b91e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c060:	f7fc f858 	bl	8008114 <HAL_GetTick>
 800c064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c066:	e008      	b.n	800c07a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c068:	f7fc f854 	bl	8008114 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	2b03      	cmp	r3, #3
 800c074:	d901      	bls.n	800c07a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e1ef      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c07a:	f7ff fc72 	bl	800b962 <LL_RCC_LSI2_IsReady>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0f1      	beq.n	800c068 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff fc7c 	bl	800b986 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c08e:	f7ff fc23 	bl	800b8d8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c092:	f7fc f83f 	bl	8008114 <HAL_GetTick>
 800c096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c098:	e008      	b.n	800c0ac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c09a:	f7fc f83b 	bl	8008114 <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d901      	bls.n	800c0ac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e1d6      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c0ac:	f7ff fc25 	bl	800b8fa <LL_RCC_LSI1_IsReady>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1f1      	bne.n	800c09a <HAL_RCC_OscConfig+0x31a>
 800c0b6:	e051      	b.n	800c15c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c0b8:	f7ff fbfd 	bl	800b8b6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0bc:	f7fc f82a 	bl	8008114 <HAL_GetTick>
 800c0c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c0c2:	e00c      	b.n	800c0de <HAL_RCC_OscConfig+0x35e>
 800c0c4:	20000008 	.word	0x20000008
 800c0c8:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c0cc:	f7fc f822 	bl	8008114 <HAL_GetTick>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d901      	bls.n	800c0de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e1bd      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c0de:	f7ff fc0c 	bl	800b8fa <LL_RCC_LSI1_IsReady>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d0f1      	beq.n	800c0cc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c0e8:	f7ff fc2a 	bl	800b940 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c0ec:	e008      	b.n	800c100 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c0ee:	f7fc f811 	bl	8008114 <HAL_GetTick>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d901      	bls.n	800c100 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e1ac      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c100:	f7ff fc2f 	bl	800b962 <LL_RCC_LSI2_IsReady>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1f1      	bne.n	800c0ee <HAL_RCC_OscConfig+0x36e>
 800c10a:	e027      	b.n	800c15c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c10c:	f7ff fc18 	bl	800b940 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c110:	f7fc f800 	bl	8008114 <HAL_GetTick>
 800c114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c116:	e008      	b.n	800c12a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c118:	f7fb fffc 	bl	8008114 <HAL_GetTick>
 800c11c:	4602      	mov	r2, r0
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	2b03      	cmp	r3, #3
 800c124:	d901      	bls.n	800c12a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c126:	2303      	movs	r3, #3
 800c128:	e197      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c12a:	f7ff fc1a 	bl	800b962 <LL_RCC_LSI2_IsReady>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1f1      	bne.n	800c118 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c134:	f7ff fbd0 	bl	800b8d8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c138:	f7fb ffec 	bl	8008114 <HAL_GetTick>
 800c13c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c13e:	e008      	b.n	800c152 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c140:	f7fb ffe8 	bl	8008114 <HAL_GetTick>
 800c144:	4602      	mov	r2, r0
 800c146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d901      	bls.n	800c152 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c14e:	2303      	movs	r3, #3
 800c150:	e183      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c152:	f7ff fbd2 	bl	800b8fa <LL_RCC_LSI1_IsReady>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1f1      	bne.n	800c140 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d05b      	beq.n	800c220 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c168:	4ba7      	ldr	r3, [pc, #668]	; (800c408 <HAL_RCC_OscConfig+0x688>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c170:	2b00      	cmp	r3, #0
 800c172:	d114      	bne.n	800c19e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c174:	f7ff fa70 	bl	800b658 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c178:	f7fb ffcc 	bl	8008114 <HAL_GetTick>
 800c17c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c17e:	e008      	b.n	800c192 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c180:	f7fb ffc8 	bl	8008114 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d901      	bls.n	800c192 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e163      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c192:	4b9d      	ldr	r3, [pc, #628]	; (800c408 <HAL_RCC_OscConfig+0x688>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d0f0      	beq.n	800c180 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d102      	bne.n	800c1ac <HAL_RCC_OscConfig+0x42c>
 800c1a6:	f7ff fb30 	bl	800b80a <LL_RCC_LSE_Enable>
 800c1aa:	e00c      	b.n	800c1c6 <HAL_RCC_OscConfig+0x446>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	2b05      	cmp	r3, #5
 800c1b2:	d104      	bne.n	800c1be <HAL_RCC_OscConfig+0x43e>
 800c1b4:	f7ff fb4b 	bl	800b84e <LL_RCC_LSE_EnableBypass>
 800c1b8:	f7ff fb27 	bl	800b80a <LL_RCC_LSE_Enable>
 800c1bc:	e003      	b.n	800c1c6 <HAL_RCC_OscConfig+0x446>
 800c1be:	f7ff fb35 	bl	800b82c <LL_RCC_LSE_Disable>
 800c1c2:	f7ff fb55 	bl	800b870 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d014      	beq.n	800c1f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1ce:	f7fb ffa1 	bl	8008114 <HAL_GetTick>
 800c1d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c1d4:	e00a      	b.n	800c1ec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1d6:	f7fb ff9d 	bl	8008114 <HAL_GetTick>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d901      	bls.n	800c1ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e136      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c1ec:	f7ff fb51 	bl	800b892 <LL_RCC_LSE_IsReady>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d0ef      	beq.n	800c1d6 <HAL_RCC_OscConfig+0x456>
 800c1f6:	e013      	b.n	800c220 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1f8:	f7fb ff8c 	bl	8008114 <HAL_GetTick>
 800c1fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c1fe:	e00a      	b.n	800c216 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c200:	f7fb ff88 	bl	8008114 <HAL_GetTick>
 800c204:	4602      	mov	r2, r0
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c20e:	4293      	cmp	r3, r2
 800c210:	d901      	bls.n	800c216 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e121      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c216:	f7ff fb3c 	bl	800b892 <LL_RCC_LSE_IsReady>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1ef      	bne.n	800c200 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d02c      	beq.n	800c286 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c230:	2b00      	cmp	r3, #0
 800c232:	d014      	beq.n	800c25e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c234:	f7ff fab5 	bl	800b7a2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c238:	f7fb ff6c 	bl	8008114 <HAL_GetTick>
 800c23c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c23e:	e008      	b.n	800c252 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c240:	f7fb ff68 	bl	8008114 <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e103      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c252:	f7ff fac8 	bl	800b7e6 <LL_RCC_HSI48_IsReady>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d0f1      	beq.n	800c240 <HAL_RCC_OscConfig+0x4c0>
 800c25c:	e013      	b.n	800c286 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c25e:	f7ff fab1 	bl	800b7c4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c262:	f7fb ff57 	bl	8008114 <HAL_GetTick>
 800c266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c268:	e008      	b.n	800c27c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c26a:	f7fb ff53 	bl	8008114 <HAL_GetTick>
 800c26e:	4602      	mov	r2, r0
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	2b02      	cmp	r3, #2
 800c276:	d901      	bls.n	800c27c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c278:	2303      	movs	r3, #3
 800c27a:	e0ee      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c27c:	f7ff fab3 	bl	800b7e6 <LL_RCC_HSI48_IsReady>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1f1      	bne.n	800c26a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 80e4 	beq.w	800c458 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c290:	f7ff fc11 	bl	800bab6 <LL_RCC_GetSysClkSource>
 800c294:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	f040 80b4 	bne.w	800c410 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f003 0203 	and.w	r2, r3, #3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d123      	bne.n	800c2fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d11c      	bne.n	800c2fe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	0a1b      	lsrs	r3, r3, #8
 800c2c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d114      	bne.n	800c2fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d10d      	bne.n	800c2fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d106      	bne.n	800c2fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d05d      	beq.n	800c3ba <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	2b0c      	cmp	r3, #12
 800c302:	d058      	beq.n	800c3b6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e0a1      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c316:	f7ff fc84 	bl	800bc22 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c31a:	f7fb fefb 	bl	8008114 <HAL_GetTick>
 800c31e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c320:	e008      	b.n	800c334 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c322:	f7fb fef7 	bl	8008114 <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d901      	bls.n	800c334 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e092      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1ef      	bne.n	800c322 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c346:	68da      	ldr	r2, [r3, #12]
 800c348:	4b30      	ldr	r3, [pc, #192]	; (800c40c <HAL_RCC_OscConfig+0x68c>)
 800c34a:	4013      	ands	r3, r2
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c354:	4311      	orrs	r1, r2
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c35a:	0212      	lsls	r2, r2, #8
 800c35c:	4311      	orrs	r1, r2
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c362:	4311      	orrs	r1, r2
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c368:	4311      	orrs	r1, r2
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c36e:	430a      	orrs	r2, r1
 800c370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c374:	4313      	orrs	r3, r2
 800c376:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c378:	f7ff fc44 	bl	800bc04 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c37c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c38a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c38c:	f7fb fec2 	bl	8008114 <HAL_GetTick>
 800c390:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c392:	e008      	b.n	800c3a6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c394:	f7fb febe 	bl	8008114 <HAL_GetTick>
 800c398:	4602      	mov	r2, r0
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d901      	bls.n	800c3a6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c3a2:	2303      	movs	r3, #3
 800c3a4:	e059      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d0ef      	beq.n	800c394 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c3b4:	e050      	b.n	800c458 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e04f      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d147      	bne.n	800c458 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c3c8:	f7ff fc1c 	bl	800bc04 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c3cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c3d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c3dc:	f7fb fe9a 	bl	8008114 <HAL_GetTick>
 800c3e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3e2:	e008      	b.n	800c3f6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3e4:	f7fb fe96 	bl	8008114 <HAL_GetTick>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d901      	bls.n	800c3f6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	e031      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0ef      	beq.n	800c3e4 <HAL_RCC_OscConfig+0x664>
 800c404:	e028      	b.n	800c458 <HAL_RCC_OscConfig+0x6d8>
 800c406:	bf00      	nop
 800c408:	58000400 	.word	0x58000400
 800c40c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	2b0c      	cmp	r3, #12
 800c414:	d01e      	beq.n	800c454 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c416:	f7ff fc04 	bl	800bc22 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c41a:	f7fb fe7b 	bl	8008114 <HAL_GetTick>
 800c41e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c420:	e008      	b.n	800c434 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c422:	f7fb fe77 	bl	8008114 <HAL_GetTick>
 800c426:	4602      	mov	r2, r0
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d901      	bls.n	800c434 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c430:	2303      	movs	r3, #3
 800c432:	e012      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1ef      	bne.n	800c422 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c44c:	4b05      	ldr	r3, [pc, #20]	; (800c464 <HAL_RCC_OscConfig+0x6e4>)
 800c44e:	4013      	ands	r3, r2
 800c450:	60cb      	str	r3, [r1, #12]
 800c452:	e001      	b.n	800c458 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e000      	b.n	800c45a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3734      	adds	r7, #52	; 0x34
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd90      	pop	{r4, r7, pc}
 800c462:	bf00      	nop
 800c464:	eefefffc 	.word	0xeefefffc

0800c468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d101      	bne.n	800c47c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	e12d      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c47c:	4b98      	ldr	r3, [pc, #608]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0307 	and.w	r3, r3, #7
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	429a      	cmp	r2, r3
 800c488:	d91b      	bls.n	800c4c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c48a:	4b95      	ldr	r3, [pc, #596]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f023 0207 	bic.w	r2, r3, #7
 800c492:	4993      	ldr	r1, [pc, #588]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	4313      	orrs	r3, r2
 800c498:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c49a:	f7fb fe3b 	bl	8008114 <HAL_GetTick>
 800c49e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4a0:	e008      	b.n	800c4b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c4a2:	f7fb fe37 	bl	8008114 <HAL_GetTick>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d901      	bls.n	800c4b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	e111      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4b4:	4b8a      	ldr	r3, [pc, #552]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 0307 	and.w	r3, r3, #7
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d1ef      	bne.n	800c4a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d016      	beq.n	800c4fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7ff fafb 	bl	800bace <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c4d8:	f7fb fe1c 	bl	8008114 <HAL_GetTick>
 800c4dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c4de:	e008      	b.n	800c4f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c4e0:	f7fb fe18 	bl	8008114 <HAL_GetTick>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d901      	bls.n	800c4f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	e0f2      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c4f2:	f7ff fbe8 	bl	800bcc6 <LL_RCC_IsActiveFlag_HPRE>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d0f1      	beq.n	800c4e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0320 	and.w	r3, r3, #32
 800c504:	2b00      	cmp	r3, #0
 800c506:	d016      	beq.n	800c536 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff faf2 	bl	800baf6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c512:	f7fb fdff 	bl	8008114 <HAL_GetTick>
 800c516:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c518:	e008      	b.n	800c52c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c51a:	f7fb fdfb 	bl	8008114 <HAL_GetTick>
 800c51e:	4602      	mov	r2, r0
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	1ad3      	subs	r3, r2, r3
 800c524:	2b02      	cmp	r3, #2
 800c526:	d901      	bls.n	800c52c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c528:	2303      	movs	r3, #3
 800c52a:	e0d5      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c52c:	f7ff fbdd 	bl	800bcea <LL_RCC_IsActiveFlag_C2HPRE>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d0f1      	beq.n	800c51a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d016      	beq.n	800c570 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff faeb 	bl	800bb22 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c54c:	f7fb fde2 	bl	8008114 <HAL_GetTick>
 800c550:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c552:	e008      	b.n	800c566 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c554:	f7fb fdde 	bl	8008114 <HAL_GetTick>
 800c558:	4602      	mov	r2, r0
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d901      	bls.n	800c566 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e0b8      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c566:	f7ff fbd3 	bl	800bd10 <LL_RCC_IsActiveFlag_SHDHPRE>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0f1      	beq.n	800c554 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d016      	beq.n	800c5aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff fae5 	bl	800bb50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c586:	f7fb fdc5 	bl	8008114 <HAL_GetTick>
 800c58a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c58c:	e008      	b.n	800c5a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c58e:	f7fb fdc1 	bl	8008114 <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d901      	bls.n	800c5a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e09b      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c5a0:	f7ff fbc9 	bl	800bd36 <LL_RCC_IsActiveFlag_PPRE1>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d0f1      	beq.n	800c58e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 0308 	and.w	r3, r3, #8
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d017      	beq.n	800c5e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fadb 	bl	800bb78 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c5c2:	f7fb fda7 	bl	8008114 <HAL_GetTick>
 800c5c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c5c8:	e008      	b.n	800c5dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c5ca:	f7fb fda3 	bl	8008114 <HAL_GetTick>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d901      	bls.n	800c5dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e07d      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c5dc:	f7ff fbbd 	bl	800bd5a <LL_RCC_IsActiveFlag_PPRE2>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0f1      	beq.n	800c5ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d043      	beq.n	800c67a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d106      	bne.n	800c608 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c5fa:	f7ff f87b 	bl	800b6f4 <LL_RCC_HSE_IsReady>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d11e      	bne.n	800c642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e067      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	d106      	bne.n	800c61e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c610:	f7ff fb16 	bl	800bc40 <LL_RCC_PLL_IsReady>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d113      	bne.n	800c642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e05c      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c626:	f7ff f9e3 	bl	800b9f0 <LL_RCC_MSI_IsReady>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d108      	bne.n	800c642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	e051      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c634:	f7ff f88e 	bl	800b754 <LL_RCC_HSI_IsReady>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e04a      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	4618      	mov	r0, r3
 800c648:	f7ff fa21 	bl	800ba8e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c64c:	f7fb fd62 	bl	8008114 <HAL_GetTick>
 800c650:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c652:	e00a      	b.n	800c66a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c654:	f7fb fd5e 	bl	8008114 <HAL_GetTick>
 800c658:	4602      	mov	r2, r0
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c662:	4293      	cmp	r3, r2
 800c664:	d901      	bls.n	800c66a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c666:	2303      	movs	r3, #3
 800c668:	e036      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c66a:	f7ff fa24 	bl	800bab6 <LL_RCC_GetSysClkSource>
 800c66e:	4602      	mov	r2, r0
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	429a      	cmp	r2, r3
 800c678:	d1ec      	bne.n	800c654 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c67a:	4b19      	ldr	r3, [pc, #100]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 0307 	and.w	r3, r3, #7
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	429a      	cmp	r2, r3
 800c686:	d21b      	bcs.n	800c6c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c688:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f023 0207 	bic.w	r2, r3, #7
 800c690:	4913      	ldr	r1, [pc, #76]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	4313      	orrs	r3, r2
 800c696:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c698:	f7fb fd3c 	bl	8008114 <HAL_GetTick>
 800c69c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c69e:	e008      	b.n	800c6b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c6a0:	f7fb fd38 	bl	8008114 <HAL_GetTick>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d901      	bls.n	800c6b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c6ae:	2303      	movs	r3, #3
 800c6b0:	e012      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6b2:	4b0b      	ldr	r3, [pc, #44]	; (800c6e0 <HAL_RCC_ClockConfig+0x278>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d1ef      	bne.n	800c6a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c6c0:	f000 f87e 	bl	800c7c0 <HAL_RCC_GetHCLKFreq>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	4a07      	ldr	r2, [pc, #28]	; (800c6e4 <HAL_RCC_ClockConfig+0x27c>)
 800c6c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c6ca:	f7fb fd2f 	bl	800812c <HAL_GetTickPrio>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fb fcd1 	bl	8008078 <HAL_InitTick>
 800c6d6:	4603      	mov	r3, r0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	58004000 	.word	0x58004000
 800c6e4:	20000008 	.word	0x20000008

0800c6e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c6e8:	b590      	push	{r4, r7, lr}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6ee:	f7ff f9e2 	bl	800bab6 <LL_RCC_GetSysClkSource>
 800c6f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10a      	bne.n	800c710 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c6fa:	f7ff f99e 	bl	800ba3a <LL_RCC_MSI_GetRange>
 800c6fe:	4603      	mov	r3, r0
 800c700:	091b      	lsrs	r3, r3, #4
 800c702:	f003 030f 	and.w	r3, r3, #15
 800c706:	4a2b      	ldr	r2, [pc, #172]	; (800c7b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	e04b      	b.n	800c7a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b04      	cmp	r3, #4
 800c714:	d102      	bne.n	800c71c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c716:	4b28      	ldr	r3, [pc, #160]	; (800c7b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	e045      	b.n	800c7a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b08      	cmp	r3, #8
 800c720:	d10a      	bne.n	800c738 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c722:	f7fe ffb7 	bl	800b694 <LL_RCC_HSE_IsEnabledDiv2>
 800c726:	4603      	mov	r3, r0
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d102      	bne.n	800c732 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c72c:	4b22      	ldr	r3, [pc, #136]	; (800c7b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	e03a      	b.n	800c7a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c732:	4b22      	ldr	r3, [pc, #136]	; (800c7bc <HAL_RCC_GetSysClockFreq+0xd4>)
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	e037      	b.n	800c7a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c738:	f7ff fab9 	bl	800bcae <LL_RCC_PLL_GetMainSource>
 800c73c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2b02      	cmp	r3, #2
 800c742:	d003      	beq.n	800c74c <HAL_RCC_GetSysClockFreq+0x64>
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b03      	cmp	r3, #3
 800c748:	d003      	beq.n	800c752 <HAL_RCC_GetSysClockFreq+0x6a>
 800c74a:	e00d      	b.n	800c768 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c74c:	4b1a      	ldr	r3, [pc, #104]	; (800c7b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c74e:	60bb      	str	r3, [r7, #8]
        break;
 800c750:	e015      	b.n	800c77e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c752:	f7fe ff9f 	bl	800b694 <LL_RCC_HSE_IsEnabledDiv2>
 800c756:	4603      	mov	r3, r0
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d102      	bne.n	800c762 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c75c:	4b16      	ldr	r3, [pc, #88]	; (800c7b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c75e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c760:	e00d      	b.n	800c77e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c762:	4b16      	ldr	r3, [pc, #88]	; (800c7bc <HAL_RCC_GetSysClockFreq+0xd4>)
 800c764:	60bb      	str	r3, [r7, #8]
        break;
 800c766:	e00a      	b.n	800c77e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c768:	f7ff f967 	bl	800ba3a <LL_RCC_MSI_GetRange>
 800c76c:	4603      	mov	r3, r0
 800c76e:	091b      	lsrs	r3, r3, #4
 800c770:	f003 030f 	and.w	r3, r3, #15
 800c774:	4a0f      	ldr	r2, [pc, #60]	; (800c7b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c77a:	60bb      	str	r3, [r7, #8]
        break;
 800c77c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c77e:	f7ff fa71 	bl	800bc64 <LL_RCC_PLL_GetN>
 800c782:	4602      	mov	r2, r0
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	fb03 f402 	mul.w	r4, r3, r2
 800c78a:	f7ff fa84 	bl	800bc96 <LL_RCC_PLL_GetDivider>
 800c78e:	4603      	mov	r3, r0
 800c790:	091b      	lsrs	r3, r3, #4
 800c792:	3301      	adds	r3, #1
 800c794:	fbb4 f4f3 	udiv	r4, r4, r3
 800c798:	f7ff fa71 	bl	800bc7e <LL_RCC_PLL_GetR>
 800c79c:	4603      	mov	r3, r0
 800c79e:	0f5b      	lsrs	r3, r3, #29
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	fbb4 f3f3 	udiv	r3, r4, r3
 800c7a6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd90      	pop	{r4, r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	08016ab8 	.word	0x08016ab8
 800c7b8:	00f42400 	.word	0x00f42400
 800c7bc:	01e84800 	.word	0x01e84800

0800c7c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7c0:	b598      	push	{r3, r4, r7, lr}
 800c7c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c7c4:	f7ff ff90 	bl	800c6e8 <HAL_RCC_GetSysClockFreq>
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	f7ff f9e9 	bl	800bba0 <LL_RCC_GetAHBPrescaler>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	091b      	lsrs	r3, r3, #4
 800c7d2:	f003 030f 	and.w	r3, r3, #15
 800c7d6:	4a03      	ldr	r2, [pc, #12]	; (800c7e4 <HAL_RCC_GetHCLKFreq+0x24>)
 800c7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	bd98      	pop	{r3, r4, r7, pc}
 800c7e4:	08016a58 	.word	0x08016a58

0800c7e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7e8:	b598      	push	{r3, r4, r7, lr}
 800c7ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c7ec:	f7ff ffe8 	bl	800c7c0 <HAL_RCC_GetHCLKFreq>
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	f7ff f9ef 	bl	800bbd4 <LL_RCC_GetAPB1Prescaler>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	0a1b      	lsrs	r3, r3, #8
 800c7fa:	f003 0307 	and.w	r3, r3, #7
 800c7fe:	4a04      	ldr	r2, [pc, #16]	; (800c810 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c804:	f003 031f 	and.w	r3, r3, #31
 800c808:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	bd98      	pop	{r3, r4, r7, pc}
 800c810:	08016a98 	.word	0x08016a98

0800c814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c814:	b598      	push	{r3, r4, r7, lr}
 800c816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c818:	f7ff ffd2 	bl	800c7c0 <HAL_RCC_GetHCLKFreq>
 800c81c:	4604      	mov	r4, r0
 800c81e:	f7ff f9e5 	bl	800bbec <LL_RCC_GetAPB2Prescaler>
 800c822:	4603      	mov	r3, r0
 800c824:	0adb      	lsrs	r3, r3, #11
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	4a04      	ldr	r2, [pc, #16]	; (800c83c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c830:	f003 031f 	and.w	r3, r3, #31
 800c834:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c838:	4618      	mov	r0, r3
 800c83a:	bd98      	pop	{r3, r4, r7, pc}
 800c83c:	08016a98 	.word	0x08016a98

0800c840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c840:	b590      	push	{r4, r7, lr}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2bb0      	cmp	r3, #176	; 0xb0
 800c84c:	d903      	bls.n	800c856 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c84e:	4b15      	ldr	r3, [pc, #84]	; (800c8a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	e007      	b.n	800c866 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	091b      	lsrs	r3, r3, #4
 800c85a:	f003 030f 	and.w	r3, r3, #15
 800c85e:	4a11      	ldr	r2, [pc, #68]	; (800c8a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c864:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c866:	f7ff f9a7 	bl	800bbb8 <LL_RCC_GetAHB4Prescaler>
 800c86a:	4603      	mov	r3, r0
 800c86c:	091b      	lsrs	r3, r3, #4
 800c86e:	f003 030f 	and.w	r3, r3, #15
 800c872:	4a0d      	ldr	r2, [pc, #52]	; (800c8a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4a0a      	ldr	r2, [pc, #40]	; (800c8ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c884:	fba2 2303 	umull	r2, r3, r2, r3
 800c888:	0c9c      	lsrs	r4, r3, #18
 800c88a:	f7fe fef5 	bl	800b678 <HAL_PWREx_GetVoltageRange>
 800c88e:	4603      	mov	r3, r0
 800c890:	4619      	mov	r1, r3
 800c892:	4620      	mov	r0, r4
 800c894:	f000 f80c 	bl	800c8b0 <RCC_SetFlashLatency>
 800c898:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd90      	pop	{r4, r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	08016ab8 	.word	0x08016ab8
 800c8a8:	08016a58 	.word	0x08016a58
 800c8ac:	431bde83 	.word	0x431bde83

0800c8b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c8b0:	b590      	push	{r4, r7, lr}
 800c8b2:	b093      	sub	sp, #76	; 0x4c
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c8ba:	4b37      	ldr	r3, [pc, #220]	; (800c998 <RCC_SetFlashLatency+0xe8>)
 800c8bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c8c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c8c6:	4a35      	ldr	r2, [pc, #212]	; (800c99c <RCC_SetFlashLatency+0xec>)
 800c8c8:	f107 031c 	add.w	r3, r7, #28
 800c8cc:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c8d2:	4b33      	ldr	r3, [pc, #204]	; (800c9a0 <RCC_SetFlashLatency+0xf0>)
 800c8d4:	f107 040c 	add.w	r4, r7, #12
 800c8d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c8de:	2300      	movs	r3, #0
 800c8e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8e8:	d11a      	bne.n	800c920 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c8ee:	e013      	b.n	800c918 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	3348      	adds	r3, #72	; 0x48
 800c8f6:	443b      	add	r3, r7
 800c8f8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d807      	bhi.n	800c912 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	3348      	adds	r3, #72	; 0x48
 800c908:	443b      	add	r3, r7
 800c90a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c90e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800c910:	e020      	b.n	800c954 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c914:	3301      	adds	r3, #1
 800c916:	643b      	str	r3, [r7, #64]	; 0x40
 800c918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d9e8      	bls.n	800c8f0 <RCC_SetFlashLatency+0x40>
 800c91e:	e019      	b.n	800c954 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c920:	2300      	movs	r3, #0
 800c922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c924:	e013      	b.n	800c94e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	3348      	adds	r3, #72	; 0x48
 800c92c:	443b      	add	r3, r7
 800c92e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d807      	bhi.n	800c948 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	3348      	adds	r3, #72	; 0x48
 800c93e:	443b      	add	r3, r7
 800c940:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c944:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800c946:	e005      	b.n	800c954 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c94a:	3301      	adds	r3, #1
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c950:	2b02      	cmp	r3, #2
 800c952:	d9e8      	bls.n	800c926 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800c954:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <RCC_SetFlashLatency+0xf4>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f023 0207 	bic.w	r2, r3, #7
 800c95c:	4911      	ldr	r1, [pc, #68]	; (800c9a4 <RCC_SetFlashLatency+0xf4>)
 800c95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c960:	4313      	orrs	r3, r2
 800c962:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c964:	f7fb fbd6 	bl	8008114 <HAL_GetTick>
 800c968:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c96a:	e008      	b.n	800c97e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c96c:	f7fb fbd2 	bl	8008114 <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b02      	cmp	r3, #2
 800c978:	d901      	bls.n	800c97e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e007      	b.n	800c98e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c97e:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <RCC_SetFlashLatency+0xf4>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 0307 	and.w	r3, r3, #7
 800c986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c988:	429a      	cmp	r2, r3
 800c98a:	d1ef      	bne.n	800c96c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	374c      	adds	r7, #76	; 0x4c
 800c992:	46bd      	mov	sp, r7
 800c994:	bd90      	pop	{r4, r7, pc}
 800c996:	bf00      	nop
 800c998:	08016558 	.word	0x08016558
 800c99c:	08016568 	.word	0x08016568
 800c9a0:	08016574 	.word	0x08016574
 800c9a4:	58004000 	.word	0x58004000

0800c9a8 <LL_RCC_LSE_IsEnabled>:
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c9ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d101      	bne.n	800c9c0 <LL_RCC_LSE_IsEnabled+0x18>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e000      	b.n	800c9c2 <LL_RCC_LSE_IsEnabled+0x1a>
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <LL_RCC_LSE_IsReady>:
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c9d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9d8:	f003 0302 	and.w	r3, r3, #2
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d101      	bne.n	800c9e4 <LL_RCC_LSE_IsReady+0x18>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e000      	b.n	800c9e6 <LL_RCC_LSE_IsReady+0x1a>
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <LL_RCC_MSI_EnablePLLMode>:
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800c9f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c9fe:	f043 0304 	orr.w	r3, r3, #4
 800ca02:	6013      	str	r3, [r2, #0]
}
 800ca04:	bf00      	nop
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <LL_RCC_SetRFWKPClockSource>:
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b083      	sub	sp, #12
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ca16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ca22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800ca2e:	bf00      	nop
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <LL_RCC_SetSMPSClockSource>:
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b083      	sub	sp, #12
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ca42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	f023 0203 	bic.w	r2, r3, #3
 800ca4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ca56:	bf00      	nop
 800ca58:	370c      	adds	r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <LL_RCC_SetSMPSPrescaler>:
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ca6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ca74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ca7e:	bf00      	nop
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <LL_RCC_SetUSARTClockSource>:
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b083      	sub	sp, #12
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ca92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca9a:	f023 0203 	bic.w	r2, r3, #3
 800ca9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800caaa:	bf00      	nop
 800caac:	370c      	adds	r7, #12
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <LL_RCC_SetLPUARTClockSource>:
{
 800cab6:	b480      	push	{r7}
 800cab8:	b083      	sub	sp, #12
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cabe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800caca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <LL_RCC_SetI2CClockSource>:
{
 800cae2:	b480      	push	{r7}
 800cae4:	b083      	sub	sp, #12
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800caea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	091b      	lsrs	r3, r3, #4
 800caf6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800cafa:	43db      	mvns	r3, r3
 800cafc:	401a      	ands	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	011b      	lsls	r3, r3, #4
 800cb02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800cb06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <LL_RCC_SetLPTIMClockSource>:
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cb24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	0c1b      	lsrs	r3, r3, #16
 800cb30:	041b      	lsls	r3, r3, #16
 800cb32:	43db      	mvns	r3, r3
 800cb34:	401a      	ands	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800cb44:	bf00      	nop
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <LL_RCC_SetSAIClockSource>:
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cb58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <LL_RCC_SetRNGClockSource>:
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cb84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb8c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800cb90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <LL_RCC_SetCLK48ClockSource>:
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cbb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cbbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <LL_RCC_SetUSBClockSource>:
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff ffe3 	bl	800cba8 <LL_RCC_SetCLK48ClockSource>
}
 800cbe2:	bf00      	nop
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <LL_RCC_SetADCClockSource>:
{
 800cbea:	b480      	push	{r7}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cbf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cbfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800cc0a:	bf00      	nop
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <LL_RCC_SetRTCClockSource>:
{
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800cc1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800cc36:	bf00      	nop
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <LL_RCC_GetRTCClockSource>:
{
 800cc42:	b480      	push	{r7}
 800cc44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800cc46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <LL_RCC_ForceBackupDomainReset>:
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cc60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800cc74:	bf00      	nop
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <LL_RCC_ReleaseBackupDomainReset>:
{
 800cc7e:	b480      	push	{r7}
 800cc80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cc82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800cc96:	bf00      	nop
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <LL_RCC_PLLSAI1_Enable>:
{
 800cca0:	b480      	push	{r7}
 800cca2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ccae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ccb2:	6013      	str	r3, [r2, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <LL_RCC_PLLSAI1_Disable>:
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ccc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cccc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccd0:	6013      	str	r3, [r2, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <LL_RCC_PLLSAI1_IsReady>:
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccee:	d101      	bne.n	800ccf4 <LL_RCC_PLLSAI1_IsReady+0x18>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e000      	b.n	800ccf6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b088      	sub	sp, #32
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cd08:	2300      	movs	r3, #0
 800cd0a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d034      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cd24:	d021      	beq.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cd26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cd2a:	d81b      	bhi.n	800cd64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cd2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd30:	d01d      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800cd32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd36:	d815      	bhi.n	800cd64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00b      	beq.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800cd3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd40:	d110      	bne.n	800cd64 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cd42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd50:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cd52:	e00d      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3304      	adds	r3, #4
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f000 f94d 	bl	800cff8 <RCCEx_PLLSAI1_ConfigNP>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cd62:	e005      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	77fb      	strb	r3, [r7, #31]
        break;
 800cd68:	e002      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cd6a:	bf00      	nop
 800cd6c:	e000      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cd6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd70:	7ffb      	ldrb	r3, [r7, #31]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d105      	bne.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff fee8 	bl	800cb50 <LL_RCC_SetSAIClockSource>
 800cd80:	e001      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd82:	7ffb      	ldrb	r3, [r7, #31]
 800cd84:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d046      	beq.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800cd92:	f7ff ff56 	bl	800cc42 <LL_RCC_GetRTCClockSource>
 800cd96:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d03c      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cda2:	f7fe fc59 	bl	800b658 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d105      	bne.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff ff30 	bl	800cc16 <LL_RCC_SetRTCClockSource>
 800cdb6:	e02e      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cdb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800cdc2:	f7ff ff4b 	bl	800cc5c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800cdc6:	f7ff ff5a 	bl	800cc7e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800cdd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800cde2:	f7ff fde1 	bl	800c9a8 <LL_RCC_LSE_IsEnabled>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d114      	bne.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cdec:	f7fb f992 	bl	8008114 <HAL_GetTick>
 800cdf0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800cdf2:	e00b      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdf4:	f7fb f98e 	bl	8008114 <HAL_GetTick>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d902      	bls.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	77fb      	strb	r3, [r7, #31]
              break;
 800ce0a:	e004      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800ce0c:	f7ff fdde 	bl	800c9cc <LL_RCC_LSE_IsReady>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d1ee      	bne.n	800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ce16:	7ffb      	ldrb	r3, [r7, #31]
 800ce18:	77bb      	strb	r3, [r7, #30]
 800ce1a:	e001      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce1c:	7ffb      	ldrb	r3, [r7, #31]
 800ce1e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d004      	beq.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff fe2a 	bl	800ca8a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f003 0302 	and.w	r3, r3, #2
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d004      	beq.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff fe35 	bl	800cab6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0310 	and.w	r3, r3, #16
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d004      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff fe5d 	bl	800cb1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f003 0320 	and.w	r3, r3, #32
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d004      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7ff fe52 	bl	800cb1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0304 	and.w	r3, r3, #4
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d004      	beq.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fe2a 	bl	800cae2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 0308 	and.w	r3, r3, #8
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d004      	beq.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff fe1f 	bl	800cae2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d022      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff fe8d 	bl	800cbd4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cec2:	d107      	bne.n	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ced2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cedc:	d10b      	bne.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	3304      	adds	r3, #4
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 f8e3 	bl	800d0ae <RCCEx_PLLSAI1_ConfigNQ>
 800cee8:	4603      	mov	r3, r0
 800ceea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ceec:	7ffb      	ldrb	r3, [r7, #31]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800cef2:	7ffb      	ldrb	r3, [r7, #31]
 800cef4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d02b      	beq.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf0a:	d008      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf14:	d003      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d105      	bne.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fe2a 	bl	800cb7c <LL_RCC_SetRNGClockSource>
 800cf28:	e00a      	b.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	2000      	movs	r0, #0
 800cf36:	f7ff fe21 	bl	800cb7c <LL_RCC_SetRNGClockSource>
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f7ff fe34 	bl	800cba8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf44:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800cf48:	d107      	bne.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cf4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cf54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d022      	beq.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff fe3d 	bl	800cbea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf78:	d107      	bne.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cf7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cf84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf88:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf92:	d10b      	bne.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 f8e3 	bl	800d164 <RCCEx_PLLSAI1_ConfigNR>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cfa2:	7ffb      	ldrb	r3, [r7, #31]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800cfa8:	7ffb      	ldrb	r3, [r7, #31]
 800cfaa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d004      	beq.n	800cfc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff fd26 	bl	800ca0e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d009      	beq.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7ff fd45 	bl	800ca62 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fd2c 	bl	800ca3a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800cfe2:	7fbb      	ldrb	r3, [r7, #30]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3720      	adds	r7, #32
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800cff0:	f7ff fcfe 	bl	800c9f0 <LL_RCC_MSI_EnablePLLMode>
}
 800cff4:	bf00      	nop
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d000:	2300      	movs	r3, #0
 800d002:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d004:	f7ff fe5b 	bl	800ccbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d008:	f7fb f884 	bl	8008114 <HAL_GetTick>
 800d00c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d00e:	e009      	b.n	800d024 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d010:	f7fb f880 	bl	8008114 <HAL_GetTick>
 800d014:	4602      	mov	r2, r0
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d902      	bls.n	800d024 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d01e:	2303      	movs	r3, #3
 800d020:	73fb      	strb	r3, [r7, #15]
      break;
 800d022:	e004      	b.n	800d02e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d024:	f7ff fe5a 	bl	800ccdc <LL_RCC_PLLSAI1_IsReady>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1f0      	bne.n	800d010 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d137      	bne.n	800d0a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	021b      	lsls	r3, r3, #8
 800d044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d048:	4313      	orrs	r3, r2
 800d04a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d04c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d05e:	4313      	orrs	r3, r2
 800d060:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d062:	f7ff fe1d 	bl	800cca0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d066:	f7fb f855 	bl	8008114 <HAL_GetTick>
 800d06a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d06c:	e009      	b.n	800d082 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d06e:	f7fb f851 	bl	8008114 <HAL_GetTick>
 800d072:	4602      	mov	r2, r0
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d902      	bls.n	800d082 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	73fb      	strb	r3, [r7, #15]
        break;
 800d080:	e004      	b.n	800d08c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d082:	f7ff fe2b 	bl	800ccdc <LL_RCC_PLLSAI1_IsReady>
 800d086:	4603      	mov	r3, r0
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d1f0      	bne.n	800d06e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d108      	bne.n	800d0a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d096:	691a      	ldr	r2, [r3, #16]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b084      	sub	sp, #16
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d0ba:	f7ff fe00 	bl	800ccbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d0be:	f7fb f829 	bl	8008114 <HAL_GetTick>
 800d0c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d0c4:	e009      	b.n	800d0da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d0c6:	f7fb f825 	bl	8008114 <HAL_GetTick>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d902      	bls.n	800d0da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d0d8:	e004      	b.n	800d0e4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d0da:	f7ff fdff 	bl	800ccdc <LL_RCC_PLLSAI1_IsReady>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1f0      	bne.n	800d0c6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d137      	bne.n	800d15a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d0ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	021b      	lsls	r3, r3, #8
 800d0fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d0fe:	4313      	orrs	r3, r2
 800d100:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d114:	4313      	orrs	r3, r2
 800d116:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d118:	f7ff fdc2 	bl	800cca0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d11c:	f7fa fffa 	bl	8008114 <HAL_GetTick>
 800d120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d122:	e009      	b.n	800d138 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d124:	f7fa fff6 	bl	8008114 <HAL_GetTick>
 800d128:	4602      	mov	r2, r0
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d902      	bls.n	800d138 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d132:	2303      	movs	r3, #3
 800d134:	73fb      	strb	r3, [r7, #15]
        break;
 800d136:	e004      	b.n	800d142 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d138:	f7ff fdd0 	bl	800ccdc <LL_RCC_PLLSAI1_IsReady>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d1f0      	bne.n	800d124 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d108      	bne.n	800d15a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d14c:	691a      	ldr	r2, [r3, #16]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	691b      	ldr	r3, [r3, #16]
 800d152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d156:	4313      	orrs	r3, r2
 800d158:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d170:	f7ff fda5 	bl	800ccbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d174:	f7fa ffce 	bl	8008114 <HAL_GetTick>
 800d178:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d17a:	e009      	b.n	800d190 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d17c:	f7fa ffca 	bl	8008114 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	2b02      	cmp	r3, #2
 800d188:	d902      	bls.n	800d190 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d18a:	2303      	movs	r3, #3
 800d18c:	73fb      	strb	r3, [r7, #15]
      break;
 800d18e:	e004      	b.n	800d19a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d190:	f7ff fda4 	bl	800ccdc <LL_RCC_PLLSAI1_IsReady>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1f0      	bne.n	800d17c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d19a:	7bfb      	ldrb	r3, [r7, #15]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d137      	bne.n	800d210 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d1a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	021b      	lsls	r3, r3, #8
 800d1b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d1b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d1ce:	f7ff fd67 	bl	800cca0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1d2:	f7fa ff9f 	bl	8008114 <HAL_GetTick>
 800d1d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1d8:	e009      	b.n	800d1ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d1da:	f7fa ff9b 	bl	8008114 <HAL_GetTick>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d902      	bls.n	800d1ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	73fb      	strb	r3, [r7, #15]
        break;
 800d1ec:	e004      	b.n	800d1f8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1ee:	f7ff fd75 	bl	800ccdc <LL_RCC_PLLSAI1_IsReady>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d1f0      	bne.n	800d1da <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d108      	bne.n	800d210 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d1fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d202:	691a      	ldr	r2, [r3, #16]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d20c:	4313      	orrs	r3, r2
 800d20e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d210:	7bfb      	ldrb	r3, [r7, #15]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
	...

0800d21c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e09f      	b.n	800d36e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7fa fafc 	bl	8007840 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2202      	movs	r2, #2
 800d24c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d250:	4b49      	ldr	r3, [pc, #292]	; (800d378 <HAL_RTC_Init+0x15c>)
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	f003 0310 	and.w	r3, r3, #16
 800d258:	2b10      	cmp	r3, #16
 800d25a:	d07e      	beq.n	800d35a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	22ca      	movs	r2, #202	; 0xca
 800d262:	625a      	str	r2, [r3, #36]	; 0x24
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2253      	movs	r2, #83	; 0x53
 800d26a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f8ab 	bl	800d3c8 <RTC_EnterInitMode>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00a      	beq.n	800d28e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	22ff      	movs	r2, #255	; 0xff
 800d27e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2204      	movs	r2, #4
 800d284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	73fb      	strb	r3, [r7, #15]
 800d28c:	e067      	b.n	800d35e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	6812      	ldr	r2, [r2, #0]
 800d298:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2a0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6899      	ldr	r1, [r3, #8]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	431a      	orrs	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	68d2      	ldr	r2, [r2, #12]
 800d2c8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6919      	ldr	r1, [r3, #16]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	041a      	lsls	r2, r3, #16
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	430a      	orrs	r2, r1
 800d2dc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	68da      	ldr	r2, [r3, #12]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2ec:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f022 0203 	bic.w	r2, r2, #3
 800d2fc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	69da      	ldr	r2, [r3, #28]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	695b      	ldr	r3, [r3, #20]
 800d30c:	431a      	orrs	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	430a      	orrs	r2, r1
 800d314:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	f003 0320 	and.w	r3, r3, #32
 800d320:	2b00      	cmp	r3, #0
 800d322:	d113      	bne.n	800d34c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f829 	bl	800d37c <HAL_RTC_WaitForSynchro>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00d      	beq.n	800d34c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	22ff      	movs	r2, #255	; 0xff
 800d336:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2204      	movs	r2, #4
 800d33c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	e010      	b.n	800d36e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	22ff      	movs	r2, #255	; 0xff
 800d352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73fb      	strb	r3, [r7, #15]
 800d358:	e001      	b.n	800d35e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	40002800 	.word	0x40002800

0800d37c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	68da      	ldr	r2, [r3, #12]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d392:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d394:	f7fa febe 	bl	8008114 <HAL_GetTick>
 800d398:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d39a:	e009      	b.n	800d3b0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d39c:	f7fa feba 	bl	8008114 <HAL_GetTick>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3aa:	d901      	bls.n	800d3b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e007      	b.n	800d3c0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	f003 0320 	and.w	r3, r3, #32
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0ee      	beq.n	800d39c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d119      	bne.n	800d412 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d3e8:	f7fa fe94 	bl	8008114 <HAL_GetTick>
 800d3ec:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d3ee:	e009      	b.n	800d404 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d3f0:	f7fa fe90 	bl	8008114 <HAL_GetTick>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3fe:	d901      	bls.n	800d404 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d400:	2303      	movs	r3, #3
 800d402:	e007      	b.n	800d414 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d0ee      	beq.n	800d3f0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d412:	2300      	movs	r3, #0
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <LL_RCC_GetUSARTClockSource>:
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800d424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d428:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4013      	ands	r3, r2
}
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <LL_RCC_GetLPUARTClockSource>:
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800d444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d448:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4013      	ands	r3, r2
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e042      	b.n	800d4f4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7fa fa0b 	bl	800789c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2224      	movs	r2, #36	; 0x24
 800d48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f022 0201 	bic.w	r2, r2, #1
 800d49c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fe14 	bl	800e0d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fbe9 	bl	800dc84 <UART_SetConfig>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d101      	bne.n	800d4bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e01b      	b.n	800d4f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d4ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	689a      	ldr	r2, [r3, #8]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d4da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f042 0201 	orr.w	r2, r2, #1
 800d4ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fe93 	bl	800e218 <UART_CheckIdleState>
 800d4f2:	4603      	mov	r3, r0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b08a      	sub	sp, #40	; 0x28
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d510:	2b20      	cmp	r3, #32
 800d512:	d167      	bne.n	800d5e4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d002      	beq.n	800d520 <HAL_UART_Transmit_DMA+0x24>
 800d51a:	88fb      	ldrh	r3, [r7, #6]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e060      	b.n	800d5e6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	68ba      	ldr	r2, [r7, #8]
 800d528:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	88fa      	ldrh	r2, [r7, #6]
 800d52e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	88fa      	ldrh	r2, [r7, #6]
 800d536:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2221      	movs	r2, #33	; 0x21
 800d546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d028      	beq.n	800d5a4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d556:	4a26      	ldr	r2, [pc, #152]	; (800d5f0 <HAL_UART_Transmit_DMA+0xf4>)
 800d558:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d55e:	4a25      	ldr	r2, [pc, #148]	; (800d5f4 <HAL_UART_Transmit_DMA+0xf8>)
 800d560:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d566:	4a24      	ldr	r2, [pc, #144]	; (800d5f8 <HAL_UART_Transmit_DMA+0xfc>)
 800d568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d56e:	2200      	movs	r2, #0
 800d570:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d57a:	4619      	mov	r1, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3328      	adds	r3, #40	; 0x28
 800d582:	461a      	mov	r2, r3
 800d584:	88fb      	ldrh	r3, [r7, #6]
 800d586:	f7fc f94a 	bl	800981e <HAL_DMA_Start_IT>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d009      	beq.n	800d5a4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2210      	movs	r2, #16
 800d594:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2220      	movs	r2, #32
 800d59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e020      	b.n	800d5e6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2240      	movs	r2, #64	; 0x40
 800d5aa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	e853 3f00 	ldrex	r3, [r3]
 800d5ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5cc:	623a      	str	r2, [r7, #32]
 800d5ce:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d0:	69f9      	ldr	r1, [r7, #28]
 800d5d2:	6a3a      	ldr	r2, [r7, #32]
 800d5d4:	e841 2300 	strex	r3, r2, [r1]
 800d5d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d1e5      	bne.n	800d5ac <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	e000      	b.n	800d5e6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800d5e4:	2302      	movs	r3, #2
  }
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3728      	adds	r7, #40	; 0x28
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	0800e595 	.word	0x0800e595
 800d5f4:	0800e62f 	.word	0x0800e62f
 800d5f8:	0800e64b 	.word	0x0800e64b

0800d5fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b0ba      	sub	sp, #232	; 0xe8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	69db      	ldr	r3, [r3, #28]
 800d60a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d622:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d626:	f640 030f 	movw	r3, #2063	; 0x80f
 800d62a:	4013      	ands	r3, r2
 800d62c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d634:	2b00      	cmp	r3, #0
 800d636:	d11b      	bne.n	800d670 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d63c:	f003 0320 	and.w	r3, r3, #32
 800d640:	2b00      	cmp	r3, #0
 800d642:	d015      	beq.n	800d670 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d648:	f003 0320 	and.w	r3, r3, #32
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d105      	bne.n	800d65c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d009      	beq.n	800d670 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 82e3 	beq.w	800dc2c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	4798      	blx	r3
      }
      return;
 800d66e:	e2dd      	b.n	800dc2c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d674:	2b00      	cmp	r3, #0
 800d676:	f000 8123 	beq.w	800d8c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d67a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d67e:	4b8d      	ldr	r3, [pc, #564]	; (800d8b4 <HAL_UART_IRQHandler+0x2b8>)
 800d680:	4013      	ands	r3, r2
 800d682:	2b00      	cmp	r3, #0
 800d684:	d106      	bne.n	800d694 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d686:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d68a:	4b8b      	ldr	r3, [pc, #556]	; (800d8b8 <HAL_UART_IRQHandler+0x2bc>)
 800d68c:	4013      	ands	r3, r2
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 8116 	beq.w	800d8c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d011      	beq.n	800d6c4 <HAL_UART_IRQHandler+0xc8>
 800d6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00b      	beq.n	800d6c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ba:	f043 0201 	orr.w	r2, r3, #1
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6c8:	f003 0302 	and.w	r3, r3, #2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d011      	beq.n	800d6f4 <HAL_UART_IRQHandler+0xf8>
 800d6d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00b      	beq.n	800d6f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2202      	movs	r2, #2
 800d6e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ea:	f043 0204 	orr.w	r2, r3, #4
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6f8:	f003 0304 	and.w	r3, r3, #4
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d011      	beq.n	800d724 <HAL_UART_IRQHandler+0x128>
 800d700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00b      	beq.n	800d724 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2204      	movs	r2, #4
 800d712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d71a:	f043 0202 	orr.w	r2, r3, #2
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d017      	beq.n	800d760 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d734:	f003 0320 	and.w	r3, r3, #32
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d105      	bne.n	800d748 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d73c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d740:	4b5c      	ldr	r3, [pc, #368]	; (800d8b4 <HAL_UART_IRQHandler+0x2b8>)
 800d742:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00b      	beq.n	800d760 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2208      	movs	r2, #8
 800d74e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d756:	f043 0208 	orr.w	r2, r3, #8
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d012      	beq.n	800d792 <HAL_UART_IRQHandler+0x196>
 800d76c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00c      	beq.n	800d792 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d788:	f043 0220 	orr.w	r2, r3, #32
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 8249 	beq.w	800dc30 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d013      	beq.n	800d7d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7ae:	f003 0320 	and.w	r3, r3, #32
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d105      	bne.n	800d7c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d007      	beq.n	800d7d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7e6:	2b40      	cmp	r3, #64	; 0x40
 800d7e8:	d005      	beq.n	800d7f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d7ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d054      	beq.n	800d8a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 fe66 	bl	800e4c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d806:	2b40      	cmp	r3, #64	; 0x40
 800d808:	d146      	bne.n	800d898 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3308      	adds	r3, #8
 800d810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d818:	e853 3f00 	ldrex	r3, [r3]
 800d81c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3308      	adds	r3, #8
 800d832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d836:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d83a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d846:	e841 2300 	strex	r3, r2, [r1]
 800d84a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d84e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1d9      	bne.n	800d80a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d017      	beq.n	800d890 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d866:	4a15      	ldr	r2, [pc, #84]	; (800d8bc <HAL_UART_IRQHandler+0x2c0>)
 800d868:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d870:	4618      	mov	r0, r3
 800d872:	f7fc f8ae 	bl	80099d2 <HAL_DMA_Abort_IT>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d019      	beq.n	800d8b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d88a:	4610      	mov	r0, r2
 800d88c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d88e:	e00f      	b.n	800d8b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f9e1 	bl	800dc58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d896:	e00b      	b.n	800d8b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f9dd 	bl	800dc58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d89e:	e007      	b.n	800d8b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f9d9 	bl	800dc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d8ae:	e1bf      	b.n	800dc30 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8b0:	bf00      	nop
    return;
 800d8b2:	e1bd      	b.n	800dc30 <HAL_UART_IRQHandler+0x634>
 800d8b4:	10000001 	.word	0x10000001
 800d8b8:	04000120 	.word	0x04000120
 800d8bc:	0800e6cb 	.word	0x0800e6cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	f040 8153 	bne.w	800db70 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8ce:	f003 0310 	and.w	r3, r3, #16
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 814c 	beq.w	800db70 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8dc:	f003 0310 	and.w	r3, r3, #16
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 8145 	beq.w	800db70 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2210      	movs	r2, #16
 800d8ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f8:	2b40      	cmp	r3, #64	; 0x40
 800d8fa:	f040 80bb 	bne.w	800da74 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d90c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 818f 	beq.w	800dc34 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d91c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d920:	429a      	cmp	r2, r3
 800d922:	f080 8187 	bcs.w	800dc34 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d92c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f003 0320 	and.w	r3, r3, #32
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f040 8087 	bne.w	800da52 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d950:	e853 3f00 	ldrex	r3, [r3]
 800d954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d95c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	461a      	mov	r2, r3
 800d96a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d96e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d972:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d976:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d97a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d97e:	e841 2300 	strex	r3, r2, [r1]
 800d982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1da      	bne.n	800d944 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3308      	adds	r3, #8
 800d994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d998:	e853 3f00 	ldrex	r3, [r3]
 800d99c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d99e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9a0:	f023 0301 	bic.w	r3, r3, #1
 800d9a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d9b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d9b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d9ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d9be:	e841 2300 	strex	r3, r2, [r1]
 800d9c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d9c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1e1      	bne.n	800d98e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9d4:	e853 3f00 	ldrex	r3, [r3]
 800d9d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d9da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	3308      	adds	r3, #8
 800d9ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d9ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d9f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d9f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d9f6:	e841 2300 	strex	r3, r2, [r1]
 800d9fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e3      	bne.n	800d9ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2220      	movs	r2, #32
 800da06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da18:	e853 3f00 	ldrex	r3, [r3]
 800da1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da20:	f023 0310 	bic.w	r3, r3, #16
 800da24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	461a      	mov	r2, r3
 800da2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da32:	65bb      	str	r3, [r7, #88]	; 0x58
 800da34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da3a:	e841 2300 	strex	r3, r2, [r1]
 800da3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1e4      	bne.n	800da10 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fb ff61 	bl	8009914 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2202      	movs	r2, #2
 800da56:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da64:	b29b      	uxth	r3, r3
 800da66:	1ad3      	subs	r3, r2, r3
 800da68:	b29b      	uxth	r3, r3
 800da6a:	4619      	mov	r1, r3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f8fd 	bl	800dc6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da72:	e0df      	b.n	800dc34 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da80:	b29b      	uxth	r3, r3
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da8e:	b29b      	uxth	r3, r3
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 80d1 	beq.w	800dc38 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800da96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 80cc 	beq.w	800dc38 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa8:	e853 3f00 	ldrex	r3, [r3]
 800daac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800daae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	461a      	mov	r2, r3
 800dabe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dac2:	647b      	str	r3, [r7, #68]	; 0x44
 800dac4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daca:	e841 2300 	strex	r3, r2, [r1]
 800dace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1e4      	bne.n	800daa0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3308      	adds	r3, #8
 800dadc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	e853 3f00 	ldrex	r3, [r3]
 800dae4:	623b      	str	r3, [r7, #32]
   return(result);
 800dae6:	6a3b      	ldr	r3, [r7, #32]
 800dae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800daec:	f023 0301 	bic.w	r3, r3, #1
 800daf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	3308      	adds	r3, #8
 800dafa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dafe:	633a      	str	r2, [r7, #48]	; 0x30
 800db00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db06:	e841 2300 	strex	r3, r2, [r1]
 800db0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1e1      	bne.n	800dad6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2220      	movs	r2, #32
 800db16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	e853 3f00 	ldrex	r3, [r3]
 800db32:	60fb      	str	r3, [r7, #12]
   return(result);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f023 0310 	bic.w	r3, r3, #16
 800db3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	461a      	mov	r2, r3
 800db44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db48:	61fb      	str	r3, [r7, #28]
 800db4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db4c:	69b9      	ldr	r1, [r7, #24]
 800db4e:	69fa      	ldr	r2, [r7, #28]
 800db50:	e841 2300 	strex	r3, r2, [r1]
 800db54:	617b      	str	r3, [r7, #20]
   return(result);
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1e4      	bne.n	800db26 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2202      	movs	r2, #2
 800db60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 f87f 	bl	800dc6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db6e:	e063      	b.n	800dc38 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800db70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00e      	beq.n	800db9a <HAL_UART_IRQHandler+0x59e>
 800db7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d008      	beq.n	800db9a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800db90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fdda 	bl	800e74c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db98:	e051      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800db9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d014      	beq.n	800dbd0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d105      	bne.n	800dbbe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dbb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d008      	beq.n	800dbd0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d03a      	beq.n	800dc3c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	4798      	blx	r3
    }
    return;
 800dbce:	e035      	b.n	800dc3c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d009      	beq.n	800dbf0 <HAL_UART_IRQHandler+0x5f4>
 800dbdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d003      	beq.n	800dbf0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fd84 	bl	800e6f6 <UART_EndTransmit_IT>
    return;
 800dbee:	e026      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d009      	beq.n	800dc10 <HAL_UART_IRQHandler+0x614>
 800dbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d003      	beq.n	800dc10 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fdb3 	bl	800e774 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc0e:	e016      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d010      	beq.n	800dc3e <HAL_UART_IRQHandler+0x642>
 800dc1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	da0c      	bge.n	800dc3e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fd9b 	bl	800e760 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc2a:	e008      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
      return;
 800dc2c:	bf00      	nop
 800dc2e:	e006      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
    return;
 800dc30:	bf00      	nop
 800dc32:	e004      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
      return;
 800dc34:	bf00      	nop
 800dc36:	e002      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
      return;
 800dc38:	bf00      	nop
 800dc3a:	e000      	b.n	800dc3e <HAL_UART_IRQHandler+0x642>
    return;
 800dc3c:	bf00      	nop
  }
}
 800dc3e:	37e8      	adds	r7, #232	; 0xe8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800dc4c:	bf00      	nop
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dc60:	bf00      	nop
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc88:	b08c      	sub	sp, #48	; 0x30
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	689a      	ldr	r2, [r3, #8]
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	431a      	orrs	r2, r3
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	431a      	orrs	r2, r3
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	69db      	ldr	r3, [r3, #28]
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4baf      	ldr	r3, [pc, #700]	; (800df70 <UART_SetConfig+0x2ec>)
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	697a      	ldr	r2, [r7, #20]
 800dcb8:	6812      	ldr	r2, [r2, #0]
 800dcba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcbc:	430b      	orrs	r3, r1
 800dcbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	430a      	orrs	r2, r1
 800dcd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4aa4      	ldr	r2, [pc, #656]	; (800df74 <UART_SetConfig+0x2f0>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d004      	beq.n	800dcf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	6a1b      	ldr	r3, [r3, #32]
 800dcea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcec:	4313      	orrs	r3, r2
 800dcee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	689b      	ldr	r3, [r3, #8]
 800dcf6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800dcfa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	6812      	ldr	r2, [r2, #0]
 800dd02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd04:	430b      	orrs	r3, r1
 800dd06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0e:	f023 010f 	bic.w	r1, r3, #15
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a95      	ldr	r2, [pc, #596]	; (800df78 <UART_SetConfig+0x2f4>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d125      	bne.n	800dd74 <UART_SetConfig+0xf0>
 800dd28:	2003      	movs	r0, #3
 800dd2a:	f7ff fb77 	bl	800d41c <LL_RCC_GetUSARTClockSource>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	d81b      	bhi.n	800dd6c <UART_SetConfig+0xe8>
 800dd34:	a201      	add	r2, pc, #4	; (adr r2, 800dd3c <UART_SetConfig+0xb8>)
 800dd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3a:	bf00      	nop
 800dd3c:	0800dd4d 	.word	0x0800dd4d
 800dd40:	0800dd5d 	.word	0x0800dd5d
 800dd44:	0800dd55 	.word	0x0800dd55
 800dd48:	0800dd65 	.word	0x0800dd65
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd52:	e042      	b.n	800ddda <UART_SetConfig+0x156>
 800dd54:	2302      	movs	r3, #2
 800dd56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd5a:	e03e      	b.n	800ddda <UART_SetConfig+0x156>
 800dd5c:	2304      	movs	r3, #4
 800dd5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd62:	e03a      	b.n	800ddda <UART_SetConfig+0x156>
 800dd64:	2308      	movs	r3, #8
 800dd66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd6a:	e036      	b.n	800ddda <UART_SetConfig+0x156>
 800dd6c:	2310      	movs	r3, #16
 800dd6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd72:	e032      	b.n	800ddda <UART_SetConfig+0x156>
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a7e      	ldr	r2, [pc, #504]	; (800df74 <UART_SetConfig+0x2f0>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d12a      	bne.n	800ddd4 <UART_SetConfig+0x150>
 800dd7e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800dd82:	f7ff fb5b 	bl	800d43c <LL_RCC_GetLPUARTClockSource>
 800dd86:	4603      	mov	r3, r0
 800dd88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd8c:	d01a      	beq.n	800ddc4 <UART_SetConfig+0x140>
 800dd8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd92:	d81b      	bhi.n	800ddcc <UART_SetConfig+0x148>
 800dd94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd98:	d00c      	beq.n	800ddb4 <UART_SetConfig+0x130>
 800dd9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd9e:	d815      	bhi.n	800ddcc <UART_SetConfig+0x148>
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d003      	beq.n	800ddac <UART_SetConfig+0x128>
 800dda4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dda8:	d008      	beq.n	800ddbc <UART_SetConfig+0x138>
 800ddaa:	e00f      	b.n	800ddcc <UART_SetConfig+0x148>
 800ddac:	2300      	movs	r3, #0
 800ddae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddb2:	e012      	b.n	800ddda <UART_SetConfig+0x156>
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddba:	e00e      	b.n	800ddda <UART_SetConfig+0x156>
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddc2:	e00a      	b.n	800ddda <UART_SetConfig+0x156>
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddca:	e006      	b.n	800ddda <UART_SetConfig+0x156>
 800ddcc:	2310      	movs	r3, #16
 800ddce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddd2:	e002      	b.n	800ddda <UART_SetConfig+0x156>
 800ddd4:	2310      	movs	r3, #16
 800ddd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a65      	ldr	r2, [pc, #404]	; (800df74 <UART_SetConfig+0x2f0>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	f040 8097 	bne.w	800df14 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dde6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddea:	2b08      	cmp	r3, #8
 800ddec:	d823      	bhi.n	800de36 <UART_SetConfig+0x1b2>
 800ddee:	a201      	add	r2, pc, #4	; (adr r2, 800ddf4 <UART_SetConfig+0x170>)
 800ddf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf4:	0800de19 	.word	0x0800de19
 800ddf8:	0800de37 	.word	0x0800de37
 800ddfc:	0800de21 	.word	0x0800de21
 800de00:	0800de37 	.word	0x0800de37
 800de04:	0800de27 	.word	0x0800de27
 800de08:	0800de37 	.word	0x0800de37
 800de0c:	0800de37 	.word	0x0800de37
 800de10:	0800de37 	.word	0x0800de37
 800de14:	0800de2f 	.word	0x0800de2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de18:	f7fe fce6 	bl	800c7e8 <HAL_RCC_GetPCLK1Freq>
 800de1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de1e:	e010      	b.n	800de42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de20:	4b56      	ldr	r3, [pc, #344]	; (800df7c <UART_SetConfig+0x2f8>)
 800de22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de24:	e00d      	b.n	800de42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de26:	f7fe fc5f 	bl	800c6e8 <HAL_RCC_GetSysClockFreq>
 800de2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de2c:	e009      	b.n	800de42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de34:	e005      	b.n	800de42 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800de36:	2300      	movs	r3, #0
 800de38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800de40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 812b 	beq.w	800e0a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4e:	4a4c      	ldr	r2, [pc, #304]	; (800df80 <UART_SetConfig+0x2fc>)
 800de50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de54:	461a      	mov	r2, r3
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	fbb3 f3f2 	udiv	r3, r3, r2
 800de5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	685a      	ldr	r2, [r3, #4]
 800de62:	4613      	mov	r3, r2
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	4413      	add	r3, r2
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d305      	bcc.n	800de7a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de74:	69ba      	ldr	r2, [r7, #24]
 800de76:	429a      	cmp	r2, r3
 800de78:	d903      	bls.n	800de82 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800de80:	e10e      	b.n	800e0a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de84:	2200      	movs	r2, #0
 800de86:	60bb      	str	r3, [r7, #8]
 800de88:	60fa      	str	r2, [r7, #12]
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8e:	4a3c      	ldr	r2, [pc, #240]	; (800df80 <UART_SetConfig+0x2fc>)
 800de90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de94:	b29b      	uxth	r3, r3
 800de96:	2200      	movs	r2, #0
 800de98:	603b      	str	r3, [r7, #0]
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dea4:	f7f8 fbde 	bl	8006664 <__aeabi_uldivmod>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4610      	mov	r0, r2
 800deae:	4619      	mov	r1, r3
 800deb0:	f04f 0200 	mov.w	r2, #0
 800deb4:	f04f 0300 	mov.w	r3, #0
 800deb8:	020b      	lsls	r3, r1, #8
 800deba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800debe:	0202      	lsls	r2, r0, #8
 800dec0:	6979      	ldr	r1, [r7, #20]
 800dec2:	6849      	ldr	r1, [r1, #4]
 800dec4:	0849      	lsrs	r1, r1, #1
 800dec6:	2000      	movs	r0, #0
 800dec8:	460c      	mov	r4, r1
 800deca:	4605      	mov	r5, r0
 800decc:	eb12 0804 	adds.w	r8, r2, r4
 800ded0:	eb43 0905 	adc.w	r9, r3, r5
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	469a      	mov	sl, r3
 800dedc:	4693      	mov	fp, r2
 800dede:	4652      	mov	r2, sl
 800dee0:	465b      	mov	r3, fp
 800dee2:	4640      	mov	r0, r8
 800dee4:	4649      	mov	r1, r9
 800dee6:	f7f8 fbbd 	bl	8006664 <__aeabi_uldivmod>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4613      	mov	r3, r2
 800def0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800def8:	d308      	bcc.n	800df0c <UART_SetConfig+0x288>
 800defa:	6a3b      	ldr	r3, [r7, #32]
 800defc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df00:	d204      	bcs.n	800df0c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	6a3a      	ldr	r2, [r7, #32]
 800df08:	60da      	str	r2, [r3, #12]
 800df0a:	e0c9      	b.n	800e0a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800df12:	e0c5      	b.n	800e0a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	69db      	ldr	r3, [r3, #28]
 800df18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df1c:	d16d      	bne.n	800dffa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800df1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df22:	3b01      	subs	r3, #1
 800df24:	2b07      	cmp	r3, #7
 800df26:	d82d      	bhi.n	800df84 <UART_SetConfig+0x300>
 800df28:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <UART_SetConfig+0x2ac>)
 800df2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2e:	bf00      	nop
 800df30:	0800df51 	.word	0x0800df51
 800df34:	0800df59 	.word	0x0800df59
 800df38:	0800df85 	.word	0x0800df85
 800df3c:	0800df5f 	.word	0x0800df5f
 800df40:	0800df85 	.word	0x0800df85
 800df44:	0800df85 	.word	0x0800df85
 800df48:	0800df85 	.word	0x0800df85
 800df4c:	0800df67 	.word	0x0800df67
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df50:	f7fe fc60 	bl	800c814 <HAL_RCC_GetPCLK2Freq>
 800df54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800df56:	e01b      	b.n	800df90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df58:	4b08      	ldr	r3, [pc, #32]	; (800df7c <UART_SetConfig+0x2f8>)
 800df5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800df5c:	e018      	b.n	800df90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df5e:	f7fe fbc3 	bl	800c6e8 <HAL_RCC_GetSysClockFreq>
 800df62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800df64:	e014      	b.n	800df90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800df6c:	e010      	b.n	800df90 <UART_SetConfig+0x30c>
 800df6e:	bf00      	nop
 800df70:	cfff69f3 	.word	0xcfff69f3
 800df74:	40008000 	.word	0x40008000
 800df78:	40013800 	.word	0x40013800
 800df7c:	00f42400 	.word	0x00f42400
 800df80:	08016b00 	.word	0x08016b00
      default:
        pclk = 0U;
 800df84:	2300      	movs	r3, #0
 800df86:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800df8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	2b00      	cmp	r3, #0
 800df94:	f000 8084 	beq.w	800e0a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9c:	4a4b      	ldr	r2, [pc, #300]	; (800e0cc <UART_SetConfig+0x448>)
 800df9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa6:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfaa:	005a      	lsls	r2, r3, #1
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	085b      	lsrs	r3, r3, #1
 800dfb2:	441a      	add	r2, r3
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfbc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	2b0f      	cmp	r3, #15
 800dfc2:	d916      	bls.n	800dff2 <UART_SetConfig+0x36e>
 800dfc4:	6a3b      	ldr	r3, [r7, #32]
 800dfc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfca:	d212      	bcs.n	800dff2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	f023 030f 	bic.w	r3, r3, #15
 800dfd4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	085b      	lsrs	r3, r3, #1
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	f003 0307 	and.w	r3, r3, #7
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	8bfb      	ldrh	r3, [r7, #30]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	8bfa      	ldrh	r2, [r7, #30]
 800dfee:	60da      	str	r2, [r3, #12]
 800dff0:	e056      	b.n	800e0a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dff8:	e052      	b.n	800e0a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dffe:	3b01      	subs	r3, #1
 800e000:	2b07      	cmp	r3, #7
 800e002:	d822      	bhi.n	800e04a <UART_SetConfig+0x3c6>
 800e004:	a201      	add	r2, pc, #4	; (adr r2, 800e00c <UART_SetConfig+0x388>)
 800e006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00a:	bf00      	nop
 800e00c:	0800e02d 	.word	0x0800e02d
 800e010:	0800e035 	.word	0x0800e035
 800e014:	0800e04b 	.word	0x0800e04b
 800e018:	0800e03b 	.word	0x0800e03b
 800e01c:	0800e04b 	.word	0x0800e04b
 800e020:	0800e04b 	.word	0x0800e04b
 800e024:	0800e04b 	.word	0x0800e04b
 800e028:	0800e043 	.word	0x0800e043
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e02c:	f7fe fbf2 	bl	800c814 <HAL_RCC_GetPCLK2Freq>
 800e030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e032:	e010      	b.n	800e056 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e034:	4b26      	ldr	r3, [pc, #152]	; (800e0d0 <UART_SetConfig+0x44c>)
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e038:	e00d      	b.n	800e056 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e03a:	f7fe fb55 	bl	800c6e8 <HAL_RCC_GetSysClockFreq>
 800e03e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e040:	e009      	b.n	800e056 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e048:	e005      	b.n	800e056 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800e04a:	2300      	movs	r3, #0
 800e04c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e054:	bf00      	nop
    }

    if (pclk != 0U)
 800e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d021      	beq.n	800e0a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e060:	4a1a      	ldr	r2, [pc, #104]	; (800e0cc <UART_SetConfig+0x448>)
 800e062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e066:	461a      	mov	r2, r3
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	085b      	lsrs	r3, r3, #1
 800e074:	441a      	add	r2, r3
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e07e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e080:	6a3b      	ldr	r3, [r7, #32]
 800e082:	2b0f      	cmp	r3, #15
 800e084:	d909      	bls.n	800e09a <UART_SetConfig+0x416>
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e08c:	d205      	bcs.n	800e09a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e08e:	6a3b      	ldr	r3, [r7, #32]
 800e090:	b29a      	uxth	r2, r3
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	60da      	str	r2, [r3, #12]
 800e098:	e002      	b.n	800e0a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e0bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3730      	adds	r7, #48	; 0x30
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0ca:	bf00      	nop
 800e0cc:	08016b00 	.word	0x08016b00
 800e0d0:	00f42400 	.word	0x00f42400

0800e0d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e0:	f003 0308 	and.w	r3, r3, #8
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00a      	beq.n	800e0fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	f003 0301 	and.w	r3, r3, #1
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00a      	beq.n	800e120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	430a      	orrs	r2, r1
 800e11e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e124:	f003 0302 	and.w	r3, r3, #2
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d00a      	beq.n	800e142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	430a      	orrs	r2, r1
 800e140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e146:	f003 0304 	and.w	r3, r3, #4
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00a      	beq.n	800e164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	430a      	orrs	r2, r1
 800e162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e168:	f003 0310 	and.w	r3, r3, #16
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00a      	beq.n	800e186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	430a      	orrs	r2, r1
 800e184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18a:	f003 0320 	and.w	r3, r3, #32
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00a      	beq.n	800e1a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	430a      	orrs	r2, r1
 800e1a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d01a      	beq.n	800e1ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	430a      	orrs	r2, r1
 800e1c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e1d2:	d10a      	bne.n	800e1ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	430a      	orrs	r2, r1
 800e1e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00a      	beq.n	800e20c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	430a      	orrs	r2, r1
 800e20a:	605a      	str	r2, [r3, #4]
  }
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b098      	sub	sp, #96	; 0x60
 800e21c:	af02      	add	r7, sp, #8
 800e21e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e228:	f7f9 ff74 	bl	8008114 <HAL_GetTick>
 800e22c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f003 0308 	and.w	r3, r3, #8
 800e238:	2b08      	cmp	r3, #8
 800e23a:	d12f      	bne.n	800e29c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e23c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e244:	2200      	movs	r2, #0
 800e246:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f88e 	bl	800e36c <UART_WaitOnFlagUntilTimeout>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d022      	beq.n	800e29c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25e:	e853 3f00 	ldrex	r3, [r3]
 800e262:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e26a:	653b      	str	r3, [r7, #80]	; 0x50
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	461a      	mov	r2, r3
 800e272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e274:	647b      	str	r3, [r7, #68]	; 0x44
 800e276:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e278:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e27a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e27c:	e841 2300 	strex	r3, r2, [r1]
 800e280:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1e6      	bne.n	800e256 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2220      	movs	r2, #32
 800e28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e298:	2303      	movs	r3, #3
 800e29a:	e063      	b.n	800e364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f003 0304 	and.w	r3, r3, #4
 800e2a6:	2b04      	cmp	r3, #4
 800e2a8:	d149      	bne.n	800e33e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f857 	bl	800e36c <UART_WaitOnFlagUntilTimeout>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d03c      	beq.n	800e33e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	e853 3f00 	ldrex	r3, [r3]
 800e2d0:	623b      	str	r3, [r7, #32]
   return(result);
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e2:	633b      	str	r3, [r7, #48]	; 0x30
 800e2e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ea:	e841 2300 	strex	r3, r2, [r1]
 800e2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1e6      	bne.n	800e2c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	e853 3f00 	ldrex	r3, [r3]
 800e304:	60fb      	str	r3, [r7, #12]
   return(result);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f023 0301 	bic.w	r3, r3, #1
 800e30c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3308      	adds	r3, #8
 800e314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e316:	61fa      	str	r2, [r7, #28]
 800e318:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31a:	69b9      	ldr	r1, [r7, #24]
 800e31c:	69fa      	ldr	r2, [r7, #28]
 800e31e:	e841 2300 	strex	r3, r2, [r1]
 800e322:	617b      	str	r3, [r7, #20]
   return(result);
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1e5      	bne.n	800e2f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2220      	movs	r2, #32
 800e32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e33a:	2303      	movs	r3, #3
 800e33c:	e012      	b.n	800e364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2220      	movs	r2, #32
 800e342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2220      	movs	r2, #32
 800e34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3758      	adds	r7, #88	; 0x58
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	603b      	str	r3, [r7, #0]
 800e378:	4613      	mov	r3, r2
 800e37a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e37c:	e04f      	b.n	800e41e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e384:	d04b      	beq.n	800e41e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e386:	f7f9 fec5 	bl	8008114 <HAL_GetTick>
 800e38a:	4602      	mov	r2, r0
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	69ba      	ldr	r2, [r7, #24]
 800e392:	429a      	cmp	r2, r3
 800e394:	d302      	bcc.n	800e39c <UART_WaitOnFlagUntilTimeout+0x30>
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d101      	bne.n	800e3a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e39c:	2303      	movs	r3, #3
 800e39e:	e04e      	b.n	800e43e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f003 0304 	and.w	r3, r3, #4
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d037      	beq.n	800e41e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2b80      	cmp	r3, #128	; 0x80
 800e3b2:	d034      	beq.n	800e41e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b40      	cmp	r3, #64	; 0x40
 800e3b8:	d031      	beq.n	800e41e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	f003 0308 	and.w	r3, r3, #8
 800e3c4:	2b08      	cmp	r3, #8
 800e3c6:	d110      	bne.n	800e3ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2208      	movs	r2, #8
 800e3ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f000 f879 	bl	800e4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2208      	movs	r2, #8
 800e3da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e029      	b.n	800e43e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	69db      	ldr	r3, [r3, #28]
 800e3f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3f8:	d111      	bne.n	800e41e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f000 f85f 	bl	800e4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2220      	movs	r2, #32
 800e40e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	e00f      	b.n	800e43e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	69da      	ldr	r2, [r3, #28]
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	4013      	ands	r3, r2
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	bf0c      	ite	eq
 800e42e:	2301      	moveq	r3, #1
 800e430:	2300      	movne	r3, #0
 800e432:	b2db      	uxtb	r3, r3
 800e434:	461a      	mov	r2, r3
 800e436:	79fb      	ldrb	r3, [r7, #7]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d0a0      	beq.n	800e37e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e446:	b480      	push	{r7}
 800e448:	b08f      	sub	sp, #60	; 0x3c
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	6a3b      	ldr	r3, [r7, #32]
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e462:	637b      	str	r3, [r7, #52]	; 0x34
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e46c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e46e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e6      	bne.n	800e44e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3308      	adds	r3, #8
 800e486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	e853 3f00 	ldrex	r3, [r3]
 800e48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e496:	633b      	str	r3, [r7, #48]	; 0x30
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3308      	adds	r3, #8
 800e49e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4a0:	61ba      	str	r2, [r7, #24]
 800e4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a4:	6979      	ldr	r1, [r7, #20]
 800e4a6:	69ba      	ldr	r2, [r7, #24]
 800e4a8:	e841 2300 	strex	r3, r2, [r1]
 800e4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1e5      	bne.n	800e480 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2220      	movs	r2, #32
 800e4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800e4bc:	bf00      	nop
 800e4be:	373c      	adds	r7, #60	; 0x3c
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b095      	sub	sp, #84	; 0x54
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d8:	e853 3f00 	ldrex	r3, [r3]
 800e4dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800e4f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4f6:	e841 2300 	strex	r3, r2, [r1]
 800e4fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1e6      	bne.n	800e4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3308      	adds	r3, #8
 800e508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50a:	6a3b      	ldr	r3, [r7, #32]
 800e50c:	e853 3f00 	ldrex	r3, [r3]
 800e510:	61fb      	str	r3, [r7, #28]
   return(result);
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e518:	f023 0301 	bic.w	r3, r3, #1
 800e51c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3308      	adds	r3, #8
 800e524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e526:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e52c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e52e:	e841 2300 	strex	r3, r2, [r1]
 800e532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1e3      	bne.n	800e502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d118      	bne.n	800e574 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	e853 3f00 	ldrex	r3, [r3]
 800e54e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	f023 0310 	bic.w	r3, r3, #16
 800e556:	647b      	str	r3, [r7, #68]	; 0x44
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	461a      	mov	r2, r3
 800e55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e560:	61bb      	str	r3, [r7, #24]
 800e562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e564:	6979      	ldr	r1, [r7, #20]
 800e566:	69ba      	ldr	r2, [r7, #24]
 800e568:	e841 2300 	strex	r3, r2, [r1]
 800e56c:	613b      	str	r3, [r7, #16]
   return(result);
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1e6      	bne.n	800e542 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2220      	movs	r2, #32
 800e578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e588:	bf00      	nop
 800e58a:	3754      	adds	r7, #84	; 0x54
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b090      	sub	sp, #64	; 0x40
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0320 	and.w	r3, r3, #32
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d137      	bne.n	800e620 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800e5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	3308      	adds	r3, #8
 800e5be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	e853 3f00 	ldrex	r3, [r3]
 800e5c6:	623b      	str	r3, [r7, #32]
   return(result);
 800e5c8:	6a3b      	ldr	r3, [r7, #32]
 800e5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5d8:	633a      	str	r2, [r7, #48]	; 0x30
 800e5da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e0:	e841 2300 	strex	r3, r2, [r1]
 800e5e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1e5      	bne.n	800e5b8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	e853 3f00 	ldrex	r3, [r3]
 800e5f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e600:	637b      	str	r3, [r7, #52]	; 0x34
 800e602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60a:	61fb      	str	r3, [r7, #28]
 800e60c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60e:	69b9      	ldr	r1, [r7, #24]
 800e610:	69fa      	ldr	r2, [r7, #28]
 800e612:	e841 2300 	strex	r3, r2, [r1]
 800e616:	617b      	str	r3, [r7, #20]
   return(result);
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1e6      	bne.n	800e5ec <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e61e:	e002      	b.n	800e626 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e620:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e622:	f7f8 fd61 	bl	80070e8 <HAL_UART_TxCpltCallback>
}
 800e626:	bf00      	nop
 800e628:	3740      	adds	r7, #64	; 0x40
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b084      	sub	sp, #16
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7ff fb01 	bl	800dc44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e642:	bf00      	nop
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b086      	sub	sp, #24
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e656:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e65e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e666:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e672:	2b80      	cmp	r3, #128	; 0x80
 800e674:	d109      	bne.n	800e68a <UART_DMAError+0x40>
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b21      	cmp	r3, #33	; 0x21
 800e67a:	d106      	bne.n	800e68a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	2200      	movs	r2, #0
 800e680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e684:	6978      	ldr	r0, [r7, #20]
 800e686:	f7ff fede 	bl	800e446 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e694:	2b40      	cmp	r3, #64	; 0x40
 800e696:	d109      	bne.n	800e6ac <UART_DMAError+0x62>
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2b22      	cmp	r3, #34	; 0x22
 800e69c:	d106      	bne.n	800e6ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e6a6:	6978      	ldr	r0, [r7, #20]
 800e6a8:	f7ff ff0e 	bl	800e4c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6b2:	f043 0210 	orr.w	r2, r3, #16
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6bc:	6978      	ldr	r0, [r7, #20]
 800e6be:	f7ff facb 	bl	800dc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6c2:	bf00      	nop
 800e6c4:	3718      	adds	r7, #24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b084      	sub	sp, #16
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f7ff fab5 	bl	800dc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6ee:	bf00      	nop
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b088      	sub	sp, #32
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	e853 3f00 	ldrex	r3, [r3]
 800e70a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e712:	61fb      	str	r3, [r7, #28]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	461a      	mov	r2, r3
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	61bb      	str	r3, [r7, #24]
 800e71e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e720:	6979      	ldr	r1, [r7, #20]
 800e722:	69ba      	ldr	r2, [r7, #24]
 800e724:	e841 2300 	strex	r3, r2, [r1]
 800e728:	613b      	str	r3, [r7, #16]
   return(result);
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1e6      	bne.n	800e6fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2220      	movs	r2, #32
 800e734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7f8 fcd2 	bl	80070e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e744:	bf00      	nop
 800e746:	3720      	adds	r7, #32
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e796:	2b01      	cmp	r3, #1
 800e798:	d101      	bne.n	800e79e <HAL_UARTEx_DisableFifoMode+0x16>
 800e79a:	2302      	movs	r3, #2
 800e79c:	e027      	b.n	800e7ee <HAL_UARTEx_DisableFifoMode+0x66>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2224      	movs	r2, #36	; 0x24
 800e7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f022 0201 	bic.w	r2, r2, #1
 800e7c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2220      	movs	r2, #32
 800e7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3714      	adds	r7, #20
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr

0800e7fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b084      	sub	sp, #16
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
 800e802:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d101      	bne.n	800e812 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e80e:	2302      	movs	r3, #2
 800e810:	e02d      	b.n	800e86e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2201      	movs	r2, #1
 800e816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2224      	movs	r2, #36	; 0x24
 800e81e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f022 0201 	bic.w	r2, r2, #1
 800e838:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	689b      	ldr	r3, [r3, #8]
 800e840:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	430a      	orrs	r2, r1
 800e84c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 f850 	bl	800e8f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2220      	movs	r2, #32
 800e860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e886:	2b01      	cmp	r3, #1
 800e888:	d101      	bne.n	800e88e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e88a:	2302      	movs	r3, #2
 800e88c:	e02d      	b.n	800e8ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2224      	movs	r2, #36	; 0x24
 800e89a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f022 0201 	bic.w	r2, r2, #1
 800e8b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f812 	bl	800e8f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2220      	movs	r2, #32
 800e8dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
	...

0800e8f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e900:	2b00      	cmp	r3, #0
 800e902:	d108      	bne.n	800e916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e914:	e031      	b.n	800e97a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e916:	2308      	movs	r3, #8
 800e918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e91a:	2308      	movs	r3, #8
 800e91c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	0e5b      	lsrs	r3, r3, #25
 800e926:	b2db      	uxtb	r3, r3
 800e928:	f003 0307 	and.w	r3, r3, #7
 800e92c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	0f5b      	lsrs	r3, r3, #29
 800e936:	b2db      	uxtb	r3, r3
 800e938:	f003 0307 	and.w	r3, r3, #7
 800e93c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e93e:	7bbb      	ldrb	r3, [r7, #14]
 800e940:	7b3a      	ldrb	r2, [r7, #12]
 800e942:	4911      	ldr	r1, [pc, #68]	; (800e988 <UARTEx_SetNbDataToProcess+0x94>)
 800e944:	5c8a      	ldrb	r2, [r1, r2]
 800e946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e94a:	7b3a      	ldrb	r2, [r7, #12]
 800e94c:	490f      	ldr	r1, [pc, #60]	; (800e98c <UARTEx_SetNbDataToProcess+0x98>)
 800e94e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e950:	fb93 f3f2 	sdiv	r3, r3, r2
 800e954:	b29a      	uxth	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
 800e95e:	7b7a      	ldrb	r2, [r7, #13]
 800e960:	4909      	ldr	r1, [pc, #36]	; (800e988 <UARTEx_SetNbDataToProcess+0x94>)
 800e962:	5c8a      	ldrb	r2, [r1, r2]
 800e964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e968:	7b7a      	ldrb	r2, [r7, #13]
 800e96a:	4908      	ldr	r1, [pc, #32]	; (800e98c <UARTEx_SetNbDataToProcess+0x98>)
 800e96c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e96e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e97a:	bf00      	nop
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	08016b18 	.word	0x08016b18
 800e98c:	08016b20 	.word	0x08016b20

0800e990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e998:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800e99c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	43db      	mvns	r3, r3
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr

0800e9c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e9c6:	b480      	push	{r7}
 800e9c8:	b085      	sub	sp, #20
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	60f8      	str	r0, [r7, #12]
 800e9ce:	1d3b      	adds	r3, r7, #4
 800e9d0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b0c2      	sub	sp, #264	; 0x108
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea10:	6018      	str	r0, [r3, #0]
 800ea12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea1a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	785b      	ldrb	r3, [r3, #1]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	f040 86b7 	bne.w	800f79c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ea2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	699a      	ldr	r2, [r3, #24]
 800ea3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d908      	bls.n	800ea5c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ea4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ea5a:	e007      	b.n	800ea6c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ea5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ea6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	7b1b      	ldrb	r3, [r3, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d13a      	bne.n	800eaf2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ea7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6959      	ldr	r1, [r3, #20]
 800ea88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	88da      	ldrh	r2, [r3, #6]
 800ea94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ea9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eaa2:	6800      	ldr	r0, [r0, #0]
 800eaa4:	f001 fb82 	bl	80101ac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800eaa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	613b      	str	r3, [r7, #16]
 800eab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	461a      	mov	r2, r3
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	4413      	add	r3, r2
 800eaca:	613b      	str	r3, [r7, #16]
 800eacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ead0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	00da      	lsls	r2, r3, #3
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	4413      	add	r3, r2
 800eade:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eae2:	60fb      	str	r3, [r7, #12]
 800eae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	801a      	strh	r2, [r3, #0]
 800eaee:	f000 be1f 	b.w	800f730 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800eaf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	78db      	ldrb	r3, [r3, #3]
 800eafe:	2b02      	cmp	r3, #2
 800eb00:	f040 8462 	bne.w	800f3c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800eb04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	6a1a      	ldr	r2, [r3, #32]
 800eb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	f240 83df 	bls.w	800f2e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800eb22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4413      	add	r3, r2
 800eb3c:	881b      	ldrh	r3, [r3, #0]
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800eb4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	441a      	add	r2, r3
 800eb66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800eb6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800eb76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800eb7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	6a1a      	ldr	r2, [r3, #32]
 800eb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb8e:	1ad2      	subs	r2, r2, r3
 800eb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eb9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	4413      	add	r3, r2
 800ebb6:	881b      	ldrh	r3, [r3, #0]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f000 81c7 	beq.w	800ef52 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ebc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	633b      	str	r3, [r7, #48]	; 0x30
 800ebd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	785b      	ldrb	r3, [r3, #1]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d177      	bne.n	800ecd0 <USB_EPStartXfer+0x2ce>
 800ebe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	4413      	add	r3, r2
 800ec02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	00da      	lsls	r2, r3, #3
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	4413      	add	r3, r2
 800ec16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ec1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	881b      	ldrh	r3, [r3, #0]
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	801a      	strh	r2, [r3, #0]
 800ec2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec30:	2b3e      	cmp	r3, #62	; 0x3e
 800ec32:	d921      	bls.n	800ec78 <USB_EPStartXfer+0x276>
 800ec34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec38:	095b      	lsrs	r3, r3, #5
 800ec3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ec3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec42:	f003 031f 	and.w	r3, r3, #31
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d104      	bne.n	800ec54 <USB_EPStartXfer+0x252>
 800ec4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	881b      	ldrh	r3, [r3, #0]
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	029b      	lsls	r3, r3, #10
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	4313      	orrs	r3, r2
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	801a      	strh	r2, [r3, #0]
 800ec76:	e050      	b.n	800ed1a <USB_EPStartXfer+0x318>
 800ec78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d10a      	bne.n	800ec96 <USB_EPStartXfer+0x294>
 800ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec82:	881b      	ldrh	r3, [r3, #0]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec92:	801a      	strh	r2, [r3, #0]
 800ec94:	e041      	b.n	800ed1a <USB_EPStartXfer+0x318>
 800ec96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec9a:	085b      	lsrs	r3, r3, #1
 800ec9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800eca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d004      	beq.n	800ecb6 <USB_EPStartXfer+0x2b4>
 800ecac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb8:	881b      	ldrh	r3, [r3, #0]
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	029b      	lsls	r3, r3, #10
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eccc:	801a      	strh	r2, [r3, #0]
 800ecce:	e024      	b.n	800ed1a <USB_EPStartXfer+0x318>
 800ecd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	785b      	ldrb	r3, [r3, #1]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d11c      	bne.n	800ed1a <USB_EPStartXfer+0x318>
 800ece0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ece4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf4:	4413      	add	r3, r2
 800ecf6:	633b      	str	r3, [r7, #48]	; 0x30
 800ecf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	00da      	lsls	r2, r3, #3
 800ed06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed08:	4413      	add	r3, r2
 800ed0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ed0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ed1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	895b      	ldrh	r3, [r3, #10]
 800ed26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6959      	ldr	r1, [r3, #20]
 800ed36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ed40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ed44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ed48:	6800      	ldr	r0, [r0, #0]
 800ed4a:	f001 fa2f 	bl	80101ac <USB_WritePMA>
            ep->xfer_buff += len;
 800ed4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	695a      	ldr	r2, [r3, #20]
 800ed5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed5e:	441a      	add	r2, r3
 800ed60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ed6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6a1a      	ldr	r2, [r3, #32]
 800ed78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d90f      	bls.n	800eda8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ed88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	6a1a      	ldr	r2, [r3, #32]
 800ed94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed98:	1ad2      	subs	r2, r2, r3
 800ed9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	621a      	str	r2, [r3, #32]
 800eda6:	e00e      	b.n	800edc6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800eda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	6a1b      	ldr	r3, [r3, #32]
 800edb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800edb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2200      	movs	r2, #0
 800edc4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800edc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	785b      	ldrb	r3, [r3, #1]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d177      	bne.n	800eec6 <USB_EPStartXfer+0x4c4>
 800edd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	61bb      	str	r3, [r7, #24]
 800ede2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ede6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	461a      	mov	r2, r3
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	4413      	add	r3, r2
 800edf8:	61bb      	str	r3, [r7, #24]
 800edfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	00da      	lsls	r2, r3, #3
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee10:	617b      	str	r3, [r7, #20]
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	801a      	strh	r2, [r3, #0]
 800ee22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee26:	2b3e      	cmp	r3, #62	; 0x3e
 800ee28:	d921      	bls.n	800ee6e <USB_EPStartXfer+0x46c>
 800ee2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee2e:	095b      	lsrs	r3, r3, #5
 800ee30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ee34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee38:	f003 031f 	and.w	r3, r3, #31
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d104      	bne.n	800ee4a <USB_EPStartXfer+0x448>
 800ee40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ee44:	3b01      	subs	r3, #1
 800ee46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	029b      	lsls	r3, r3, #10
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	801a      	strh	r2, [r3, #0]
 800ee6c:	e056      	b.n	800ef1c <USB_EPStartXfer+0x51a>
 800ee6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d10a      	bne.n	800ee8c <USB_EPStartXfer+0x48a>
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	881b      	ldrh	r3, [r3, #0]
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	801a      	strh	r2, [r3, #0]
 800ee8a:	e047      	b.n	800ef1c <USB_EPStartXfer+0x51a>
 800ee8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee90:	085b      	lsrs	r3, r3, #1
 800ee92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ee96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee9a:	f003 0301 	and.w	r3, r3, #1
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d004      	beq.n	800eeac <USB_EPStartXfer+0x4aa>
 800eea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eea6:	3301      	adds	r3, #1
 800eea8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	881b      	ldrh	r3, [r3, #0]
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	029b      	lsls	r3, r3, #10
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4313      	orrs	r3, r2
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	801a      	strh	r2, [r3, #0]
 800eec4:	e02a      	b.n	800ef1c <USB_EPStartXfer+0x51a>
 800eec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	785b      	ldrb	r3, [r3, #1]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d122      	bne.n	800ef1c <USB_EPStartXfer+0x51a>
 800eed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	623b      	str	r3, [r7, #32]
 800eee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	461a      	mov	r2, r3
 800eef4:	6a3b      	ldr	r3, [r7, #32]
 800eef6:	4413      	add	r3, r2
 800eef8:	623b      	str	r3, [r7, #32]
 800eefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	00da      	lsls	r2, r3, #3
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ef10:	61fb      	str	r3, [r7, #28]
 800ef12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ef1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	891b      	ldrh	r3, [r3, #8]
 800ef28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ef2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	6959      	ldr	r1, [r3, #20]
 800ef38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ef42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ef46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ef4a:	6800      	ldr	r0, [r0, #0]
 800ef4c:	f001 f92e 	bl	80101ac <USB_WritePMA>
 800ef50:	e3ee      	b.n	800f730 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ef52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	785b      	ldrb	r3, [r3, #1]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d177      	bne.n	800f052 <USB_EPStartXfer+0x650>
 800ef62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	461a      	mov	r2, r3
 800ef80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef82:	4413      	add	r3, r2
 800ef84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	00da      	lsls	r2, r3, #3
 800ef94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef96:	4413      	add	r3, r2
 800ef98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ef9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ef9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efa0:	881b      	ldrh	r3, [r3, #0]
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efac:	801a      	strh	r2, [r3, #0]
 800efae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efb2:	2b3e      	cmp	r3, #62	; 0x3e
 800efb4:	d921      	bls.n	800effa <USB_EPStartXfer+0x5f8>
 800efb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efba:	095b      	lsrs	r3, r3, #5
 800efbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800efc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efc4:	f003 031f 	and.w	r3, r3, #31
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d104      	bne.n	800efd6 <USB_EPStartXfer+0x5d4>
 800efcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efd0:	3b01      	subs	r3, #1
 800efd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800efd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	b29a      	uxth	r2, r3
 800efdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	029b      	lsls	r3, r3, #10
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	4313      	orrs	r3, r2
 800efe8:	b29b      	uxth	r3, r3
 800efea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff6:	801a      	strh	r2, [r3, #0]
 800eff8:	e056      	b.n	800f0a8 <USB_EPStartXfer+0x6a6>
 800effa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800effe:	2b00      	cmp	r3, #0
 800f000:	d10a      	bne.n	800f018 <USB_EPStartXfer+0x616>
 800f002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	b29b      	uxth	r3, r3
 800f008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f010:	b29a      	uxth	r2, r3
 800f012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f014:	801a      	strh	r2, [r3, #0]
 800f016:	e047      	b.n	800f0a8 <USB_EPStartXfer+0x6a6>
 800f018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f01c:	085b      	lsrs	r3, r3, #1
 800f01e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d004      	beq.n	800f038 <USB_EPStartXfer+0x636>
 800f02e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f032:	3301      	adds	r3, #1
 800f034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f03a:	881b      	ldrh	r3, [r3, #0]
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f042:	b29b      	uxth	r3, r3
 800f044:	029b      	lsls	r3, r3, #10
 800f046:	b29b      	uxth	r3, r3
 800f048:	4313      	orrs	r3, r2
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f04e:	801a      	strh	r2, [r3, #0]
 800f050:	e02a      	b.n	800f0a8 <USB_EPStartXfer+0x6a6>
 800f052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	785b      	ldrb	r3, [r3, #1]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d122      	bne.n	800f0a8 <USB_EPStartXfer+0x6a6>
 800f062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	653b      	str	r3, [r7, #80]	; 0x50
 800f06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	461a      	mov	r2, r3
 800f080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f082:	4413      	add	r3, r2
 800f084:	653b      	str	r3, [r7, #80]	; 0x50
 800f086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f08a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	00da      	lsls	r2, r3, #3
 800f094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f096:	4413      	add	r3, r2
 800f098:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f09c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	891b      	ldrh	r3, [r3, #8]
 800f0b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	6959      	ldr	r1, [r3, #20]
 800f0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f0ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f0d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f0d6:	6800      	ldr	r0, [r0, #0]
 800f0d8:	f001 f868 	bl	80101ac <USB_WritePMA>
            ep->xfer_buff += len;
 800f0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	695a      	ldr	r2, [r3, #20]
 800f0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0ec:	441a      	add	r2, r3
 800f0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	6a1a      	ldr	r2, [r3, #32]
 800f106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f10a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	429a      	cmp	r2, r3
 800f114:	d90f      	bls.n	800f136 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800f116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6a1a      	ldr	r2, [r3, #32]
 800f122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f126:	1ad2      	subs	r2, r2, r3
 800f128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f12c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	621a      	str	r2, [r3, #32]
 800f134:	e00e      	b.n	800f154 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800f136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f14a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2200      	movs	r2, #0
 800f152:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	643b      	str	r3, [r7, #64]	; 0x40
 800f160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	785b      	ldrb	r3, [r3, #1]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d177      	bne.n	800f260 <USB_EPStartXfer+0x85e>
 800f170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	461a      	mov	r2, r3
 800f18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f190:	4413      	add	r3, r2
 800f192:	63bb      	str	r3, [r7, #56]	; 0x38
 800f194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	00da      	lsls	r2, r3, #3
 800f1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a4:	4413      	add	r3, r2
 800f1a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800f1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ae:	881b      	ldrh	r3, [r3, #0]
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ba:	801a      	strh	r2, [r3, #0]
 800f1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1c0:	2b3e      	cmp	r3, #62	; 0x3e
 800f1c2:	d921      	bls.n	800f208 <USB_EPStartXfer+0x806>
 800f1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1c8:	095b      	lsrs	r3, r3, #5
 800f1ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1d2:	f003 031f 	and.w	r3, r3, #31
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d104      	bne.n	800f1e4 <USB_EPStartXfer+0x7e2>
 800f1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f1de:	3b01      	subs	r3, #1
 800f1e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e6:	881b      	ldrh	r3, [r3, #0]
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	029b      	lsls	r3, r3, #10
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f200:	b29a      	uxth	r2, r3
 800f202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f204:	801a      	strh	r2, [r3, #0]
 800f206:	e050      	b.n	800f2aa <USB_EPStartXfer+0x8a8>
 800f208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10a      	bne.n	800f226 <USB_EPStartXfer+0x824>
 800f210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	b29b      	uxth	r3, r3
 800f216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f21a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f21e:	b29a      	uxth	r2, r3
 800f220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f222:	801a      	strh	r2, [r3, #0]
 800f224:	e041      	b.n	800f2aa <USB_EPStartXfer+0x8a8>
 800f226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f22a:	085b      	lsrs	r3, r3, #1
 800f22c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f234:	f003 0301 	and.w	r3, r3, #1
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d004      	beq.n	800f246 <USB_EPStartXfer+0x844>
 800f23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f240:	3301      	adds	r3, #1
 800f242:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f250:	b29b      	uxth	r3, r3
 800f252:	029b      	lsls	r3, r3, #10
 800f254:	b29b      	uxth	r3, r3
 800f256:	4313      	orrs	r3, r2
 800f258:	b29a      	uxth	r2, r3
 800f25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f25c:	801a      	strh	r2, [r3, #0]
 800f25e:	e024      	b.n	800f2aa <USB_EPStartXfer+0x8a8>
 800f260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	785b      	ldrb	r3, [r3, #1]
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d11c      	bne.n	800f2aa <USB_EPStartXfer+0x8a8>
 800f270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f27e:	b29b      	uxth	r3, r3
 800f280:	461a      	mov	r2, r3
 800f282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f284:	4413      	add	r3, r2
 800f286:	643b      	str	r3, [r7, #64]	; 0x40
 800f288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	00da      	lsls	r2, r3, #3
 800f296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f298:	4413      	add	r3, r2
 800f29a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	895b      	ldrh	r3, [r3, #10]
 800f2b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	6959      	ldr	r1, [r3, #20]
 800f2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f2d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f2d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f2d8:	6800      	ldr	r0, [r0, #0]
 800f2da:	f000 ff67 	bl	80101ac <USB_WritePMA>
 800f2de:	e227      	b.n	800f730 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	6a1b      	ldr	r3, [r3, #32]
 800f2ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f316:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f31e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	441a      	add	r2, r3
 800f334:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f33c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f348:	b29b      	uxth	r3, r3
 800f34a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f35c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f366:	b29b      	uxth	r3, r3
 800f368:	461a      	mov	r2, r3
 800f36a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f36c:	4413      	add	r3, r2
 800f36e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	00da      	lsls	r2, r3, #3
 800f37e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f380:	4413      	add	r3, r2
 800f382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f386:	65bb      	str	r3, [r7, #88]	; 0x58
 800f388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f390:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	891b      	ldrh	r3, [r3, #8]
 800f39e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	6959      	ldr	r1, [r3, #20]
 800f3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f3b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f3bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f3c0:	6800      	ldr	r0, [r0, #0]
 800f3c2:	f000 fef3 	bl	80101ac <USB_WritePMA>
 800f3c6:	e1b3      	b.n	800f730 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	6a1a      	ldr	r2, [r3, #32]
 800f3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3d8:	1ad2      	subs	r2, r2, r3
 800f3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	4413      	add	r3, r2
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	b29b      	uxth	r3, r3
 800f404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 80c6 	beq.w	800f59a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	673b      	str	r3, [r7, #112]	; 0x70
 800f41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	785b      	ldrb	r3, [r3, #1]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d177      	bne.n	800f51a <USB_EPStartXfer+0xb18>
 800f42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f42e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	66bb      	str	r3, [r7, #104]	; 0x68
 800f436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f43a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f444:	b29b      	uxth	r3, r3
 800f446:	461a      	mov	r2, r3
 800f448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f44a:	4413      	add	r3, r2
 800f44c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	00da      	lsls	r2, r3, #3
 800f45c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f45e:	4413      	add	r3, r2
 800f460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f464:	667b      	str	r3, [r7, #100]	; 0x64
 800f466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f470:	b29a      	uxth	r2, r3
 800f472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f474:	801a      	strh	r2, [r3, #0]
 800f476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f47a:	2b3e      	cmp	r3, #62	; 0x3e
 800f47c:	d921      	bls.n	800f4c2 <USB_EPStartXfer+0xac0>
 800f47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f482:	095b      	lsrs	r3, r3, #5
 800f484:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f48c:	f003 031f 	and.w	r3, r3, #31
 800f490:	2b00      	cmp	r3, #0
 800f492:	d104      	bne.n	800f49e <USB_EPStartXfer+0xa9c>
 800f494:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f498:	3b01      	subs	r3, #1
 800f49a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f49e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	029b      	lsls	r3, r3, #10
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4be:	801a      	strh	r2, [r3, #0]
 800f4c0:	e050      	b.n	800f564 <USB_EPStartXfer+0xb62>
 800f4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10a      	bne.n	800f4e0 <USB_EPStartXfer+0xade>
 800f4ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4cc:	881b      	ldrh	r3, [r3, #0]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4dc:	801a      	strh	r2, [r3, #0]
 800f4de:	e041      	b.n	800f564 <USB_EPStartXfer+0xb62>
 800f4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4e4:	085b      	lsrs	r3, r3, #1
 800f4e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4ee:	f003 0301 	and.w	r3, r3, #1
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d004      	beq.n	800f500 <USB_EPStartXfer+0xafe>
 800f4f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f502:	881b      	ldrh	r3, [r3, #0]
 800f504:	b29a      	uxth	r2, r3
 800f506:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	029b      	lsls	r3, r3, #10
 800f50e:	b29b      	uxth	r3, r3
 800f510:	4313      	orrs	r3, r2
 800f512:	b29a      	uxth	r2, r3
 800f514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f516:	801a      	strh	r2, [r3, #0]
 800f518:	e024      	b.n	800f564 <USB_EPStartXfer+0xb62>
 800f51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	785b      	ldrb	r3, [r3, #1]
 800f526:	2b01      	cmp	r3, #1
 800f528:	d11c      	bne.n	800f564 <USB_EPStartXfer+0xb62>
 800f52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f52e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f538:	b29b      	uxth	r3, r3
 800f53a:	461a      	mov	r2, r3
 800f53c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f53e:	4413      	add	r3, r2
 800f540:	673b      	str	r3, [r7, #112]	; 0x70
 800f542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	00da      	lsls	r2, r3, #3
 800f550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f552:	4413      	add	r3, r2
 800f554:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f55e:	b29a      	uxth	r2, r3
 800f560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f562:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	895b      	ldrh	r3, [r3, #10]
 800f570:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	6959      	ldr	r1, [r3, #20]
 800f580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f584:	b29b      	uxth	r3, r3
 800f586:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f58a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f58e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f592:	6800      	ldr	r0, [r0, #0]
 800f594:	f000 fe0a 	bl	80101ac <USB_WritePMA>
 800f598:	e0ca      	b.n	800f730 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f59e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	785b      	ldrb	r3, [r3, #1]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d177      	bne.n	800f69a <USB_EPStartXfer+0xc98>
 800f5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5ca:	4413      	add	r3, r2
 800f5cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	00da      	lsls	r2, r3, #3
 800f5dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5de:	4413      	add	r3, r2
 800f5e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f5e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f5e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5f4:	801a      	strh	r2, [r3, #0]
 800f5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5fa:	2b3e      	cmp	r3, #62	; 0x3e
 800f5fc:	d921      	bls.n	800f642 <USB_EPStartXfer+0xc40>
 800f5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f602:	095b      	lsrs	r3, r3, #5
 800f604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f60c:	f003 031f 	and.w	r3, r3, #31
 800f610:	2b00      	cmp	r3, #0
 800f612:	d104      	bne.n	800f61e <USB_EPStartXfer+0xc1c>
 800f614:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f618:	3b01      	subs	r3, #1
 800f61a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f61e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	b29a      	uxth	r2, r3
 800f624:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f628:	b29b      	uxth	r3, r3
 800f62a:	029b      	lsls	r3, r3, #10
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4313      	orrs	r3, r2
 800f630:	b29b      	uxth	r3, r3
 800f632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f63e:	801a      	strh	r2, [r3, #0]
 800f640:	e05c      	b.n	800f6fc <USB_EPStartXfer+0xcfa>
 800f642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10a      	bne.n	800f660 <USB_EPStartXfer+0xc5e>
 800f64a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	b29b      	uxth	r3, r3
 800f650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f658:	b29a      	uxth	r2, r3
 800f65a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f65c:	801a      	strh	r2, [r3, #0]
 800f65e:	e04d      	b.n	800f6fc <USB_EPStartXfer+0xcfa>
 800f660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f664:	085b      	lsrs	r3, r3, #1
 800f666:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f66e:	f003 0301 	and.w	r3, r3, #1
 800f672:	2b00      	cmp	r3, #0
 800f674:	d004      	beq.n	800f680 <USB_EPStartXfer+0xc7e>
 800f676:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f67a:	3301      	adds	r3, #1
 800f67c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f682:	881b      	ldrh	r3, [r3, #0]
 800f684:	b29a      	uxth	r2, r3
 800f686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	029b      	lsls	r3, r3, #10
 800f68e:	b29b      	uxth	r3, r3
 800f690:	4313      	orrs	r3, r2
 800f692:	b29a      	uxth	r2, r3
 800f694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f696:	801a      	strh	r2, [r3, #0]
 800f698:	e030      	b.n	800f6fc <USB_EPStartXfer+0xcfa>
 800f69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f69e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	785b      	ldrb	r3, [r3, #1]
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d128      	bne.n	800f6fc <USB_EPStartXfer+0xcfa>
 800f6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f6ce:	4413      	add	r3, r2
 800f6d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	00da      	lsls	r2, r3, #3
 800f6e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f6e6:	4413      	add	r3, r2
 800f6e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f6ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6f4:	b29a      	uxth	r2, r3
 800f6f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	891b      	ldrh	r3, [r3, #8]
 800f708:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	6959      	ldr	r1, [r3, #20]
 800f718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f722:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f726:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f72a:	6800      	ldr	r0, [r0, #0]
 800f72c:	f000 fd3e 	bl	80101ac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f73e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	4413      	add	r3, r2
 800f74a:	881b      	ldrh	r3, [r3, #0]
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f756:	817b      	strh	r3, [r7, #10]
 800f758:	897b      	ldrh	r3, [r7, #10]
 800f75a:	f083 0310 	eor.w	r3, r3, #16
 800f75e:	817b      	strh	r3, [r7, #10]
 800f760:	897b      	ldrh	r3, [r7, #10]
 800f762:	f083 0320 	eor.w	r3, r3, #32
 800f766:	817b      	strh	r3, [r7, #10]
 800f768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f76c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	441a      	add	r2, r3
 800f782:	897b      	ldrh	r3, [r7, #10]
 800f784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f78c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f794:	b29b      	uxth	r3, r3
 800f796:	8013      	strh	r3, [r2, #0]
 800f798:	f000 bcde 	b.w	8010158 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	7b1b      	ldrb	r3, [r3, #12]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f040 80bb 	bne.w	800f924 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	699a      	ldr	r2, [r3, #24]
 800f7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d917      	bls.n	800f7fa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800f7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800f7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	699a      	ldr	r2, [r3, #24]
 800f7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7ea:	1ad2      	subs	r2, r2, r3
 800f7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	619a      	str	r2, [r3, #24]
 800f7f8:	e00e      	b.n	800f818 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800f7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	699b      	ldr	r3, [r3, #24]
 800f806:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800f80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2200      	movs	r2, #0
 800f816:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f81c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f82a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f834:	b29b      	uxth	r3, r3
 800f836:	461a      	mov	r2, r3
 800f838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f83c:	4413      	add	r3, r2
 800f83e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	00da      	lsls	r2, r3, #3
 800f850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f854:	4413      	add	r3, r2
 800f856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f85a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f85e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	b29b      	uxth	r3, r3
 800f866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f870:	801a      	strh	r2, [r3, #0]
 800f872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f876:	2b3e      	cmp	r3, #62	; 0x3e
 800f878:	d924      	bls.n	800f8c4 <USB_EPStartXfer+0xec2>
 800f87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f87e:	095b      	lsrs	r3, r3, #5
 800f880:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f888:	f003 031f 	and.w	r3, r3, #31
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d104      	bne.n	800f89a <USB_EPStartXfer+0xe98>
 800f890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f894:	3b01      	subs	r3, #1
 800f896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	029b      	lsls	r3, r3, #10
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f8b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f8b8:	b29a      	uxth	r2, r3
 800f8ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8be:	801a      	strh	r2, [r3, #0]
 800f8c0:	f000 bc10 	b.w	80100e4 <USB_EPStartXfer+0x16e2>
 800f8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10c      	bne.n	800f8e6 <USB_EPStartXfer+0xee4>
 800f8cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f8d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8e2:	801a      	strh	r2, [r3, #0]
 800f8e4:	e3fe      	b.n	80100e4 <USB_EPStartXfer+0x16e2>
 800f8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8ea:	085b      	lsrs	r3, r3, #1
 800f8ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8f4:	f003 0301 	and.w	r3, r3, #1
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d004      	beq.n	800f906 <USB_EPStartXfer+0xf04>
 800f8fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f900:	3301      	adds	r3, #1
 800f902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f90a:	881b      	ldrh	r3, [r3, #0]
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f912:	b29b      	uxth	r3, r3
 800f914:	029b      	lsls	r3, r3, #10
 800f916:	b29b      	uxth	r3, r3
 800f918:	4313      	orrs	r3, r2
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f920:	801a      	strh	r2, [r3, #0]
 800f922:	e3df      	b.n	80100e4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	78db      	ldrb	r3, [r3, #3]
 800f930:	2b02      	cmp	r3, #2
 800f932:	f040 8218 	bne.w	800fd66 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f93a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	785b      	ldrb	r3, [r3, #1]
 800f942:	2b00      	cmp	r3, #0
 800f944:	f040 809d 	bne.w	800fa82 <USB_EPStartXfer+0x1080>
 800f948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f94c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f95a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f964:	b29b      	uxth	r3, r3
 800f966:	461a      	mov	r2, r3
 800f968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f96c:	4413      	add	r3, r2
 800f96e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	00da      	lsls	r2, r3, #3
 800f980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f984:	4413      	add	r3, r2
 800f986:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f98a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f98e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	b29b      	uxth	r3, r3
 800f996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f9a0:	801a      	strh	r2, [r3, #0]
 800f9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	691b      	ldr	r3, [r3, #16]
 800f9ae:	2b3e      	cmp	r3, #62	; 0x3e
 800f9b0:	d92b      	bls.n	800fa0a <USB_EPStartXfer+0x1008>
 800f9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	095b      	lsrs	r3, r3, #5
 800f9c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	691b      	ldr	r3, [r3, #16]
 800f9d0:	f003 031f 	and.w	r3, r3, #31
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d104      	bne.n	800f9e2 <USB_EPStartXfer+0xfe0>
 800f9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f9e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f9e6:	881b      	ldrh	r3, [r3, #0]
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	029b      	lsls	r3, r3, #10
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa06:	801a      	strh	r2, [r3, #0]
 800fa08:	e070      	b.n	800faec <USB_EPStartXfer+0x10ea>
 800fa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10c      	bne.n	800fa34 <USB_EPStartXfer+0x1032>
 800fa1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa30:	801a      	strh	r2, [r3, #0]
 800fa32:	e05b      	b.n	800faec <USB_EPStartXfer+0x10ea>
 800fa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	691b      	ldr	r3, [r3, #16]
 800fa40:	085b      	lsrs	r3, r3, #1
 800fa42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fa46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	691b      	ldr	r3, [r3, #16]
 800fa52:	f003 0301 	and.w	r3, r3, #1
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d004      	beq.n	800fa64 <USB_EPStartXfer+0x1062>
 800fa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa5e:	3301      	adds	r3, #1
 800fa60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fa64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	b29a      	uxth	r2, r3
 800fa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	029b      	lsls	r3, r3, #10
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	4313      	orrs	r3, r2
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa7e:	801a      	strh	r2, [r3, #0]
 800fa80:	e034      	b.n	800faec <USB_EPStartXfer+0x10ea>
 800fa82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	785b      	ldrb	r3, [r3, #1]
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d12c      	bne.n	800faec <USB_EPStartXfer+0x10ea>
 800fa92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800faa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800faae:	b29b      	uxth	r3, r3
 800fab0:	461a      	mov	r2, r3
 800fab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fab6:	4413      	add	r3, r2
 800fab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fabc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	00da      	lsls	r2, r3, #3
 800faca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800face:	4413      	add	r3, r2
 800fad0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fadc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800faea:	801a      	strh	r2, [r3, #0]
 800faec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fafe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	785b      	ldrb	r3, [r3, #1]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f040 809d 	bne.w	800fc46 <USB_EPStartXfer+0x1244>
 800fb0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb30:	4413      	add	r3, r2
 800fb32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	00da      	lsls	r2, r3, #3
 800fb44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb48:	4413      	add	r3, r2
 800fb4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fb52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fb64:	801a      	strh	r2, [r3, #0]
 800fb66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	691b      	ldr	r3, [r3, #16]
 800fb72:	2b3e      	cmp	r3, #62	; 0x3e
 800fb74:	d92b      	bls.n	800fbce <USB_EPStartXfer+0x11cc>
 800fb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	095b      	lsrs	r3, r3, #5
 800fb84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	f003 031f 	and.w	r3, r3, #31
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d104      	bne.n	800fba6 <USB_EPStartXfer+0x11a4>
 800fb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fba0:	3b01      	subs	r3, #1
 800fba2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	029b      	lsls	r3, r3, #10
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbc4:	b29a      	uxth	r2, r3
 800fbc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fbca:	801a      	strh	r2, [r3, #0]
 800fbcc:	e069      	b.n	800fca2 <USB_EPStartXfer+0x12a0>
 800fbce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	691b      	ldr	r3, [r3, #16]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d10c      	bne.n	800fbf8 <USB_EPStartXfer+0x11f6>
 800fbde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fbf4:	801a      	strh	r2, [r3, #0]
 800fbf6:	e054      	b.n	800fca2 <USB_EPStartXfer+0x12a0>
 800fbf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	085b      	lsrs	r3, r3, #1
 800fc06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fc0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	f003 0301 	and.w	r3, r3, #1
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d004      	beq.n	800fc28 <USB_EPStartXfer+0x1226>
 800fc1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc22:	3301      	adds	r3, #1
 800fc24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fc28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	029b      	lsls	r3, r3, #10
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fc42:	801a      	strh	r2, [r3, #0]
 800fc44:	e02d      	b.n	800fca2 <USB_EPStartXfer+0x12a0>
 800fc46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	785b      	ldrb	r3, [r3, #1]
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d125      	bne.n	800fca2 <USB_EPStartXfer+0x12a0>
 800fc56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	461a      	mov	r2, r3
 800fc68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc6c:	4413      	add	r3, r2
 800fc6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fc72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	00da      	lsls	r2, r3, #3
 800fc80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc84:	4413      	add	r3, r2
 800fc86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fc8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fc8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fca0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800fca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	69db      	ldr	r3, [r3, #28]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f000 8218 	beq.w	80100e4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800fcb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	4413      	add	r3, r2
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800fcd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fcd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d005      	beq.n	800fcec <USB_EPStartXfer+0x12ea>
 800fce0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d10d      	bne.n	800fd08 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800fcec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fcf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f040 81f5 	bne.w	80100e4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800fcfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fcfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 81ee 	bne.w	80100e4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800fd08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	4413      	add	r3, r2
 800fd22:	881b      	ldrh	r3, [r3, #0]
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd2e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800fd32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	441a      	add	r2, r3
 800fd4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800fd50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	8013      	strh	r3, [r2, #0]
 800fd64:	e1be      	b.n	80100e4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800fd66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	78db      	ldrb	r3, [r3, #3]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	f040 81b4 	bne.w	80100e0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800fd78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	699a      	ldr	r2, [r3, #24]
 800fd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	691b      	ldr	r3, [r3, #16]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d917      	bls.n	800fdc4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800fd94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800fda4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fda8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	699a      	ldr	r2, [r3, #24]
 800fdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdb4:	1ad2      	subs	r2, r2, r3
 800fdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	619a      	str	r2, [r3, #24]
 800fdc2:	e00e      	b.n	800fde2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800fdc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	699b      	ldr	r3, [r3, #24]
 800fdd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800fdd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2200      	movs	r2, #0
 800fde0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800fde2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fde6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	785b      	ldrb	r3, [r3, #1]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f040 8085 	bne.w	800fefe <USB_EPStartXfer+0x14fc>
 800fdf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fe02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	461a      	mov	r2, r3
 800fe14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fe18:	4413      	add	r3, r2
 800fe1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fe1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	00da      	lsls	r2, r3, #3
 800fe2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fe30:	4413      	add	r3, r2
 800fe32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fe36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fe3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fe3e:	881b      	ldrh	r3, [r3, #0]
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fe4c:	801a      	strh	r2, [r3, #0]
 800fe4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe52:	2b3e      	cmp	r3, #62	; 0x3e
 800fe54:	d923      	bls.n	800fe9e <USB_EPStartXfer+0x149c>
 800fe56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe5a:	095b      	lsrs	r3, r3, #5
 800fe5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fe60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe64:	f003 031f 	and.w	r3, r3, #31
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d104      	bne.n	800fe76 <USB_EPStartXfer+0x1474>
 800fe6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe70:	3b01      	subs	r3, #1
 800fe72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fe76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	029b      	lsls	r3, r3, #10
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fe9a:	801a      	strh	r2, [r3, #0]
 800fe9c:	e060      	b.n	800ff60 <USB_EPStartXfer+0x155e>
 800fe9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10c      	bne.n	800fec0 <USB_EPStartXfer+0x14be>
 800fea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800feaa:	881b      	ldrh	r3, [r3, #0]
 800feac:	b29b      	uxth	r3, r3
 800feae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800feb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800febc:	801a      	strh	r2, [r3, #0]
 800febe:	e04f      	b.n	800ff60 <USB_EPStartXfer+0x155e>
 800fec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fec4:	085b      	lsrs	r3, r3, #1
 800fec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800feca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fece:	f003 0301 	and.w	r3, r3, #1
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d004      	beq.n	800fee0 <USB_EPStartXfer+0x14de>
 800fed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800feda:	3301      	adds	r3, #1
 800fedc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fee4:	881b      	ldrh	r3, [r3, #0]
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800feec:	b29b      	uxth	r3, r3
 800feee:	029b      	lsls	r3, r3, #10
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	4313      	orrs	r3, r2
 800fef4:	b29a      	uxth	r2, r3
 800fef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fefa:	801a      	strh	r2, [r3, #0]
 800fefc:	e030      	b.n	800ff60 <USB_EPStartXfer+0x155e>
 800fefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	785b      	ldrb	r3, [r3, #1]
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d128      	bne.n	800ff60 <USB_EPStartXfer+0x155e>
 800ff0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ff1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff32:	4413      	add	r3, r2
 800ff34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ff38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	00da      	lsls	r2, r3, #3
 800ff46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff4a:	4413      	add	r3, r2
 800ff4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ff50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ff54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ff5e:	801a      	strh	r2, [r3, #0]
 800ff60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ff6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	785b      	ldrb	r3, [r3, #1]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f040 8085 	bne.w	801008a <USB_EPStartXfer+0x1688>
 800ff80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ff8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ffa4:	4413      	add	r3, r2
 800ffa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ffaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	00da      	lsls	r2, r3, #3
 800ffb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ffbc:	4413      	add	r3, r2
 800ffbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ffc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ffc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ffca:	881b      	ldrh	r3, [r3, #0]
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ffd8:	801a      	strh	r2, [r3, #0]
 800ffda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffde:	2b3e      	cmp	r3, #62	; 0x3e
 800ffe0:	d923      	bls.n	801002a <USB_EPStartXfer+0x1628>
 800ffe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffe6:	095b      	lsrs	r3, r3, #5
 800ffe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ffec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fff0:	f003 031f 	and.w	r3, r3, #31
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d104      	bne.n	8010002 <USB_EPStartXfer+0x1600>
 800fff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fffc:	3b01      	subs	r3, #1
 800fffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010006:	881b      	ldrh	r3, [r3, #0]
 8010008:	b29a      	uxth	r2, r3
 801000a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801000e:	b29b      	uxth	r3, r3
 8010010:	029b      	lsls	r3, r3, #10
 8010012:	b29b      	uxth	r3, r3
 8010014:	4313      	orrs	r3, r2
 8010016:	b29b      	uxth	r3, r3
 8010018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801001c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010020:	b29a      	uxth	r2, r3
 8010022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010026:	801a      	strh	r2, [r3, #0]
 8010028:	e05c      	b.n	80100e4 <USB_EPStartXfer+0x16e2>
 801002a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10c      	bne.n	801004c <USB_EPStartXfer+0x164a>
 8010032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	b29b      	uxth	r3, r3
 801003a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801003e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010042:	b29a      	uxth	r2, r3
 8010044:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010048:	801a      	strh	r2, [r3, #0]
 801004a:	e04b      	b.n	80100e4 <USB_EPStartXfer+0x16e2>
 801004c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010050:	085b      	lsrs	r3, r3, #1
 8010052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801005a:	f003 0301 	and.w	r3, r3, #1
 801005e:	2b00      	cmp	r3, #0
 8010060:	d004      	beq.n	801006c <USB_EPStartXfer+0x166a>
 8010062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010066:	3301      	adds	r3, #1
 8010068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801006c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010070:	881b      	ldrh	r3, [r3, #0]
 8010072:	b29a      	uxth	r2, r3
 8010074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010078:	b29b      	uxth	r3, r3
 801007a:	029b      	lsls	r3, r3, #10
 801007c:	b29b      	uxth	r3, r3
 801007e:	4313      	orrs	r3, r2
 8010080:	b29a      	uxth	r2, r3
 8010082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010086:	801a      	strh	r2, [r3, #0]
 8010088:	e02c      	b.n	80100e4 <USB_EPStartXfer+0x16e2>
 801008a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801008e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	785b      	ldrb	r3, [r3, #1]
 8010096:	2b01      	cmp	r3, #1
 8010098:	d124      	bne.n	80100e4 <USB_EPStartXfer+0x16e2>
 801009a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801009e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	461a      	mov	r2, r3
 80100ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80100b0:	4413      	add	r3, r2
 80100b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80100b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	00da      	lsls	r2, r3, #3
 80100c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80100c8:	4413      	add	r3, r2
 80100ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80100ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80100d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80100dc:	801a      	strh	r2, [r3, #0]
 80100de:	e001      	b.n	80100e4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80100e0:	2301      	movs	r3, #1
 80100e2:	e03a      	b.n	801015a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80100e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4413      	add	r3, r2
 80100fe:	881b      	ldrh	r3, [r3, #0]
 8010100:	b29b      	uxth	r3, r3
 8010102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801010a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801010e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010112:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010116:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801011a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801011e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010122:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801012a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	441a      	add	r2, r3
 8010140:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801014c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010154:	b29b      	uxth	r3, r3
 8010156:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	460b      	mov	r3, r1
 801016e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d103      	bne.n	801017e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2280      	movs	r2, #128	; 0x80
 801017a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801018c:	b480      	push	{r7}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801019a:	b29b      	uxth	r3, r3
 801019c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801019e:	68fb      	ldr	r3, [r7, #12]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3714      	adds	r7, #20
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b08b      	sub	sp, #44	; 0x2c
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	4611      	mov	r1, r2
 80101b8:	461a      	mov	r2, r3
 80101ba:	460b      	mov	r3, r1
 80101bc:	80fb      	strh	r3, [r7, #6]
 80101be:	4613      	mov	r3, r2
 80101c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80101c2:	88bb      	ldrh	r3, [r7, #4]
 80101c4:	3301      	adds	r3, #1
 80101c6:	085b      	lsrs	r3, r3, #1
 80101c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80101d2:	88fa      	ldrh	r2, [r7, #6]
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	4413      	add	r3, r2
 80101d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	627b      	str	r3, [r7, #36]	; 0x24
 80101e2:	e01b      	b.n	801021c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	3301      	adds	r3, #1
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	021b      	lsls	r3, r3, #8
 80101f2:	b21a      	sxth	r2, r3
 80101f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101f8:	4313      	orrs	r3, r2
 80101fa:	b21b      	sxth	r3, r3
 80101fc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80101fe:	6a3b      	ldr	r3, [r7, #32]
 8010200:	8a7a      	ldrh	r2, [r7, #18]
 8010202:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	3302      	adds	r3, #2
 8010208:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	3301      	adds	r3, #1
 801020e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	3301      	adds	r3, #1
 8010214:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010218:	3b01      	subs	r3, #1
 801021a:	627b      	str	r3, [r7, #36]	; 0x24
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1e0      	bne.n	80101e4 <USB_WritePMA+0x38>
  }
}
 8010222:	bf00      	nop
 8010224:	bf00      	nop
 8010226:	372c      	adds	r7, #44	; 0x2c
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010230:	b480      	push	{r7}
 8010232:	b08b      	sub	sp, #44	; 0x2c
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	4611      	mov	r1, r2
 801023c:	461a      	mov	r2, r3
 801023e:	460b      	mov	r3, r1
 8010240:	80fb      	strh	r3, [r7, #6]
 8010242:	4613      	mov	r3, r2
 8010244:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010246:	88bb      	ldrh	r3, [r7, #4]
 8010248:	085b      	lsrs	r3, r3, #1
 801024a:	b29b      	uxth	r3, r3
 801024c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010256:	88fa      	ldrh	r2, [r7, #6]
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	4413      	add	r3, r2
 801025c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010260:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	627b      	str	r3, [r7, #36]	; 0x24
 8010266:	e018      	b.n	801029a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	b29b      	uxth	r3, r3
 801026e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010270:	6a3b      	ldr	r3, [r7, #32]
 8010272:	3302      	adds	r3, #2
 8010274:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	b2da      	uxtb	r2, r3
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	3301      	adds	r3, #1
 8010282:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	0a1b      	lsrs	r3, r3, #8
 8010288:	b2da      	uxtb	r2, r3
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	3301      	adds	r3, #1
 8010292:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010296:	3b01      	subs	r3, #1
 8010298:	627b      	str	r3, [r7, #36]	; 0x24
 801029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1e3      	bne.n	8010268 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80102a0:	88bb      	ldrh	r3, [r7, #4]
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d007      	beq.n	80102bc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80102ac:	6a3b      	ldr	r3, [r7, #32]
 80102ae:	881b      	ldrh	r3, [r3, #0]
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	b2da      	uxtb	r2, r3
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	701a      	strb	r2, [r3, #0]
  }
}
 80102bc:	bf00      	nop
 80102be:	372c      	adds	r7, #44	; 0x2c
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b086      	sub	sp, #24
 80102cc:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80102ce:	1d3b      	adds	r3, r7, #4
 80102d0:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	2200      	movs	r2, #0
 80102d6:	2100      	movs	r1, #0
 80102d8:	f64f 4070 	movw	r0, #64624	; 0xfc70
 80102dc:	f000 f920 	bl	8010520 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	330b      	adds	r3, #11
 80102e4:	78db      	ldrb	r3, [r3, #3]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3718      	adds	r7, #24
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
	...

080102f0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80102f0:	b480      	push	{r7}
 80102f2:	b08b      	sub	sp, #44	; 0x2c
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80102fc:	2300      	movs	r3, #0
 80102fe:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010300:	2300      	movs	r3, #0
 8010302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8010304:	2300      	movs	r3, #0
 8010306:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8010308:	2300      	movs	r3, #0
 801030a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 801030c:	2300      	movs	r3, #0
 801030e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010310:	2300      	movs	r3, #0
 8010312:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8010318:	4b4a      	ldr	r3, [pc, #296]	; (8010444 <SHCI_GetWirelessFwInfo+0x154>)
 801031a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801031c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010320:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801032a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4a44      	ldr	r2, [pc, #272]	; (8010448 <SHCI_GetWirelessFwInfo+0x158>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d10f      	bne.n	801035c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	695b      	ldr	r3, [r3, #20]
 8010340:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	699b      	ldr	r3, [r3, #24]
 8010346:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	69db      	ldr	r3, [r3, #28]
 801034c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	617b      	str	r3, [r7, #20]
 801035a:	e01a      	b.n	8010392 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010364:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8010368:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	691b      	ldr	r3, [r3, #16]
 8010370:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	695b      	ldr	r3, [r3, #20]
 8010378:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	699b      	ldr	r3, [r3, #24]
 8010380:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010394:	0e1b      	lsrs	r3, r3, #24
 8010396:	b2da      	uxtb	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	0c1b      	lsrs	r3, r3, #16
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80103a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a8:	0a1b      	lsrs	r3, r3, #8
 80103aa:	b2da      	uxtb	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	091b      	lsrs	r3, r3, #4
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	f003 030f 	and.w	r3, r3, #15
 80103ba:	b2da      	uxtb	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	f003 030f 	and.w	r3, r3, #15
 80103c8:	b2da      	uxtb	r2, r3
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80103ce:	6a3b      	ldr	r3, [r7, #32]
 80103d0:	0e1b      	lsrs	r3, r3, #24
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80103d8:	6a3b      	ldr	r3, [r7, #32]
 80103da:	0c1b      	lsrs	r3, r3, #16
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80103e2:	6a3b      	ldr	r3, [r7, #32]
 80103e4:	0a1b      	lsrs	r3, r3, #8
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80103ec:	6a3b      	ldr	r3, [r7, #32]
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	b2da      	uxtb	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	0e1b      	lsrs	r3, r3, #24
 8010400:	b2da      	uxtb	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	0c1b      	lsrs	r3, r3, #16
 801040a:	b2da      	uxtb	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010410:	69bb      	ldr	r3, [r7, #24]
 8010412:	0a1b      	lsrs	r3, r3, #8
 8010414:	b2da      	uxtb	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	0e1b      	lsrs	r3, r3, #24
 801041e:	b2da      	uxtb	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	0c1b      	lsrs	r3, r3, #16
 8010428:	b2da      	uxtb	r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	b2da      	uxtb	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	372c      	adds	r7, #44	; 0x2c
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr
 8010444:	58004000 	.word	0x58004000
 8010448:	a94656b9 	.word	0xa94656b9

0801044c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	4a08      	ldr	r2, [pc, #32]	; (801047c <shci_init+0x30>)
 801045c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801045e:	4a08      	ldr	r2, [pc, #32]	; (8010480 <shci_init+0x34>)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8010464:	4806      	ldr	r0, [pc, #24]	; (8010480 <shci_init+0x34>)
 8010466:	f000 f915 	bl	8010694 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	4618      	mov	r0, r3
 8010470:	f000 f898 	bl	80105a4 <TlInit>

  return;
 8010474:	bf00      	nop
}
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	200005b8 	.word	0x200005b8
 8010480:	20000598 	.word	0x20000598

08010484 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801048a:	4822      	ldr	r0, [pc, #136]	; (8010514 <shci_user_evt_proc+0x90>)
 801048c:	f000 fc4e 	bl	8010d2c <LST_is_empty>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d12b      	bne.n	80104ee <shci_user_evt_proc+0x6a>
 8010496:	4b20      	ldr	r3, [pc, #128]	; (8010518 <shci_user_evt_proc+0x94>)
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d027      	beq.n	80104ee <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801049e:	f107 030c 	add.w	r3, r7, #12
 80104a2:	4619      	mov	r1, r3
 80104a4:	481b      	ldr	r0, [pc, #108]	; (8010514 <shci_user_evt_proc+0x90>)
 80104a6:	f000 fcd0 	bl	8010e4a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80104aa:	4b1c      	ldr	r3, [pc, #112]	; (801051c <shci_user_evt_proc+0x98>)
 80104ac:	69db      	ldr	r3, [r3, #28]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00c      	beq.n	80104cc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80104b6:	2301      	movs	r3, #1
 80104b8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80104ba:	4b18      	ldr	r3, [pc, #96]	; (801051c <shci_user_evt_proc+0x98>)
 80104bc:	69db      	ldr	r3, [r3, #28]
 80104be:	1d3a      	adds	r2, r7, #4
 80104c0:	4610      	mov	r0, r2
 80104c2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80104c4:	793a      	ldrb	r2, [r7, #4]
 80104c6:	4b14      	ldr	r3, [pc, #80]	; (8010518 <shci_user_evt_proc+0x94>)
 80104c8:	701a      	strb	r2, [r3, #0]
 80104ca:	e002      	b.n	80104d2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80104cc:	4b12      	ldr	r3, [pc, #72]	; (8010518 <shci_user_evt_proc+0x94>)
 80104ce:	2201      	movs	r2, #1
 80104d0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80104d2:	4b11      	ldr	r3, [pc, #68]	; (8010518 <shci_user_evt_proc+0x94>)
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d004      	beq.n	80104e4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	4618      	mov	r0, r3
 80104de:	f000 fa8b 	bl	80109f8 <TL_MM_EvtDone>
 80104e2:	e004      	b.n	80104ee <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	4619      	mov	r1, r3
 80104e8:	480a      	ldr	r0, [pc, #40]	; (8010514 <shci_user_evt_proc+0x90>)
 80104ea:	f000 fc41 	bl	8010d70 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80104ee:	4809      	ldr	r0, [pc, #36]	; (8010514 <shci_user_evt_proc+0x90>)
 80104f0:	f000 fc1c 	bl	8010d2c <LST_is_empty>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d107      	bne.n	801050a <shci_user_evt_proc+0x86>
 80104fa:	4b07      	ldr	r3, [pc, #28]	; (8010518 <shci_user_evt_proc+0x94>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d003      	beq.n	801050a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8010502:	4804      	ldr	r0, [pc, #16]	; (8010514 <shci_user_evt_proc+0x90>)
 8010504:	f7f6 fc62 	bl	8006dcc <shci_notify_asynch_evt>
  }


  return;
 8010508:	bf00      	nop
 801050a:	bf00      	nop
}
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	20000088 	.word	0x20000088
 8010518:	20000098 	.word	0x20000098
 801051c:	20000598 	.word	0x20000598

08010520 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	60ba      	str	r2, [r7, #8]
 8010528:	607b      	str	r3, [r7, #4]
 801052a:	4603      	mov	r3, r0
 801052c:	81fb      	strh	r3, [r7, #14]
 801052e:	460b      	mov	r3, r1
 8010530:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8010532:	2000      	movs	r0, #0
 8010534:	f000 f868 	bl	8010608 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8010538:	4b17      	ldr	r3, [pc, #92]	; (8010598 <shci_send+0x78>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	89fa      	ldrh	r2, [r7, #14]
 801053e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8010542:	4b15      	ldr	r3, [pc, #84]	; (8010598 <shci_send+0x78>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	7b7a      	ldrb	r2, [r7, #13]
 8010548:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801054a:	4b13      	ldr	r3, [pc, #76]	; (8010598 <shci_send+0x78>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	330c      	adds	r3, #12
 8010550:	7b7a      	ldrb	r2, [r7, #13]
 8010552:	68b9      	ldr	r1, [r7, #8]
 8010554:	4618      	mov	r0, r3
 8010556:	f005 f8b6 	bl	80156c6 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801055a:	4b10      	ldr	r3, [pc, #64]	; (801059c <shci_send+0x7c>)
 801055c:	2201      	movs	r2, #1
 801055e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8010560:	4b0f      	ldr	r3, [pc, #60]	; (80105a0 <shci_send+0x80>)
 8010562:	691b      	ldr	r3, [r3, #16]
 8010564:	2100      	movs	r1, #0
 8010566:	2000      	movs	r0, #0
 8010568:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801056a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 801056e:	f7f6 fc44 	bl	8006dfa <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f103 0008 	add.w	r0, r3, #8
 8010578:	4b07      	ldr	r3, [pc, #28]	; (8010598 <shci_send+0x78>)
 801057a:	6819      	ldr	r1, [r3, #0]
 801057c:	4b06      	ldr	r3, [pc, #24]	; (8010598 <shci_send+0x78>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	789b      	ldrb	r3, [r3, #2]
 8010582:	3303      	adds	r3, #3
 8010584:	461a      	mov	r2, r3
 8010586:	f005 f89e 	bl	80156c6 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801058a:	2001      	movs	r0, #1
 801058c:	f000 f83c 	bl	8010608 <Cmd_SetStatus>

  return;
 8010590:	bf00      	nop
}
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	20000094 	.word	0x20000094
 801059c:	200005bc 	.word	0x200005bc
 80105a0:	20000598 	.word	0x20000598

080105a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80105ac:	4a10      	ldr	r2, [pc, #64]	; (80105f0 <TlInit+0x4c>)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80105b2:	4810      	ldr	r0, [pc, #64]	; (80105f4 <TlInit+0x50>)
 80105b4:	f000 fbaa 	bl	8010d0c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80105b8:	2001      	movs	r0, #1
 80105ba:	f000 f825 	bl	8010608 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80105be:	4b0e      	ldr	r3, [pc, #56]	; (80105f8 <TlInit+0x54>)
 80105c0:	2201      	movs	r2, #1
 80105c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80105c4:	4b0d      	ldr	r3, [pc, #52]	; (80105fc <TlInit+0x58>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00c      	beq.n	80105e6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80105d0:	4b0b      	ldr	r3, [pc, #44]	; (8010600 <TlInit+0x5c>)
 80105d2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80105d4:	4b0b      	ldr	r3, [pc, #44]	; (8010604 <TlInit+0x60>)
 80105d6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80105d8:	4b08      	ldr	r3, [pc, #32]	; (80105fc <TlInit+0x58>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f107 020c 	add.w	r2, r7, #12
 80105e0:	4610      	mov	r0, r2
 80105e2:	4798      	blx	r3
  }

  return;
 80105e4:	bf00      	nop
 80105e6:	bf00      	nop
}
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	20000094 	.word	0x20000094
 80105f4:	20000088 	.word	0x20000088
 80105f8:	20000098 	.word	0x20000098
 80105fc:	20000598 	.word	0x20000598
 8010600:	08010659 	.word	0x08010659
 8010604:	08010671 	.word	0x08010671

08010608 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	4603      	mov	r3, r0
 8010610:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8010612:	79fb      	ldrb	r3, [r7, #7]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10b      	bne.n	8010630 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8010618:	4b0d      	ldr	r3, [pc, #52]	; (8010650 <Cmd_SetStatus+0x48>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d003      	beq.n	8010628 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8010620:	4b0b      	ldr	r3, [pc, #44]	; (8010650 <Cmd_SetStatus+0x48>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2000      	movs	r0, #0
 8010626:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8010628:	4b0a      	ldr	r3, [pc, #40]	; (8010654 <Cmd_SetStatus+0x4c>)
 801062a:	2200      	movs	r2, #0
 801062c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801062e:	e00b      	b.n	8010648 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8010630:	4b08      	ldr	r3, [pc, #32]	; (8010654 <Cmd_SetStatus+0x4c>)
 8010632:	2201      	movs	r2, #1
 8010634:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8010636:	4b06      	ldr	r3, [pc, #24]	; (8010650 <Cmd_SetStatus+0x48>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d004      	beq.n	8010648 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801063e:	4b04      	ldr	r3, [pc, #16]	; (8010650 <Cmd_SetStatus+0x48>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2001      	movs	r0, #1
 8010644:	4798      	blx	r3
  return;
 8010646:	bf00      	nop
 8010648:	bf00      	nop
}
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	200005b8 	.word	0x200005b8
 8010654:	20000090 	.word	0x20000090

08010658 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8010660:	2000      	movs	r0, #0
 8010662:	f7f6 fbbf 	bl	8006de4 <shci_cmd_resp_release>

  return;
 8010666:	bf00      	nop
}
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
	...

08010670 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8010678:	6879      	ldr	r1, [r7, #4]
 801067a:	4805      	ldr	r0, [pc, #20]	; (8010690 <TlUserEvtReceived+0x20>)
 801067c:	f000 fb9e 	bl	8010dbc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010680:	4803      	ldr	r0, [pc, #12]	; (8010690 <TlUserEvtReceived+0x20>)
 8010682:	f7f6 fba3 	bl	8006dcc <shci_notify_asynch_evt>

  return;
 8010686:	bf00      	nop
}
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
 801068e:	bf00      	nop
 8010690:	20000088 	.word	0x20000088

08010694 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	4a05      	ldr	r2, [pc, #20]	; (80106b4 <shci_register_io_bus+0x20>)
 80106a0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4a04      	ldr	r2, [pc, #16]	; (80106b8 <shci_register_io_bus+0x24>)
 80106a6:	611a      	str	r2, [r3, #16]

  return;
 80106a8:	bf00      	nop
}
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr
 80106b4:	080107b1 	.word	0x080107b1
 80106b8:	08010805 	.word	0x08010805

080106bc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80106c0:	f004 f94c 	bl	801495c <HW_IPCC_Enable>

  return;
 80106c4:	bf00      	nop
}
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <TL_Init>:


void TL_Init( void )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80106cc:	4b10      	ldr	r3, [pc, #64]	; (8010710 <TL_Init+0x48>)
 80106ce:	4a11      	ldr	r2, [pc, #68]	; (8010714 <TL_Init+0x4c>)
 80106d0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80106d2:	4b0f      	ldr	r3, [pc, #60]	; (8010710 <TL_Init+0x48>)
 80106d4:	4a10      	ldr	r2, [pc, #64]	; (8010718 <TL_Init+0x50>)
 80106d6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80106d8:	4b0d      	ldr	r3, [pc, #52]	; (8010710 <TL_Init+0x48>)
 80106da:	4a10      	ldr	r2, [pc, #64]	; (801071c <TL_Init+0x54>)
 80106dc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80106de:	4b0c      	ldr	r3, [pc, #48]	; (8010710 <TL_Init+0x48>)
 80106e0:	4a0f      	ldr	r2, [pc, #60]	; (8010720 <TL_Init+0x58>)
 80106e2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80106e4:	4b0a      	ldr	r3, [pc, #40]	; (8010710 <TL_Init+0x48>)
 80106e6:	4a0f      	ldr	r2, [pc, #60]	; (8010724 <TL_Init+0x5c>)
 80106e8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80106ea:	4b09      	ldr	r3, [pc, #36]	; (8010710 <TL_Init+0x48>)
 80106ec:	4a0e      	ldr	r2, [pc, #56]	; (8010728 <TL_Init+0x60>)
 80106ee:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80106f0:	4b07      	ldr	r3, [pc, #28]	; (8010710 <TL_Init+0x48>)
 80106f2:	4a0e      	ldr	r2, [pc, #56]	; (801072c <TL_Init+0x64>)
 80106f4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80106f6:	4b06      	ldr	r3, [pc, #24]	; (8010710 <TL_Init+0x48>)
 80106f8:	4a0d      	ldr	r2, [pc, #52]	; (8010730 <TL_Init+0x68>)
 80106fa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80106fc:	4b04      	ldr	r3, [pc, #16]	; (8010710 <TL_Init+0x48>)
 80106fe:	4a0d      	ldr	r2, [pc, #52]	; (8010734 <TL_Init+0x6c>)
 8010700:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8010702:	4b03      	ldr	r3, [pc, #12]	; (8010710 <TL_Init+0x48>)
 8010704:	4a0c      	ldr	r2, [pc, #48]	; (8010738 <TL_Init+0x70>)
 8010706:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8010708:	f004 f93c 	bl	8014984 <HW_IPCC_Init>

  return;
 801070c:	bf00      	nop
}
 801070e:	bd80      	pop	{r7, pc}
 8010710:	20030000 	.word	0x20030000
 8010714:	20030028 	.word	0x20030028
 8010718:	20030048 	.word	0x20030048
 801071c:	20030058 	.word	0x20030058
 8010720:	20030068 	.word	0x20030068
 8010724:	20030070 	.word	0x20030070
 8010728:	20030078 	.word	0x20030078
 801072c:	20030080 	.word	0x20030080
 8010730:	2003009c 	.word	0x2003009c
 8010734:	200300a0 	.word	0x200300a0
 8010738:	200300ac 	.word	0x200300ac

0801073c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010742:	e01c      	b.n	801077e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010744:	1d3b      	adds	r3, r7, #4
 8010746:	4619      	mov	r1, r3
 8010748:	4812      	ldr	r0, [pc, #72]	; (8010794 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801074a:	f000 fb7e 	bl	8010e4a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	7a5b      	ldrb	r3, [r3, #9]
 8010752:	2b0f      	cmp	r3, #15
 8010754:	d003      	beq.n	801075e <HW_IPCC_BLE_RxEvtNot+0x22>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	7a5b      	ldrb	r3, [r3, #9]
 801075a:	2b0e      	cmp	r3, #14
 801075c:	d105      	bne.n	801076a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4619      	mov	r1, r3
 8010762:	2002      	movs	r0, #2
 8010764:	f000 f9ac 	bl	8010ac0 <OutputDbgTrace>
 8010768:	e004      	b.n	8010774 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4619      	mov	r1, r3
 801076e:	2003      	movs	r0, #3
 8010770:	f000 f9a6 	bl	8010ac0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010774:	4b08      	ldr	r3, [pc, #32]	; (8010798 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	4610      	mov	r0, r2
 801077c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801077e:	4805      	ldr	r0, [pc, #20]	; (8010794 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010780:	f000 fad4 	bl	8010d2c <LST_is_empty>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d0dc      	beq.n	8010744 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801078a:	bf00      	nop
}
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	200300c8 	.word	0x200300c8
 8010798:	200005c8 	.word	0x200005c8

0801079c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80107a0:	4b02      	ldr	r3, [pc, #8]	; (80107ac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4798      	blx	r3

  return;
 80107a6:	bf00      	nop
}
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	200005cc 	.word	0x200005cc

080107b0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80107bc:	480d      	ldr	r0, [pc, #52]	; (80107f4 <TL_SYS_Init+0x44>)
 80107be:	f000 faa5 	bl	8010d0c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80107c2:	4b0d      	ldr	r3, [pc, #52]	; (80107f8 <TL_SYS_Init+0x48>)
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	689a      	ldr	r2, [r3, #8]
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	4a08      	ldr	r2, [pc, #32]	; (80107f4 <TL_SYS_Init+0x44>)
 80107d4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80107d6:	f004 f903 	bl	80149e0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a07      	ldr	r2, [pc, #28]	; (80107fc <TL_SYS_Init+0x4c>)
 80107e0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	4a06      	ldr	r2, [pc, #24]	; (8010800 <TL_SYS_Init+0x50>)
 80107e8:	6013      	str	r3, [r2, #0]

  return 0;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3710      	adds	r7, #16
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	200300d0 	.word	0x200300d0
 80107f8:	20030000 	.word	0x20030000
 80107fc:	200005d0 	.word	0x200005d0
 8010800:	200005d4 	.word	0x200005d4

08010804 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	460b      	mov	r3, r1
 801080e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010810:	4b09      	ldr	r3, [pc, #36]	; (8010838 <TL_SYS_SendCmd+0x34>)
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2210      	movs	r2, #16
 8010818:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801081a:	4b07      	ldr	r3, [pc, #28]	; (8010838 <TL_SYS_SendCmd+0x34>)
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	4619      	mov	r1, r3
 8010822:	2004      	movs	r0, #4
 8010824:	f000 f94c 	bl	8010ac0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010828:	f004 f8e4 	bl	80149f4 <HW_IPCC_SYS_SendCmd>

  return 0;
 801082c:	2300      	movs	r3, #0
}
 801082e:	4618      	mov	r0, r3
 8010830:	3708      	adds	r7, #8
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	20030000 	.word	0x20030000

0801083c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010840:	4b07      	ldr	r3, [pc, #28]	; (8010860 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4619      	mov	r1, r3
 8010848:	2005      	movs	r0, #5
 801084a:	f000 f939 	bl	8010ac0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801084e:	4b05      	ldr	r3, [pc, #20]	; (8010864 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4a03      	ldr	r2, [pc, #12]	; (8010860 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010854:	68d2      	ldr	r2, [r2, #12]
 8010856:	6812      	ldr	r2, [r2, #0]
 8010858:	4610      	mov	r0, r2
 801085a:	4798      	blx	r3

  return;
 801085c:	bf00      	nop
}
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20030000 	.word	0x20030000
 8010864:	200005d0 	.word	0x200005d0

08010868 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801086e:	e00e      	b.n	801088e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010870:	1d3b      	adds	r3, r7, #4
 8010872:	4619      	mov	r1, r3
 8010874:	480b      	ldr	r0, [pc, #44]	; (80108a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010876:	f000 fae8 	bl	8010e4a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4619      	mov	r1, r3
 801087e:	2006      	movs	r0, #6
 8010880:	f000 f91e 	bl	8010ac0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010884:	4b08      	ldr	r3, [pc, #32]	; (80108a8 <HW_IPCC_SYS_EvtNot+0x40>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	687a      	ldr	r2, [r7, #4]
 801088a:	4610      	mov	r0, r2
 801088c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801088e:	4805      	ldr	r0, [pc, #20]	; (80108a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010890:	f000 fa4c 	bl	8010d2c <LST_is_empty>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d0ea      	beq.n	8010870 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801089a:	bf00      	nop
}
 801089c:	3708      	adds	r7, #8
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	200300d0 	.word	0x200300d0
 80108a8:	200005d4 	.word	0x200005d4

080108ac <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 80108b4:	4b0a      	ldr	r3, [pc, #40]	; (80108e0 <TL_ZIGBEE_Init+0x34>)
 80108b6:	69db      	ldr	r3, [r3, #28]
 80108b8:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	685a      	ldr	r2, [r3, #4]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	689a      	ldr	r2, [r3, #8]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 80108d2:	f004 f8b5 	bl	8014a40 <HW_IPCC_ZIGBEE_Init>

  return;
 80108d6:	bf00      	nop
}
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	20030000 	.word	0x20030000

080108e4 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80108e8:	4b04      	ldr	r3, [pc, #16]	; (80108fc <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 80108ea:	69db      	ldr	r3, [r3, #28]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	2208      	movs	r2, #8
 80108f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 80108f2:	f004 f8b3 	bl	8014a5c <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 80108f6:	bf00      	nop
}
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	20030000 	.word	0x20030000

08010900 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8010904:	4b03      	ldr	r3, [pc, #12]	; (8010914 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 8010906:	69db      	ldr	r3, [r3, #28]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	4618      	mov	r0, r3
 801090c:	f003 fdbe 	bl	801448c <TL_ZIGBEE_CmdEvtReceived>

  return;
 8010910:	bf00      	nop
}
 8010912:	bd80      	pop	{r7, pc}
 8010914:	20030000 	.word	0x20030000

08010918 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8010918:	b580      	push	{r7, lr}
 801091a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 801091c:	4b03      	ldr	r3, [pc, #12]	; (801092c <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 801091e:	69db      	ldr	r3, [r3, #28]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4618      	mov	r0, r3
 8010924:	f003 fdbc 	bl	80144a0 <TL_ZIGBEE_NotReceived>

  return;
 8010928:	bf00      	nop
}
 801092a:	bd80      	pop	{r7, pc}
 801092c:	20030000 	.word	0x20030000

08010930 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8010934:	4b04      	ldr	r3, [pc, #16]	; (8010948 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8010936:	69db      	ldr	r3, [r3, #28]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	220d      	movs	r2, #13
 801093c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 801093e:	f004 f89b 	bl	8014a78 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 8010942:	bf00      	nop
}
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	20030000 	.word	0x20030000

0801094c <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 8010950:	4b03      	ldr	r3, [pc, #12]	; (8010960 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 8010952:	69db      	ldr	r3, [r3, #28]
 8010954:	689b      	ldr	r3, [r3, #8]
 8010956:	4618      	mov	r0, r3
 8010958:	f003 fdd8 	bl	801450c <TL_ZIGBEE_M0RequestReceived>

  return;
 801095c:	bf00      	nop
}
 801095e:	bd80      	pop	{r7, pc}
 8010960:	20030000 	.word	0x20030000

08010964 <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8010968:	4b04      	ldr	r3, [pc, #16]	; (801097c <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 801096a:	69db      	ldr	r3, [r3, #28]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	220d      	movs	r2, #13
 8010970:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 8010972:	f004 f8b3 	bl	8014adc <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 8010976:	bf00      	nop
}
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	20030000 	.word	0x20030000

08010980 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010988:	4817      	ldr	r0, [pc, #92]	; (80109e8 <TL_MM_Init+0x68>)
 801098a:	f000 f9bf 	bl	8010d0c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801098e:	4817      	ldr	r0, [pc, #92]	; (80109ec <TL_MM_Init+0x6c>)
 8010990:	f000 f9bc 	bl	8010d0c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010994:	4b16      	ldr	r3, [pc, #88]	; (80109f0 <TL_MM_Init+0x70>)
 8010996:	691b      	ldr	r3, [r3, #16]
 8010998:	4a16      	ldr	r2, [pc, #88]	; (80109f4 <TL_MM_Init+0x74>)
 801099a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801099c:	4b15      	ldr	r3, [pc, #84]	; (80109f4 <TL_MM_Init+0x74>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	687a      	ldr	r2, [r7, #4]
 80109a2:	6892      	ldr	r2, [r2, #8]
 80109a4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80109a6:	4b13      	ldr	r3, [pc, #76]	; (80109f4 <TL_MM_Init+0x74>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	68d2      	ldr	r2, [r2, #12]
 80109ae:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80109b0:	4b10      	ldr	r3, [pc, #64]	; (80109f4 <TL_MM_Init+0x74>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a0c      	ldr	r2, [pc, #48]	; (80109e8 <TL_MM_Init+0x68>)
 80109b6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80109b8:	4b0e      	ldr	r3, [pc, #56]	; (80109f4 <TL_MM_Init+0x74>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	6812      	ldr	r2, [r2, #0]
 80109c0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80109c2:	4b0c      	ldr	r3, [pc, #48]	; (80109f4 <TL_MM_Init+0x74>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	6852      	ldr	r2, [r2, #4]
 80109ca:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80109cc:	4b09      	ldr	r3, [pc, #36]	; (80109f4 <TL_MM_Init+0x74>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	6912      	ldr	r2, [r2, #16]
 80109d4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80109d6:	4b07      	ldr	r3, [pc, #28]	; (80109f4 <TL_MM_Init+0x74>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	6952      	ldr	r2, [r2, #20]
 80109de:	619a      	str	r2, [r3, #24]

  return;
 80109e0:	bf00      	nop
}
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	200300b8 	.word	0x200300b8
 80109ec:	200005c0 	.word	0x200005c0
 80109f0:	20030000 	.word	0x20030000
 80109f4:	200005d8 	.word	0x200005d8

080109f8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010a00:	6879      	ldr	r1, [r7, #4]
 8010a02:	4807      	ldr	r0, [pc, #28]	; (8010a20 <TL_MM_EvtDone+0x28>)
 8010a04:	f000 f9da 	bl	8010dbc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010a08:	6879      	ldr	r1, [r7, #4]
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	f000 f858 	bl	8010ac0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010a10:	4804      	ldr	r0, [pc, #16]	; (8010a24 <TL_MM_EvtDone+0x2c>)
 8010a12:	f004 f871 	bl	8014af8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010a16:	bf00      	nop
}
 8010a18:	3708      	adds	r7, #8
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	200005c0 	.word	0x200005c0
 8010a24:	08010a29 	.word	0x08010a29

08010a28 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010a2e:	e00c      	b.n	8010a4a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010a30:	1d3b      	adds	r3, r7, #4
 8010a32:	4619      	mov	r1, r3
 8010a34:	480a      	ldr	r0, [pc, #40]	; (8010a60 <SendFreeBuf+0x38>)
 8010a36:	f000 fa08 	bl	8010e4a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010a3a:	4b0a      	ldr	r3, [pc, #40]	; (8010a64 <SendFreeBuf+0x3c>)
 8010a3c:	691b      	ldr	r3, [r3, #16]
 8010a3e:	691b      	ldr	r3, [r3, #16]
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	4611      	mov	r1, r2
 8010a44:	4618      	mov	r0, r3
 8010a46:	f000 f9b9 	bl	8010dbc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010a4a:	4805      	ldr	r0, [pc, #20]	; (8010a60 <SendFreeBuf+0x38>)
 8010a4c:	f000 f96e 	bl	8010d2c <LST_is_empty>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d0ec      	beq.n	8010a30 <SendFreeBuf+0x8>
  }

  return;
 8010a56:	bf00      	nop
}
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	200005c0 	.word	0x200005c0
 8010a64:	20030000 	.word	0x20030000

08010a68 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010a6c:	4805      	ldr	r0, [pc, #20]	; (8010a84 <TL_TRACES_Init+0x1c>)
 8010a6e:	f000 f94d 	bl	8010d0c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010a72:	4b05      	ldr	r3, [pc, #20]	; (8010a88 <TL_TRACES_Init+0x20>)
 8010a74:	695b      	ldr	r3, [r3, #20]
 8010a76:	4a03      	ldr	r2, [pc, #12]	; (8010a84 <TL_TRACES_Init+0x1c>)
 8010a78:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010a7a:	f004 f873 	bl	8014b64 <HW_IPCC_TRACES_Init>

  return;
 8010a7e:	bf00      	nop
}
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	200300c0 	.word	0x200300c0
 8010a88:	20030000 	.word	0x20030000

08010a8c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010a92:	e008      	b.n	8010aa6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010a94:	1d3b      	adds	r3, r7, #4
 8010a96:	4619      	mov	r1, r3
 8010a98:	4808      	ldr	r0, [pc, #32]	; (8010abc <HW_IPCC_TRACES_EvtNot+0x30>)
 8010a9a:	f000 f9d6 	bl	8010e4a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7f6 f9b5 	bl	8006e10 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010aa6:	4805      	ldr	r0, [pc, #20]	; (8010abc <HW_IPCC_TRACES_EvtNot+0x30>)
 8010aa8:	f000 f940 	bl	8010d2c <LST_is_empty>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d0f0      	beq.n	8010a94 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010ab2:	bf00      	nop
}
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	200300c0 	.word	0x200300c0

08010ac0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b085      	sub	sp, #20
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	6039      	str	r1, [r7, #0]
 8010aca:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010acc:	79fb      	ldrb	r3, [r7, #7]
 8010ace:	2b06      	cmp	r3, #6
 8010ad0:	d845      	bhi.n	8010b5e <OutputDbgTrace+0x9e>
 8010ad2:	a201      	add	r2, pc, #4	; (adr r2, 8010ad8 <OutputDbgTrace+0x18>)
 8010ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad8:	08010af5 	.word	0x08010af5
 8010adc:	08010b19 	.word	0x08010b19
 8010ae0:	08010b1f 	.word	0x08010b1f
 8010ae4:	08010b33 	.word	0x08010b33
 8010ae8:	08010b3f 	.word	0x08010b3f
 8010aec:	08010b45 	.word	0x08010b45
 8010af0:	08010b53 	.word	0x08010b53
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	7a5b      	ldrb	r3, [r3, #9]
 8010afc:	2bff      	cmp	r3, #255	; 0xff
 8010afe:	d005      	beq.n	8010b0c <OutputDbgTrace+0x4c>
 8010b00:	2bff      	cmp	r3, #255	; 0xff
 8010b02:	dc05      	bgt.n	8010b10 <OutputDbgTrace+0x50>
 8010b04:	2b0e      	cmp	r3, #14
 8010b06:	d005      	beq.n	8010b14 <OutputDbgTrace+0x54>
 8010b08:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010b0a:	e001      	b.n	8010b10 <OutputDbgTrace+0x50>
          break;
 8010b0c:	bf00      	nop
 8010b0e:	e027      	b.n	8010b60 <OutputDbgTrace+0xa0>
          break;
 8010b10:	bf00      	nop
 8010b12:	e025      	b.n	8010b60 <OutputDbgTrace+0xa0>
          break;
 8010b14:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010b16:	e023      	b.n	8010b60 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010b1c:	e020      	b.n	8010b60 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	7a5b      	ldrb	r3, [r3, #9]
 8010b26:	2b0e      	cmp	r3, #14
 8010b28:	d001      	beq.n	8010b2e <OutputDbgTrace+0x6e>
 8010b2a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010b2c:	e000      	b.n	8010b30 <OutputDbgTrace+0x70>
          break;
 8010b2e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010b30:	e016      	b.n	8010b60 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	7a5b      	ldrb	r3, [r3, #9]
 8010b3a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010b3c:	e010      	b.n	8010b60 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010b42:	e00d      	b.n	8010b60 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	7a5b      	ldrb	r3, [r3, #9]
 8010b4c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010b4e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010b50:	e006      	b.n	8010b60 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	7a5b      	ldrb	r3, [r3, #9]
 8010b5a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010b5c:	e000      	b.n	8010b60 <OutputDbgTrace+0xa0>

    default:
      break;
 8010b5e:	bf00      	nop
  }

  return;
 8010b60:	bf00      	nop
}
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 8010b6c:	b480      	push	{r7}
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	bf00      	nop
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
	...

08010b7c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b086      	sub	sp, #24
 8010b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b82:	f3ef 8310 	mrs	r3, PRIMASK
 8010b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b88:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8010b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b8c:	b672      	cpsid	i
}
 8010b8e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8010b90:	1cbb      	adds	r3, r7, #2
 8010b92:	4619      	mov	r1, r3
 8010b94:	4812      	ldr	r0, [pc, #72]	; (8010be0 <DbgTrace_TxCpltCallback+0x64>)
 8010b96:	f000 fb9e 	bl	80112d6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8010b9a:	1cbb      	adds	r3, r7, #2
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	4810      	ldr	r0, [pc, #64]	; (8010be0 <DbgTrace_TxCpltCallback+0x64>)
 8010ba0:	f000 fc8a 	bl	80114b8 <CircularQueue_Sense>
 8010ba4:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00c      	beq.n	8010bc6 <DbgTrace_TxCpltCallback+0x4a>
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	f383 8810 	msr	PRIMASK, r3
}
 8010bb6:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8010bb8:	887b      	ldrh	r3, [r7, #2]
 8010bba:	4a0a      	ldr	r2, [pc, #40]	; (8010be4 <DbgTrace_TxCpltCallback+0x68>)
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	6938      	ldr	r0, [r7, #16]
 8010bc0:	f7f6 f93b 	bl	8006e3a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8010bc4:	e008      	b.n	8010bd8 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8010bc6:	4b08      	ldr	r3, [pc, #32]	; (8010be8 <DbgTrace_TxCpltCallback+0x6c>)
 8010bc8:	2201      	movs	r2, #1
 8010bca:	701a      	strb	r2, [r3, #0]
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f383 8810 	msr	PRIMASK, r3
}
 8010bd6:	bf00      	nop
}
 8010bd8:	bf00      	nop
 8010bda:	3718      	adds	r7, #24
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	200005dc 	.word	0x200005dc
 8010be4:	08010b7d 	.word	0x08010b7d
 8010be8:	2000001d 	.word	0x2000001d

08010bec <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	68b9      	ldr	r1, [r7, #8]
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f000 f805 	bl	8010c0c <DbgTraceWrite>
 8010c02:	4603      	mov	r3, r0
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3710      	adds	r7, #16
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b08a      	sub	sp, #40	; 0x28
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c20:	61bb      	str	r3, [r7, #24]
  return(result);
 8010c22:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8010c24:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c2c:	d102      	bne.n	8010c34 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	627b      	str	r3, [r7, #36]	; 0x24
 8010c32:	e037      	b.n	8010ca4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	d006      	beq.n	8010c48 <DbgTraceWrite+0x3c>
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2b02      	cmp	r3, #2
 8010c3e:	d003      	beq.n	8010c48 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8010c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c44:	627b      	str	r3, [r7, #36]	; 0x24
 8010c46:	e02d      	b.n	8010ca4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d02a      	beq.n	8010ca4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8010c52:	b672      	cpsid	i
}
 8010c54:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	b29a      	uxth	r2, r3
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	68b9      	ldr	r1, [r7, #8]
 8010c5e:	4814      	ldr	r0, [pc, #80]	; (8010cb0 <DbgTraceWrite+0xa4>)
 8010c60:	f000 f912 	bl	8010e88 <CircularQueue_Add>
 8010c64:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d015      	beq.n	8010c98 <DbgTraceWrite+0x8c>
 8010c6c:	4b11      	ldr	r3, [pc, #68]	; (8010cb4 <DbgTraceWrite+0xa8>)
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	b2db      	uxtb	r3, r3
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d010      	beq.n	8010c98 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8010c76:	4b0f      	ldr	r3, [pc, #60]	; (8010cb4 <DbgTraceWrite+0xa8>)
 8010c78:	2200      	movs	r2, #0
 8010c7a:	701a      	strb	r2, [r3, #0]
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f383 8810 	msr	PRIMASK, r3
}
 8010c86:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4a0a      	ldr	r2, [pc, #40]	; (8010cb8 <DbgTraceWrite+0xac>)
 8010c8e:	4619      	mov	r1, r3
 8010c90:	69f8      	ldr	r0, [r7, #28]
 8010c92:	f7f6 f8d2 	bl	8006e3a <DbgOutputTraces>
 8010c96:	e005      	b.n	8010ca4 <DbgTraceWrite+0x98>
 8010c98:	6a3b      	ldr	r3, [r7, #32]
 8010c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	f383 8810 	msr	PRIMASK, r3
}
 8010ca2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3728      	adds	r7, #40	; 0x28
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	200005dc 	.word	0x200005dc
 8010cb4:	2000001d 	.word	0x2000001d
 8010cb8:	08010b7d 	.word	0x08010b7d

08010cbc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010cc6:	4b0f      	ldr	r3, [pc, #60]	; (8010d04 <OTP_Read+0x48>)
 8010cc8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010cca:	e002      	b.n	8010cd2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	3b08      	subs	r3, #8
 8010cd0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	3307      	adds	r3, #7
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	79fa      	ldrb	r2, [r7, #7]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d003      	beq.n	8010ce6 <OTP_Read+0x2a>
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	4a09      	ldr	r2, [pc, #36]	; (8010d08 <OTP_Read+0x4c>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d1f2      	bne.n	8010ccc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	3307      	adds	r3, #7
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	79fa      	ldrb	r2, [r7, #7]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d001      	beq.n	8010cf6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3714      	adds	r7, #20
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	1fff73f8 	.word	0x1fff73f8
 8010d08:	1fff7000 	.word	0x1fff7000

08010d0c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	605a      	str	r2, [r3, #4]
}
 8010d20:	bf00      	nop
 8010d22:	370c      	adds	r7, #12
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr

08010d2c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b087      	sub	sp, #28
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d34:	f3ef 8310 	mrs	r3, PRIMASK
 8010d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d3e:	b672      	cpsid	i
}
 8010d40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d102      	bne.n	8010d52 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	75fb      	strb	r3, [r7, #23]
 8010d50:	e001      	b.n	8010d56 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010d52:	2300      	movs	r3, #0
 8010d54:	75fb      	strb	r3, [r7, #23]
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	f383 8810 	msr	PRIMASK, r3
}
 8010d60:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	371c      	adds	r7, #28
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr

08010d70 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b087      	sub	sp, #28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8010d7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d80:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d84:	b672      	cpsid	i
}
 8010d86:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	683a      	ldr	r2, [r7, #0]
 8010d9a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	683a      	ldr	r2, [r7, #0]
 8010da2:	605a      	str	r2, [r3, #4]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	f383 8810 	msr	PRIMASK, r3
}
 8010dae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010db0:	bf00      	nop
 8010db2:	371c      	adds	r7, #28
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b087      	sub	sp, #28
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8010dca:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010dce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010dd0:	b672      	cpsid	i
}
 8010dd2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	685a      	ldr	r2, [r3, #4]
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	683a      	ldr	r2, [r7, #0]
 8010dee:	601a      	str	r2, [r3, #0]
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	f383 8810 	msr	PRIMASK, r3
}
 8010dfa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010dfc:	bf00      	nop
 8010dfe:	371c      	adds	r7, #28
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b087      	sub	sp, #28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e10:	f3ef 8310 	mrs	r3, PRIMASK
 8010e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e16:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e1a:	b672      	cpsid	i
}
 8010e1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	6812      	ldr	r2, [r2, #0]
 8010e26:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	6852      	ldr	r2, [r2, #4]
 8010e30:	605a      	str	r2, [r3, #4]
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	f383 8810 	msr	PRIMASK, r3
}
 8010e3c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010e3e:	bf00      	nop
 8010e40:	371c      	adds	r7, #28
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b086      	sub	sp, #24
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
 8010e52:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e54:	f3ef 8310 	mrs	r3, PRIMASK
 8010e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e5e:	b672      	cpsid	i
}
 8010e60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ff ffca 	bl	8010e08 <LST_remove_node>
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	f383 8810 	msr	PRIMASK, r3
}
 8010e7e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010e80:	bf00      	nop
 8010e82:	3718      	adds	r7, #24
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b08e      	sub	sp, #56	; 0x38
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	603b      	str	r3, [r7, #0]
 8010e94:	4613      	mov	r3, r2
 8010e96:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8010e98:	2300      	movs	r3, #0
 8010e9a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8010eac:	2300      	movs	r3, #0
 8010eae:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	891b      	ldrh	r3, [r3, #8]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d101      	bne.n	8010ec0 <CircularQueue_Add+0x38>
 8010ebc:	2302      	movs	r3, #2
 8010ebe:	e000      	b.n	8010ec2 <CircularQueue_Add+0x3a>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	695b      	ldr	r3, [r3, #20]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d02a      	beq.n	8010f22 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	891b      	ldrh	r3, [r3, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d123      	bne.n	8010f1c <CircularQueue_Add+0x94>
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	4413      	add	r3, r2
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	6819      	ldr	r1, [r3, #0]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	691b      	ldr	r3, [r3, #16]
 8010eea:	1c58      	adds	r0, r3, #1
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	4298      	cmp	r0, r3
 8010ef2:	d306      	bcc.n	8010f02 <CircularQueue_Add+0x7a>
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	6918      	ldr	r0, [r3, #16]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	1ac3      	subs	r3, r0, r3
 8010efe:	3301      	adds	r3, #1
 8010f00:	e002      	b.n	8010f08 <CircularQueue_Add+0x80>
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	3301      	adds	r3, #1
 8010f08:	440b      	add	r3, r1
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	021b      	lsls	r3, r3, #8
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	4413      	add	r3, r2
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	3302      	adds	r3, #2
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	e001      	b.n	8010f20 <CircularQueue_Add+0x98>
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	891b      	ldrh	r3, [r3, #8]
 8010f20:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	891b      	ldrh	r3, [r3, #8]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d002      	beq.n	8010f30 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	891b      	ldrh	r3, [r3, #8]
 8010f2e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	691a      	ldr	r2, [r3, #16]
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d307      	bcc.n	8010f4c <CircularQueue_Add+0xc4>
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	685a      	ldr	r2, [r3, #4]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6919      	ldr	r1, [r3, #16]
 8010f44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f46:	440b      	add	r3, r1
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	e000      	b.n	8010f4e <CircularQueue_Add+0xc6>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8010f50:	88fa      	ldrh	r2, [r7, #6]
 8010f52:	7ffb      	ldrb	r3, [r7, #31]
 8010f54:	4413      	add	r3, r2
 8010f56:	461a      	mov	r2, r3
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	fb02 f303 	mul.w	r3, r2, r3
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d80b      	bhi.n	8010f7c <CircularQueue_Add+0xf4>
 8010f64:	88fa      	ldrh	r2, [r7, #6]
 8010f66:	7ffb      	ldrb	r3, [r7, #31]
 8010f68:	4413      	add	r3, r2
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f72:	fb01 f202 	mul.w	r2, r1, r2
 8010f76:	1a9b      	subs	r3, r3, r2
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	e000      	b.n	8010f7e <CircularQueue_Add+0xf6>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8010f80:	7dfa      	ldrb	r2, [r7, #23]
 8010f82:	7ffb      	ldrb	r3, [r7, #31]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	bf8c      	ite	hi
 8010f88:	2301      	movhi	r3, #1
 8010f8a:	2300      	movls	r3, #0
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8010f90:	7fbb      	ldrb	r3, [r7, #30]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d008      	beq.n	8010fa8 <CircularQueue_Add+0x120>
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	7f1b      	ldrb	r3, [r3, #28]
 8010f9a:	f003 0301 	and.w	r3, r3, #1
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d002      	beq.n	8010fa8 <CircularQueue_Add+0x120>
 8010fa2:	7dfb      	ldrb	r3, [r7, #23]
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	e000      	b.n	8010faa <CircularQueue_Add+0x122>
 8010fa8:	8bbb      	ldrh	r3, [r7, #28]
 8010faa:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8010fac:	7fbb      	ldrb	r3, [r7, #30]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d008      	beq.n	8010fc4 <CircularQueue_Add+0x13c>
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	7f1b      	ldrb	r3, [r3, #28]
 8010fb6:	f003 0302 	and.w	r3, r3, #2
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d002      	beq.n	8010fc4 <CircularQueue_Add+0x13c>
 8010fbe:	7ffb      	ldrb	r3, [r7, #31]
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	e000      	b.n	8010fc6 <CircularQueue_Add+0x13e>
 8010fc4:	8bbb      	ldrh	r3, [r7, #28]
 8010fc6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8010fc8:	88fb      	ldrh	r3, [r7, #6]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f000 817e 	beq.w	80112cc <CircularQueue_Add+0x444>
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	695a      	ldr	r2, [r3, #20]
 8010fd4:	88f9      	ldrh	r1, [r7, #6]
 8010fd6:	7ffb      	ldrb	r3, [r7, #31]
 8010fd8:	440b      	add	r3, r1
 8010fda:	4619      	mov	r1, r3
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	fb01 f303 	mul.w	r3, r1, r3
 8010fe2:	441a      	add	r2, r3
 8010fe4:	8bbb      	ldrh	r3, [r7, #28]
 8010fe6:	441a      	add	r2, r3
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	f200 816d 	bhi.w	80112cc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ff6:	e14a      	b.n	801128e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	691a      	ldr	r2, [r3, #16]
 8010ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010ffe:	441a      	add	r2, r3
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	429a      	cmp	r2, r3
 8011006:	d307      	bcc.n	8011018 <CircularQueue_Add+0x190>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	691a      	ldr	r2, [r3, #16]
 801100c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801100e:	441a      	add	r2, r3
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	e003      	b.n	8011020 <CircularQueue_Add+0x198>
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	691a      	ldr	r2, [r3, #16]
 801101c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801101e:	4413      	add	r3, r2
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	891b      	ldrh	r3, [r3, #8]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d130      	bne.n	8011094 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	1c59      	adds	r1, r3, #1
 801103a:	6339      	str	r1, [r7, #48]	; 0x30
 801103c:	4413      	add	r3, r2
 801103e:	88fa      	ldrh	r2, [r7, #6]
 8011040:	b2d2      	uxtb	r2, r2
 8011042:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801104a:	429a      	cmp	r2, r3
 801104c:	d304      	bcc.n	8011058 <CircularQueue_Add+0x1d0>
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	e000      	b.n	801105a <CircularQueue_Add+0x1d2>
 8011058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801105c:	88fb      	ldrh	r3, [r7, #6]
 801105e:	0a1b      	lsrs	r3, r3, #8
 8011060:	b298      	uxth	r0, r3
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011068:	1c59      	adds	r1, r3, #1
 801106a:	6339      	str	r1, [r7, #48]	; 0x30
 801106c:	4413      	add	r3, r2
 801106e:	b2c2      	uxtb	r2, r0
 8011070:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011078:	429a      	cmp	r2, r3
 801107a:	d304      	bcc.n	8011086 <CircularQueue_Add+0x1fe>
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	e000      	b.n	8011088 <CircularQueue_Add+0x200>
 8011086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011088:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	695b      	ldr	r3, [r3, #20]
 801108e:	1c9a      	adds	r2, r3, #2
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8011094:	88fa      	ldrh	r2, [r7, #6]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6859      	ldr	r1, [r3, #4]
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	1acb      	subs	r3, r1, r3
 801109e:	4293      	cmp	r3, r2
 80110a0:	bf28      	it	cs
 80110a2:	4613      	movcs	r3, r2
 80110a4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80110a6:	88fb      	ldrh	r3, [r7, #6]
 80110a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d007      	beq.n	80110be <CircularQueue_Add+0x236>
 80110ae:	88fb      	ldrh	r3, [r7, #6]
 80110b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d225      	bcs.n	8011102 <CircularQueue_Add+0x27a>
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	7f1b      	ldrb	r3, [r3, #28]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d121      	bne.n	8011102 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c4:	18d0      	adds	r0, r2, r3
 80110c6:	88fb      	ldrh	r3, [r7, #6]
 80110c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110ca:	fb02 f303 	mul.w	r3, r2, r3
 80110ce:	68ba      	ldr	r2, [r7, #8]
 80110d0:	4413      	add	r3, r2
 80110d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110d4:	4619      	mov	r1, r3
 80110d6:	f004 faf6 	bl	80156c6 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	695a      	ldr	r2, [r3, #20]
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	441a      	add	r2, r3
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80110e6:	2300      	movs	r3, #0
 80110e8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80110ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ec:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80110ee:	88fa      	ldrh	r2, [r7, #6]
 80110f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80110f6:	7ffb      	ldrb	r3, [r7, #31]
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	88fb      	ldrh	r3, [r7, #6]
 80110fc:	4413      	add	r3, r2
 80110fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8011100:	e0a4      	b.n	801124c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8011102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011104:	2b00      	cmp	r3, #0
 8011106:	f000 80a1 	beq.w	801124c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	7f1b      	ldrb	r3, [r3, #28]
 801110e:	f003 0301 	and.w	r3, r3, #1
 8011112:	2b00      	cmp	r3, #0
 8011114:	d03a      	beq.n	801118c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	891b      	ldrh	r3, [r3, #8]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10d      	bne.n	801113a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011124:	3b02      	subs	r3, #2
 8011126:	4413      	add	r3, r2
 8011128:	22ff      	movs	r2, #255	; 0xff
 801112a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011132:	3b01      	subs	r3, #1
 8011134:	4413      	add	r3, r2
 8011136:	22ff      	movs	r2, #255	; 0xff
 8011138:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	695a      	ldr	r2, [r3, #20]
 801113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011140:	441a      	add	r2, r3
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 801114a:	88fb      	ldrh	r3, [r7, #6]
 801114c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 801114e:	2300      	movs	r3, #0
 8011150:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	891b      	ldrh	r3, [r3, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d16f      	bne.n	801123a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681a      	ldr	r2, [r3, #0]
 801115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011160:	1c59      	adds	r1, r3, #1
 8011162:	6339      	str	r1, [r7, #48]	; 0x30
 8011164:	4413      	add	r3, r2
 8011166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011168:	b2d2      	uxtb	r2, r2
 801116a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116e:	0a18      	lsrs	r0, r3, #8
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011176:	1c59      	adds	r1, r3, #1
 8011178:	6339      	str	r1, [r7, #48]	; 0x30
 801117a:	4413      	add	r3, r2
 801117c:	b2c2      	uxtb	r2, r0
 801117e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	1c9a      	adds	r2, r3, #2
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	615a      	str	r2, [r3, #20]
 801118a:	e056      	b.n	801123a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	7f1b      	ldrb	r3, [r3, #28]
 8011190:	f003 0302 	and.w	r3, r3, #2
 8011194:	2b00      	cmp	r3, #0
 8011196:	d050      	beq.n	801123a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	891b      	ldrh	r3, [r3, #8]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d14a      	bne.n	8011236 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a6:	3b02      	subs	r3, #2
 80111a8:	4413      	add	r3, r2
 80111aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111ac:	b2d2      	uxtb	r2, r2
 80111ae:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80111b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b2:	0a19      	lsrs	r1, r3, #8
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ba:	3b01      	subs	r3, #1
 80111bc:	4413      	add	r3, r2
 80111be:	b2ca      	uxtb	r2, r1
 80111c0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	18d0      	adds	r0, r2, r3
 80111ca:	88fb      	ldrh	r3, [r7, #6]
 80111cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ce:	fb02 f303 	mul.w	r3, r2, r3
 80111d2:	68ba      	ldr	r2, [r7, #8]
 80111d4:	4413      	add	r3, r2
 80111d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111d8:	4619      	mov	r1, r3
 80111da:	f004 fa74 	bl	80156c6 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	695a      	ldr	r2, [r3, #20]
 80111e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e4:	441a      	add	r2, r3
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80111ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ec:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80111ee:	88fa      	ldrh	r2, [r7, #6]
 80111f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	1c5a      	adds	r2, r3, #1
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8011200:	2300      	movs	r3, #0
 8011202:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120a:	1c59      	adds	r1, r3, #1
 801120c:	6339      	str	r1, [r7, #48]	; 0x30
 801120e:	4413      	add	r3, r2
 8011210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011212:	b2d2      	uxtb	r2, r2
 8011214:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8011216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011218:	0a18      	lsrs	r0, r3, #8
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681a      	ldr	r2, [r3, #0]
 801121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011220:	1c59      	adds	r1, r3, #1
 8011222:	6339      	str	r1, [r7, #48]	; 0x30
 8011224:	4413      	add	r3, r2
 8011226:	b2c2      	uxtb	r2, r0
 8011228:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	695b      	ldr	r3, [r3, #20]
 801122e:	1c9a      	adds	r2, r3, #2
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	615a      	str	r2, [r3, #20]
 8011234:	e001      	b.n	801123a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8011236:	2300      	movs	r3, #0
 8011238:	e049      	b.n	80112ce <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 801123a:	7ffb      	ldrb	r3, [r7, #31]
 801123c:	b29a      	uxth	r2, r3
 801123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011240:	b29b      	uxth	r3, r3
 8011242:	4413      	add	r3, r2
 8011244:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2200      	movs	r2, #0
 801124a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 801124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124e:	2b00      	cmp	r3, #0
 8011250:	d015      	beq.n	801127e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681a      	ldr	r2, [r3, #0]
 8011256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011258:	18d0      	adds	r0, r2, r3
 801125a:	88fb      	ldrh	r3, [r7, #6]
 801125c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801125e:	fb03 f202 	mul.w	r2, r3, r2
 8011262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011264:	4413      	add	r3, r2
 8011266:	68ba      	ldr	r2, [r7, #8]
 8011268:	4413      	add	r3, r2
 801126a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801126c:	4619      	mov	r1, r3
 801126e:	f004 fa2a 	bl	80156c6 <memcpy>
        q->byteCount += NbBytesToCopy;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	695a      	ldr	r2, [r3, #20]
 8011276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011278:	441a      	add	r2, r3
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	699b      	ldr	r3, [r3, #24]
 8011282:	1c5a      	adds	r2, r3, #1
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8011288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128a:	3301      	adds	r3, #1
 801128c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801128e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	429a      	cmp	r2, r3
 8011294:	f4ff aeb0 	bcc.w	8010ff8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	6919      	ldr	r1, [r3, #16]
 80112a0:	7ffb      	ldrb	r3, [r7, #31]
 80112a2:	4419      	add	r1, r3
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	4299      	cmp	r1, r3
 80112aa:	d307      	bcc.n	80112bc <CircularQueue_Add+0x434>
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6919      	ldr	r1, [r3, #16]
 80112b0:	7ffb      	ldrb	r3, [r7, #31]
 80112b2:	4419      	add	r1, r3
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	1acb      	subs	r3, r1, r3
 80112ba:	e003      	b.n	80112c4 <CircularQueue_Add+0x43c>
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6919      	ldr	r1, [r3, #16]
 80112c0:	7ffb      	ldrb	r3, [r7, #31]
 80112c2:	440b      	add	r3, r1
 80112c4:	4413      	add	r3, r2
 80112c6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80112c8:	6a3b      	ldr	r3, [r7, #32]
 80112ca:	e000      	b.n	80112ce <CircularQueue_Add+0x446>
    return NULL;
 80112cc:	2300      	movs	r3, #0
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3738      	adds	r7, #56	; 0x38
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80112d6:	b480      	push	{r7}
 80112d8:	b085      	sub	sp, #20
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
 80112de:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80112e0:	2300      	movs	r3, #0
 80112e2:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80112e4:	2300      	movs	r3, #0
 80112e6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	891b      	ldrh	r3, [r3, #8]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d101      	bne.n	80112f4 <CircularQueue_Remove+0x1e>
 80112f0:	2302      	movs	r3, #2
 80112f2:	e000      	b.n	80112f6 <CircularQueue_Remove+0x20>
 80112f4:	2300      	movs	r3, #0
 80112f6:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80112f8:	2300      	movs	r3, #0
 80112fa:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	695b      	ldr	r3, [r3, #20]
 8011300:	2b00      	cmp	r3, #0
 8011302:	f000 80cc 	beq.w	801149e <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	891b      	ldrh	r3, [r3, #8]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d121      	bne.n	8011352 <CircularQueue_Remove+0x7c>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	4413      	add	r3, r2
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	b29a      	uxth	r2, r3
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6819      	ldr	r1, [r3, #0]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	1c58      	adds	r0, r3, #1
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	4298      	cmp	r0, r3
 801132c:	d306      	bcc.n	801133c <CircularQueue_Remove+0x66>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	68d8      	ldr	r0, [r3, #12]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	1ac3      	subs	r3, r0, r3
 8011338:	3301      	adds	r3, #1
 801133a:	e002      	b.n	8011342 <CircularQueue_Remove+0x6c>
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	3301      	adds	r3, #1
 8011342:	440b      	add	r3, r1
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	b29b      	uxth	r3, r3
 8011348:	021b      	lsls	r3, r3, #8
 801134a:	b29b      	uxth	r3, r3
 801134c:	4413      	add	r3, r2
 801134e:	b29b      	uxth	r3, r3
 8011350:	e001      	b.n	8011356 <CircularQueue_Remove+0x80>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	891b      	ldrh	r3, [r3, #8]
 8011356:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	7f1b      	ldrb	r3, [r3, #28]
 801135c:	f003 0301 	and.w	r3, r3, #1
 8011360:	2b00      	cmp	r3, #0
 8011362:	d057      	beq.n	8011414 <CircularQueue_Remove+0x13e>
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	7f1b      	ldrb	r3, [r3, #28]
 8011368:	f003 0302 	and.w	r3, r3, #2
 801136c:	2b00      	cmp	r3, #0
 801136e:	d151      	bne.n	8011414 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011370:	897b      	ldrh	r3, [r7, #10]
 8011372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011376:	4293      	cmp	r3, r2
 8011378:	d103      	bne.n	8011382 <CircularQueue_Remove+0xac>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	891b      	ldrh	r3, [r3, #8]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d012      	beq.n	80113a8 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68da      	ldr	r2, [r3, #12]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801138a:	429a      	cmp	r2, r3
 801138c:	d942      	bls.n	8011414 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	891b      	ldrh	r3, [r3, #8]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d03e      	beq.n	8011414 <CircularQueue_Remove+0x13e>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	685a      	ldr	r2, [r3, #4]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	8912      	ldrh	r2, [r2, #8]
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d235      	bcs.n	8011414 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	695a      	ldr	r2, [r3, #20]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	68d9      	ldr	r1, [r3, #12]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	1acb      	subs	r3, r1, r3
 80113b6:	441a      	add	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	891b      	ldrh	r3, [r3, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d121      	bne.n	801140e <CircularQueue_Remove+0x138>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	4413      	add	r3, r2
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6819      	ldr	r1, [r3, #0]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	1c58      	adds	r0, r3, #1
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	4298      	cmp	r0, r3
 80113e8:	d306      	bcc.n	80113f8 <CircularQueue_Remove+0x122>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	68d8      	ldr	r0, [r3, #12]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	1ac3      	subs	r3, r0, r3
 80113f4:	3301      	adds	r3, #1
 80113f6:	e002      	b.n	80113fe <CircularQueue_Remove+0x128>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	3301      	adds	r3, #1
 80113fe:	440b      	add	r3, r1
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	b29b      	uxth	r3, r3
 8011404:	021b      	lsls	r3, r3, #8
 8011406:	b29b      	uxth	r3, r3
 8011408:	4413      	add	r3, r2
 801140a:	b29b      	uxth	r3, r3
 801140c:	e001      	b.n	8011412 <CircularQueue_Remove+0x13c>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	891b      	ldrh	r3, [r3, #8]
 8011412:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	68d9      	ldr	r1, [r3, #12]
 801141c:	7a7b      	ldrb	r3, [r7, #9]
 801141e:	4419      	add	r1, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	685b      	ldr	r3, [r3, #4]
 8011424:	4299      	cmp	r1, r3
 8011426:	d307      	bcc.n	8011438 <CircularQueue_Remove+0x162>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	68d9      	ldr	r1, [r3, #12]
 801142c:	7a7b      	ldrb	r3, [r7, #9]
 801142e:	4419      	add	r1, r3
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	1acb      	subs	r3, r1, r3
 8011436:	e003      	b.n	8011440 <CircularQueue_Remove+0x16a>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	68d9      	ldr	r1, [r3, #12]
 801143c:	7a7b      	ldrb	r3, [r7, #9]
 801143e:	440b      	add	r3, r1
 8011440:	4413      	add	r3, r2
 8011442:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	695b      	ldr	r3, [r3, #20]
 8011448:	8979      	ldrh	r1, [r7, #10]
 801144a:	7a7a      	ldrb	r2, [r7, #9]
 801144c:	440a      	add	r2, r1
 801144e:	1a9a      	subs	r2, r3, r2
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	695b      	ldr	r3, [r3, #20]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d01b      	beq.n	8011494 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	68da      	ldr	r2, [r3, #12]
 8011460:	897b      	ldrh	r3, [r7, #10]
 8011462:	441a      	add	r2, r3
 8011464:	7a7b      	ldrb	r3, [r7, #9]
 8011466:	441a      	add	r2, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	429a      	cmp	r2, r3
 801146e:	d309      	bcc.n	8011484 <CircularQueue_Remove+0x1ae>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	68da      	ldr	r2, [r3, #12]
 8011474:	897b      	ldrh	r3, [r7, #10]
 8011476:	441a      	add	r2, r3
 8011478:	7a7b      	ldrb	r3, [r7, #9]
 801147a:	441a      	add	r2, r3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	e005      	b.n	8011490 <CircularQueue_Remove+0x1ba>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	68da      	ldr	r2, [r3, #12]
 8011488:	897b      	ldrh	r3, [r7, #10]
 801148a:	441a      	add	r2, r3
 801148c:	7a7b      	ldrb	r3, [r7, #9]
 801148e:	4413      	add	r3, r2
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	699b      	ldr	r3, [r3, #24]
 8011498:	1e5a      	subs	r2, r3, #1
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d002      	beq.n	80114aa <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	897a      	ldrh	r2, [r7, #10]
 80114a8:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80114aa:	68fb      	ldr	r3, [r7, #12]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3714      	adds	r7, #20
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr

080114b8 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b087      	sub	sp, #28
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	891b      	ldrh	r3, [r3, #8]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d101      	bne.n	80114d6 <CircularQueue_Sense+0x1e>
 80114d2:	2302      	movs	r3, #2
 80114d4:	e000      	b.n	80114d8 <CircularQueue_Sense+0x20>
 80114d6:	2300      	movs	r3, #0
 80114d8:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80114da:	2300      	movs	r3, #0
 80114dc:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80114de:	2300      	movs	r3, #0
 80114e0:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	695b      	ldr	r3, [r3, #20]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f000 8090 	beq.w	801160c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	891b      	ldrh	r3, [r3, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d121      	bne.n	801153e <CircularQueue_Sense+0x86>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	4413      	add	r3, r2
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	b29a      	uxth	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6819      	ldr	r1, [r3, #0]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	1c58      	adds	r0, r3, #1
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	4298      	cmp	r0, r3
 8011518:	d306      	bcc.n	8011528 <CircularQueue_Sense+0x70>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	68d8      	ldr	r0, [r3, #12]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	1ac3      	subs	r3, r0, r3
 8011524:	3301      	adds	r3, #1
 8011526:	e002      	b.n	801152e <CircularQueue_Sense+0x76>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	3301      	adds	r3, #1
 801152e:	440b      	add	r3, r1
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	b29b      	uxth	r3, r3
 8011534:	021b      	lsls	r3, r3, #8
 8011536:	b29b      	uxth	r3, r3
 8011538:	4413      	add	r3, r2
 801153a:	b29b      	uxth	r3, r3
 801153c:	e001      	b.n	8011542 <CircularQueue_Sense+0x8a>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	891b      	ldrh	r3, [r3, #8]
 8011542:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	7f1b      	ldrb	r3, [r3, #28]
 8011548:	f003 0301 	and.w	r3, r3, #1
 801154c:	2b00      	cmp	r3, #0
 801154e:	d048      	beq.n	80115e2 <CircularQueue_Sense+0x12a>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	7f1b      	ldrb	r3, [r3, #28]
 8011554:	f003 0302 	and.w	r3, r3, #2
 8011558:	2b00      	cmp	r3, #0
 801155a:	d142      	bne.n	80115e2 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801155c:	8a7b      	ldrh	r3, [r7, #18]
 801155e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011562:	4293      	cmp	r3, r2
 8011564:	d103      	bne.n	801156e <CircularQueue_Sense+0xb6>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	891b      	ldrh	r3, [r3, #8]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d012      	beq.n	8011594 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	68da      	ldr	r2, [r3, #12]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011576:	429a      	cmp	r2, r3
 8011578:	d933      	bls.n	80115e2 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	891b      	ldrh	r3, [r3, #8]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d02f      	beq.n	80115e2 <CircularQueue_Sense+0x12a>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	685a      	ldr	r2, [r3, #4]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	8912      	ldrh	r2, [r2, #8]
 8011590:	4293      	cmp	r3, r2
 8011592:	d226      	bcs.n	80115e2 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8011594:	2300      	movs	r3, #0
 8011596:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	891b      	ldrh	r3, [r3, #8]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d11d      	bne.n	80115dc <CircularQueue_Sense+0x124>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	4413      	add	r3, r2
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6819      	ldr	r1, [r3, #0]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	1c58      	adds	r0, r3, #1
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	4298      	cmp	r0, r3
 80115ba:	d305      	bcc.n	80115c8 <CircularQueue_Sense+0x110>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	1ac3      	subs	r3, r0, r3
 80115c4:	3301      	adds	r3, #1
 80115c6:	e001      	b.n	80115cc <CircularQueue_Sense+0x114>
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	3301      	adds	r3, #1
 80115cc:	440b      	add	r3, r1
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	021b      	lsls	r3, r3, #8
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	4413      	add	r3, r2
 80115d8:	b29b      	uxth	r3, r3
 80115da:	e001      	b.n	80115e0 <CircularQueue_Sense+0x128>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	891b      	ldrh	r3, [r3, #8]
 80115e0:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	7af9      	ldrb	r1, [r7, #11]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	4419      	add	r1, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	4299      	cmp	r1, r3
 80115f2:	d306      	bcc.n	8011602 <CircularQueue_Sense+0x14a>
 80115f4:	7af9      	ldrb	r1, [r7, #11]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	4419      	add	r1, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	1acb      	subs	r3, r1, r3
 8011600:	e002      	b.n	8011608 <CircularQueue_Sense+0x150>
 8011602:	7af9      	ldrb	r1, [r7, #11]
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	440b      	add	r3, r1
 8011608:	4413      	add	r3, r2
 801160a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d002      	beq.n	8011618 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	8a7a      	ldrh	r2, [r7, #18]
 8011616:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8011618:	697b      	ldr	r3, [r7, #20]
}
 801161a:	4618      	mov	r0, r3
 801161c:	371c      	adds	r7, #28
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr

08011626 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 8011626:	b480      	push	{r7}
 8011628:	b087      	sub	sp, #28
 801162a:	af00      	add	r7, sp, #0
 801162c:	60f8      	str	r0, [r7, #12]
 801162e:	60b9      	str	r1, [r7, #8]
 8011630:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 8011632:	2300      	movs	r3, #0
 8011634:	617b      	str	r3, [r7, #20]
 8011636:	e00a      	b.n	801164e <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	441a      	add	r2, r3
 801163e:	68f9      	ldr	r1, [r7, #12]
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	440b      	add	r3, r1
 8011644:	7812      	ldrb	r2, [r2, #0]
 8011646:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	3301      	adds	r3, #1
 801164c:	617b      	str	r3, [r7, #20]
 801164e:	697a      	ldr	r2, [r7, #20]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	429a      	cmp	r2, r3
 8011654:	d3f0      	bcc.n	8011638 <zb_ipc_m4_memcpy2+0x12>
    }
}
 8011656:	bf00      	nop
 8011658:	bf00      	nop
 801165a:	371c      	adds	r7, #28
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 801166e:	200c      	movs	r0, #12
 8011670:	f003 fd1c 	bl	80150ac <malloc>
 8011674:	4603      	mov	r3, r0
 8011676:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00a      	beq.n	8011694 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 801167e:	220c      	movs	r2, #12
 8011680:	2100      	movs	r1, #0
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f003 ff84 	bl	8015590 <memset>
        info->callback = callback;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	605a      	str	r2, [r3, #4]
    }
    return info;
 8011694:	68fb      	ldr	r3, [r7, #12]
}
 8011696:	4618      	mov	r0, r3
 8011698:	3710      	adds	r7, #16
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}

0801169e <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 801169e:	b580      	push	{r7, lr}
 80116a0:	b082      	sub	sp, #8
 80116a2:	af00      	add	r7, sp, #0
 80116a4:	6078      	str	r0, [r7, #4]
    free(info);
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f003 fd08 	bl	80150bc <free>
}
 80116ac:	bf00      	nop
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 80116ba:	f002 fe9f 	bl	80143fc <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 80116be:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d006      	beq.n	80116d6 <zb_ipc_m4_get_retval+0x22>
 80116c8:	4b09      	ldr	r3, [pc, #36]	; (80116f0 <zb_ipc_m4_get_retval+0x3c>)
 80116ca:	4a0a      	ldr	r2, [pc, #40]	; (80116f4 <zb_ipc_m4_get_retval+0x40>)
 80116cc:	f240 1151 	movw	r1, #337	; 0x151
 80116d0:	4809      	ldr	r0, [pc, #36]	; (80116f8 <zb_ipc_m4_get_retval+0x44>)
 80116d2:	f003 fccd 	bl	8015070 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f103 0108 	add.w	r1, r3, #8
 80116dc:	463b      	mov	r3, r7
 80116de:	2204      	movs	r2, #4
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7ff ffa0 	bl	8011626 <zb_ipc_m4_memcpy2>
    return retval;
 80116e6:	683b      	ldr	r3, [r7, #0]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	08016584 	.word	0x08016584
 80116f4:	08016d4c 	.word	0x08016d4c
 80116f8:	08016598 	.word	0x08016598

080116fc <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b086      	sub	sp, #24
 8011700:	af00      	add	r7, sp, #0
 8011702:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
 8011708:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 801170a:	4b25      	ldr	r3, [pc, #148]	; (80117a0 <ZbInit+0xa4>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <ZbInit+0x1a>
        return NULL;
 8011712:	2300      	movs	r3, #0
 8011714:	e03f      	b.n	8011796 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 8011716:	f002 fed3 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801171a:	f002 fe63 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801171e:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	2200      	movs	r2, #0
 8011724:	f042 020a 	orr.w	r2, r2, #10
 8011728:	701a      	strb	r2, [r3, #0]
 801172a:	2200      	movs	r2, #0
 801172c:	705a      	strb	r2, [r3, #1]
 801172e:	2200      	movs	r2, #0
 8011730:	709a      	strb	r2, [r3, #2]
 8011732:	2200      	movs	r2, #0
 8011734:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	2200      	movs	r2, #0
 801173a:	f042 0204 	orr.w	r2, r2, #4
 801173e:	711a      	strb	r2, [r3, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	715a      	strb	r2, [r3, #5]
 8011744:	2200      	movs	r2, #0
 8011746:	719a      	strb	r2, [r3, #6]
 8011748:	2200      	movs	r2, #0
 801174a:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	3308      	adds	r3, #8
 8011750:	f107 0108 	add.w	r1, r7, #8
 8011754:	2208      	movs	r2, #8
 8011756:	4618      	mov	r0, r3
 8011758:	f7ff ff65 	bl	8011626 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8011768:	f002 fe6c 	bl	8014444 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 801176c:	f7ff ffa2 	bl	80116b4 <zb_ipc_m4_get_retval>
 8011770:	4603      	mov	r3, r0
 8011772:	461a      	mov	r2, r3
 8011774:	4b0a      	ldr	r3, [pc, #40]	; (80117a0 <ZbInit+0xa4>)
 8011776:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 8011778:	f7ff f9f8 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d007      	beq.n	8011792 <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	4a06      	ldr	r2, [pc, #24]	; (80117a0 <ZbInit+0xa4>)
 8011788:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a04      	ldr	r2, [pc, #16]	; (80117a0 <ZbInit+0xa4>)
 8011790:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 8011792:	4b03      	ldr	r3, [pc, #12]	; (80117a0 <ZbInit+0xa4>)
 8011794:	681b      	ldr	r3, [r3, #0]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	20000610 	.word	0x20000610

080117a4 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80117b0:	f002 fe86 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80117b4:	f002 fe16 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80117b8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	2200      	movs	r2, #0
 80117be:	f042 0213 	orr.w	r2, r2, #19
 80117c2:	701a      	strb	r2, [r3, #0]
 80117c4:	2200      	movs	r2, #0
 80117c6:	705a      	strb	r2, [r3, #1]
 80117c8:	2200      	movs	r2, #0
 80117ca:	709a      	strb	r2, [r3, #2]
 80117cc:	2200      	movs	r2, #0
 80117ce:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	2200      	movs	r2, #0
 80117d4:	f042 0202 	orr.w	r2, r2, #2
 80117d8:	711a      	strb	r2, [r3, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	715a      	strb	r2, [r3, #5]
 80117de:	2200      	movs	r2, #0
 80117e0:	719a      	strb	r2, [r3, #6]
 80117e2:	2200      	movs	r2, #0
 80117e4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	68ba      	ldr	r2, [r7, #8]
 80117ea:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 80117ec:	4b0c      	ldr	r3, [pc, #48]	; (8011820 <ZbSetLogging+0x7c>)
 80117ee:	7b1b      	ldrb	r3, [r3, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d102      	bne.n	80117fa <ZbSetLogging+0x56>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d001      	beq.n	80117fe <ZbSetLogging+0x5a>
 80117fa:	2201      	movs	r2, #1
 80117fc:	e000      	b.n	8011800 <ZbSetLogging+0x5c>
 80117fe:	2200      	movs	r2, #0
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011804:	f002 fe1e 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011808:	f7ff f9b0 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 801180c:	4a04      	ldr	r2, [pc, #16]	; (8011820 <ZbSetLogging+0x7c>)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 8011812:	4a03      	ldr	r2, [pc, #12]	; (8011820 <ZbSetLogging+0x7c>)
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	6093      	str	r3, [r2, #8]
}
 8011818:	bf00      	nop
 801181a:	3718      	adds	r7, #24
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	20000610 	.word	0x20000610

08011824 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b086      	sub	sp, #24
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 801182c:	f04f 0200 	mov.w	r2, #0
 8011830:	f04f 0300 	mov.w	r3, #0
 8011834:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 8011838:	f002 fe42 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801183c:	f002 fdd2 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011840:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	2200      	movs	r2, #0
 8011846:	f042 020e 	orr.w	r2, r2, #14
 801184a:	701a      	strb	r2, [r3, #0]
 801184c:	2200      	movs	r2, #0
 801184e:	705a      	strb	r2, [r3, #1]
 8011850:	2200      	movs	r2, #0
 8011852:	709a      	strb	r2, [r3, #2]
 8011854:	2200      	movs	r2, #0
 8011856:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	2200      	movs	r2, #0
 801185c:	711a      	strb	r2, [r3, #4]
 801185e:	2200      	movs	r2, #0
 8011860:	715a      	strb	r2, [r3, #5]
 8011862:	2200      	movs	r2, #0
 8011864:	719a      	strb	r2, [r3, #6]
 8011866:	2200      	movs	r2, #0
 8011868:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801186a:	f002 fdeb 	bl	8014444 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801186e:	f002 fdc5 	bl	80143fc <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8011872:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	2b02      	cmp	r3, #2
 801187a:	d006      	beq.n	801188a <ZbExtendedAddress+0x66>
 801187c:	4b0c      	ldr	r3, [pc, #48]	; (80118b0 <ZbExtendedAddress+0x8c>)
 801187e:	4a0d      	ldr	r2, [pc, #52]	; (80118b4 <ZbExtendedAddress+0x90>)
 8011880:	f240 11cd 	movw	r1, #461	; 0x1cd
 8011884:	480c      	ldr	r0, [pc, #48]	; (80118b8 <ZbExtendedAddress+0x94>)
 8011886:	f003 fbf3 	bl	8015070 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	f103 0108 	add.w	r1, r3, #8
 8011890:	f107 0308 	add.w	r3, r7, #8
 8011894:	2208      	movs	r2, #8
 8011896:	4618      	mov	r0, r3
 8011898:	f7ff fec5 	bl	8011626 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 801189c:	f7ff f966 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return ext_addr;
 80118a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80118a4:	4610      	mov	r0, r2
 80118a6:	4619      	mov	r1, r3
 80118a8:	3718      	adds	r7, #24
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	080165d8 	.word	0x080165d8
 80118b4:	08016d64 	.word	0x08016d64
 80118b8:	08016598 	.word	0x08016598

080118bc <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 80118c4:	2300      	movs	r3, #0
 80118c6:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 80118c8:	f107 020e 	add.w	r2, r7, #14
 80118cc:	2302      	movs	r3, #2
 80118ce:	2196      	movs	r1, #150	; 0x96
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 fc1b 	bl	801210c <ZbNwkGet>
    return nwkAddr;
 80118d6:	89fb      	ldrh	r3, [r7, #14]
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3710      	adds	r7, #16
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80118e8:	f002 fdea 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80118ec:	f002 fd7a 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80118f0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	2200      	movs	r2, #0
 80118f6:	f042 021b 	orr.w	r2, r2, #27
 80118fa:	701a      	strb	r2, [r3, #0]
 80118fc:	2200      	movs	r2, #0
 80118fe:	705a      	strb	r2, [r3, #1]
 8011900:	2200      	movs	r2, #0
 8011902:	709a      	strb	r2, [r3, #2]
 8011904:	2200      	movs	r2, #0
 8011906:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2200      	movs	r2, #0
 801190c:	f042 0201 	orr.w	r2, r2, #1
 8011910:	711a      	strb	r2, [r3, #4]
 8011912:	2200      	movs	r2, #0
 8011914:	715a      	strb	r2, [r3, #5]
 8011916:	2200      	movs	r2, #0
 8011918:	719a      	strb	r2, [r3, #6]
 801191a:	2200      	movs	r2, #0
 801191c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011924:	f002 fd8e 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011928:	f7ff f920 	bl	8010b6c <Post_ZigbeeCmdProcessing>
}
 801192c:	bf00      	nop
 801192e:	3710      	adds	r7, #16
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b088      	sub	sp, #32
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
 8011940:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8011942:	6839      	ldr	r1, [r7, #0]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f7ff fe8d 	bl	8011664 <zb_ipc_m4_cb_info_alloc>
 801194a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d101      	bne.n	8011956 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8011952:	2370      	movs	r3, #112	; 0x70
 8011954:	e036      	b.n	80119c4 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	4b1a      	ldr	r3, [pc, #104]	; (80119cc <ZbStartup+0x98>)
 8011962:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 8011964:	f002 fdac 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011968:	f002 fd3c 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801196c:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	2200      	movs	r2, #0
 8011972:	f042 021c 	orr.w	r2, r2, #28
 8011976:	701a      	strb	r2, [r3, #0]
 8011978:	2200      	movs	r2, #0
 801197a:	705a      	strb	r2, [r3, #1]
 801197c:	2200      	movs	r2, #0
 801197e:	709a      	strb	r2, [r3, #2]
 8011980:	2200      	movs	r2, #0
 8011982:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011984:	69bb      	ldr	r3, [r7, #24]
 8011986:	2200      	movs	r2, #0
 8011988:	f042 0202 	orr.w	r2, r2, #2
 801198c:	711a      	strb	r2, [r3, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	715a      	strb	r2, [r3, #5]
 8011992:	2200      	movs	r2, #0
 8011994:	719a      	strb	r2, [r3, #6]
 8011996:	2200      	movs	r2, #0
 8011998:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	69bb      	ldr	r3, [r7, #24]
 801199e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 80119a0:	69fa      	ldr	r2, [r7, #28]
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80119a6:	f002 fd4d 	bl	8014444 <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 80119aa:	f7ff fe83 	bl	80116b4 <zb_ipc_m4_get_retval>
 80119ae:	4603      	mov	r3, r0
 80119b0:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80119b2:	f7ff f8db 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 80119b6:	7dfb      	ldrb	r3, [r7, #23]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d002      	beq.n	80119c2 <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 80119bc:	69f8      	ldr	r0, [r7, #28]
 80119be:	f7ff fe6e 	bl	801169e <zb_ipc_m4_cb_info_free>
    }
    return status;
 80119c2:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3720      	adds	r7, #32
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	200005fc 	.word	0x200005fc

080119d0 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08c      	sub	sp, #48	; 0x30
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	607a      	str	r2, [r7, #4]
 80119da:	603b      	str	r3, [r7, #0]
 80119dc:	460b      	mov	r3, r1
 80119de:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 80119e0:	897b      	ldrh	r3, [r7, #10]
 80119e2:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 80119ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ee:	627b      	str	r3, [r7, #36]	; 0x24

    Pre_ZigbeeCmdProcessing();
 80119f0:	f002 fd66 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80119f4:	f002 fcf6 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80119f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 80119fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fc:	2200      	movs	r2, #0
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f042 0202 	orr.w	r2, r2, #2
 8011a06:	705a      	strb	r2, [r3, #1]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	709a      	strb	r2, [r3, #2]
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a12:	2200      	movs	r2, #0
 8011a14:	f042 0202 	orr.w	r2, r2, #2
 8011a18:	711a      	strb	r2, [r3, #4]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	715a      	strb	r2, [r3, #5]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	719a      	strb	r2, [r3, #6]
 8011a22:	2200      	movs	r2, #0
 8011a24:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 8011a26:	f107 0218 	add.w	r2, r7, #24
 8011a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 8011a2e:	f107 0214 	add.w	r2, r7, #20
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011a36:	f002 fd05 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011a3a:	f7ff f897 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 8011a3e:	7d3b      	ldrb	r3, [r7, #20]
 8011a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    return status;
 8011a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3730      	adds	r7, #48	; 0x30
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b088      	sub	sp, #32
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
 8011a5c:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8011a5e:	6839      	ldr	r1, [r7, #0]
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff fdff 	bl	8011664 <zb_ipc_m4_cb_info_alloc>
 8011a66:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d101      	bne.n	8011a72 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8011a6e:	2370      	movs	r3, #112	; 0x70
 8011a70:	e031      	b.n	8011ad6 <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 8011a72:	f002 fd25 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011a76:	f002 fcb5 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011a7a:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 8011a7c:	69bb      	ldr	r3, [r7, #24]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f042 0204 	orr.w	r2, r2, #4
 8011a84:	701a      	strb	r2, [r3, #0]
 8011a86:	2200      	movs	r2, #0
 8011a88:	f042 0202 	orr.w	r2, r2, #2
 8011a8c:	705a      	strb	r2, [r3, #1]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	709a      	strb	r2, [r3, #2]
 8011a92:	2200      	movs	r2, #0
 8011a94:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f042 0202 	orr.w	r2, r2, #2
 8011a9e:	711a      	strb	r2, [r3, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	715a      	strb	r2, [r3, #5]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	719a      	strb	r2, [r3, #6]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8011aac:	68ba      	ldr	r2, [r7, #8]
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8011ab2:	69fa      	ldr	r2, [r7, #28]
 8011ab4:	69bb      	ldr	r3, [r7, #24]
 8011ab6:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011ab8:	f002 fcc4 	bl	8014444 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 8011abc:	f7ff fdfa 	bl	80116b4 <zb_ipc_m4_get_retval>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8011ac4:	f7ff f852 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 8011ac8:	7dfb      	ldrb	r3, [r7, #23]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d002      	beq.n	8011ad4 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 8011ace:	69f8      	ldr	r0, [r7, #28]
 8011ad0:	f7ff fde5 	bl	801169e <zb_ipc_m4_cb_info_free>
    }
    return status;
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3720      	adds	r7, #32
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b084      	sub	sp, #16
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 8011aea:	f002 fce9 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011aee:	f002 fc79 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011af2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2200      	movs	r2, #0
 8011af8:	f042 020d 	orr.w	r2, r2, #13
 8011afc:	701a      	strb	r2, [r3, #0]
 8011afe:	2200      	movs	r2, #0
 8011b00:	f042 0202 	orr.w	r2, r2, #2
 8011b04:	705a      	strb	r2, [r3, #1]
 8011b06:	2200      	movs	r2, #0
 8011b08:	709a      	strb	r2, [r3, #2]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2200      	movs	r2, #0
 8011b12:	f042 0201 	orr.w	r2, r2, #1
 8011b16:	711a      	strb	r2, [r3, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	715a      	strb	r2, [r3, #5]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	719a      	strb	r2, [r3, #6]
 8011b20:	2200      	movs	r2, #0
 8011b22:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8011b24:	78fa      	ldrb	r2, [r7, #3]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011b2a:	f002 fc8b 	bl	8014444 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 8011b2e:	f7ff fdc1 	bl	80116b4 <zb_ipc_m4_get_retval>
 8011b32:	4603      	mov	r3, r0
 8011b34:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 8011b36:	f7ff f819 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return val_ret;
 8011b3a:	897b      	ldrh	r3, [r7, #10]
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3710      	adds	r7, #16
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	d101      	bne.n	8011b58 <ZbApsAddrIsBcast+0x14>
        return true;
 8011b54:	2301      	movs	r3, #1
 8011b56:	e012      	b.n	8011b7e <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	d10d      	bne.n	8011b7c <ZbApsAddrIsBcast+0x38>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	88db      	ldrh	r3, [r3, #6]
 8011b64:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d907      	bls.n	8011b7c <ZbApsAddrIsBcast+0x38>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	88db      	ldrh	r3, [r3, #6]
 8011b70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d001      	beq.n	8011b7c <ZbApsAddrIsBcast+0x38>
        return true;
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e000      	b.n	8011b7e <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	370c      	adds	r7, #12
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr

08011b8a <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 8011b8a:	b5b0      	push	{r4, r5, r7, lr}
 8011b8c:	b082      	sub	sp, #8
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
 8011b92:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	2b03      	cmp	r3, #3
 8011b9a:	d10d      	bne.n	8011bb8 <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f7ff fe3e 	bl	8011824 <ZbExtendedAddress>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	460b      	mov	r3, r1
 8011bac:	429d      	cmp	r5, r3
 8011bae:	bf08      	it	eq
 8011bb0:	4294      	cmpeq	r4, r2
 8011bb2:	d101      	bne.n	8011bb8 <ZbApsAddrIsLocal+0x2e>
            return true;
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	e00e      	b.n	8011bd6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	d109      	bne.n	8011bd4 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	88dc      	ldrh	r4, [r3, #6]
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f7ff fe79 	bl	80118bc <ZbShortAddress>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	429c      	cmp	r4, r3
 8011bce:	d101      	bne.n	8011bd4 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e000      	b.n	8011bd6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bdb0      	pop	{r4, r5, r7, pc}

08011bde <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b08a      	sub	sp, #40	; 0x28
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	60f8      	str	r0, [r7, #12]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	603b      	str	r3, [r7, #0]
 8011bea:	460b      	mov	r3, r1
 8011bec:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 8011bee:	897b      	ldrh	r3, [r7, #10]
 8011bf0:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 8011bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bfc:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8011bfe:	f002 fc5f 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011c02:	f002 fbef 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011c06:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f042 0210 	orr.w	r2, r2, #16
 8011c10:	701a      	strb	r2, [r3, #0]
 8011c12:	2200      	movs	r2, #0
 8011c14:	f042 0202 	orr.w	r2, r2, #2
 8011c18:	705a      	strb	r2, [r3, #1]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	709a      	strb	r2, [r3, #2]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c24:	2200      	movs	r2, #0
 8011c26:	f042 0202 	orr.w	r2, r2, #2
 8011c2a:	711a      	strb	r2, [r3, #4]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	715a      	strb	r2, [r3, #5]
 8011c30:	2200      	movs	r2, #0
 8011c32:	719a      	strb	r2, [r3, #6]
 8011c34:	2200      	movs	r2, #0
 8011c36:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 8011c38:	f107 0214 	add.w	r2, r7, #20
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8011c40:	f107 0210 	add.w	r2, r7, #16
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011c48:	f002 fbfc 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011c4c:	f7fe ff8e 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8011c50:	7c3b      	ldrb	r3, [r7, #16]
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3728      	adds	r7, #40	; 0x28
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b086      	sub	sp, #24
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	60f8      	str	r0, [r7, #12]
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	607a      	str	r2, [r7, #4]
 8011c66:	f002 fc2b 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
 8011c6a:	f002 fbbb 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011c6e:	6178      	str	r0, [r7, #20]
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	2200      	movs	r2, #0
 8011c74:	f042 0215 	orr.w	r2, r2, #21
 8011c78:	701a      	strb	r2, [r3, #0]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f042 0202 	orr.w	r2, r2, #2
 8011c80:	705a      	strb	r2, [r3, #1]
 8011c82:	2200      	movs	r2, #0
 8011c84:	709a      	strb	r2, [r3, #2]
 8011c86:	2200      	movs	r2, #0
 8011c88:	70da      	strb	r2, [r3, #3]
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f042 0202 	orr.w	r2, r2, #2
 8011c92:	711a      	strb	r2, [r3, #4]
 8011c94:	2200      	movs	r2, #0
 8011c96:	715a      	strb	r2, [r3, #5]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	719a      	strb	r2, [r3, #6]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	71da      	strb	r2, [r3, #7]
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	609a      	str	r2, [r3, #8]
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	60da      	str	r2, [r3, #12]
 8011cac:	f002 fbca 	bl	8014444 <ZIGBEE_CmdTransfer>
 8011cb0:	f7fe ff5c 	bl	8010b6c <Post_ZigbeeCmdProcessing>
 8011cb4:	3718      	adds	r7, #24
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b092      	sub	sp, #72	; 0x48
 8011cbe:	af02      	add	r7, sp, #8
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	70fb      	strb	r3, [r7, #3]
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7ff fdaa 	bl	8011824 <ZbExtendedAddress>
 8011cd0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8011cd8:	f107 0208 	add.w	r2, r7, #8
 8011cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	2320      	movs	r3, #32
 8011ce2:	21c1      	movs	r1, #193	; 0xc1
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7ff ff7a 	bl	8011bde <ZbApsGetIndex>
 8011cea:	4603      	mov	r3, r0
 8011cec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8011cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d120      	bne.n	8011d3a <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 8011cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011cfc:	4313      	orrs	r3, r2
 8011cfe:	d011      	beq.n	8011d24 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8011d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011d04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011d08:	4299      	cmp	r1, r3
 8011d0a:	bf08      	it	eq
 8011d0c:	4290      	cmpeq	r0, r2
 8011d0e:	d10b      	bne.n	8011d28 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8011d10:	7c3b      	ldrb	r3, [r7, #16]
 8011d12:	78fa      	ldrb	r2, [r7, #3]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d109      	bne.n	8011d2c <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 8011d18:	8a7b      	ldrh	r3, [r7, #18]
 8011d1a:	883a      	ldrh	r2, [r7, #0]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d107      	bne.n	8011d30 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8011d20:	2301      	movs	r3, #1
 8011d22:	e00c      	b.n	8011d3e <ZbApsBindSrcExists+0x84>
            continue;
 8011d24:	bf00      	nop
 8011d26:	e004      	b.n	8011d32 <ZbApsBindSrcExists+0x78>
            continue;
 8011d28:	bf00      	nop
 8011d2a:	e002      	b.n	8011d32 <ZbApsBindSrcExists+0x78>
            continue;
 8011d2c:	bf00      	nop
 8011d2e:	e000      	b.n	8011d32 <ZbApsBindSrcExists+0x78>
            continue;
 8011d30:	bf00      	nop
    for (i = 0;; i++) {
 8011d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d34:	3301      	adds	r3, #1
 8011d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8011d38:	e7ce      	b.n	8011cd8 <ZbApsBindSrcExists+0x1e>
            break;
 8011d3a:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3740      	adds	r7, #64	; 0x40
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
	...

08011d48 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b088      	sub	sp, #32
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	60f8      	str	r0, [r7, #12]
 8011d50:	60b9      	str	r1, [r7, #8]
 8011d52:	603b      	str	r3, [r7, #0]
 8011d54:	4613      	mov	r3, r2
 8011d56:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011d58:	2300      	movs	r3, #0
 8011d5a:	61bb      	str	r3, [r7, #24]
 8011d5c:	e00e      	b.n	8011d7c <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8011d5e:	69ba      	ldr	r2, [r7, #24]
 8011d60:	4613      	mov	r3, r2
 8011d62:	005b      	lsls	r3, r3, #1
 8011d64:	4413      	add	r3, r2
 8011d66:	009b      	lsls	r3, r3, #2
 8011d68:	4a28      	ldr	r2, [pc, #160]	; (8011e0c <ZbMsgFilterRegister+0xc4>)
 8011d6a:	4413      	add	r3, r2
 8011d6c:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8011d6e:	69fb      	ldr	r3, [r7, #28]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d006      	beq.n	8011d84 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	3301      	adds	r3, #1
 8011d7a:	61bb      	str	r3, [r7, #24]
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	2b1f      	cmp	r3, #31
 8011d80:	d9ed      	bls.n	8011d5e <ZbMsgFilterRegister+0x16>
 8011d82:	e000      	b.n	8011d86 <ZbMsgFilterRegister+0x3e>
            break;
 8011d84:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	2b20      	cmp	r3, #32
 8011d8a:	d101      	bne.n	8011d90 <ZbMsgFilterRegister+0x48>
        return NULL;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	e038      	b.n	8011e02 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 8011d90:	f002 fb96 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011d94:	f002 fb26 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011d98:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f042 0210 	orr.w	r2, r2, #16
 8011da2:	701a      	strb	r2, [r3, #0]
 8011da4:	2200      	movs	r2, #0
 8011da6:	705a      	strb	r2, [r3, #1]
 8011da8:	2200      	movs	r2, #0
 8011daa:	709a      	strb	r2, [r3, #2]
 8011dac:	2200      	movs	r2, #0
 8011dae:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f042 0203 	orr.w	r2, r2, #3
 8011db8:	711a      	strb	r2, [r3, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	715a      	strb	r2, [r3, #5]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	719a      	strb	r2, [r3, #6]
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 8011dcc:	79fa      	ldrb	r2, [r7, #7]
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 8011dd2:	69fa      	ldr	r2, [r7, #28]
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8011dd8:	f002 fb34 	bl	8014444 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 8011ddc:	f7ff fc6a 	bl	80116b4 <zb_ipc_m4_get_retval>
 8011de0:	4603      	mov	r3, r0
 8011de2:	613b      	str	r3, [r7, #16]
    Post_ZigbeeCmdProcessing();
 8011de4:	f7fe fec2 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    if (filter != NULL) {
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d008      	beq.n	8011e00 <ZbMsgFilterRegister+0xb8>
        cb_info->filter = filter;
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	693a      	ldr	r2, [r7, #16]
 8011df2:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8011df4:	69fb      	ldr	r3, [r7, #28]
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dfe:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8011e00:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3720      	adds	r7, #32
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	20000624 	.word	0x20000624

08011e10 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b086      	sub	sp, #24
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d046      	beq.n	8011eae <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011e20:	2300      	movs	r3, #0
 8011e22:	613b      	str	r3, [r7, #16]
 8011e24:	e00f      	b.n	8011e46 <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 8011e26:	693a      	ldr	r2, [r7, #16]
 8011e28:	4613      	mov	r3, r2
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	4413      	add	r3, r2
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	4a22      	ldr	r2, [pc, #136]	; (8011ebc <ZbMsgFilterRemove+0xac>)
 8011e32:	4413      	add	r3, r2
 8011e34:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	683a      	ldr	r2, [r7, #0]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d006      	beq.n	8011e4e <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	3301      	adds	r3, #1
 8011e44:	613b      	str	r3, [r7, #16]
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	2b1f      	cmp	r3, #31
 8011e4a:	d9ec      	bls.n	8011e26 <ZbMsgFilterRemove+0x16>
 8011e4c:	e000      	b.n	8011e50 <ZbMsgFilterRemove+0x40>
            break;
 8011e4e:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	2b20      	cmp	r3, #32
 8011e54:	d02d      	beq.n	8011eb2 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 8011e56:	f002 fb33 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011e5a:	f002 fac3 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011e5e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f042 0211 	orr.w	r2, r2, #17
 8011e68:	701a      	strb	r2, [r3, #0]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	705a      	strb	r2, [r3, #1]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	709a      	strb	r2, [r3, #2]
 8011e72:	2200      	movs	r2, #0
 8011e74:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f042 0201 	orr.w	r2, r2, #1
 8011e7e:	711a      	strb	r2, [r3, #4]
 8011e80:	2200      	movs	r2, #0
 8011e82:	715a      	strb	r2, [r3, #5]
 8011e84:	2200      	movs	r2, #0
 8011e86:	719a      	strb	r2, [r3, #6]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 8011e8c:	683a      	ldr	r2, [r7, #0]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011e92:	f002 fad7 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011e96:	f7fe fe69 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    cb_info->filter = NULL;
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	701a      	strb	r2, [r3, #0]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	705a      	strb	r2, [r3, #1]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	709a      	strb	r2, [r3, #2]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	70da      	strb	r2, [r3, #3]
 8011eac:	e002      	b.n	8011eb4 <ZbMsgFilterRemove+0xa4>
        return;
 8011eae:	bf00      	nop
 8011eb0:	e000      	b.n	8011eb4 <ZbMsgFilterRemove+0xa4>
        return;
 8011eb2:	bf00      	nop
}
 8011eb4:	3718      	adds	r7, #24
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	20000624 	.word	0x20000624

08011ec0 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 8011ecc:	2300      	movs	r3, #0
 8011ece:	4a24      	ldr	r2, [pc, #144]	; (8011f60 <ZbTimerAlloc+0xa0>)
 8011ed0:	210c      	movs	r1, #12
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	f000 fb6c 	bl	80125b0 <zb_heap_alloc>
 8011ed8:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d039      	beq.n	8011f54 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8011eec:	f002 fae8 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011ef0:	f002 fa78 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011ef4:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	f042 0214 	orr.w	r2, r2, #20
 8011efe:	701a      	strb	r2, [r3, #0]
 8011f00:	2200      	movs	r2, #0
 8011f02:	705a      	strb	r2, [r3, #1]
 8011f04:	2200      	movs	r2, #0
 8011f06:	709a      	strb	r2, [r3, #2]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f042 0201 	orr.w	r2, r2, #1
 8011f14:	711a      	strb	r2, [r3, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	715a      	strb	r2, [r3, #5]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	719a      	strb	r2, [r3, #6]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8011f22:	697a      	ldr	r2, [r7, #20]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 8011f28:	f002 fa8c 	bl	8014444 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8011f2c:	f7ff fbc2 	bl	80116b4 <zb_ipc_m4_get_retval>
 8011f30:	4603      	mov	r3, r0
 8011f32:	461a      	mov	r2, r3
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 8011f38:	f7fe fe18 	bl	8010b6c <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d107      	bne.n	8011f54 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 8011f44:	2300      	movs	r3, #0
 8011f46:	4a06      	ldr	r2, [pc, #24]	; (8011f60 <ZbTimerAlloc+0xa0>)
 8011f48:	6979      	ldr	r1, [r7, #20]
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	f000 fb3f 	bl	80125ce <zb_heap_free>
            timer = NULL;
 8011f50:	2300      	movs	r3, #0
 8011f52:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8011f54:	697b      	ldr	r3, [r7, #20]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3718      	adds	r7, #24
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	080165ec 	.word	0x080165ec

08011f64 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8011f6c:	f002 faa8 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011f70:	f002 fa38 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011f74:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f042 0215 	orr.w	r2, r2, #21
 8011f7e:	701a      	strb	r2, [r3, #0]
 8011f80:	2200      	movs	r2, #0
 8011f82:	705a      	strb	r2, [r3, #1]
 8011f84:	2200      	movs	r2, #0
 8011f86:	709a      	strb	r2, [r3, #2]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f042 0201 	orr.w	r2, r2, #1
 8011f94:	711a      	strb	r2, [r3, #4]
 8011f96:	2200      	movs	r2, #0
 8011f98:	715a      	strb	r2, [r3, #5]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	719a      	strb	r2, [r3, #6]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	689b      	ldr	r3, [r3, #8]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011fac:	f002 fa4a 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011fb0:	f7fe fddc 	bl	8010b6c <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	4a04      	ldr	r2, [pc, #16]	; (8011fc8 <ZbTimerFree+0x64>)
 8011fb8:	6879      	ldr	r1, [r7, #4]
 8011fba:	2000      	movs	r0, #0
 8011fbc:	f000 fb07 	bl	80125ce <zb_heap_free>
}
 8011fc0:	bf00      	nop
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	080165ec 	.word	0x080165ec

08011fcc <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8011fd6:	f002 fa73 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011fda:	f002 fa03 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011fde:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f042 0217 	orr.w	r2, r2, #23
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	2200      	movs	r2, #0
 8011fec:	705a      	strb	r2, [r3, #1]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	709a      	strb	r2, [r3, #2]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	f042 0202 	orr.w	r2, r2, #2
 8011ffe:	711a      	strb	r2, [r3, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	715a      	strb	r2, [r3, #5]
 8012004:	2200      	movs	r2, #0
 8012006:	719a      	strb	r2, [r3, #6]
 8012008:	2200      	movs	r2, #0
 801200a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	461a      	mov	r2, r3
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	683a      	ldr	r2, [r7, #0]
 801201a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801201c:	f002 fa12 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012020:	f7fe fda4 	bl	8010b6c <Post_ZigbeeCmdProcessing>
}
 8012024:	bf00      	nop
 8012026:	3710      	adds	r7, #16
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4a13      	ldr	r2, [pc, #76]	; (8012088 <ZbTimeoutRemaining+0x5c>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d909      	bls.n	8012052 <ZbTimeoutRemaining+0x26>
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012044:	d805      	bhi.n	8012052 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8012046:	683a      	ldr	r2, [r7, #0]
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	e014      	b.n	801207c <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	4a0c      	ldr	r2, [pc, #48]	; (8012088 <ZbTimeoutRemaining+0x5c>)
 8012056:	4293      	cmp	r3, r2
 8012058:	d905      	bls.n	8012066 <ZbTimeoutRemaining+0x3a>
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012060:	d801      	bhi.n	8012066 <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8012062:	2300      	movs	r3, #0
 8012064:	e00a      	b.n	801207c <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8012066:	687a      	ldr	r2, [r7, #4]
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	429a      	cmp	r2, r3
 801206c:	d301      	bcc.n	8012072 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 801206e:	2300      	movs	r3, #0
 8012070:	e004      	b.n	801207c <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8012072:	683a      	ldr	r2, [r7, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	1ad3      	subs	r3, r2, r3
 8012078:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 801207a:	68fb      	ldr	r3, [r7, #12]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3714      	adds	r7, #20
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	bffffffd 	.word	0xbffffffd

0801208c <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b08c      	sub	sp, #48	; 0x30
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	607a      	str	r2, [r7, #4]
 8012096:	603b      	str	r3, [r7, #0]
 8012098:	460b      	mov	r3, r1
 801209a:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 801209c:	897b      	ldrh	r3, [r7, #10]
 801209e:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 80120a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120aa:	627b      	str	r3, [r7, #36]	; 0x24

    Pre_ZigbeeCmdProcessing();
 80120ac:	f002 fa08 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80120b0:	f002 f998 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80120b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 80120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b8:	2200      	movs	r2, #0
 80120ba:	701a      	strb	r2, [r3, #0]
 80120bc:	2200      	movs	r2, #0
 80120be:	f042 0203 	orr.w	r2, r2, #3
 80120c2:	705a      	strb	r2, [r3, #1]
 80120c4:	2200      	movs	r2, #0
 80120c6:	709a      	strb	r2, [r3, #2]
 80120c8:	2200      	movs	r2, #0
 80120ca:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	2200      	movs	r2, #0
 80120d0:	f042 0202 	orr.w	r2, r2, #2
 80120d4:	711a      	strb	r2, [r3, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	715a      	strb	r2, [r3, #5]
 80120da:	2200      	movs	r2, #0
 80120dc:	719a      	strb	r2, [r3, #6]
 80120de:	2200      	movs	r2, #0
 80120e0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 80120e2:	f107 0218 	add.w	r2, r7, #24
 80120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 80120ea:	f107 0214 	add.w	r2, r7, #20
 80120ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80120f2:	f002 f9a7 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80120f6:	f7fe fd39 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 80120fa:	7d3b      	ldrb	r3, [r7, #20]
 80120fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    return status;
 8012100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012104:	4618      	mov	r0, r3
 8012106:	3730      	adds	r7, #48	; 0x30
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <ZbNwkGet>:
    return status;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b086      	sub	sp, #24
 8012110:	af02      	add	r7, sp, #8
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	607a      	str	r2, [r7, #4]
 8012116:	603b      	str	r3, [r7, #0]
 8012118:	460b      	mov	r3, r1
 801211a:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 801211c:	8979      	ldrh	r1, [r7, #10]
 801211e:	2300      	movs	r3, #0
 8012120:	9300      	str	r3, [sp, #0]
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f7ff ffb0 	bl	801208c <ZbNwkGetIndex>
 801212c:	4603      	mov	r3, r0
}
 801212e:	4618      	mov	r0, r3
 8012130:	3710      	adds	r7, #16
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b086      	sub	sp, #24
 801213a:	af02      	add	r7, sp, #8
 801213c:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 801213e:	f107 020c 	add.w	r2, r7, #12
 8012142:	2300      	movs	r3, #0
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	2304      	movs	r3, #4
 8012148:	f241 111d 	movw	r1, #4381	; 0x111d
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7ff fc3f 	bl	80119d0 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 8012152:	68fb      	ldr	r3, [r7, #12]
}
 8012154:	4618      	mov	r0, r3
 8012156:	3710      	adds	r7, #16
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b086      	sub	sp, #24
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8012168:	f002 f9aa 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801216c:	f002 f93a 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012170:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	2200      	movs	r2, #0
 8012176:	f042 021d 	orr.w	r2, r2, #29
 801217a:	701a      	strb	r2, [r3, #0]
 801217c:	2200      	movs	r2, #0
 801217e:	f042 0204 	orr.w	r2, r2, #4
 8012182:	705a      	strb	r2, [r3, #1]
 8012184:	2200      	movs	r2, #0
 8012186:	709a      	strb	r2, [r3, #2]
 8012188:	2200      	movs	r2, #0
 801218a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	2200      	movs	r2, #0
 8012190:	f042 0202 	orr.w	r2, r2, #2
 8012194:	711a      	strb	r2, [r3, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	715a      	strb	r2, [r3, #5]
 801219a:	2200      	movs	r2, #0
 801219c:	719a      	strb	r2, [r3, #6]
 801219e:	2200      	movs	r2, #0
 80121a0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 80121a2:	68ba      	ldr	r2, [r7, #8]
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 80121a8:	687a      	ldr	r2, [r7, #4]
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80121ae:	f002 f949 	bl	8014444 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 80121b2:	f7ff fa7f 	bl	80116b4 <zb_ipc_m4_get_retval>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	bf14      	ite	ne
 80121bc:	2301      	movne	r3, #1
 80121be:	2300      	moveq	r3, #0
 80121c0:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 80121c2:	f7fe fcd3 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return rc;
 80121c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3718      	adds	r7, #24
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80121dc:	f002 f970 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80121e0:	f002 f900 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80121e4:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	2200      	movs	r2, #0
 80121ea:	701a      	strb	r2, [r3, #0]
 80121ec:	2200      	movs	r2, #0
 80121ee:	f042 0204 	orr.w	r2, r2, #4
 80121f2:	705a      	strb	r2, [r3, #1]
 80121f4:	2200      	movs	r2, #0
 80121f6:	709a      	strb	r2, [r3, #2]
 80121f8:	2200      	movs	r2, #0
 80121fa:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	2200      	movs	r2, #0
 8012200:	f042 0202 	orr.w	r2, r2, #2
 8012204:	711a      	strb	r2, [r3, #4]
 8012206:	2200      	movs	r2, #0
 8012208:	715a      	strb	r2, [r3, #5]
 801220a:	2200      	movs	r2, #0
 801220c:	719a      	strb	r2, [r3, #6]
 801220e:	2200      	movs	r2, #0
 8012210:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8012212:	68ba      	ldr	r2, [r7, #8]
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801221e:	f002 f911 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012222:	f7fe fca3 	bl	8010b6c <Post_ZigbeeCmdProcessing>
}
 8012226:	bf00      	nop
 8012228:	3718      	adds	r7, #24
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b082      	sub	sp, #8
 8012232:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 8012234:	f002 f944 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012238:	f002 f8d4 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801223c:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2200      	movs	r2, #0
 8012242:	f042 0211 	orr.w	r2, r2, #17
 8012246:	701a      	strb	r2, [r3, #0]
 8012248:	2200      	movs	r2, #0
 801224a:	f042 0204 	orr.w	r2, r2, #4
 801224e:	705a      	strb	r2, [r3, #1]
 8012250:	2200      	movs	r2, #0
 8012252:	709a      	strb	r2, [r3, #2]
 8012254:	2200      	movs	r2, #0
 8012256:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2200      	movs	r2, #0
 801225c:	711a      	strb	r2, [r3, #4]
 801225e:	2200      	movs	r2, #0
 8012260:	715a      	strb	r2, [r3, #5]
 8012262:	2200      	movs	r2, #0
 8012264:	719a      	strb	r2, [r3, #6]
 8012266:	2200      	movs	r2, #0
 8012268:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801226a:	f002 f8eb 	bl	8014444 <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 801226e:	f7ff fa21 	bl	80116b4 <zb_ipc_m4_get_retval>
 8012272:	4603      	mov	r3, r0
 8012274:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 8012276:	f7fe fc79 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return rc;
 801227a:	78fb      	ldrb	r3, [r7, #3]
}
 801227c:	4618      	mov	r0, r3
 801227e:	3708      	adds	r7, #8
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}

08012284 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b088      	sub	sp, #32
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	60b9      	str	r1, [r7, #8]
 801228e:	607a      	str	r2, [r7, #4]
 8012290:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8012292:	2300      	movs	r3, #0
 8012294:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d013      	beq.n	80122c4 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 801229c:	6839      	ldr	r1, [r7, #0]
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f7ff f9e0 	bl	8011664 <zb_ipc_m4_cb_info_alloc>
 80122a4:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d101      	bne.n	80122b0 <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 80122ac:	2389      	movs	r3, #137	; 0x89
 80122ae:	e03e      	b.n	801232e <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7ff fc46 	bl	8011b44 <ZbApsAddrIsBcast>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d002      	beq.n	80122c4 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	2201      	movs	r2, #1
 80122c2:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 80122c4:	f002 f8fc 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80122c8:	f002 f88c 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80122cc:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	2200      	movs	r2, #0
 80122d2:	f042 0212 	orr.w	r2, r2, #18
 80122d6:	701a      	strb	r2, [r3, #0]
 80122d8:	2200      	movs	r2, #0
 80122da:	f042 0204 	orr.w	r2, r2, #4
 80122de:	705a      	strb	r2, [r3, #1]
 80122e0:	2200      	movs	r2, #0
 80122e2:	709a      	strb	r2, [r3, #2]
 80122e4:	2200      	movs	r2, #0
 80122e6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	2200      	movs	r2, #0
 80122ec:	f042 0202 	orr.w	r2, r2, #2
 80122f0:	711a      	strb	r2, [r3, #4]
 80122f2:	2200      	movs	r2, #0
 80122f4:	715a      	strb	r2, [r3, #5]
 80122f6:	2200      	movs	r2, #0
 80122f8:	719a      	strb	r2, [r3, #6]
 80122fa:	2200      	movs	r2, #0
 80122fc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 80122fe:	68ba      	ldr	r2, [r7, #8]
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8012304:	69fa      	ldr	r2, [r7, #28]
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801230a:	f002 f89b 	bl	8014444 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 801230e:	f7ff f9d1 	bl	80116b4 <zb_ipc_m4_get_retval>
 8012312:	4603      	mov	r3, r0
 8012314:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8012316:	f7fe fc29 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 801231a:	7dfb      	ldrb	r3, [r7, #23]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d005      	beq.n	801232c <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d002      	beq.n	801232c <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 8012326:	69f8      	ldr	r0, [r7, #28]
 8012328:	f7ff f9b9 	bl	801169e <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 801232c:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 801232e:	4618      	mov	r0, r3
 8012330:	3720      	adds	r7, #32
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}

08012336 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 8012336:	b580      	push	{r7, lr}
 8012338:	b086      	sub	sp, #24
 801233a:	af00      	add	r7, sp, #0
 801233c:	60f8      	str	r0, [r7, #12]
 801233e:	60b9      	str	r1, [r7, #8]
 8012340:	607a      	str	r2, [r7, #4]
 8012342:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012344:	f002 f8bc 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012348:	f002 f84c 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801234c:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	2200      	movs	r2, #0
 8012352:	f042 0214 	orr.w	r2, r2, #20
 8012356:	701a      	strb	r2, [r3, #0]
 8012358:	2200      	movs	r2, #0
 801235a:	f042 0204 	orr.w	r2, r2, #4
 801235e:	705a      	strb	r2, [r3, #1]
 8012360:	2200      	movs	r2, #0
 8012362:	709a      	strb	r2, [r3, #2]
 8012364:	2200      	movs	r2, #0
 8012366:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	2200      	movs	r2, #0
 801236c:	f042 0204 	orr.w	r2, r2, #4
 8012370:	711a      	strb	r2, [r3, #4]
 8012372:	2200      	movs	r2, #0
 8012374:	715a      	strb	r2, [r3, #5]
 8012376:	2200      	movs	r2, #0
 8012378:	719a      	strb	r2, [r3, #6]
 801237a:	2200      	movs	r2, #0
 801237c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 8012384:	68ba      	ldr	r2, [r7, #8]
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 8012390:	78fa      	ldrb	r2, [r7, #3]
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8012396:	f002 f855 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801239a:	f7fe fbe7 	bl	8010b6c <Post_ZigbeeCmdProcessing>
}
 801239e:	bf00      	nop
 80123a0:	3718      	adds	r7, #24
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}

080123a6 <ZbZclClusterEndpointRegister>:
    return status;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 80123a6:	b580      	push	{r7, lr}
 80123a8:	b084      	sub	sp, #16
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 80123ae:	f002 f887 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80123b2:	f002 f817 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80123b6:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2200      	movs	r2, #0
 80123bc:	f042 0202 	orr.w	r2, r2, #2
 80123c0:	701a      	strb	r2, [r3, #0]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f042 0204 	orr.w	r2, r2, #4
 80123c8:	705a      	strb	r2, [r3, #1]
 80123ca:	2200      	movs	r2, #0
 80123cc:	709a      	strb	r2, [r3, #2]
 80123ce:	2200      	movs	r2, #0
 80123d0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f042 0201 	orr.w	r2, r2, #1
 80123da:	711a      	strb	r2, [r3, #4]
 80123dc:	2200      	movs	r2, #0
 80123de:	715a      	strb	r2, [r3, #5]
 80123e0:	2200      	movs	r2, #0
 80123e2:	719a      	strb	r2, [r3, #6]
 80123e4:	2200      	movs	r2, #0
 80123e6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80123ee:	f002 f829 	bl	8014444 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 80123f2:	f7ff f95f 	bl	80116b4 <zb_ipc_m4_get_retval>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	bf14      	ite	ne
 80123fc:	2301      	movne	r3, #1
 80123fe:	2300      	moveq	r3, #0
 8012400:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8012402:	f7fe fbb3 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return rc;
 8012406:	7afb      	ldrb	r3, [r7, #11]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8012418:	f002 f852 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801241c:	f001 ffe2 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012420:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2200      	movs	r2, #0
 8012426:	f042 0203 	orr.w	r2, r2, #3
 801242a:	701a      	strb	r2, [r3, #0]
 801242c:	2200      	movs	r2, #0
 801242e:	f042 0204 	orr.w	r2, r2, #4
 8012432:	705a      	strb	r2, [r3, #1]
 8012434:	2200      	movs	r2, #0
 8012436:	709a      	strb	r2, [r3, #2]
 8012438:	2200      	movs	r2, #0
 801243a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2200      	movs	r2, #0
 8012440:	f042 0201 	orr.w	r2, r2, #1
 8012444:	711a      	strb	r2, [r3, #4]
 8012446:	2200      	movs	r2, #0
 8012448:	715a      	strb	r2, [r3, #5]
 801244a:	2200      	movs	r2, #0
 801244c:	719a      	strb	r2, [r3, #6]
 801244e:	2200      	movs	r2, #0
 8012450:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8012458:	f001 fff4 	bl	8014444 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 801245c:	f7ff f92a 	bl	80116b4 <zb_ipc_m4_get_retval>
 8012460:	4603      	mov	r3, r0
 8012462:	2b00      	cmp	r3, #0
 8012464:	bf14      	ite	ne
 8012466:	2301      	movne	r3, #1
 8012468:	2300      	moveq	r3, #0
 801246a:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 801246c:	f7fe fb7e 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return rc;
 8012470:	7afb      	ldrb	r3, [r7, #11]
}
 8012472:	4618      	mov	r0, r3
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 801247a:	b580      	push	{r7, lr}
 801247c:	b084      	sub	sp, #16
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
 8012482:	4608      	mov	r0, r1
 8012484:	4611      	mov	r1, r2
 8012486:	461a      	mov	r2, r3
 8012488:	4603      	mov	r3, r0
 801248a:	70fb      	strb	r3, [r7, #3]
 801248c:	460b      	mov	r3, r1
 801248e:	803b      	strh	r3, [r7, #0]
 8012490:	4613      	mov	r3, r2
 8012492:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 8012494:	f002 f814 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012498:	f001 ffa4 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801249c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2200      	movs	r2, #0
 80124a2:	f042 0204 	orr.w	r2, r2, #4
 80124a6:	701a      	strb	r2, [r3, #0]
 80124a8:	2200      	movs	r2, #0
 80124aa:	f042 0204 	orr.w	r2, r2, #4
 80124ae:	705a      	strb	r2, [r3, #1]
 80124b0:	2200      	movs	r2, #0
 80124b2:	709a      	strb	r2, [r3, #2]
 80124b4:	2200      	movs	r2, #0
 80124b6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2200      	movs	r2, #0
 80124bc:	f042 0204 	orr.w	r2, r2, #4
 80124c0:	711a      	strb	r2, [r3, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	715a      	strb	r2, [r3, #5]
 80124c6:	2200      	movs	r2, #0
 80124c8:	719a      	strb	r2, [r3, #6]
 80124ca:	2200      	movs	r2, #0
 80124cc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 80124d4:	78fa      	ldrb	r2, [r7, #3]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 80124da:	883a      	ldrh	r2, [r7, #0]
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 80124e0:	78ba      	ldrb	r2, [r7, #2]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 80124e6:	f001 ffad 	bl	8014444 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 80124ea:	f7ff f8e3 	bl	80116b4 <zb_ipc_m4_get_retval>
 80124ee:	4603      	mov	r3, r0
 80124f0:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 80124f2:	f7fe fb3b 	bl	8010b6c <Post_ZigbeeCmdProcessing>
    return status;
 80124f6:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b084      	sub	sp, #16
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012508:	f001 ffda 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801250c:	f001 ff6a 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012510:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2200      	movs	r2, #0
 8012516:	f042 0206 	orr.w	r2, r2, #6
 801251a:	701a      	strb	r2, [r3, #0]
 801251c:	2200      	movs	r2, #0
 801251e:	f042 0204 	orr.w	r2, r2, #4
 8012522:	705a      	strb	r2, [r3, #1]
 8012524:	2200      	movs	r2, #0
 8012526:	709a      	strb	r2, [r3, #2]
 8012528:	2200      	movs	r2, #0
 801252a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2200      	movs	r2, #0
 8012530:	f042 0201 	orr.w	r2, r2, #1
 8012534:	711a      	strb	r2, [r3, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	715a      	strb	r2, [r3, #5]
 801253a:	2200      	movs	r2, #0
 801253c:	719a      	strb	r2, [r3, #6]
 801253e:	2200      	movs	r2, #0
 8012540:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8012548:	f001 ff7c 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801254c:	f7fe fb0e 	bl	8010b6c <Post_ZigbeeCmdProcessing>
}
 8012550:	bf00      	nop
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b084      	sub	sp, #16
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012560:	f001 ffae 	bl	80144c0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012564:	f001 ff3e 	bl	80143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012568:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2200      	movs	r2, #0
 801256e:	f042 020b 	orr.w	r2, r2, #11
 8012572:	701a      	strb	r2, [r3, #0]
 8012574:	2200      	movs	r2, #0
 8012576:	f042 0204 	orr.w	r2, r2, #4
 801257a:	705a      	strb	r2, [r3, #1]
 801257c:	2200      	movs	r2, #0
 801257e:	709a      	strb	r2, [r3, #2]
 8012580:	2200      	movs	r2, #0
 8012582:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2200      	movs	r2, #0
 8012588:	f042 0201 	orr.w	r2, r2, #1
 801258c:	711a      	strb	r2, [r3, #4]
 801258e:	2200      	movs	r2, #0
 8012590:	715a      	strb	r2, [r3, #5]
 8012592:	2200      	movs	r2, #0
 8012594:	719a      	strb	r2, [r3, #6]
 8012596:	2200      	movs	r2, #0
 8012598:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801259a:	687a      	ldr	r2, [r7, #4]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80125a0:	f001 ff50 	bl	8014444 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80125a4:	f7fe fae2 	bl	8010b6c <Post_ZigbeeCmdProcessing>
}
 80125a8:	bf00      	nop
 80125aa:	3710      	adds	r7, #16
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	607a      	str	r2, [r7, #4]
 80125bc:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 80125be:	68b8      	ldr	r0, [r7, #8]
 80125c0:	f002 fd74 	bl	80150ac <malloc>
 80125c4:	4603      	mov	r3, r0
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3710      	adds	r7, #16
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b084      	sub	sp, #16
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	60f8      	str	r0, [r7, #12]
 80125d6:	60b9      	str	r1, [r7, #8]
 80125d8:	607a      	str	r2, [r7, #4]
 80125da:	603b      	str	r3, [r7, #0]
    free(ptr);
 80125dc:	68b8      	ldr	r0, [r7, #8]
 80125de:	f002 fd6d 	bl	80150bc <free>
}
 80125e2:	bf00      	nop
 80125e4:	3710      	adds	r7, #16
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
	...

080125ec <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b087      	sub	sp, #28
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	4603      	mov	r3, r0
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
 80125f8:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 80125fe:	e00e      	b.n	801261e <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 8012600:	89fb      	ldrh	r3, [r7, #14]
 8012602:	0a1b      	lsrs	r3, r3, #8
 8012604:	b29a      	uxth	r2, r3
 8012606:	89fb      	ldrh	r3, [r7, #14]
 8012608:	b2d9      	uxtb	r1, r3
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	1c58      	adds	r0, r3, #1
 801260e:	6178      	str	r0, [r7, #20]
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	404b      	eors	r3, r1
 8012614:	4908      	ldr	r1, [pc, #32]	; (8012638 <WpanCrc+0x4c>)
 8012616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801261a:	4053      	eors	r3, r2
 801261c:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	1e5a      	subs	r2, r3, #1
 8012622:	607a      	str	r2, [r7, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1eb      	bne.n	8012600 <WpanCrc+0x14>
    }
    return crc;
 8012628:	89fb      	ldrh	r3, [r7, #14]
}
 801262a:	4618      	mov	r0, r3
 801262c:	371c      	adds	r7, #28
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	08016b4c 	.word	0x08016b4c

0801263c <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 801263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801263e:	b0cf      	sub	sp, #316	; 0x13c
 8012640:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8012642:	2300      	movs	r3, #0
 8012644:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8012648:	2300      	movs	r3, #0
 801264a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 801264e:	2300      	movs	r3, #0
 8012650:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 8012654:	f001 fede 	bl	8014414 <ZIGBEE_Get_NotificationPayloadBuffer>
 8012658:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

    switch (p_notification->ID) {
 801265c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f240 421c 	movw	r2, #1052	; 0x41c
 8012666:	4293      	cmp	r3, r2
 8012668:	f201 82f0 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 801266c:	f240 4205 	movw	r2, #1029	; 0x405
 8012670:	4293      	cmp	r3, r2
 8012672:	d22d      	bcs.n	80126d0 <Zigbee_CallBackProcessing+0x94>
 8012674:	f240 321d 	movw	r2, #797	; 0x31d
 8012678:	4293      	cmp	r3, r2
 801267a:	f201 82e7 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 801267e:	f240 3206 	movw	r2, #774	; 0x306
 8012682:	4293      	cmp	r3, r2
 8012684:	d25c      	bcs.n	8012740 <Zigbee_CallBackProcessing+0x104>
 8012686:	f240 2209 	movw	r2, #521	; 0x209
 801268a:	4293      	cmp	r3, r2
 801268c:	f000 847e 	beq.w	8012f8c <Zigbee_CallBackProcessing+0x950>
 8012690:	f240 2209 	movw	r2, #521	; 0x209
 8012694:	4293      	cmp	r3, r2
 8012696:	f201 82d9 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 801269a:	f240 2207 	movw	r2, #519	; 0x207
 801269e:	4293      	cmp	r3, r2
 80126a0:	f000 8443 	beq.w	8012f2a <Zigbee_CallBackProcessing+0x8ee>
 80126a4:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80126a8:	f081 82d0 	bcs.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 80126ac:	f240 2205 	movw	r2, #517	; 0x205
 80126b0:	4293      	cmp	r3, r2
 80126b2:	f000 840c 	beq.w	8012ece <Zigbee_CallBackProcessing+0x892>
 80126b6:	f240 2205 	movw	r2, #517	; 0x205
 80126ba:	4293      	cmp	r3, r2
 80126bc:	f201 82c6 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 80126c0:	2b3e      	cmp	r3, #62	; 0x3e
 80126c2:	f200 8133 	bhi.w	801292c <Zigbee_CallBackProcessing+0x2f0>
 80126c6:	2b0d      	cmp	r3, #13
 80126c8:	f080 80c4 	bcs.w	8012854 <Zigbee_CallBackProcessing+0x218>
 80126cc:	f001 babe 	b.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 80126d0:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 80126d4:	2b17      	cmp	r3, #23
 80126d6:	f201 82b9 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 80126da:	a201      	add	r2, pc, #4	; (adr r2, 80126e0 <Zigbee_CallBackProcessing+0xa4>)
 80126dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e0:	080138e3 	.word	0x080138e3
 80126e4:	08013c4d 	.word	0x08013c4d
 80126e8:	08013c4d 	.word	0x08013c4d
 80126ec:	08013c4d 	.word	0x08013c4d
 80126f0:	08013c4d 	.word	0x08013c4d
 80126f4:	0801392b 	.word	0x0801392b
 80126f8:	08013c4d 	.word	0x08013c4d
 80126fc:	08013c4d 	.word	0x08013c4d
 8012700:	08013c4d 	.word	0x08013c4d
 8012704:	08013c4d 	.word	0x08013c4d
 8012708:	08013973 	.word	0x08013973
 801270c:	08013c4d 	.word	0x08013c4d
 8012710:	08013c4d 	.word	0x08013c4d
 8012714:	08013c4d 	.word	0x08013c4d
 8012718:	080139e7 	.word	0x080139e7
 801271c:	08013c4d 	.word	0x08013c4d
 8012720:	08013c4d 	.word	0x08013c4d
 8012724:	08013a71 	.word	0x08013a71
 8012728:	08013c4d 	.word	0x08013c4d
 801272c:	08013acb 	.word	0x08013acb
 8012730:	08013c4d 	.word	0x08013c4d
 8012734:	08013b25 	.word	0x08013b25
 8012738:	08013c4d 	.word	0x08013c4d
 801273c:	08013b7f 	.word	0x08013b7f
 8012740:	f2a3 3306 	subw	r3, r3, #774	; 0x306
 8012744:	2b17      	cmp	r3, #23
 8012746:	f201 8281 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 801274a:	a201      	add	r2, pc, #4	; (adr r2, 8012750 <Zigbee_CallBackProcessing+0x114>)
 801274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012750:	0801300d 	.word	0x0801300d
 8012754:	08013c4d 	.word	0x08013c4d
 8012758:	080130c5 	.word	0x080130c5
 801275c:	08013c4d 	.word	0x08013c4d
 8012760:	08013c4d 	.word	0x08013c4d
 8012764:	08013c4d 	.word	0x08013c4d
 8012768:	08013121 	.word	0x08013121
 801276c:	08013c4d 	.word	0x08013c4d
 8012770:	0801317d 	.word	0x0801317d
 8012774:	08013c4d 	.word	0x08013c4d
 8012778:	08013c4d 	.word	0x08013c4d
 801277c:	08013c4d 	.word	0x08013c4d
 8012780:	08013c4d 	.word	0x08013c4d
 8012784:	08013c4d 	.word	0x08013c4d
 8012788:	08013c4d 	.word	0x08013c4d
 801278c:	08013c4d 	.word	0x08013c4d
 8012790:	08013c4d 	.word	0x08013c4d
 8012794:	08013c4d 	.word	0x08013c4d
 8012798:	08013c4d 	.word	0x08013c4d
 801279c:	08013c4d 	.word	0x08013c4d
 80127a0:	08013c4d 	.word	0x08013c4d
 80127a4:	08013c4d 	.word	0x08013c4d
 80127a8:	08013c4d 	.word	0x08013c4d
 80127ac:	08013069 	.word	0x08013069
 80127b0:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80127b4:	2b24      	cmp	r3, #36	; 0x24
 80127b6:	f201 8249 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 80127ba:	a201      	add	r2, pc, #4	; (adr r2, 80127c0 <Zigbee_CallBackProcessing+0x184>)
 80127bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c0:	0801327b 	.word	0x0801327b
 80127c4:	08013c4d 	.word	0x08013c4d
 80127c8:	080132d3 	.word	0x080132d3
 80127cc:	08013c4d 	.word	0x08013c4d
 80127d0:	08013345 	.word	0x08013345
 80127d4:	08013c4d 	.word	0x08013c4d
 80127d8:	0801339d 	.word	0x0801339d
 80127dc:	08013c4d 	.word	0x08013c4d
 80127e0:	080133f5 	.word	0x080133f5
 80127e4:	08013c4d 	.word	0x08013c4d
 80127e8:	0801344d 	.word	0x0801344d
 80127ec:	08013c4d 	.word	0x08013c4d
 80127f0:	080134a5 	.word	0x080134a5
 80127f4:	08013c4d 	.word	0x08013c4d
 80127f8:	080134fb 	.word	0x080134fb
 80127fc:	08013c4d 	.word	0x08013c4d
 8012800:	08013c4d 	.word	0x08013c4d
 8012804:	08013c4d 	.word	0x08013c4d
 8012808:	080131d9 	.word	0x080131d9
 801280c:	08013c4d 	.word	0x08013c4d
 8012810:	08013545 	.word	0x08013545
 8012814:	08013c4d 	.word	0x08013c4d
 8012818:	0801359f 	.word	0x0801359f
 801281c:	08013c4d 	.word	0x08013c4d
 8012820:	080135f9 	.word	0x080135f9
 8012824:	08013c4d 	.word	0x08013c4d
 8012828:	0801366d 	.word	0x0801366d
 801282c:	08013c4d 	.word	0x08013c4d
 8012830:	080136c7 	.word	0x080136c7
 8012834:	08013c4d 	.word	0x08013c4d
 8012838:	08013721 	.word	0x08013721
 801283c:	08013c4d 	.word	0x08013c4d
 8012840:	0801377b 	.word	0x0801377b
 8012844:	08013c4d 	.word	0x08013c4d
 8012848:	080137d5 	.word	0x080137d5
 801284c:	08013c4d 	.word	0x08013c4d
 8012850:	0801382f 	.word	0x0801382f
 8012854:	3b0d      	subs	r3, #13
 8012856:	2b31      	cmp	r3, #49	; 0x31
 8012858:	f201 81f8 	bhi.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 801285c:	a201      	add	r2, pc, #4	; (adr r2, 8012864 <Zigbee_CallBackProcessing+0x228>)
 801285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012862:	bf00      	nop
 8012864:	08012941 	.word	0x08012941
 8012868:	08013c4d 	.word	0x08013c4d
 801286c:	08013c4d 	.word	0x08013c4d
 8012870:	08013c4d 	.word	0x08013c4d
 8012874:	08013c4d 	.word	0x08013c4d
 8012878:	080129a7 	.word	0x080129a7
 801287c:	08013c4d 	.word	0x08013c4d
 8012880:	08013c4d 	.word	0x08013c4d
 8012884:	08013c4d 	.word	0x08013c4d
 8012888:	08013c4d 	.word	0x08013c4d
 801288c:	08013c4d 	.word	0x08013c4d
 8012890:	08013c4d 	.word	0x08013c4d
 8012894:	08013c4d 	.word	0x08013c4d
 8012898:	08012a1b 	.word	0x08012a1b
 801289c:	08013c4d 	.word	0x08013c4d
 80128a0:	08013c4d 	.word	0x08013c4d
 80128a4:	08012a77 	.word	0x08012a77
 80128a8:	08013c4d 	.word	0x08013c4d
 80128ac:	08012adf 	.word	0x08012adf
 80128b0:	08013c4d 	.word	0x08013c4d
 80128b4:	08012b47 	.word	0x08012b47
 80128b8:	08013c4d 	.word	0x08013c4d
 80128bc:	08012baf 	.word	0x08012baf
 80128c0:	08013c4d 	.word	0x08013c4d
 80128c4:	08013c4d 	.word	0x08013c4d
 80128c8:	08012c17 	.word	0x08012c17
 80128cc:	08013c4d 	.word	0x08013c4d
 80128d0:	08013c4d 	.word	0x08013c4d
 80128d4:	08012c99 	.word	0x08012c99
 80128d8:	08013c4d 	.word	0x08013c4d
 80128dc:	08012d01 	.word	0x08012d01
 80128e0:	08013c4d 	.word	0x08013c4d
 80128e4:	08013c4d 	.word	0x08013c4d
 80128e8:	08013c4d 	.word	0x08013c4d
 80128ec:	08012d1f 	.word	0x08012d1f
 80128f0:	08013c4d 	.word	0x08013c4d
 80128f4:	08013c4d 	.word	0x08013c4d
 80128f8:	08013c4d 	.word	0x08013c4d
 80128fc:	08012d77 	.word	0x08012d77
 8012900:	08013c4d 	.word	0x08013c4d
 8012904:	08013c4d 	.word	0x08013c4d
 8012908:	08013c4d 	.word	0x08013c4d
 801290c:	08013c4d 	.word	0x08013c4d
 8012910:	08013c4d 	.word	0x08013c4d
 8012914:	08012dc7 	.word	0x08012dc7
 8012918:	08013c4d 	.word	0x08013c4d
 801291c:	08012e1f 	.word	0x08012e1f
 8012920:	08013c4d 	.word	0x08013c4d
 8012924:	08012e77 	.word	0x08012e77
 8012928:	08013bf9 	.word	0x08013bf9
 801292c:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8012930:	f081 818c 	bcs.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
 8012934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012938:	f63f af3a 	bhi.w	80127b0 <Zigbee_CallBackProcessing+0x174>
 801293c:	f001 b986 	b.w	8013c4c <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 8012940:	4bbb      	ldr	r3, [pc, #748]	; (8012c30 <Zigbee_CallBackProcessing+0x5f4>)
 8012942:	2200      	movs	r2, #0
 8012944:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 8012946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	2b01      	cmp	r3, #1
 801294e:	d006      	beq.n	801295e <Zigbee_CallBackProcessing+0x322>
 8012950:	4bb8      	ldr	r3, [pc, #736]	; (8012c34 <Zigbee_CallBackProcessing+0x5f8>)
 8012952:	4ab9      	ldr	r2, [pc, #740]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 8012954:	f640 51ed 	movw	r1, #3565	; 0xded
 8012958:	48b8      	ldr	r0, [pc, #736]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 801295a:	f002 fb89 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 801295e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012962:	689b      	ldr	r3, [r3, #8]
 8012964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012968:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801296c:	2b00      	cmp	r3, #0
 801296e:	f001 8171 	beq.w	8013c54 <Zigbee_CallBackProcessing+0x1618>
 8012972:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	f001 816b 	beq.w	8013c54 <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 801297e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012988:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801298c:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 801298e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012992:	685a      	ldr	r2, [r3, #4]
 8012994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012998:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4610      	mov	r0, r2
 80129a0:	4798      	blx	r3
            }
            break;
 80129a2:	f001 b957 	b.w	8013c54 <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 80129a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	2b03      	cmp	r3, #3
 80129ae:	d006      	beq.n	80129be <Zigbee_CallBackProcessing+0x382>
 80129b0:	4ba3      	ldr	r3, [pc, #652]	; (8012c40 <Zigbee_CallBackProcessing+0x604>)
 80129b2:	4aa1      	ldr	r2, [pc, #644]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 80129b4:	f640 51fc 	movw	r1, #3580	; 0xdfc
 80129b8:	48a0      	ldr	r0, [pc, #640]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 80129ba:	f002 fb59 	bl	8015070 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 80129be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129c2:	691a      	ldr	r2, [r3, #16]
 80129c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80129c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80129cc:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 80129ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80129d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	685d      	ldr	r5, [r3, #4]
 80129da:	4b95      	ldr	r3, [pc, #596]	; (8012c30 <Zigbee_CallBackProcessing+0x5f4>)
 80129dc:	6818      	ldr	r0, [r3, #0]
 80129de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129e2:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 80129e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129e8:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 80129ea:	461e      	mov	r6, r3
 80129ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80129f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	689b      	ldr	r3, [r3, #8]
 80129f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80129fc:	f2a2 141d 	subw	r4, r2, #285	; 0x11d
 8012a00:	4632      	mov	r2, r6
 8012a02:	47a8      	blx	r5
 8012a04:	4603      	mov	r3, r0
 8012a06:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 8012a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012a0c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 8012a16:	f001 b980 	b.w	8013d1a <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 8012a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d006      	beq.n	8012a32 <Zigbee_CallBackProcessing+0x3f6>
 8012a24:	4b83      	ldr	r3, [pc, #524]	; (8012c34 <Zigbee_CallBackProcessing+0x5f8>)
 8012a26:	4a84      	ldr	r2, [pc, #528]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 8012a28:	f640 6108 	movw	r1, #3592	; 0xe08
 8012a2c:	4883      	ldr	r0, [pc, #524]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 8012a2e:	f002 fb1f 	bl	8015070 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 8012a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a36:	689a      	ldr	r2, [r3, #8]
 8012a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012a3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012a40:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 8012a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012a46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f001 8102 	beq.w	8013c58 <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 8012a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012a58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012a64:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8012a68:	6812      	ldr	r2, [r2, #0]
 8012a6a:	6852      	ldr	r2, [r2, #4]
 8012a6c:	4611      	mov	r1, r2
 8012a6e:	2000      	movs	r0, #0
 8012a70:	4798      	blx	r3
            }
            break;
 8012a72:	f001 b8f1 	b.w	8013c58 <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 8012a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	2b02      	cmp	r3, #2
 8012a7e:	d006      	beq.n	8012a8e <Zigbee_CallBackProcessing+0x452>
 8012a80:	4b70      	ldr	r3, [pc, #448]	; (8012c44 <Zigbee_CallBackProcessing+0x608>)
 8012a82:	4a6d      	ldr	r2, [pc, #436]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 8012a84:	f640 6111 	movw	r1, #3601	; 0xe11
 8012a88:	486c      	ldr	r0, [pc, #432]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 8012a8a:	f002 faf1 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f001 80dd 	beq.w	8013c5c <Zigbee_CallBackProcessing+0x1620>
 8012aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f001 80d7 	beq.w	8013c5c <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012aae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ab8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012abc:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ac2:	689b      	ldr	r3, [r3, #8]
 8012ac4:	b2da      	uxtb	r2, r3
 8012ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012aca:	6859      	ldr	r1, [r3, #4]
 8012acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ad0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	4610      	mov	r0, r2
 8012ad8:	4798      	blx	r3
            }
            break;
 8012ada:	f001 b8bf 	b.w	8013c5c <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 8012ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	2b02      	cmp	r3, #2
 8012ae6:	d006      	beq.n	8012af6 <Zigbee_CallBackProcessing+0x4ba>
 8012ae8:	4b56      	ldr	r3, [pc, #344]	; (8012c44 <Zigbee_CallBackProcessing+0x608>)
 8012aea:	4a53      	ldr	r2, [pc, #332]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 8012aec:	f640 611c 	movw	r1, #3612	; 0xe1c
 8012af0:	4852      	ldr	r0, [pc, #328]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 8012af2:	f002 fabd 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012b00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f001 80ab 	beq.w	8013c60 <Zigbee_CallBackProcessing+0x1624>
 8012b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f001 80a5 	beq.w	8013c60 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 8012b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012b20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b24:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 8012b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b2a:	689b      	ldr	r3, [r3, #8]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b32:	685a      	ldr	r2, [r3, #4]
 8012b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012b38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4611      	mov	r1, r2
 8012b40:	4798      	blx	r3
            }
            break;
 8012b42:	f001 b88d 	b.w	8013c60 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 8012b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	2b02      	cmp	r3, #2
 8012b4e:	d006      	beq.n	8012b5e <Zigbee_CallBackProcessing+0x522>
 8012b50:	4b3c      	ldr	r3, [pc, #240]	; (8012c44 <Zigbee_CallBackProcessing+0x608>)
 8012b52:	4a39      	ldr	r2, [pc, #228]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 8012b54:	f640 6127 	movw	r1, #3623	; 0xe27
 8012b58:	4838      	ldr	r0, [pc, #224]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 8012b5a:	f002 fa89 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b62:	68db      	ldr	r3, [r3, #12]
 8012b64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f001 8079 	beq.w	8013c64 <Zigbee_CallBackProcessing+0x1628>
 8012b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	f001 8073 	beq.w	8013c64 <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b82:	681a      	ldr	r2, [r3, #0]
 8012b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012b88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b8c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b92:	689b      	ldr	r3, [r3, #8]
 8012b94:	b2da      	uxtb	r2, r3
 8012b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b9a:	6859      	ldr	r1, [r3, #4]
 8012b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ba0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	4798      	blx	r3
            }
            break;
 8012baa:	f001 b85b 	b.w	8013c64 <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 8012bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	d006      	beq.n	8012bc6 <Zigbee_CallBackProcessing+0x58a>
 8012bb8:	4b22      	ldr	r3, [pc, #136]	; (8012c44 <Zigbee_CallBackProcessing+0x608>)
 8012bba:	4a1f      	ldr	r2, [pc, #124]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 8012bbc:	f640 6132 	movw	r1, #3634	; 0xe32
 8012bc0:	481e      	ldr	r0, [pc, #120]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 8012bc2:	f002 fa55 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	f001 8047 	beq.w	8013c68 <Zigbee_CallBackProcessing+0x162c>
 8012bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	f001 8041 	beq.w	8013c68 <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bf4:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	b2da      	uxtb	r2, r3
 8012bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c02:	6859      	ldr	r1, [r3, #4]
 8012c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4610      	mov	r0, r2
 8012c10:	4798      	blx	r3
            }
            break;
 8012c12:	f001 b829 	b.w	8013c68 <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 8012c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	2b02      	cmp	r3, #2
 8012c1e:	d013      	beq.n	8012c48 <Zigbee_CallBackProcessing+0x60c>
 8012c20:	4b08      	ldr	r3, [pc, #32]	; (8012c44 <Zigbee_CallBackProcessing+0x608>)
 8012c22:	4a05      	ldr	r2, [pc, #20]	; (8012c38 <Zigbee_CallBackProcessing+0x5fc>)
 8012c24:	f640 613d 	movw	r1, #3645	; 0xe3d
 8012c28:	4804      	ldr	r0, [pc, #16]	; (8012c3c <Zigbee_CallBackProcessing+0x600>)
 8012c2a:	f002 fa21 	bl	8015070 <__assert_func>
 8012c2e:	bf00      	nop
 8012c30:	20000610 	.word	0x20000610
 8012c34:	080165f0 	.word	0x080165f0
 8012c38:	08016d78 	.word	0x08016d78
 8012c3c:	08016598 	.word	0x08016598
 8012c40:	0801660c 	.word	0x0801660c
 8012c44:	08016628 	.word	0x08016628
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f001 8008 	beq.w	8013c6c <Zigbee_CallBackProcessing+0x1630>
 8012c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	f001 8002 	beq.w	8013c6c <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8012c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c76:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8012c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c7c:	689b      	ldr	r3, [r3, #8]
 8012c7e:	b2da      	uxtb	r2, r3
 8012c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c84:	6859      	ldr	r1, [r3, #4]
 8012c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	4610      	mov	r0, r2
 8012c92:	4798      	blx	r3
            }
            break;
 8012c94:	f000 bfea 	b.w	8013c6c <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8012c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	2b02      	cmp	r3, #2
 8012ca0:	d006      	beq.n	8012cb0 <Zigbee_CallBackProcessing+0x674>
 8012ca2:	4bc2      	ldr	r3, [pc, #776]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012ca4:	4ac2      	ldr	r2, [pc, #776]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012ca6:	f640 6148 	movw	r1, #3656	; 0xe48
 8012caa:	48c2      	ldr	r0, [pc, #776]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012cac:	f002 f9e0 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cb4:	68db      	ldr	r3, [r3, #12]
 8012cb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012cba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f000 87d6 	beq.w	8013c70 <Zigbee_CallBackProcessing+0x1634>
 8012cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f000 87d0 	beq.w	8013c70 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012cd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012cda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012cde:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ce4:	689b      	ldr	r3, [r3, #8]
 8012ce6:	b2da      	uxtb	r2, r3
 8012ce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012cec:	6859      	ldr	r1, [r3, #4]
 8012cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012cf2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	4798      	blx	r3
            }
            break;
 8012cfc:	f000 bfb8 	b.w	8013c70 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8012d00:	4bad      	ldr	r3, [pc, #692]	; (8012fb8 <Zigbee_CallBackProcessing+0x97c>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	f000 87b5 	beq.w	8013c74 <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 8012d0a:	4bab      	ldr	r3, [pc, #684]	; (8012fb8 <Zigbee_CallBackProcessing+0x97c>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4aab      	ldr	r2, [pc, #684]	; (8012fbc <Zigbee_CallBackProcessing+0x980>)
 8012d10:	6812      	ldr	r2, [r2, #0]
 8012d12:	49ab      	ldr	r1, [pc, #684]	; (8012fc0 <Zigbee_CallBackProcessing+0x984>)
 8012d14:	6809      	ldr	r1, [r1, #0]
 8012d16:	4610      	mov	r0, r2
 8012d18:	4798      	blx	r3
            }
            break;
 8012d1a:	f000 bfab 	b.w	8013c74 <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8012d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	2b02      	cmp	r3, #2
 8012d26:	d006      	beq.n	8012d36 <Zigbee_CallBackProcessing+0x6fa>
 8012d28:	4ba0      	ldr	r3, [pc, #640]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012d2a:	4aa1      	ldr	r2, [pc, #644]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012d2c:	f640 6159 	movw	r1, #3673	; 0xe59
 8012d30:	48a0      	ldr	r0, [pc, #640]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012d32:	f002 f99d 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f000 8797 	beq.w	8013c78 <Zigbee_CallBackProcessing+0x163c>
 8012d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f000 8791 	beq.w	8013c78 <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8012d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	637b      	str	r3, [r7, #52]	; 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8012d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d62:	689b      	ldr	r3, [r3, #8]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d6a:	685a      	ldr	r2, [r3, #4]
 8012d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d6e:	4611      	mov	r1, r2
 8012d70:	4798      	blx	r3
            }
            break;
 8012d72:	f000 bf81 	b.w	8013c78 <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8012d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d006      	beq.n	8012d8e <Zigbee_CallBackProcessing+0x752>
 8012d80:	4b90      	ldr	r3, [pc, #576]	; (8012fc4 <Zigbee_CallBackProcessing+0x988>)
 8012d82:	4a8b      	ldr	r2, [pc, #556]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012d84:	f640 6164 	movw	r1, #3684	; 0xe64
 8012d88:	488a      	ldr	r0, [pc, #552]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012d8a:	f002 f971 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8012d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d92:	689b      	ldr	r3, [r3, #8]
 8012d94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f000 876d 	beq.w	8013c7c <Zigbee_CallBackProcessing+0x1640>
 8012da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f000 8767 	beq.w	8013c7c <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8012dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	63bb      	str	r3, [r7, #56]	; 0x38
                callback(info->arg);
 8012db6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012dba:	685a      	ldr	r2, [r3, #4]
 8012dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dbe:	4610      	mov	r0, r2
 8012dc0:	4798      	blx	r3
            }
            break;
 8012dc2:	f000 bf5b 	b.w	8013c7c <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8012dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	2b02      	cmp	r3, #2
 8012dce:	d006      	beq.n	8012dde <Zigbee_CallBackProcessing+0x7a2>
 8012dd0:	4b76      	ldr	r3, [pc, #472]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012dd2:	4a77      	ldr	r2, [pc, #476]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012dd4:	f44f 6167 	mov.w	r1, #3696	; 0xe70
 8012dd8:	4876      	ldr	r0, [pc, #472]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012dda:	f002 f949 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012de8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f000 8747 	beq.w	8013c80 <Zigbee_CallBackProcessing+0x1644>
 8012df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	f000 8741 	beq.w	8013c80 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8012dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	63fb      	str	r3, [r7, #60]	; 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8012e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e0a:	689b      	ldr	r3, [r3, #8]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e12:	685a      	ldr	r2, [r3, #4]
 8012e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e16:	4611      	mov	r1, r2
 8012e18:	4798      	blx	r3
            }
            break;
 8012e1a:	f000 bf31 	b.w	8013c80 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8012e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	2b02      	cmp	r3, #2
 8012e26:	d006      	beq.n	8012e36 <Zigbee_CallBackProcessing+0x7fa>
 8012e28:	4b60      	ldr	r3, [pc, #384]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012e2a:	4a61      	ldr	r2, [pc, #388]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012e2c:	f640 617c 	movw	r1, #3708	; 0xe7c
 8012e30:	4860      	ldr	r0, [pc, #384]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012e32:	f002 f91d 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	f000 871d 	beq.w	8013c84 <Zigbee_CallBackProcessing+0x1648>
 8012e4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	f000 8717 	beq.w	8013c84 <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8012e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	643b      	str	r3, [r7, #64]	; 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8012e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e62:	689b      	ldr	r3, [r3, #8]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e6a:	685a      	ldr	r2, [r3, #4]
 8012e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e6e:	4611      	mov	r1, r2
 8012e70:	4798      	blx	r3
            }
            break;
 8012e72:	f000 bf07 	b.w	8013c84 <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8012e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	2b02      	cmp	r3, #2
 8012e7e:	d006      	beq.n	8012e8e <Zigbee_CallBackProcessing+0x852>
 8012e80:	4b4a      	ldr	r3, [pc, #296]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012e82:	4a4b      	ldr	r2, [pc, #300]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012e84:	f640 6188 	movw	r1, #3720	; 0xe88
 8012e88:	484a      	ldr	r0, [pc, #296]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012e8a:	f002 f8f1 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e92:	68db      	ldr	r3, [r3, #12]
 8012e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	f000 86f3 	beq.w	8013c88 <Zigbee_CallBackProcessing+0x164c>
 8012ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	f000 86ed 	beq.w	8013c88 <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8012eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	647b      	str	r3, [r7, #68]	; 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 8012eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ec2:	685a      	ldr	r2, [r3, #4]
 8012ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	4798      	blx	r3
            }
            break;
 8012eca:	f000 bedd 	b.w	8013c88 <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 8012ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	2b02      	cmp	r3, #2
 8012ed6:	d006      	beq.n	8012ee6 <Zigbee_CallBackProcessing+0x8aa>
 8012ed8:	4b34      	ldr	r3, [pc, #208]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012eda:	4a35      	ldr	r2, [pc, #212]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012edc:	f640 6193 	movw	r1, #3731	; 0xe93
 8012ee0:	4834      	ldr	r0, [pc, #208]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012ee2:	f002 f8c5 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012eea:	68db      	ldr	r3, [r3, #12]
 8012eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f000 86c9 	beq.w	8013c8c <Zigbee_CallBackProcessing+0x1650>
 8012efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	f000 86c3 	beq.w	8013c8c <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8012f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8012f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f14:	689b      	ldr	r3, [r3, #8]
 8012f16:	4618      	mov	r0, r3
 8012f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f1c:	685a      	ldr	r2, [r3, #4]
 8012f1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012f22:	4611      	mov	r1, r2
 8012f24:	4798      	blx	r3
            }
            break;
 8012f26:	f000 beb1 	b.w	8013c8c <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

            assert(p_notification->Size == 2);
 8012f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f34:	685b      	ldr	r3, [r3, #4]
 8012f36:	2b02      	cmp	r3, #2
 8012f38:	d006      	beq.n	8012f48 <Zigbee_CallBackProcessing+0x90c>
 8012f3a:	4b1c      	ldr	r3, [pc, #112]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012f3c:	4a1c      	ldr	r2, [pc, #112]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012f3e:	f640 61a3 	movw	r1, #3747	; 0xea3
 8012f42:	481c      	ldr	r0, [pc, #112]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012f44:	f002 f894 	bl	8015070 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8012f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f4c:	689b      	ldr	r3, [r3, #8]
 8012f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8012f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if (aps_filter_cb->callback != NULL) {
 8012f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00b      	beq.n	8012f7e <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8012f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012f70:	6892      	ldr	r2, [r2, #8]
 8012f72:	4611      	mov	r1, r2
 8012f74:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8012f78:	4798      	blx	r3
 8012f7a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8012f7e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8012f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f86:	60da      	str	r2, [r3, #12]
            break;
 8012f88:	f000 bec7 	b.w	8013d1a <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            assert(p_notification->Size == 2);
 8012f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	2b02      	cmp	r3, #2
 8012f9a:	d015      	beq.n	8012fc8 <Zigbee_CallBackProcessing+0x98c>
 8012f9c:	4b03      	ldr	r3, [pc, #12]	; (8012fac <Zigbee_CallBackProcessing+0x970>)
 8012f9e:	4a04      	ldr	r2, [pc, #16]	; (8012fb0 <Zigbee_CallBackProcessing+0x974>)
 8012fa0:	f640 61b4 	movw	r1, #3764	; 0xeb4
 8012fa4:	4803      	ldr	r0, [pc, #12]	; (8012fb4 <Zigbee_CallBackProcessing+0x978>)
 8012fa6:	f002 f863 	bl	8015070 <__assert_func>
 8012faa:	bf00      	nop
 8012fac:	08016628 	.word	0x08016628
 8012fb0:	08016d78 	.word	0x08016d78
 8012fb4:	08016598 	.word	0x08016598
 8012fb8:	20000600 	.word	0x20000600
 8012fbc:	20000610 	.word	0x20000610
 8012fc0:	20000604 	.word	0x20000604
 8012fc4:	080165f0 	.word	0x080165f0
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8012fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fcc:	689b      	ldr	r3, [r3, #8]
 8012fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8012fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (aps_filter_cb->callback != NULL) {
 8012fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d00b      	beq.n	8012ffe <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8012fe6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012ff0:	6892      	ldr	r2, [r2, #8]
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8012ff8:	4798      	blx	r3
 8012ffa:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8012ffe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8013002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013006:	60da      	str	r2, [r3, #12]
            break;
 8013008:	f000 be87 	b.w	8013d1a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 801300c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	2b02      	cmp	r3, #2
 8013014:	d006      	beq.n	8013024 <Zigbee_CallBackProcessing+0x9e8>
 8013016:	4bc5      	ldr	r3, [pc, #788]	; (801332c <Zigbee_CallBackProcessing+0xcf0>)
 8013018:	4ac5      	ldr	r2, [pc, #788]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 801301a:	f44f 616c 	mov.w	r1, #3776	; 0xec0
 801301e:	48c5      	ldr	r0, [pc, #788]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 8013020:	f002 f826 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013028:	68db      	ldr	r3, [r3, #12]
 801302a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801302e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013032:	2b00      	cmp	r3, #0
 8013034:	f000 862c 	beq.w	8013c90 <Zigbee_CallBackProcessing+0x1654>
 8013038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2b00      	cmp	r3, #0
 8013040:	f000 8626 	beq.w	8013c90 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 8013044:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 801304e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	4618      	mov	r0, r3
 8013056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801305a:	685a      	ldr	r2, [r3, #4]
 801305c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013060:	4611      	mov	r1, r2
 8013062:	4798      	blx	r3
            }
            break;
 8013064:	f000 be14 	b.w	8013c90 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 8013068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	2b02      	cmp	r3, #2
 8013070:	d006      	beq.n	8013080 <Zigbee_CallBackProcessing+0xa44>
 8013072:	4bae      	ldr	r3, [pc, #696]	; (801332c <Zigbee_CallBackProcessing+0xcf0>)
 8013074:	4aae      	ldr	r2, [pc, #696]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 8013076:	f640 61cc 	movw	r1, #3788	; 0xecc
 801307a:	48ae      	ldr	r0, [pc, #696]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 801307c:	f001 fff8 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801308a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801308e:	2b00      	cmp	r3, #0
 8013090:	f000 8600 	beq.w	8013c94 <Zigbee_CallBackProcessing+0x1658>
 8013094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	f000 85fa 	beq.w	8013c94 <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 80130a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 80130aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130b6:	685a      	ldr	r2, [r3, #4]
 80130b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80130bc:	4611      	mov	r1, r2
 80130be:	4798      	blx	r3
            }
            break;
 80130c0:	f000 bde8 	b.w	8013c94 <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 80130c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130c8:	685b      	ldr	r3, [r3, #4]
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	d006      	beq.n	80130dc <Zigbee_CallBackProcessing+0xaa0>
 80130ce:	4b97      	ldr	r3, [pc, #604]	; (801332c <Zigbee_CallBackProcessing+0xcf0>)
 80130d0:	4a97      	ldr	r2, [pc, #604]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 80130d2:	f640 61d8 	movw	r1, #3800	; 0xed8
 80130d6:	4897      	ldr	r0, [pc, #604]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 80130d8:	f001 ffca 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80130dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80130e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	f000 85d4 	beq.w	8013c98 <Zigbee_CallBackProcessing+0x165c>
 80130f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	f000 85ce 	beq.w	8013c98 <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 80130fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8013106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801310a:	689b      	ldr	r3, [r3, #8]
 801310c:	4618      	mov	r0, r3
 801310e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013112:	685a      	ldr	r2, [r3, #4]
 8013114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013118:	4611      	mov	r1, r2
 801311a:	4798      	blx	r3
            }
            break;
 801311c:	f000 bdbc 	b.w	8013c98 <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8013120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	2b02      	cmp	r3, #2
 8013128:	d006      	beq.n	8013138 <Zigbee_CallBackProcessing+0xafc>
 801312a:	4b80      	ldr	r3, [pc, #512]	; (801332c <Zigbee_CallBackProcessing+0xcf0>)
 801312c:	4a80      	ldr	r2, [pc, #512]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 801312e:	f640 61e3 	movw	r1, #3811	; 0xee3
 8013132:	4880      	ldr	r0, [pc, #512]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 8013134:	f001 ff9c 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013146:	2b00      	cmp	r3, #0
 8013148:	f000 85a8 	beq.w	8013c9c <Zigbee_CallBackProcessing+0x1660>
 801314c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	f000 85a2 	beq.w	8013c9c <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 8013158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 8013162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013166:	689b      	ldr	r3, [r3, #8]
 8013168:	4618      	mov	r0, r3
 801316a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801316e:	685a      	ldr	r2, [r3, #4]
 8013170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013174:	4611      	mov	r1, r2
 8013176:	4798      	blx	r3
            }
            break;
 8013178:	f000 bd90 	b.w	8013c9c <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 801317c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	2b02      	cmp	r3, #2
 8013184:	d006      	beq.n	8013194 <Zigbee_CallBackProcessing+0xb58>
 8013186:	4b69      	ldr	r3, [pc, #420]	; (801332c <Zigbee_CallBackProcessing+0xcf0>)
 8013188:	4a69      	ldr	r2, [pc, #420]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 801318a:	f640 61ee 	movw	r1, #3822	; 0xeee
 801318e:	4869      	ldr	r0, [pc, #420]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 8013190:	f001 ff6e 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801319e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 857c 	beq.w	8013ca0 <Zigbee_CallBackProcessing+0x1664>
 80131a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	f000 8576 	beq.w	8013ca0 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 80131b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 80131be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80131ca:	685a      	ldr	r2, [r3, #4]
 80131cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80131d0:	4611      	mov	r1, r2
 80131d2:	4798      	blx	r3
            }
            break;
 80131d4:	f000 bd64 	b.w	8013ca0 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 80131d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131dc:	685b      	ldr	r3, [r3, #4]
 80131de:	2b03      	cmp	r3, #3
 80131e0:	d006      	beq.n	80131f0 <Zigbee_CallBackProcessing+0xbb4>
 80131e2:	4b55      	ldr	r3, [pc, #340]	; (8013338 <Zigbee_CallBackProcessing+0xcfc>)
 80131e4:	4a52      	ldr	r2, [pc, #328]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 80131e6:	f640 61fc 	movw	r1, #3836	; 0xefc
 80131ea:	4852      	ldr	r0, [pc, #328]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 80131ec:	f001 ff40 	bl	8015070 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 80131f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131f4:	691b      	ldr	r3, [r3, #16]
 80131f6:	67fb      	str	r3, [r7, #124]	; 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 80131f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	f000 8552 	beq.w	8013ca4 <Zigbee_CallBackProcessing+0x1668>
 8013200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	2b00      	cmp	r3, #0
 8013206:	f000 854d 	beq.w	8013ca4 <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801320a:	2300      	movs	r3, #0
 801320c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013210:	e02a      	b.n	8013268 <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8013212:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8013216:	4613      	mov	r3, r2
 8013218:	005b      	lsls	r3, r3, #1
 801321a:	4413      	add	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4a47      	ldr	r2, [pc, #284]	; (801333c <Zigbee_CallBackProcessing+0xd00>)
 8013220:	4413      	add	r3, r2
 8013222:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013224:	429a      	cmp	r2, r3
 8013226:	d119      	bne.n	801325c <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8013228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d021      	beq.n	8013274 <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8013230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	67bb      	str	r3, [r7, #120]	; 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 8013238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 8013242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013244:	685b      	ldr	r3, [r3, #4]
 8013246:	673b      	str	r3, [r7, #112]	; 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8013248:	4b3d      	ldr	r3, [pc, #244]	; (8013340 <Zigbee_CallBackProcessing+0xd04>)
 801324a:	6818      	ldr	r0, [r3, #0]
 801324c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801324e:	689b      	ldr	r3, [r3, #8]
 8013250:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8013254:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8013256:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013258:	47a0      	blx	r4
                    break;
 801325a:	e00c      	b.n	8013276 <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 801325c:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801325e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013262:	3301      	adds	r3, #1
 8013264:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013268:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801326c:	2b07      	cmp	r3, #7
 801326e:	d9d0      	bls.n	8013212 <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 8013270:	f000 bd18 	b.w	8013ca4 <Zigbee_CallBackProcessing+0x1668>
                        break;
 8013274:	bf00      	nop
            break;
 8013276:	f000 bd15 	b.w	8013ca4 <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 801327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801327e:	685b      	ldr	r3, [r3, #4]
 8013280:	2b02      	cmp	r3, #2
 8013282:	d006      	beq.n	8013292 <Zigbee_CallBackProcessing+0xc56>
 8013284:	4b29      	ldr	r3, [pc, #164]	; (801332c <Zigbee_CallBackProcessing+0xcf0>)
 8013286:	4a2a      	ldr	r2, [pc, #168]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 8013288:	f640 7119 	movw	r1, #3865	; 0xf19
 801328c:	4829      	ldr	r0, [pc, #164]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 801328e:	f001 feef 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801329c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	f000 8501 	beq.w	8013ca8 <Zigbee_CallBackProcessing+0x166c>
 80132a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f000 84fb 	beq.w	8013ca8 <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 80132b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	653b      	str	r3, [r7, #80]	; 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 80132ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132be:	689b      	ldr	r3, [r3, #8]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132c6:	685a      	ldr	r2, [r3, #4]
 80132c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ca:	4611      	mov	r1, r2
 80132cc:	4798      	blx	r3
            }
            break;
 80132ce:	f000 bceb 	b.w	8013ca8 <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 80132d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	2b02      	cmp	r3, #2
 80132da:	d006      	beq.n	80132ea <Zigbee_CallBackProcessing+0xcae>
 80132dc:	4b13      	ldr	r3, [pc, #76]	; (801332c <Zigbee_CallBackProcessing+0xcf0>)
 80132de:	4a14      	ldr	r2, [pc, #80]	; (8013330 <Zigbee_CallBackProcessing+0xcf4>)
 80132e0:	f640 7124 	movw	r1, #3876	; 0xf24
 80132e4:	4813      	ldr	r0, [pc, #76]	; (8013334 <Zigbee_CallBackProcessing+0xcf8>)
 80132e6:	f001 fec3 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80132ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132ee:	68db      	ldr	r3, [r3, #12]
 80132f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80132f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f000 84d7 	beq.w	8013cac <Zigbee_CallBackProcessing+0x1670>
 80132fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	2b00      	cmp	r3, #0
 8013306:	f000 84d1 	beq.w	8013cac <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 801330a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	657b      	str	r3, [r7, #84]	; 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 8013312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013316:	689b      	ldr	r3, [r3, #8]
 8013318:	4618      	mov	r0, r3
 801331a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801331e:	685a      	ldr	r2, [r3, #4]
 8013320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013322:	4611      	mov	r1, r2
 8013324:	4798      	blx	r3
            }
            break;
 8013326:	f000 bcc1 	b.w	8013cac <Zigbee_CallBackProcessing+0x1670>
 801332a:	bf00      	nop
 801332c:	08016628 	.word	0x08016628
 8013330:	08016d78 	.word	0x08016d78
 8013334:	08016598 	.word	0x08016598
 8013338:	0801660c 	.word	0x0801660c
 801333c:	200007a4 	.word	0x200007a4
 8013340:	20000610 	.word	0x20000610

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 8013344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	2b02      	cmp	r3, #2
 801334c:	d006      	beq.n	801335c <Zigbee_CallBackProcessing+0xd20>
 801334e:	4bc1      	ldr	r3, [pc, #772]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 8013350:	4ac1      	ldr	r2, [pc, #772]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 8013352:	f640 712f 	movw	r1, #3887	; 0xf2f
 8013356:	48c1      	ldr	r0, [pc, #772]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 8013358:	f001 fe8a 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801335c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013360:	68db      	ldr	r3, [r3, #12]
 8013362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801336a:	2b00      	cmp	r3, #0
 801336c:	f000 84a0 	beq.w	8013cb0 <Zigbee_CallBackProcessing+0x1674>
 8013370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	f000 849a 	beq.w	8013cb0 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 801337c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	65bb      	str	r3, [r7, #88]	; 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 8013384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013388:	689b      	ldr	r3, [r3, #8]
 801338a:	4618      	mov	r0, r3
 801338c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013390:	685a      	ldr	r2, [r3, #4]
 8013392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013394:	4611      	mov	r1, r2
 8013396:	4798      	blx	r3
            }
            break;
 8013398:	f000 bc8a 	b.w	8013cb0 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 801339c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	2b02      	cmp	r3, #2
 80133a4:	d006      	beq.n	80133b4 <Zigbee_CallBackProcessing+0xd78>
 80133a6:	4bab      	ldr	r3, [pc, #684]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 80133a8:	4aab      	ldr	r2, [pc, #684]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 80133aa:	f640 713a 	movw	r1, #3898	; 0xf3a
 80133ae:	48ab      	ldr	r0, [pc, #684]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 80133b0:	f001 fe5e 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80133b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133b8:	68db      	ldr	r3, [r3, #12]
 80133ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80133be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f000 8476 	beq.w	8013cb4 <Zigbee_CallBackProcessing+0x1678>
 80133c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	f000 8470 	beq.w	8013cb4 <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 80133d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	65fb      	str	r3, [r7, #92]	; 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 80133dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	4618      	mov	r0, r3
 80133e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133e8:	685a      	ldr	r2, [r3, #4]
 80133ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133ec:	4611      	mov	r1, r2
 80133ee:	4798      	blx	r3
            }
            break;
 80133f0:	f000 bc60 	b.w	8013cb4 <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 80133f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	2b02      	cmp	r3, #2
 80133fc:	d006      	beq.n	801340c <Zigbee_CallBackProcessing+0xdd0>
 80133fe:	4b95      	ldr	r3, [pc, #596]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 8013400:	4a95      	ldr	r2, [pc, #596]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 8013402:	f640 7145 	movw	r1, #3909	; 0xf45
 8013406:	4895      	ldr	r0, [pc, #596]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 8013408:	f001 fe32 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801340c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801341a:	2b00      	cmp	r3, #0
 801341c:	f000 844c 	beq.w	8013cb8 <Zigbee_CallBackProcessing+0x167c>
 8013420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2b00      	cmp	r3, #0
 8013428:	f000 8446 	beq.w	8013cb8 <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 801342c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	663b      	str	r3, [r7, #96]	; 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 8013434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	4618      	mov	r0, r3
 801343c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013440:	685a      	ldr	r2, [r3, #4]
 8013442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013444:	4611      	mov	r1, r2
 8013446:	4798      	blx	r3
            }
            break;
 8013448:	f000 bc36 	b.w	8013cb8 <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 801344c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	2b02      	cmp	r3, #2
 8013454:	d006      	beq.n	8013464 <Zigbee_CallBackProcessing+0xe28>
 8013456:	4b7f      	ldr	r3, [pc, #508]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 8013458:	4a7f      	ldr	r2, [pc, #508]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 801345a:	f44f 6175 	mov.w	r1, #3920	; 0xf50
 801345e:	487f      	ldr	r0, [pc, #508]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 8013460:	f001 fe06 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801346e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013472:	2b00      	cmp	r3, #0
 8013474:	f000 8422 	beq.w	8013cbc <Zigbee_CallBackProcessing+0x1680>
 8013478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	f000 841c 	beq.w	8013cbc <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 8013484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	667b      	str	r3, [r7, #100]	; 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 801348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013490:	689b      	ldr	r3, [r3, #8]
 8013492:	4618      	mov	r0, r3
 8013494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013498:	685a      	ldr	r2, [r3, #4]
 801349a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801349c:	4611      	mov	r1, r2
 801349e:	4798      	blx	r3
            }
            break;
 80134a0:	f000 bc0c 	b.w	8013cbc <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 80134a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	2b02      	cmp	r3, #2
 80134ac:	d006      	beq.n	80134bc <Zigbee_CallBackProcessing+0xe80>
 80134ae:	4b69      	ldr	r3, [pc, #420]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 80134b0:	4a69      	ldr	r2, [pc, #420]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 80134b2:	f640 715b 	movw	r1, #3931	; 0xf5b
 80134b6:	4869      	ldr	r0, [pc, #420]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 80134b8:	f001 fdda 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80134bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134c0:	68db      	ldr	r3, [r3, #12]
 80134c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80134c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f000 83f8 	beq.w	8013cc0 <Zigbee_CallBackProcessing+0x1684>
 80134d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	f000 83f2 	beq.w	8013cc0 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 80134dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	66bb      	str	r3, [r7, #104]	; 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 80134e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134e8:	689b      	ldr	r3, [r3, #8]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134f0:	685a      	ldr	r2, [r3, #4]
 80134f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134f4:	4611      	mov	r1, r2
 80134f6:	4798      	blx	r3
            }
            break;
 80134f8:	e3e2      	b.n	8013cc0 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 80134fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d006      	beq.n	8013512 <Zigbee_CallBackProcessing+0xed6>
 8013504:	4b56      	ldr	r3, [pc, #344]	; (8013660 <Zigbee_CallBackProcessing+0x1024>)
 8013506:	4a54      	ldr	r2, [pc, #336]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 8013508:	f640 7168 	movw	r1, #3944	; 0xf68
 801350c:	4853      	ldr	r0, [pc, #332]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 801350e:	f001 fdaf 	bl	8015070 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 8013512:	4b54      	ldr	r3, [pc, #336]	; (8013664 <Zigbee_CallBackProcessing+0x1028>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	f000 83d4 	beq.w	8013cc4 <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 801351c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013520:	689b      	ldr	r3, [r3, #8]
 8013522:	66fb      	str	r3, [r7, #108]	; 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 8013524:	4b4f      	ldr	r3, [pc, #316]	; (8013664 <Zigbee_CallBackProcessing+0x1028>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4a4f      	ldr	r2, [pc, #316]	; (8013668 <Zigbee_CallBackProcessing+0x102c>)
 801352a:	6812      	ldr	r2, [r2, #0]
 801352c:	4611      	mov	r1, r2
 801352e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013530:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 8013532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	2b85      	cmp	r3, #133	; 0x85
 8013538:	f040 83c4 	bne.w	8013cc4 <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 801353c:	4b49      	ldr	r3, [pc, #292]	; (8013664 <Zigbee_CallBackProcessing+0x1028>)
 801353e:	2200      	movs	r2, #0
 8013540:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 8013542:	e3bf      	b.n	8013cc4 <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 8013544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	2b02      	cmp	r3, #2
 801354c:	d006      	beq.n	801355c <Zigbee_CallBackProcessing+0xf20>
 801354e:	4b41      	ldr	r3, [pc, #260]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 8013550:	4a41      	ldr	r2, [pc, #260]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 8013552:	f640 7176 	movw	r1, #3958	; 0xf76
 8013556:	4841      	ldr	r0, [pc, #260]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 8013558:	f001 fd8a 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801355c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801356a:	2b00      	cmp	r3, #0
 801356c:	f000 83ac 	beq.w	8013cc8 <Zigbee_CallBackProcessing+0x168c>
 8013570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	f000 83a6 	beq.w	8013cc8 <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 801357c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8013586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	4618      	mov	r0, r3
 801358e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013592:	685a      	ldr	r2, [r3, #4]
 8013594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013598:	4611      	mov	r1, r2
 801359a:	4798      	blx	r3
            }
            break;
 801359c:	e394      	b.n	8013cc8 <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 801359e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	2b02      	cmp	r3, #2
 80135a6:	d006      	beq.n	80135b6 <Zigbee_CallBackProcessing+0xf7a>
 80135a8:	4b2a      	ldr	r3, [pc, #168]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 80135aa:	4a2b      	ldr	r2, [pc, #172]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 80135ac:	f640 7181 	movw	r1, #3969	; 0xf81
 80135b0:	482a      	ldr	r0, [pc, #168]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 80135b2:	f001 fd5d 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80135b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80135c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	f000 8381 	beq.w	8013ccc <Zigbee_CallBackProcessing+0x1690>
 80135ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f000 837b 	beq.w	8013ccc <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80135d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 80135e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135e4:	689b      	ldr	r3, [r3, #8]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135ec:	685a      	ldr	r2, [r3, #4]
 80135ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80135f2:	4611      	mov	r1, r2
 80135f4:	4798      	blx	r3
            }
            break;
 80135f6:	e369      	b.n	8013ccc <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 80135f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	2b02      	cmp	r3, #2
 8013600:	d006      	beq.n	8013610 <Zigbee_CallBackProcessing+0xfd4>
 8013602:	4b14      	ldr	r3, [pc, #80]	; (8013654 <Zigbee_CallBackProcessing+0x1018>)
 8013604:	4a14      	ldr	r2, [pc, #80]	; (8013658 <Zigbee_CallBackProcessing+0x101c>)
 8013606:	f640 718c 	movw	r1, #3980	; 0xf8c
 801360a:	4814      	ldr	r0, [pc, #80]	; (801365c <Zigbee_CallBackProcessing+0x1020>)
 801360c:	f001 fd30 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013614:	68db      	ldr	r3, [r3, #12]
 8013616:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801361a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801361e:	2b00      	cmp	r3, #0
 8013620:	f000 8356 	beq.w	8013cd0 <Zigbee_CallBackProcessing+0x1694>
 8013624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	f000 8350 	beq.w	8013cd0 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 8013630:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 801363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801363e:	689b      	ldr	r3, [r3, #8]
 8013640:	4618      	mov	r0, r3
 8013642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013646:	685a      	ldr	r2, [r3, #4]
 8013648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801364c:	4611      	mov	r1, r2
 801364e:	4798      	blx	r3
            }
            break;
 8013650:	e33e      	b.n	8013cd0 <Zigbee_CallBackProcessing+0x1694>
 8013652:	bf00      	nop
 8013654:	08016628 	.word	0x08016628
 8013658:	08016d78 	.word	0x08016d78
 801365c:	08016598 	.word	0x08016598
 8013660:	080165f0 	.word	0x080165f0
 8013664:	20000608 	.word	0x20000608
 8013668:	2000060c 	.word	0x2000060c

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 801366c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	2b02      	cmp	r3, #2
 8013674:	d006      	beq.n	8013684 <Zigbee_CallBackProcessing+0x1048>
 8013676:	4bc5      	ldr	r3, [pc, #788]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 8013678:	4ac5      	ldr	r2, [pc, #788]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 801367a:	f640 7197 	movw	r1, #3991	; 0xf97
 801367e:	48c5      	ldr	r0, [pc, #788]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 8013680:	f001 fcf6 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013688:	68db      	ldr	r3, [r3, #12]
 801368a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801368e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 831e 	beq.w	8013cd4 <Zigbee_CallBackProcessing+0x1698>
 8013698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	f000 8318 	beq.w	8013cd4 <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 80136a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 80136ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136b2:	689b      	ldr	r3, [r3, #8]
 80136b4:	4618      	mov	r0, r3
 80136b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136ba:	685a      	ldr	r2, [r3, #4]
 80136bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80136c0:	4611      	mov	r1, r2
 80136c2:	4798      	blx	r3
            }
            break;
 80136c4:	e306      	b.n	8013cd4 <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 80136c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136ca:	685b      	ldr	r3, [r3, #4]
 80136cc:	2b02      	cmp	r3, #2
 80136ce:	d006      	beq.n	80136de <Zigbee_CallBackProcessing+0x10a2>
 80136d0:	4bae      	ldr	r3, [pc, #696]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 80136d2:	4aaf      	ldr	r2, [pc, #700]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 80136d4:	f640 71a2 	movw	r1, #4002	; 0xfa2
 80136d8:	48ae      	ldr	r0, [pc, #696]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 80136da:	f001 fcc9 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80136de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80136e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	f000 82f3 	beq.w	8013cd8 <Zigbee_CallBackProcessing+0x169c>
 80136f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	f000 82ed 	beq.w	8013cd8 <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 80136fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 8013708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	4618      	mov	r0, r3
 8013710:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013714:	685a      	ldr	r2, [r3, #4]
 8013716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801371a:	4611      	mov	r1, r2
 801371c:	4798      	blx	r3
            }
            break;
 801371e:	e2db      	b.n	8013cd8 <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 8013720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	2b02      	cmp	r3, #2
 8013728:	d006      	beq.n	8013738 <Zigbee_CallBackProcessing+0x10fc>
 801372a:	4b98      	ldr	r3, [pc, #608]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 801372c:	4a98      	ldr	r2, [pc, #608]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 801372e:	f640 71ad 	movw	r1, #4013	; 0xfad
 8013732:	4898      	ldr	r0, [pc, #608]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 8013734:	f001 fc9c 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801373c:	68db      	ldr	r3, [r3, #12]
 801373e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013746:	2b00      	cmp	r3, #0
 8013748:	f000 82c8 	beq.w	8013cdc <Zigbee_CallBackProcessing+0x16a0>
 801374c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f000 82c2 	beq.w	8013cdc <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 8013758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 8013762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013766:	689b      	ldr	r3, [r3, #8]
 8013768:	4618      	mov	r0, r3
 801376a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801376e:	685a      	ldr	r2, [r3, #4]
 8013770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013774:	4611      	mov	r1, r2
 8013776:	4798      	blx	r3
            }
            break;
 8013778:	e2b0      	b.n	8013cdc <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 801377a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	2b02      	cmp	r3, #2
 8013782:	d006      	beq.n	8013792 <Zigbee_CallBackProcessing+0x1156>
 8013784:	4b81      	ldr	r3, [pc, #516]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 8013786:	4a82      	ldr	r2, [pc, #520]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 8013788:	f640 71b8 	movw	r1, #4024	; 0xfb8
 801378c:	4881      	ldr	r0, [pc, #516]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 801378e:	f001 fc6f 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801379c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 829d 	beq.w	8013ce0 <Zigbee_CallBackProcessing+0x16a4>
 80137a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	f000 8297 	beq.w	8013ce0 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 80137b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 80137bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137c0:	689b      	ldr	r3, [r3, #8]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137c8:	685a      	ldr	r2, [r3, #4]
 80137ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80137ce:	4611      	mov	r1, r2
 80137d0:	4798      	blx	r3
            }
            break;
 80137d2:	e285      	b.n	8013ce0 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 80137d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137d8:	685b      	ldr	r3, [r3, #4]
 80137da:	2b02      	cmp	r3, #2
 80137dc:	d006      	beq.n	80137ec <Zigbee_CallBackProcessing+0x11b0>
 80137de:	4b6b      	ldr	r3, [pc, #428]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 80137e0:	4a6b      	ldr	r2, [pc, #428]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 80137e2:	f640 71c3 	movw	r1, #4035	; 0xfc3
 80137e6:	486b      	ldr	r0, [pc, #428]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 80137e8:	f001 fc42 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80137ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80137f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	f000 8272 	beq.w	8013ce4 <Zigbee_CallBackProcessing+0x16a8>
 8013800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	f000 826c 	beq.w	8013ce4 <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 801380c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 8013816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	4618      	mov	r0, r3
 801381e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013822:	685a      	ldr	r2, [r3, #4]
 8013824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013828:	4611      	mov	r1, r2
 801382a:	4798      	blx	r3
            }
            break;
 801382c:	e25a      	b.n	8013ce4 <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 801382e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	2b03      	cmp	r3, #3
 8013836:	d006      	beq.n	8013846 <Zigbee_CallBackProcessing+0x120a>
 8013838:	4b57      	ldr	r3, [pc, #348]	; (8013998 <Zigbee_CallBackProcessing+0x135c>)
 801383a:	4a55      	ldr	r2, [pc, #340]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 801383c:	f640 71d1 	movw	r1, #4049	; 0xfd1
 8013840:	4854      	ldr	r0, [pc, #336]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 8013842:	f001 fc15 	bl	8015070 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8013846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801384a:	691b      	ldr	r3, [r3, #16]
 801384c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8013850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013854:	2b00      	cmp	r3, #0
 8013856:	f000 8247 	beq.w	8013ce8 <Zigbee_CallBackProcessing+0x16ac>
 801385a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	f000 8241 	beq.w	8013ce8 <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8013866:	2300      	movs	r3, #0
 8013868:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801386c:	e032      	b.n	80138d4 <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 801386e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8013872:	4613      	mov	r3, r2
 8013874:	005b      	lsls	r3, r3, #1
 8013876:	4413      	add	r3, r2
 8013878:	009b      	lsls	r3, r3, #2
 801387a:	4a48      	ldr	r2, [pc, #288]	; (801399c <Zigbee_CallBackProcessing+0x1360>)
 801387c:	4413      	add	r3, r2
 801387e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013882:	429a      	cmp	r2, r3
 8013884:	d120      	bne.n	80138c8 <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8013886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d026      	beq.n	80138de <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 8013890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013894:	689b      	ldr	r3, [r3, #8]
 8013896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 801389a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 80138a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 80138ae:	4b3c      	ldr	r3, [pc, #240]	; (80139a0 <Zigbee_CallBackProcessing+0x1364>)
 80138b0:	6818      	ldr	r0, [r3, #0]
 80138b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138b6:	689b      	ldr	r3, [r3, #8]
 80138b8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80138bc:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80138c0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80138c4:	47a0      	blx	r4
                    break;
 80138c6:	e00b      	b.n	80138e0 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 80138c8:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80138ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80138ce:	3301      	adds	r3, #1
 80138d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80138d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80138d8:	2b07      	cmp	r3, #7
 80138da:	d9c8      	bls.n	801386e <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 80138dc:	e204      	b.n	8013ce8 <Zigbee_CallBackProcessing+0x16ac>
                        break;
 80138de:	bf00      	nop
            break;
 80138e0:	e202      	b.n	8013ce8 <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 80138e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	2b02      	cmp	r3, #2
 80138ea:	d006      	beq.n	80138fa <Zigbee_CallBackProcessing+0x12be>
 80138ec:	4b27      	ldr	r3, [pc, #156]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 80138ee:	4a28      	ldr	r2, [pc, #160]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 80138f0:	f640 71f2 	movw	r1, #4082	; 0xff2
 80138f4:	4827      	ldr	r0, [pc, #156]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 80138f6:	f001 fbbb 	bl	8015070 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80138fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            cb_arg = (void *)p_notification->Data[1];
 8013904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 801390e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8013912:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8013916:	f7ed feb1 	bl	800167c <zcl_cluster_data_ind>
 801391a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801391e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8013922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013926:	60da      	str	r2, [r3, #12]
            break;
 8013928:	e1f7      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 801392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	2b02      	cmp	r3, #2
 8013932:	d006      	beq.n	8013942 <Zigbee_CallBackProcessing+0x1306>
 8013934:	4b15      	ldr	r3, [pc, #84]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 8013936:	4a16      	ldr	r2, [pc, #88]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 8013938:	f241 0101 	movw	r1, #4097	; 0x1001
 801393c:	4815      	ldr	r0, [pc, #84]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 801393e:	f001 fb97 	bl	8015070 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8013942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013946:	689b      	ldr	r3, [r3, #8]
 8013948:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            cb_arg = (void *)p_notification->Data[1];
 801394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 8013956:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801395a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 801395e:	f7ed fea7 	bl	80016b0 <zcl_cluster_alarm_data_ind>
 8013962:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013966:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801396e:	60da      	str	r2, [r3, #12]
            break;
 8013970:	e1d3      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 8013972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	2b02      	cmp	r3, #2
 801397a:	d013      	beq.n	80139a4 <Zigbee_CallBackProcessing+0x1368>
 801397c:	4b03      	ldr	r3, [pc, #12]	; (801398c <Zigbee_CallBackProcessing+0x1350>)
 801397e:	4a04      	ldr	r2, [pc, #16]	; (8013990 <Zigbee_CallBackProcessing+0x1354>)
 8013980:	f241 010b 	movw	r1, #4107	; 0x100b
 8013984:	4803      	ldr	r0, [pc, #12]	; (8013994 <Zigbee_CallBackProcessing+0x1358>)
 8013986:	f001 fb73 	bl	8015070 <__assert_func>
 801398a:	bf00      	nop
 801398c:	08016628 	.word	0x08016628
 8013990:	08016d78 	.word	0x08016d78
 8013994:	08016598 	.word	0x08016598
 8013998:	0801660c 	.word	0x0801660c
 801399c:	200007a4 	.word	0x200007a4
 80139a0:	20000610 	.word	0x20000610
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80139a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80139ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	f000 81a8 	beq.w	8013d08 <Zigbee_CallBackProcessing+0x16cc>
 80139b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	f000 81a2 	beq.w	8013d08 <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 80139c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 80139ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139d2:	689b      	ldr	r3, [r3, #8]
 80139d4:	4618      	mov	r0, r3
 80139d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139da:	685a      	ldr	r2, [r3, #4]
 80139dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80139e0:	4611      	mov	r1, r2
 80139e2:	4798      	blx	r3
            }
            break;
 80139e4:	e190      	b.n	8013d08 <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 80139e6:	2300      	movs	r3, #0
 80139e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            assert(p_notification->Size == 2);
 80139ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	2b02      	cmp	r3, #2
 80139f4:	d006      	beq.n	8013a04 <Zigbee_CallBackProcessing+0x13c8>
 80139f6:	4bbd      	ldr	r3, [pc, #756]	; (8013cec <Zigbee_CallBackProcessing+0x16b0>)
 80139f8:	4abd      	ldr	r2, [pc, #756]	; (8013cf0 <Zigbee_CallBackProcessing+0x16b4>)
 80139fa:	f241 0119 	movw	r1, #4121	; 0x1019
 80139fe:	48bd      	ldr	r0, [pc, #756]	; (8013cf4 <Zigbee_CallBackProcessing+0x16b8>)
 8013a00:	f001 fb36 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8013a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d026      	beq.n	8013a64 <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 8013a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a1a:	689b      	ldr	r3, [r3, #8]
 8013a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                if (info->callback != NULL) {
 8013a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00f      	beq.n	8013a4a <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8013a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    err = callback(zcl_rsp, info->arg);
 8013a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a38:	685a      	ldr	r2, [r3, #4]
 8013a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a3e:	4611      	mov	r1, r2
 8013a40:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013a44:	4798      	blx	r3
 8013a46:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8013a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a4e:	7a1b      	ldrb	r3, [r3, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d007      	beq.n	8013a64 <Zigbee_CallBackProcessing+0x1428>
 8013a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013a58:	785b      	ldrb	r3, [r3, #1]
 8013a5a:	2b94      	cmp	r3, #148	; 0x94
 8013a5c:	d002      	beq.n	8013a64 <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013a64:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8013a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a6c:	60da      	str	r2, [r3, #12]
            break;
 8013a6e:	e154      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8013a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	2b02      	cmp	r3, #2
 8013a78:	d006      	beq.n	8013a88 <Zigbee_CallBackProcessing+0x144c>
 8013a7a:	4b9c      	ldr	r3, [pc, #624]	; (8013cec <Zigbee_CallBackProcessing+0x16b0>)
 8013a7c:	4a9c      	ldr	r2, [pc, #624]	; (8013cf0 <Zigbee_CallBackProcessing+0x16b4>)
 8013a7e:	f241 0131 	movw	r1, #4145	; 0x1031
 8013a82:	489c      	ldr	r0, [pc, #624]	; (8013cf4 <Zigbee_CallBackProcessing+0x16b8>)
 8013a84:	f001 faf4 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a8c:	68db      	ldr	r3, [r3, #12]
 8013a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	f000 8138 	beq.w	8013d0c <Zigbee_CallBackProcessing+0x16d0>
 8013a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f000 8132 	beq.w	8013d0c <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 8013aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 8013ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ab6:	689b      	ldr	r3, [r3, #8]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013abe:	685a      	ldr	r2, [r3, #4]
 8013ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013ac4:	4611      	mov	r1, r2
 8013ac6:	4798      	blx	r3
            }
            break;
 8013ac8:	e120      	b.n	8013d0c <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 8013aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	2b02      	cmp	r3, #2
 8013ad2:	d006      	beq.n	8013ae2 <Zigbee_CallBackProcessing+0x14a6>
 8013ad4:	4b85      	ldr	r3, [pc, #532]	; (8013cec <Zigbee_CallBackProcessing+0x16b0>)
 8013ad6:	4a86      	ldr	r2, [pc, #536]	; (8013cf0 <Zigbee_CallBackProcessing+0x16b4>)
 8013ad8:	f241 013c 	movw	r1, #4156	; 0x103c
 8013adc:	4885      	ldr	r0, [pc, #532]	; (8013cf4 <Zigbee_CallBackProcessing+0x16b8>)
 8013ade:	f001 fac7 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f000 810d 	beq.w	8013d10 <Zigbee_CallBackProcessing+0x16d4>
 8013af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f000 8107 	beq.w	8013d10 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 8013b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8013b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b10:	689b      	ldr	r3, [r3, #8]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b18:	685a      	ldr	r2, [r3, #4]
 8013b1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013b1e:	4611      	mov	r1, r2
 8013b20:	4798      	blx	r3
            }
            break;
 8013b22:	e0f5      	b.n	8013d10 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 8013b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	d006      	beq.n	8013b3c <Zigbee_CallBackProcessing+0x1500>
 8013b2e:	4b6f      	ldr	r3, [pc, #444]	; (8013cec <Zigbee_CallBackProcessing+0x16b0>)
 8013b30:	4a6f      	ldr	r2, [pc, #444]	; (8013cf0 <Zigbee_CallBackProcessing+0x16b4>)
 8013b32:	f241 0147 	movw	r1, #4167	; 0x1047
 8013b36:	486f      	ldr	r0, [pc, #444]	; (8013cf4 <Zigbee_CallBackProcessing+0x16b8>)
 8013b38:	f001 fa9a 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b40:	68db      	ldr	r3, [r3, #12]
 8013b42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	f000 80e2 	beq.w	8013d14 <Zigbee_CallBackProcessing+0x16d8>
 8013b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f000 80dc 	beq.w	8013d14 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8013b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 8013b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b6a:	689b      	ldr	r3, [r3, #8]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b72:	685a      	ldr	r2, [r3, #4]
 8013b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b78:	4611      	mov	r1, r2
 8013b7a:	4798      	blx	r3
            }
            break;
 8013b7c:	e0ca      	b.n	8013d14 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 8013b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	2b05      	cmp	r3, #5
 8013b86:	d006      	beq.n	8013b96 <Zigbee_CallBackProcessing+0x155a>
 8013b88:	4b5b      	ldr	r3, [pc, #364]	; (8013cf8 <Zigbee_CallBackProcessing+0x16bc>)
 8013b8a:	4a59      	ldr	r2, [pc, #356]	; (8013cf0 <Zigbee_CallBackProcessing+0x16b4>)
 8013b8c:	f241 0152 	movw	r1, #4178	; 0x1052
 8013b90:	4858      	ldr	r0, [pc, #352]	; (8013cf4 <Zigbee_CallBackProcessing+0x16b8>)
 8013b92:	f001 fa6d 	bl	8015070 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 8013b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b9a:	699b      	ldr	r3, [r3, #24]
 8013b9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f000 80b7 	beq.w	8013d18 <Zigbee_CallBackProcessing+0x16dc>
 8013baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	f000 80b1 	beq.w	8013d18 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 8013bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bba:	f103 0108 	add.w	r1, r3, #8
 8013bbe:	463b      	mov	r3, r7
 8013bc0:	2208      	movs	r2, #8
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fd fd2f 	bl	8011626 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 8013bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 8013bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bda:	691b      	ldr	r3, [r3, #16]
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013be2:	695b      	ldr	r3, [r3, #20]
 8013be4:	b2dd      	uxtb	r5, r3
 8013be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8013bf2:	462b      	mov	r3, r5
 8013bf4:	47a0      	blx	r4
            }
            break;
 8013bf6:	e08f      	b.n	8013d18 <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 8013bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bfc:	685b      	ldr	r3, [r3, #4]
 8013bfe:	2b03      	cmp	r3, #3
 8013c00:	d006      	beq.n	8013c10 <Zigbee_CallBackProcessing+0x15d4>
 8013c02:	4b3e      	ldr	r3, [pc, #248]	; (8013cfc <Zigbee_CallBackProcessing+0x16c0>)
 8013c04:	4a3a      	ldr	r2, [pc, #232]	; (8013cf0 <Zigbee_CallBackProcessing+0x16b4>)
 8013c06:	f241 0163 	movw	r1, #4195	; 0x1063
 8013c0a:	483a      	ldr	r0, [pc, #232]	; (8013cf4 <Zigbee_CallBackProcessing+0x16b8>)
 8013c0c:	f001 fa30 	bl	8015070 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8013c10:	4b3b      	ldr	r3, [pc, #236]	; (8013d00 <Zigbee_CallBackProcessing+0x16c4>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d103      	bne.n	8013c20 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 8013c18:	2381      	movs	r3, #129	; 0x81
 8013c1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                break;
 8013c1e:	e07c      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8013c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c24:	689b      	ldr	r3, [r3, #8]
 8013c26:	64fb      	str	r3, [r7, #76]	; 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 8013c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	64bb      	str	r3, [r7, #72]	; 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8013c30:	4b33      	ldr	r3, [pc, #204]	; (8013d00 <Zigbee_CallBackProcessing+0x16c4>)
 8013c32:	681c      	ldr	r4, [r3, #0]
 8013c34:	4b33      	ldr	r3, [pc, #204]	; (8013d04 <Zigbee_CallBackProcessing+0x16c8>)
 8013c36:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 8013c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c3c:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8013c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013c42:	47a0      	blx	r4
 8013c44:	4603      	mov	r3, r0
 8013c46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 8013c4a:	e066      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8013c52:	e062      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c54:	bf00      	nop
 8013c56:	e060      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c58:	bf00      	nop
 8013c5a:	e05e      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c5c:	bf00      	nop
 8013c5e:	e05c      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c60:	bf00      	nop
 8013c62:	e05a      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c64:	bf00      	nop
 8013c66:	e058      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c68:	bf00      	nop
 8013c6a:	e056      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c6c:	bf00      	nop
 8013c6e:	e054      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c70:	bf00      	nop
 8013c72:	e052      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c74:	bf00      	nop
 8013c76:	e050      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c78:	bf00      	nop
 8013c7a:	e04e      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c7c:	bf00      	nop
 8013c7e:	e04c      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c80:	bf00      	nop
 8013c82:	e04a      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c84:	bf00      	nop
 8013c86:	e048      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c88:	bf00      	nop
 8013c8a:	e046      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c8c:	bf00      	nop
 8013c8e:	e044      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c90:	bf00      	nop
 8013c92:	e042      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c94:	bf00      	nop
 8013c96:	e040      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c98:	bf00      	nop
 8013c9a:	e03e      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013c9c:	bf00      	nop
 8013c9e:	e03c      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ca0:	bf00      	nop
 8013ca2:	e03a      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ca4:	bf00      	nop
 8013ca6:	e038      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ca8:	bf00      	nop
 8013caa:	e036      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cac:	bf00      	nop
 8013cae:	e034      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cb0:	bf00      	nop
 8013cb2:	e032      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cb4:	bf00      	nop
 8013cb6:	e030      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cb8:	bf00      	nop
 8013cba:	e02e      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cbc:	bf00      	nop
 8013cbe:	e02c      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cc0:	bf00      	nop
 8013cc2:	e02a      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cc4:	bf00      	nop
 8013cc6:	e028      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cc8:	bf00      	nop
 8013cca:	e026      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ccc:	bf00      	nop
 8013cce:	e024      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cd0:	bf00      	nop
 8013cd2:	e022      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cd4:	bf00      	nop
 8013cd6:	e020      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cd8:	bf00      	nop
 8013cda:	e01e      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013cdc:	bf00      	nop
 8013cde:	e01c      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ce0:	bf00      	nop
 8013ce2:	e01a      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ce4:	bf00      	nop
 8013ce6:	e018      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ce8:	bf00      	nop
 8013cea:	e016      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
 8013cec:	08016628 	.word	0x08016628
 8013cf0:	08016d78 	.word	0x08016d78
 8013cf4:	08016598 	.word	0x08016598
 8013cf8:	08016644 	.word	0x08016644
 8013cfc:	0801660c 	.word	0x0801660c
 8013d00:	200005fc 	.word	0x200005fc
 8013d04:	20000610 	.word	0x20000610
            break;
 8013d08:	bf00      	nop
 8013d0a:	e006      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013d0c:	bf00      	nop
 8013d0e:	e004      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013d10:	bf00      	nop
 8013d12:	e002      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013d14:	bf00      	nop
 8013d16:	e000      	b.n	8013d1a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013d18:	bf00      	nop
    }

    if (info != NULL) {
 8013d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d003      	beq.n	8013d2a <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 8013d22:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013d26:	f7fd fcba 	bl	801169e <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 8013d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d2e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8013d32:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8013d34:	f7fc fdfc 	bl	8010930 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 8013d38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d46:	bf00      	nop

08013d48 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8013d48:	b590      	push	{r4, r7, lr}
 8013d4a:	b089      	sub	sp, #36	; 0x24
 8013d4c:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8013d52:	f000 fb6b 	bl	801442c <ZIGBEE_Get_M0RequestPayloadBuffer>
 8013d56:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	2b09      	cmp	r3, #9
 8013d5e:	d046      	beq.n	8013dee <Zigbee_M0RequestProcessing+0xa6>
 8013d60:	2b09      	cmp	r3, #9
 8013d62:	d864      	bhi.n	8013e2e <Zigbee_M0RequestProcessing+0xe6>
 8013d64:	2b07      	cmp	r3, #7
 8013d66:	d002      	beq.n	8013d6e <Zigbee_M0RequestProcessing+0x26>
 8013d68:	2b08      	cmp	r3, #8
 8013d6a:	d01e      	beq.n	8013daa <Zigbee_M0RequestProcessing+0x62>
 8013d6c:	e05f      	b.n	8013e2e <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	2b01      	cmp	r3, #1
 8013d74:	d006      	beq.n	8013d84 <Zigbee_M0RequestProcessing+0x3c>
 8013d76:	4b33      	ldr	r3, [pc, #204]	; (8013e44 <Zigbee_M0RequestProcessing+0xfc>)
 8013d78:	4a33      	ldr	r2, [pc, #204]	; (8013e48 <Zigbee_M0RequestProcessing+0x100>)
 8013d7a:	f241 018a 	movw	r1, #4234	; 0x108a
 8013d7e:	4833      	ldr	r0, [pc, #204]	; (8013e4c <Zigbee_M0RequestProcessing+0x104>)
 8013d80:	f001 f976 	bl	8015070 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	689b      	ldr	r3, [r3, #8]
 8013d88:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8013d8a:	4b31      	ldr	r3, [pc, #196]	; (8013e50 <Zigbee_M0RequestProcessing+0x108>)
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d050      	beq.n	8013e34 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8013d92:	4b2f      	ldr	r3, [pc, #188]	; (8013e50 <Zigbee_M0RequestProcessing+0x108>)
 8013d94:	685c      	ldr	r4, [r3, #4]
 8013d96:	4b2e      	ldr	r3, [pc, #184]	; (8013e50 <Zigbee_M0RequestProcessing+0x108>)
 8013d98:	6818      	ldr	r0, [r3, #0]
 8013d9a:	4b2e      	ldr	r3, [pc, #184]	; (8013e54 <Zigbee_M0RequestProcessing+0x10c>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	9300      	str	r3, [sp, #0]
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	2200      	movs	r2, #0
 8013da4:	2100      	movs	r1, #0
 8013da6:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8013da8:	e044      	b.n	8013e34 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	d006      	beq.n	8013dc0 <Zigbee_M0RequestProcessing+0x78>
 8013db2:	4b24      	ldr	r3, [pc, #144]	; (8013e44 <Zigbee_M0RequestProcessing+0xfc>)
 8013db4:	4a24      	ldr	r2, [pc, #144]	; (8013e48 <Zigbee_M0RequestProcessing+0x100>)
 8013db6:	f241 019a 	movw	r1, #4250	; 0x109a
 8013dba:	4824      	ldr	r0, [pc, #144]	; (8013e4c <Zigbee_M0RequestProcessing+0x104>)
 8013dbc:	f001 f958 	bl	8015070 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	689b      	ldr	r3, [r3, #8]
 8013dc4:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	3304      	adds	r3, #4
 8013dca:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f001 f96d 	bl	80150ac <malloc>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d004      	beq.n	8013de6 <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8013ddc:	6879      	ldr	r1, [r7, #4]
 8013dde:	6938      	ldr	r0, [r7, #16]
 8013de0:	f000 f83c 	bl	8013e5c <zb_malloc_track>
 8013de4:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8013de6:	693a      	ldr	r2, [r7, #16]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	60da      	str	r2, [r3, #12]
            break;
 8013dec:	e023      	b.n	8013e36 <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d006      	beq.n	8013e04 <Zigbee_M0RequestProcessing+0xbc>
 8013df6:	4b13      	ldr	r3, [pc, #76]	; (8013e44 <Zigbee_M0RequestProcessing+0xfc>)
 8013df8:	4a13      	ldr	r2, [pc, #76]	; (8013e48 <Zigbee_M0RequestProcessing+0x100>)
 8013dfa:	f241 01ae 	movw	r1, #4270	; 0x10ae
 8013dfe:	4813      	ldr	r0, [pc, #76]	; (8013e4c <Zigbee_M0RequestProcessing+0x104>)
 8013e00:	f001 f936 	bl	8015070 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	689b      	ldr	r3, [r3, #8]
 8013e08:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d106      	bne.n	8013e1e <Zigbee_M0RequestProcessing+0xd6>
 8013e10:	4b11      	ldr	r3, [pc, #68]	; (8013e58 <Zigbee_M0RequestProcessing+0x110>)
 8013e12:	4a0d      	ldr	r2, [pc, #52]	; (8013e48 <Zigbee_M0RequestProcessing+0x100>)
 8013e14:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8013e18:	480c      	ldr	r0, [pc, #48]	; (8013e4c <Zigbee_M0RequestProcessing+0x104>)
 8013e1a:	f001 f929 	bl	8015070 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8013e1e:	68b8      	ldr	r0, [r7, #8]
 8013e20:	f000 f838 	bl	8013e94 <zb_malloc_untrack>
 8013e24:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8013e26:	68b8      	ldr	r0, [r7, #8]
 8013e28:	f001 f948 	bl	80150bc <free>
            break;
 8013e2c:	e003      	b.n	8013e36 <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8013e2e:	2301      	movs	r3, #1
 8013e30:	75fb      	strb	r3, [r7, #23]
            break;
 8013e32:	e000      	b.n	8013e36 <Zigbee_M0RequestProcessing+0xee>
            break;
 8013e34:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8013e36:	f7fc fd95 	bl	8010964 <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 8013e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	371c      	adds	r7, #28
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd90      	pop	{r4, r7, pc}
 8013e44:	08016660 	.word	0x08016660
 8013e48:	08016d94 	.word	0x08016d94
 8013e4c:	08016598 	.word	0x08016598
 8013e50:	20000610 	.word	0x20000610
 8013e54:	08016b48 	.word	0x08016b48
 8013e58:	08016678 	.word	0x08016678

08013e5c <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b085      	sub	sp, #20
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	3304      	adds	r3, #4
 8013e70:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8013e72:	4b07      	ldr	r3, [pc, #28]	; (8013e90 <zb_malloc_track+0x34>)
 8013e74:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	4413      	add	r3, r2
 8013e7c:	4a04      	ldr	r2, [pc, #16]	; (8013e90 <zb_malloc_track+0x34>)
 8013e7e:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8013e82:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3714      	adds	r7, #20
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr
 8013e90:	20000610 	.word	0x20000610

08013e94 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	3b04      	subs	r3, #4
 8013ea0:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 8013ea8:	4b07      	ldr	r3, [pc, #28]	; (8013ec8 <zb_malloc_untrack+0x34>)
 8013eaa:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	1ad3      	subs	r3, r2, r3
 8013eb2:	4a05      	ldr	r2, [pc, #20]	; (8013ec8 <zb_malloc_untrack+0x34>)
 8013eb4:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3714      	adds	r7, #20
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec4:	4770      	bx	lr
 8013ec6:	bf00      	nop
 8013ec8:	20000610 	.word	0x20000610

08013ecc <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b082      	sub	sp, #8
 8013ed0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 8013ed2:	4a12      	ldr	r2, [pc, #72]	; (8013f1c <APP_ZIGBEE_Init+0x50>)
 8013ed4:	2101      	movs	r1, #1
 8013ed6:	2000      	movs	r0, #0
 8013ed8:	f7f3 fe52 	bl	8007b80 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 8013edc:	f000 f9bc 	bl	8014258 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 8013ee0:	480f      	ldr	r0, [pc, #60]	; (8013f20 <APP_ZIGBEE_Init+0x54>)
 8013ee2:	f000 fa6f 	bl	80143c4 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 8013ee6:	f000 fb29 	bl	801453c <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 8013eea:	4a0e      	ldr	r2, [pc, #56]	; (8013f24 <APP_ZIGBEE_Init+0x58>)
 8013eec:	2100      	movs	r1, #0
 8013eee:	2001      	movs	r0, #1
 8013ef0:	f000 ffbc 	bl	8014e6c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 8013ef4:	4a0c      	ldr	r2, [pc, #48]	; (8013f28 <APP_ZIGBEE_Init+0x5c>)
 8013ef6:	2100      	movs	r1, #0
 8013ef8:	2002      	movs	r0, #2
 8013efa:	f000 ffb7 	bl	8014e6c <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 8013efe:	4a0b      	ldr	r2, [pc, #44]	; (8013f2c <APP_ZIGBEE_Init+0x60>)
 8013f00:	2100      	movs	r1, #0
 8013f02:	2004      	movs	r0, #4
 8013f04:	f000 ffb2 	bl	8014e6c <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 8013f08:	f7fc f9de 	bl	80102c8 <SHCI_C2_ZIGBEE_Init>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 8013f10:	f000 f80e 	bl	8013f30 <APP_ZIGBEE_StackLayersInit>

}
 8013f14:	bf00      	nop
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	08016684 	.word	0x08016684
 8013f20:	20030838 	.word	0x20030838
 8013f24:	0801456d 	.word	0x0801456d
 8013f28:	0801458d 	.word	0x0801458d
 8013f2c:	08014049 	.word	0x08014049

08013f30 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 8013f34:	4a17      	ldr	r2, [pc, #92]	; (8013f94 <APP_ZIGBEE_StackLayersInit+0x64>)
 8013f36:	2101      	movs	r1, #1
 8013f38:	2000      	movs	r0, #0
 8013f3a:	f7f3 fe21 	bl	8007b80 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 8013f3e:	2300      	movs	r3, #0
 8013f40:	2200      	movs	r2, #0
 8013f42:	f04f 0000 	mov.w	r0, #0
 8013f46:	f04f 0100 	mov.w	r1, #0
 8013f4a:	f7fd fbd7 	bl	80116fc <ZbInit>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	4a11      	ldr	r2, [pc, #68]	; (8013f98 <APP_ZIGBEE_StackLayersInit+0x68>)
 8013f52:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 8013f54:	4b10      	ldr	r3, [pc, #64]	; (8013f98 <APP_ZIGBEE_StackLayersInit+0x68>)
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d105      	bne.n	8013f68 <APP_ZIGBEE_StackLayersInit+0x38>
 8013f5c:	4b0f      	ldr	r3, [pc, #60]	; (8013f9c <APP_ZIGBEE_StackLayersInit+0x6c>)
 8013f5e:	4a10      	ldr	r2, [pc, #64]	; (8013fa0 <APP_ZIGBEE_StackLayersInit+0x70>)
 8013f60:	21ad      	movs	r1, #173	; 0xad
 8013f62:	4810      	ldr	r0, [pc, #64]	; (8013fa4 <APP_ZIGBEE_StackLayersInit+0x74>)
 8013f64:	f001 f884 	bl	8015070 <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 8013f68:	f000 f81e 	bl	8013fa8 <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 8013f6c:	4b0a      	ldr	r3, [pc, #40]	; (8013f98 <APP_ZIGBEE_StackLayersInit+0x68>)
 8013f6e:	2201      	movs	r2, #1
 8013f70:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 8013f72:	f7f4 f8cf 	bl	8008114 <HAL_GetTick>
 8013f76:	4603      	mov	r3, r0
 8013f78:	4a07      	ldr	r2, [pc, #28]	; (8013f98 <APP_ZIGBEE_StackLayersInit+0x68>)
 8013f7a:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeForm;
 8013f7c:	4b06      	ldr	r3, [pc, #24]	; (8013f98 <APP_ZIGBEE_StackLayersInit+0x68>)
 8013f7e:	2201      	movs	r2, #1
 8013f80:	721a      	strb	r2, [r3, #8]
  //zigbee_app_info.startupControl = ZbStartTypeJoin;


  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 8013f82:	4b05      	ldr	r3, [pc, #20]	; (8013f98 <APP_ZIGBEE_StackLayersInit+0x68>)
 8013f84:	2201      	movs	r2, #1
 8013f86:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8013f88:	2100      	movs	r1, #0
 8013f8a:	2004      	movs	r0, #4
 8013f8c:	f000 ff90 	bl	8014eb0 <UTIL_SEQ_SetTask>
}
 8013f90:	bf00      	nop
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	08016694 	.word	0x08016694
 8013f98:	20000818 	.word	0x20000818
 8013f9c:	080166b0 	.word	0x080166b0
 8013fa0:	08016db0 	.word	0x08016db0
 8013fa4:	080166cc 	.word	0x080166cc

08013fa8 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b08a      	sub	sp, #40	; 0x28
 8013fac:	af02      	add	r7, sp, #8
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 8013fae:	f107 0308 	add.w	r3, r7, #8
 8013fb2:	2218      	movs	r2, #24
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f001 faea 	bl	8015590 <memset>

  /* Endpoint: SW1_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 8013fbc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8013fc0:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_COMBINED_INTERFACE;
 8013fc2:	2307      	movs	r3, #7
 8013fc4:	81bb      	strh	r3, [r7, #12]
  req.endpoint = SW1_ENDPOINT;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8013fca:	4b19      	ldr	r3, [pc, #100]	; (8014030 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	1d3a      	adds	r2, r7, #4
 8013fd0:	f107 0108 	add.w	r1, r7, #8
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fe f8fb 	bl	80121d0 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 8013fda:	793b      	ldrb	r3, [r7, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d005      	beq.n	8013fec <APP_ZIGBEE_ConfigEndpoints+0x44>
 8013fe0:	4b14      	ldr	r3, [pc, #80]	; (8014034 <APP_ZIGBEE_ConfigEndpoints+0x8c>)
 8013fe2:	4a15      	ldr	r2, [pc, #84]	; (8014038 <APP_ZIGBEE_ConfigEndpoints+0x90>)
 8013fe4:	21d4      	movs	r1, #212	; 0xd4
 8013fe6:	4815      	ldr	r0, [pc, #84]	; (801403c <APP_ZIGBEE_ConfigEndpoints+0x94>)
 8013fe8:	f001 f842 	bl	8015070 <__assert_func>

  /* Temperature meas server */
  zigbee_app_info.temperature_meas_server_1 = ZbZclTempMeasServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, TEMP_MIN_1, TEMP_MAX_1, TEMP_TOLERANCE_1);
 8013fec:	4b10      	ldr	r3, [pc, #64]	; (8014030 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8013fee:	6858      	ldr	r0, [r3, #4]
 8013ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ff4:	9300      	str	r3, [sp, #0]
 8013ff6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013ffa:	4a11      	ldr	r2, [pc, #68]	; (8014040 <APP_ZIGBEE_ConfigEndpoints+0x98>)
 8013ffc:	2101      	movs	r1, #1
 8013ffe:	f7ed fd1b 	bl	8001a38 <ZbZclTempMeasServerAlloc>
 8014002:	4603      	mov	r3, r0
 8014004:	4a0a      	ldr	r2, [pc, #40]	; (8014030 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8014006:	6153      	str	r3, [r2, #20]
  assert(zigbee_app_info.temperature_meas_server_1 != NULL);
 8014008:	4b09      	ldr	r3, [pc, #36]	; (8014030 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 801400a:	695b      	ldr	r3, [r3, #20]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d105      	bne.n	801401c <APP_ZIGBEE_ConfigEndpoints+0x74>
 8014010:	4b0c      	ldr	r3, [pc, #48]	; (8014044 <APP_ZIGBEE_ConfigEndpoints+0x9c>)
 8014012:	4a09      	ldr	r2, [pc, #36]	; (8014038 <APP_ZIGBEE_ConfigEndpoints+0x90>)
 8014014:	21d8      	movs	r1, #216	; 0xd8
 8014016:	4809      	ldr	r0, [pc, #36]	; (801403c <APP_ZIGBEE_ConfigEndpoints+0x94>)
 8014018:	f001 f82a 	bl	8015070 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.temperature_meas_server_1);
 801401c:	4b04      	ldr	r3, [pc, #16]	; (8014030 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 801401e:	695b      	ldr	r3, [r3, #20]
 8014020:	4618      	mov	r0, r3
 8014022:	f7fe f9c0 	bl	80123a6 <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* USER CODE END CONFIG_ENDPOINT */
}
 8014026:	bf00      	nop
 8014028:	3720      	adds	r7, #32
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	20000818 	.word	0x20000818
 8014034:	080166ec 	.word	0x080166ec
 8014038:	08016dcc 	.word	0x08016dcc
 801403c:	080166cc 	.word	0x080166cc
 8014040:	ffff954d 	.word	0xffff954d
 8014044:	08016710 	.word	0x08016710

08014048 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 8014048:	b590      	push	{r4, r7, lr}
 801404a:	b0f9      	sub	sp, #484	; 0x1e4
 801404c:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 801404e:	4b43      	ldr	r3, [pc, #268]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 8014050:	7a5b      	ldrb	r3, [r3, #9]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d074      	beq.n	8014140 <APP_ZIGBEE_NwkForm+0xf8>
 8014056:	f7f4 f85d 	bl	8008114 <HAL_GetTick>
 801405a:	4602      	mov	r2, r0
 801405c:	4b3f      	ldr	r3, [pc, #252]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	429a      	cmp	r2, r3
 8014062:	d36d      	bcc.n	8014140 <APP_ZIGBEE_NwkForm+0xf8>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 8014064:	4b3d      	ldr	r3, [pc, #244]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	211f      	movs	r1, #31
 801406c:	4618      	mov	r0, r3
 801406e:	f7fd fb99 	bl	80117a4 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 8014072:	463b      	mov	r3, r7
 8014074:	4618      	mov	r0, r3
 8014076:	f7fd fc33 	bl	80118e0 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    //APP_DBG("Network config : APP_STARTUP_CENTRALIZED_ROUTER");
    //zigbee_app_info.startupControl = ZbStartTypeJoin;
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_COORDINATOR");
 801407a:	4a39      	ldr	r2, [pc, #228]	; (8014160 <APP_ZIGBEE_NwkForm+0x118>)
 801407c:	2101      	movs	r1, #1
 801407e:	2000      	movs	r0, #0
 8014080:	f7f3 fd7e 	bl	8007b80 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 8014084:	4b35      	ldr	r3, [pc, #212]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 8014086:	7a1a      	ldrb	r2, [r3, #8]
 8014088:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801408c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8014090:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 8014094:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8014098:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801409c:	4a31      	ldr	r2, [pc, #196]	; (8014164 <APP_ZIGBEE_NwkForm+0x11c>)
 801409e:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80140a2:	4613      	mov	r3, r2
 80140a4:	6818      	ldr	r0, [r3, #0]
 80140a6:	6859      	ldr	r1, [r3, #4]
 80140a8:	689a      	ldr	r2, [r3, #8]
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 80140ae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80140b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80140b6:	2201      	movs	r2, #1
 80140b8:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 80140ba:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80140be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80140c2:	2200      	movs	r2, #0
 80140c4:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 80140c6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80140ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80140ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80140d2:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 80140d4:	4b21      	ldr	r3, [pc, #132]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	463a      	mov	r2, r7
 80140da:	4611      	mov	r1, r2
 80140dc:	4618      	mov	r0, r3
 80140de:	f000 f85f 	bl	80141a0 <ZbStartupWait>
 80140e2:	4603      	mov	r3, r0
 80140e4:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 80140e8:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80140ec:	4a1e      	ldr	r2, [pc, #120]	; (8014168 <APP_ZIGBEE_NwkForm+0x120>)
 80140ee:	2101      	movs	r1, #1
 80140f0:	2000      	movs	r0, #0
 80140f2:	f7f3 fd45 	bl	8007b80 <logApplication>
    zigbee_app_info.join_status = status;
 80140f6:	4a19      	ldr	r2, [pc, #100]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 80140f8:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80140fc:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 80140fe:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8014102:	2b00      	cmp	r3, #0
 8014104:	d10e      	bne.n	8014124 <APP_ZIGBEE_NwkForm+0xdc>
    {
      zigbee_app_info.join_delay = 0U;
 8014106:	4b15      	ldr	r3, [pc, #84]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 8014108:	2200      	movs	r2, #0
 801410a:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 801410c:	4b13      	ldr	r3, [pc, #76]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 801410e:	2201      	movs	r2, #1
 8014110:	741a      	strb	r2, [r3, #16]
      APP_DBG("Startup done !\n");
 8014112:	4a16      	ldr	r2, [pc, #88]	; (801416c <APP_ZIGBEE_NwkForm+0x124>)
 8014114:	2101      	movs	r1, #1
 8014116:	2000      	movs	r0, #0
 8014118:	f7f3 fd32 	bl	8007b80 <logApplication>
      /* USER CODE BEGIN 0 */
      BSP_LED_On(LED_BLUE);
 801411c:	2000      	movs	r0, #0
 801411e:	f7f3 ff57 	bl	8007fd0 <BSP_LED_On>
 8014122:	e00d      	b.n	8014140 <APP_ZIGBEE_NwkForm+0xf8>
      /* USER CODE END 0 */
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 8014124:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014128:	4a11      	ldr	r2, [pc, #68]	; (8014170 <APP_ZIGBEE_NwkForm+0x128>)
 801412a:	2101      	movs	r1, #1
 801412c:	2000      	movs	r0, #0
 801412e:	f7f3 fd27 	bl	8007b80 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 8014132:	f7f3 ffef 	bl	8008114 <HAL_GetTick>
 8014136:	4603      	mov	r3, r0
 8014138:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801413c:	4a07      	ldr	r2, [pc, #28]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 801413e:	60d3      	str	r3, [r2, #12]
      /* USER CODE END 1 */
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 8014140:	4b06      	ldr	r3, [pc, #24]	; (801415c <APP_ZIGBEE_NwkForm+0x114>)
 8014142:	7a5b      	ldrb	r3, [r3, #9]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d003      	beq.n	8014150 <APP_ZIGBEE_NwkForm+0x108>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8014148:	2100      	movs	r1, #0
 801414a:	2004      	movs	r0, #4
 801414c:	f000 feb0 	bl	8014eb0 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN NW_FORM */
  /* USER CODE END NW_FORM */
}
 8014150:	bf00      	nop
 8014152:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 8014156:	46bd      	mov	sp, r7
 8014158:	bd90      	pop	{r4, r7, pc}
 801415a:	bf00      	nop
 801415c:	20000818 	.word	0x20000818
 8014160:	08016744 	.word	0x08016744
 8014164:	08016b28 	.word	0x08016b28
 8014168:	0801677c 	.word	0x0801677c
 801416c:	080167a4 	.word	0x080167a4
 8014170:	080167b4 	.word	0x080167b4

08014174 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	4603      	mov	r3, r0
 801417c:	6039      	str	r1, [r7, #0]
 801417e:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	60fb      	str	r3, [r7, #12]

  info->status = status;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	79fa      	ldrb	r2, [r7, #7]
 8014188:	705a      	strb	r2, [r3, #1]
  info->active = false;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8014190:	2008      	movs	r0, #8
 8014192:	f000 feb9 	bl	8014f08 <UTIL_SEQ_SetEvt>
}
 8014196:	bf00      	nop
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
	...

080141a0 <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 80141aa:	2002      	movs	r0, #2
 80141ac:	f000 ff7e 	bl	80150ac <malloc>
 80141b0:	4603      	mov	r3, r0
 80141b2:	60fb      	str	r3, [r7, #12]
  if (info == NULL)
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d101      	bne.n	80141be <ZbStartupWait+0x1e>
  {
    return ZB_STATUS_ALLOC_FAIL;
 80141ba:	2370      	movs	r3, #112	; 0x70
 80141bc:	e021      	b.n	8014202 <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 80141be:	2202      	movs	r2, #2
 80141c0:	2100      	movs	r1, #0
 80141c2:	68f8      	ldr	r0, [r7, #12]
 80141c4:	f001 f9e4 	bl	8015590 <memset>

  info->active = true;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2201      	movs	r2, #1
 80141cc:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	4a0e      	ldr	r2, [pc, #56]	; (801420c <ZbStartupWait+0x6c>)
 80141d2:	6839      	ldr	r1, [r7, #0]
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7fd fbad 	bl	8011934 <ZbStartup>
 80141da:	4603      	mov	r3, r0
 80141dc:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 80141de:	7afb      	ldrb	r3, [r7, #11]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d004      	beq.n	80141ee <ZbStartupWait+0x4e>
  {
    free(info);
 80141e4:	68f8      	ldr	r0, [r7, #12]
 80141e6:	f000 ff69 	bl	80150bc <free>
    return status;
 80141ea:	7afb      	ldrb	r3, [r7, #11]
 80141ec:	e009      	b.n	8014202 <ZbStartupWait+0x62>
  }

  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 80141ee:	2008      	movs	r0, #8
 80141f0:	f000 feaa 	bl	8014f48 <UTIL_SEQ_WaitEvt>
  status = info->status;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	785b      	ldrb	r3, [r3, #1]
 80141f8:	72fb      	strb	r3, [r7, #11]
  free(info);
 80141fa:	68f8      	ldr	r0, [r7, #12]
 80141fc:	f000 ff5e 	bl	80150bc <free>
  return status;
 8014200:	7afb      	ldrb	r3, [r7, #11]
}
 8014202:	4618      	mov	r0, r3
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	08014175 	.word	0x08014175

08014210 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
  switch (ErrId)
  {
    default:
      APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 801421a:	2100      	movs	r1, #0
 801421c:	4803      	ldr	r0, [pc, #12]	; (801422c <APP_ZIGBEE_Error+0x1c>)
 801421e:	f000 f807 	bl	8014230 <APP_ZIGBEE_TraceError>
      break;
 8014222:	bf00      	nop
  }
}
 8014224:	bf00      	nop
 8014226:	3708      	adds	r7, #8
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	080167f4 	.word	0x080167f4

08014230 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b084      	sub	sp, #16
 8014234:	af02      	add	r7, sp, #8
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	9300      	str	r3, [sp, #0]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	4a04      	ldr	r2, [pc, #16]	; (8014254 <APP_ZIGBEE_TraceError+0x24>)
 8014242:	2101      	movs	r1, #1
 8014244:	2000      	movs	r0, #0
 8014246:	f7f3 fc9b 	bl	8007b80 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  /* USER CODE END TRACE_ERROR */

}
 801424a:	bf00      	nop
 801424c:	3708      	adds	r7, #8
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	08016804 	.word	0x08016804

08014258 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b098      	sub	sp, #96	; 0x60
 801425c:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 801425e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014262:	657b      	str	r3, [r7, #84]	; 0x54

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8014264:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014266:	f7fc f843 	bl	80102f0 <SHCI_GetWirelessFwInfo>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d004      	beq.n	801427a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014270:	2101      	movs	r1, #1
 8014272:	2001      	movs	r0, #1
 8014274:	f7ff ffcc 	bl	8014210 <APP_ZIGBEE_Error>
    /* print clusters allocated */
    APP_DBG("Clusters allocated are:");
    APP_DBG("temperature_meas Server on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
}
 8014278:	e083      	b.n	8014382 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x12a>
    APP_DBG("**********************************************************");
 801427a:	4a44      	ldr	r2, [pc, #272]	; (801438c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 801427c:	2101      	movs	r1, #1
 801427e:	2000      	movs	r0, #0
 8014280:	f7f3 fc7e 	bl	8007b80 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8014284:	4a42      	ldr	r2, [pc, #264]	; (8014390 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x138>)
 8014286:	2101      	movs	r1, #1
 8014288:	2000      	movs	r0, #0
 801428a:	f7f3 fc79 	bl	8007b80 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 801428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	4619      	mov	r1, r3
 8014294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014296:	785b      	ldrb	r3, [r3, #1]
 8014298:	461a      	mov	r2, r3
 801429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801429c:	789b      	ldrb	r3, [r3, #2]
 801429e:	9301      	str	r3, [sp, #4]
 80142a0:	9200      	str	r2, [sp, #0]
 80142a2:	460b      	mov	r3, r1
 80142a4:	4a3b      	ldr	r2, [pc, #236]	; (8014394 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 80142a6:	2101      	movs	r1, #1
 80142a8:	2000      	movs	r0, #0
 80142aa:	f7f3 fc69 	bl	8007b80 <logApplication>
    switch (p_wireless_info->StackType)
 80142ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142b0:	7a5b      	ldrb	r3, [r3, #9]
 80142b2:	2b30      	cmp	r3, #48	; 0x30
 80142b4:	d002      	beq.n	80142bc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 80142b6:	2b31      	cmp	r3, #49	; 0x31
 80142b8:	d006      	beq.n	80142c8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 80142ba:	e00b      	b.n	80142d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
        APP_DBG("FW Type : FFD Zigbee stack");
 80142bc:	4a36      	ldr	r2, [pc, #216]	; (8014398 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 80142be:	2101      	movs	r1, #1
 80142c0:	2000      	movs	r0, #0
 80142c2:	f7f3 fc5d 	bl	8007b80 <logApplication>
        break;
 80142c6:	e00a      	b.n	80142de <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_DBG("FW Type : RFD Zigbee stack");
 80142c8:	4a34      	ldr	r2, [pc, #208]	; (801439c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 80142ca:	2101      	movs	r1, #1
 80142cc:	2000      	movs	r0, #0
 80142ce:	f7f3 fc57 	bl	8007b80 <logApplication>
        break;
 80142d2:	e004      	b.n	80142de <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80142d4:	2101      	movs	r1, #1
 80142d6:	2001      	movs	r0, #1
 80142d8:	f7ff ff9a 	bl	8014210 <APP_ZIGBEE_Error>
        break;
 80142dc:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 80142de:	4b30      	ldr	r3, [pc, #192]	; (80143a0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 80142e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    char *pdel = NULL;
 80142e2:	2300      	movs	r3, #0
 80142e4:	64bb      	str	r3, [r7, #72]	; 0x48
      pdel = strchr(__PathProject__, '/');
 80142e6:	212f      	movs	r1, #47	; 0x2f
 80142e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80142ea:	f001 f959 	bl	80155a0 <strchr>
 80142ee:	64b8      	str	r0, [r7, #72]	; 0x48
    int index = (int)(pdel - __PathProject__);
 80142f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	647b      	str	r3, [r7, #68]	; 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 80142f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142fa:	9301      	str	r3, [sp, #4]
 80142fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014302:	4a28      	ldr	r2, [pc, #160]	; (80143a4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 8014304:	2101      	movs	r1, #1
 8014306:	2000      	movs	r0, #0
 8014308:	f7f3 fc3a 	bl	8007b80 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 801430c:	230b      	movs	r3, #11
 801430e:	4a26      	ldr	r2, [pc, #152]	; (80143a8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 8014310:	2101      	movs	r1, #1
 8014312:	2000      	movs	r0, #0
 8014314:	f7f3 fc34 	bl	8007b80 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 8014318:	4b24      	ldr	r3, [pc, #144]	; (80143ac <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 801431a:	4a25      	ldr	r2, [pc, #148]	; (80143b0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 801431c:	2101      	movs	r1, #1
 801431e:	2000      	movs	r0, #0
 8014320:	f7f3 fc2e 	bl	8007b80 <logApplication>
    Z09_LL_string[0] = 0;
 8014324:	2300      	movs	r3, #0
 8014326:	703b      	strb	r3, [r7, #0]
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 8014328:	2300      	movs	r3, #0
 801432a:	653b      	str	r3, [r7, #80]	; 0x50
 801432c:	e010      	b.n	8014350 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf8>
      sprintf(&Z09_LL_string[str_index*3], "%02x ", sec_key_ha[str_index]);
 801432e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014330:	4613      	mov	r3, r2
 8014332:	005b      	lsls	r3, r3, #1
 8014334:	4413      	add	r3, r2
 8014336:	463a      	mov	r2, r7
 8014338:	18d0      	adds	r0, r2, r3
 801433a:	4a1c      	ldr	r2, [pc, #112]	; (80143ac <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 801433c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801433e:	4413      	add	r3, r2
 8014340:	781b      	ldrb	r3, [r3, #0]
 8014342:	461a      	mov	r2, r3
 8014344:	491b      	ldr	r1, [pc, #108]	; (80143b4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 8014346:	f001 f887 	bl	8015458 <siprintf>
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 801434a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801434c:	3301      	adds	r3, #1
 801434e:	653b      	str	r3, [r7, #80]	; 0x50
 8014350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014352:	2b0f      	cmp	r3, #15
 8014354:	d9eb      	bls.n	801432e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd6>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 8014356:	463b      	mov	r3, r7
 8014358:	4a17      	ldr	r2, [pc, #92]	; (80143b8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 801435a:	2101      	movs	r1, #1
 801435c:	2000      	movs	r0, #0
 801435e:	f7f3 fc0f 	bl	8007b80 <logApplication>
    APP_DBG("Clusters allocated are:");
 8014362:	4a16      	ldr	r2, [pc, #88]	; (80143bc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 8014364:	2101      	movs	r1, #1
 8014366:	2000      	movs	r0, #0
 8014368:	f7f3 fc0a 	bl	8007b80 <logApplication>
    APP_DBG("temperature_meas Server on Endpoint %d", SW1_ENDPOINT);
 801436c:	2301      	movs	r3, #1
 801436e:	4a14      	ldr	r2, [pc, #80]	; (80143c0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x168>)
 8014370:	2101      	movs	r1, #1
 8014372:	2000      	movs	r0, #0
 8014374:	f7f3 fc04 	bl	8007b80 <logApplication>
    APP_DBG("**********************************************************");
 8014378:	4a04      	ldr	r2, [pc, #16]	; (801438c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 801437a:	2101      	movs	r1, #1
 801437c:	2000      	movs	r0, #0
 801437e:	f7f3 fbff 	bl	8007b80 <logApplication>
}
 8014382:	bf00      	nop
 8014384:	3758      	adds	r7, #88	; 0x58
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	08016828 	.word	0x08016828
 8014390:	08016864 	.word	0x08016864
 8014394:	08016880 	.word	0x08016880
 8014398:	08016898 	.word	0x08016898
 801439c:	080168b4 	.word	0x080168b4
 80143a0:	080166cc 	.word	0x080166cc
 80143a4:	080168d0 	.word	0x080168d0
 80143a8:	080168ec 	.word	0x080168ec
 80143ac:	08016b28 	.word	0x08016b28
 80143b0:	08016900 	.word	0x08016900
 80143b4:	08016910 	.word	0x08016910
 80143b8:	08016918 	.word	0x08016918
 80143bc:	0801692c 	.word	0x0801692c
 80143c0:	08016944 	.word	0x08016944

080143c4 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 80143cc:	4a04      	ldr	r2, [pc, #16]	; (80143e0 <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6013      	str	r3, [r2, #0]
}
 80143d2:	bf00      	nop
 80143d4:	370c      	adds	r7, #12
 80143d6:	46bd      	mov	sp, r7
 80143d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143dc:	4770      	bx	lr
 80143de:	bf00      	nop
 80143e0:	20000804 	.word	0x20000804

080143e4 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 80143e4:	b480      	push	{r7}
 80143e6:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 80143e8:	4b03      	ldr	r3, [pc, #12]	; (80143f8 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	330c      	adds	r3, #12
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	46bd      	mov	sp, r7
 80143f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f6:	4770      	bx	lr
 80143f8:	20000804 	.word	0x20000804

080143fc <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 80143fc:	b480      	push	{r7}
 80143fe:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 8014400:	4b03      	ldr	r3, [pc, #12]	; (8014410 <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	330b      	adds	r3, #11
}
 8014406:	4618      	mov	r0, r3
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr
 8014410:	20000804 	.word	0x20000804

08014414 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 8014414:	b480      	push	{r7}
 8014416:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 8014418:	4b03      	ldr	r3, [pc, #12]	; (8014428 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	330b      	adds	r3, #11
}
 801441e:	4618      	mov	r0, r3
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr
 8014428:	20000808 	.word	0x20000808

0801442c <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 801442c:	b480      	push	{r7}
 801442e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 8014430:	4b03      	ldr	r3, [pc, #12]	; (8014440 <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	330b      	adds	r3, #11
}
 8014436:	4618      	mov	r0, r3
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	2000080c 	.word	0x2000080c

08014444 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 801444a:	4b0f      	ldr	r3, [pc, #60]	; (8014488 <ZIGBEE_CmdTransfer+0x44>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	330c      	adds	r3, #12
 8014450:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8014452:	4b0d      	ldr	r3, [pc, #52]	; (8014488 <ZIGBEE_CmdTransfer+0x44>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	2200      	movs	r2, #0
 8014458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801445c:	725a      	strb	r2, [r3, #9]
 801445e:	2200      	movs	r2, #0
 8014460:	f042 0202 	orr.w	r2, r2, #2
 8014464:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	3302      	adds	r3, #2
 801446c:	b2da      	uxtb	r2, r3
 801446e:	4b06      	ldr	r3, [pc, #24]	; (8014488 <ZIGBEE_CmdTransfer+0x44>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	0092      	lsls	r2, r2, #2
 8014474:	b2d2      	uxtb	r2, r2
 8014476:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 8014478:	f7fc fa34 	bl	80108e4 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801447c:	f000 f827 	bl	80144ce <Wait_Getting_Ack_From_M0>
}
 8014480:	bf00      	nop
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	20000804 	.word	0x20000804

0801448c <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8014494:	f000 f822 	bl	80144dc <Receive_Ack_From_M0>
}
 8014498:	bf00      	nop
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 80144a8:	4a04      	ldr	r2, [pc, #16]	; (80144bc <TL_ZIGBEE_NotReceived+0x1c>)
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80144ae:	f000 f81d 	bl	80144ec <Receive_Notification_From_M0>
}
 80144b2:	bf00      	nop
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	20000808 	.word	0x20000808

080144c0 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80144c4:	2004      	movs	r0, #4
 80144c6:	f000 fd3f 	bl	8014f48 <UTIL_SEQ_WaitEvt>
}
 80144ca:	bf00      	nop
 80144cc:	bd80      	pop	{r7, pc}

080144ce <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 80144ce:	b580      	push	{r7, lr}
 80144d0:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 80144d2:	2002      	movs	r0, #2
 80144d4:	f000 fd38 	bl	8014f48 <UTIL_SEQ_WaitEvt>
}
 80144d8:	bf00      	nop
 80144da:	bd80      	pop	{r7, pc}

080144dc <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 80144e0:	2002      	movs	r0, #2
 80144e2:	f000 fd11 	bl	8014f08 <UTIL_SEQ_SetEvt>
}
 80144e6:	bf00      	nop
 80144e8:	bd80      	pop	{r7, pc}
	...

080144ec <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 80144f0:	4b05      	ldr	r3, [pc, #20]	; (8014508 <Receive_Notification_From_M0+0x1c>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	3301      	adds	r3, #1
 80144f6:	4a04      	ldr	r2, [pc, #16]	; (8014508 <Receive_Notification_From_M0+0x1c>)
 80144f8:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80144fa:	2100      	movs	r1, #0
 80144fc:	2001      	movs	r0, #1
 80144fe:	f000 fcd7 	bl	8014eb0 <UTIL_SEQ_SetTask>
}
 8014502:	bf00      	nop
 8014504:	bd80      	pop	{r7, pc}
 8014506:	bf00      	nop
 8014508:	20000810 	.word	0x20000810

0801450c <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8014514:	4a07      	ldr	r2, [pc, #28]	; (8014534 <TL_ZIGBEE_M0RequestReceived+0x28>)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 801451a:	4b07      	ldr	r3, [pc, #28]	; (8014538 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	3301      	adds	r3, #1
 8014520:	4a05      	ldr	r2, [pc, #20]	; (8014538 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8014522:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8014524:	2100      	movs	r1, #0
 8014526:	2002      	movs	r0, #2
 8014528:	f000 fcc2 	bl	8014eb0 <UTIL_SEQ_SetTask>
}
 801452c:	bf00      	nop
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	2000080c 	.word	0x2000080c
 8014538:	20000814 	.word	0x20000814

0801453c <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	af00      	add	r7, sp, #0
  ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 8014540:	4b06      	ldr	r3, [pc, #24]	; (801455c <APP_ZIGBEE_TL_INIT+0x20>)
 8014542:	4a07      	ldr	r2, [pc, #28]	; (8014560 <APP_ZIGBEE_TL_INIT+0x24>)
 8014544:	601a      	str	r2, [r3, #0]
  ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 8014546:	4b05      	ldr	r3, [pc, #20]	; (801455c <APP_ZIGBEE_TL_INIT+0x20>)
 8014548:	4a06      	ldr	r2, [pc, #24]	; (8014564 <APP_ZIGBEE_TL_INIT+0x28>)
 801454a:	605a      	str	r2, [r3, #4]
  ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 801454c:	4b03      	ldr	r3, [pc, #12]	; (801455c <APP_ZIGBEE_TL_INIT+0x20>)
 801454e:	4a06      	ldr	r2, [pc, #24]	; (8014568 <APP_ZIGBEE_TL_INIT+0x2c>)
 8014550:	609a      	str	r2, [r3, #8]
  TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 8014552:	4802      	ldr	r0, [pc, #8]	; (801455c <APP_ZIGBEE_TL_INIT+0x20>)
 8014554:	f7fc f9aa 	bl	80108ac <TL_ZIGBEE_Init>
}
 8014558:	bf00      	nop
 801455a:	bd80      	pop	{r7, pc}
 801455c:	200300d8 	.word	0x200300d8
 8014560:	20030838 	.word	0x20030838
 8014564:	20030944 	.word	0x20030944
 8014568:	20030a50 	.word	0x20030a50

0801456c <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 8014570:	4b05      	ldr	r3, [pc, #20]	; (8014588 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d004      	beq.n	8014582 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 8014578:	4b03      	ldr	r3, [pc, #12]	; (8014588 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 801457a:	2200      	movs	r2, #0
 801457c:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 801457e:	f7fe f85d 	bl	801263c <Zigbee_CallBackProcessing>
  }
}
 8014582:	bf00      	nop
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	20000810 	.word	0x20000810

0801458c <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
  if (CptReceiveRequestFromM0 != 0)
 8014590:	4b05      	ldr	r3, [pc, #20]	; (80145a8 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d004      	beq.n	80145a2 <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
  {
    CptReceiveRequestFromM0 = 0;
 8014598:	4b03      	ldr	r3, [pc, #12]	; (80145a8 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 801459a:	2200      	movs	r2, #0
 801459c:	601a      	str	r2, [r3, #0]
    Zigbee_M0RequestProcessing();
 801459e:	f7ff fbd3 	bl	8013d48 <Zigbee_M0RequestProcessing>
  }
}
 80145a2:	bf00      	nop
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	20000814 	.word	0x20000814

080145ac <updateAttr>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

int updateAttr(long long value) {
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	e9c7 0100 	strd	r0, r1, [r7]
	enum ZclStatusCodeT status;

	status = ZbZclAttrIntegerWrite(zigbee_app_info.temperature_meas_server_1, ZCL_TEMP_MEAS_ATTR_MEAS_VAL, value);
 80145b6:	4b0d      	ldr	r3, [pc, #52]	; (80145ec <updateAttr+0x40>)
 80145b8:	6958      	ldr	r0, [r3, #20]
 80145ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145be:	2100      	movs	r1, #0
 80145c0:	f7ec fa0f 	bl	80009e2 <ZbZclAttrIntegerWrite>
 80145c4:	4603      	mov	r3, r0
 80145c6:	73fb      	strb	r3, [r7, #15]

	if (status != ZCL_STATUS_SUCCESS) {
 80145c8:	7bfb      	ldrb	r3, [r7, #15]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d005      	beq.n	80145da <updateAttr+0x2e>
		BSP_LED_Toggle(LED_RED);
 80145ce:	2002      	movs	r0, #2
 80145d0:	f7f3 fd18 	bl	8008004 <BSP_LED_Toggle>
		return -1;
 80145d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145d8:	e003      	b.n	80145e2 <updateAttr+0x36>
	} else {
		BSP_LED_Toggle(LED_GREEN);
 80145da:	2001      	movs	r0, #1
 80145dc:	f7f3 fd12 	bl	8008004 <BSP_LED_Toggle>
		return 0;
 80145e0:	2300      	movs	r3, #0
	}
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3710      	adds	r7, #16
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	20000818 	.word	0x20000818

080145f0 <LL_PWR_EnableBootC2>:
{
 80145f0:	b480      	push	{r7}
 80145f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80145f4:	4b05      	ldr	r3, [pc, #20]	; (801460c <LL_PWR_EnableBootC2+0x1c>)
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	4a04      	ldr	r2, [pc, #16]	; (801460c <LL_PWR_EnableBootC2+0x1c>)
 80145fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145fe:	60d3      	str	r3, [r2, #12]
}
 8014600:	bf00      	nop
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr
 801460a:	bf00      	nop
 801460c:	58000400 	.word	0x58000400

08014610 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014610:	b480      	push	{r7}
 8014612:	b083      	sub	sp, #12
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014618:	4b06      	ldr	r3, [pc, #24]	; (8014634 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801461a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801461e:	4905      	ldr	r1, [pc, #20]	; (8014634 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	4313      	orrs	r3, r2
 8014624:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8014628:	bf00      	nop
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr
 8014634:	58000800 	.word	0x58000800

08014638 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014638:	b480      	push	{r7}
 801463a:	b083      	sub	sp, #12
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014640:	4b05      	ldr	r3, [pc, #20]	; (8014658 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014642:	6a1a      	ldr	r2, [r3, #32]
 8014644:	4904      	ldr	r1, [pc, #16]	; (8014658 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	4313      	orrs	r3, r2
 801464a:	620b      	str	r3, [r1, #32]
}
 801464c:	bf00      	nop
 801464e:	370c      	adds	r7, #12
 8014650:	46bd      	mov	sp, r7
 8014652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014656:	4770      	bx	lr
 8014658:	58000800 	.word	0x58000800

0801465c <LL_AHB3_GRP1_EnableClock>:
{
 801465c:	b480      	push	{r7}
 801465e:	b085      	sub	sp, #20
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801466a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	4313      	orrs	r3, r2
 8014672:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4013      	ands	r3, r2
 801467e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014680:	68fb      	ldr	r3, [r7, #12]
}
 8014682:	bf00      	nop
 8014684:	3714      	adds	r7, #20
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801468e:	b480      	push	{r7}
 8014690:	b085      	sub	sp, #20
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801469a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801469e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4313      	orrs	r3, r2
 80146a6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80146aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80146ae:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	4013      	ands	r3, r2
 80146b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80146b8:	68fb      	ldr	r3, [r7, #12]
}
 80146ba:	bf00      	nop
 80146bc:	3714      	adds	r7, #20
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr

080146c6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80146c6:	b480      	push	{r7}
 80146c8:	b083      	sub	sp, #12
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	601a      	str	r2, [r3, #0]
}
 80146da:	bf00      	nop
 80146dc:	370c      	adds	r7, #12
 80146de:	46bd      	mov	sp, r7
 80146e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e4:	4770      	bx	lr

080146e6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80146e6:	b480      	push	{r7}
 80146e8:	b083      	sub	sp, #12
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f043 0201 	orr.w	r2, r3, #1
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	601a      	str	r2, [r3, #0]
}
 80146fa:	bf00      	nop
 80146fc:	370c      	adds	r7, #12
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr

08014706 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014706:	b480      	push	{r7}
 8014708:	b083      	sub	sp, #12
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
 801470e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	685a      	ldr	r2, [r3, #4]
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	041b      	lsls	r3, r3, #16
 8014718:	43db      	mvns	r3, r3
 801471a:	401a      	ands	r2, r3
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	605a      	str	r2, [r3, #4]
}
 8014720:	bf00      	nop
 8014722:	370c      	adds	r7, #12
 8014724:	46bd      	mov	sp, r7
 8014726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472a:	4770      	bx	lr

0801472c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	685a      	ldr	r2, [r3, #4]
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	041b      	lsls	r3, r3, #16
 801473e:	431a      	orrs	r2, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	605a      	str	r2, [r3, #4]
}
 8014744:	bf00      	nop
 8014746:	370c      	adds	r7, #12
 8014748:	46bd      	mov	sp, r7
 801474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474e:	4770      	bx	lr

08014750 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014750:	b480      	push	{r7}
 8014752:	b083      	sub	sp, #12
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	685a      	ldr	r2, [r3, #4]
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	43db      	mvns	r3, r3
 8014762:	401a      	ands	r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	605a      	str	r2, [r3, #4]
}
 8014768:	bf00      	nop
 801476a:	370c      	adds	r7, #12
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr

08014774 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	685a      	ldr	r2, [r3, #4]
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	431a      	orrs	r2, r3
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	605a      	str	r2, [r3, #4]
}
 801478a:	bf00      	nop
 801478c:	370c      	adds	r7, #12
 801478e:	46bd      	mov	sp, r7
 8014790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014794:	4770      	bx	lr

08014796 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014796:	b480      	push	{r7}
 8014798:	b083      	sub	sp, #12
 801479a:	af00      	add	r7, sp, #0
 801479c:	6078      	str	r0, [r7, #4]
 801479e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	683a      	ldr	r2, [r7, #0]
 80147a4:	609a      	str	r2, [r3, #8]
}
 80147a6:	bf00      	nop
 80147a8:	370c      	adds	r7, #12
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr

080147b2 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80147b2:	b480      	push	{r7}
 80147b4:	b083      	sub	sp, #12
 80147b6:	af00      	add	r7, sp, #0
 80147b8:	6078      	str	r0, [r7, #4]
 80147ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	041a      	lsls	r2, r3, #16
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	609a      	str	r2, [r3, #8]
}
 80147c4:	bf00      	nop
 80147c6:	370c      	adds	r7, #12
 80147c8:	46bd      	mov	sp, r7
 80147ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ce:	4770      	bx	lr

080147d0 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80147d0:	b480      	push	{r7}
 80147d2:	b083      	sub	sp, #12
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	68da      	ldr	r2, [r3, #12]
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	4013      	ands	r3, r2
 80147e2:	683a      	ldr	r2, [r7, #0]
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d101      	bne.n	80147ec <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80147e8:	2301      	movs	r3, #1
 80147ea:	e000      	b.n	80147ee <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80147ec:	2300      	movs	r3, #0
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	370c      	adds	r7, #12
 80147f2:	46bd      	mov	sp, r7
 80147f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f8:	4770      	bx	lr

080147fa <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80147fa:	b480      	push	{r7}
 80147fc:	b083      	sub	sp, #12
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
 8014802:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	69da      	ldr	r2, [r3, #28]
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	4013      	ands	r3, r2
 801480c:	683a      	ldr	r2, [r7, #0]
 801480e:	429a      	cmp	r2, r3
 8014810:	d101      	bne.n	8014816 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8014812:	2301      	movs	r3, #1
 8014814:	e000      	b.n	8014818 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014816:	2300      	movs	r3, #0
}
 8014818:	4618      	mov	r0, r3
 801481a:	370c      	adds	r7, #12
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr

08014824 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014828:	2102      	movs	r1, #2
 801482a:	4828      	ldr	r0, [pc, #160]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 801482c:	f7ff ffe5 	bl	80147fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8014830:	4603      	mov	r3, r0
 8014832:	2b00      	cmp	r3, #0
 8014834:	d008      	beq.n	8014848 <HW_IPCC_Rx_Handler+0x24>
 8014836:	4b25      	ldr	r3, [pc, #148]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 8014838:	685b      	ldr	r3, [r3, #4]
 801483a:	f003 0302 	and.w	r3, r3, #2
 801483e:	2b00      	cmp	r3, #0
 8014840:	d102      	bne.n	8014848 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8014842:	f000 f8f1 	bl	8014a28 <HW_IPCC_SYS_EvtHandler>
 8014846:	e03e      	b.n	80148c6 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 8014848:	2104      	movs	r1, #4
 801484a:	4820      	ldr	r0, [pc, #128]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 801484c:	f7ff ffd5 	bl	80147fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8014850:	4603      	mov	r3, r0
 8014852:	2b00      	cmp	r3, #0
 8014854:	d008      	beq.n	8014868 <HW_IPCC_Rx_Handler+0x44>
 8014856:	4b1d      	ldr	r3, [pc, #116]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	f003 0304 	and.w	r3, r3, #4
 801485e:	2b00      	cmp	r3, #0
 8014860:	d102      	bne.n	8014868 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 8014862:	f000 f923 	bl	8014aac <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 8014866:	e02e      	b.n	80148c6 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 8014868:	2110      	movs	r1, #16
 801486a:	4818      	ldr	r0, [pc, #96]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 801486c:	f7ff ffc5 	bl	80147fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d008      	beq.n	8014888 <HW_IPCC_Rx_Handler+0x64>
 8014876:	4b15      	ldr	r3, [pc, #84]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	f003 0310 	and.w	r3, r3, #16
 801487e:	2b00      	cmp	r3, #0
 8014880:	d102      	bne.n	8014888 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 8014882:	f000 f91f 	bl	8014ac4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 8014886:	e01e      	b.n	80148c6 <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014888:	2101      	movs	r1, #1
 801488a:	4810      	ldr	r0, [pc, #64]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 801488c:	f7ff ffb5 	bl	80147fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8014890:	4603      	mov	r3, r0
 8014892:	2b00      	cmp	r3, #0
 8014894:	d008      	beq.n	80148a8 <HW_IPCC_Rx_Handler+0x84>
 8014896:	4b0d      	ldr	r3, [pc, #52]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	f003 0301 	and.w	r3, r3, #1
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d102      	bne.n	80148a8 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 80148a2:	f000 f885 	bl	80149b0 <HW_IPCC_BLE_EvtHandler>
 80148a6:	e00e      	b.n	80148c6 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80148a8:	2108      	movs	r1, #8
 80148aa:	4808      	ldr	r0, [pc, #32]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 80148ac:	f7ff ffa5 	bl	80147fa <LL_C2_IPCC_IsActiveFlag_CHx>
 80148b0:	4603      	mov	r3, r0
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d008      	beq.n	80148c8 <HW_IPCC_Rx_Handler+0xa4>
 80148b6:	4b05      	ldr	r3, [pc, #20]	; (80148cc <HW_IPCC_Rx_Handler+0xa8>)
 80148b8:	685b      	ldr	r3, [r3, #4]
 80148ba:	f003 0308 	and.w	r3, r3, #8
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d102      	bne.n	80148c8 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 80148c2:	f000 f959 	bl	8014b78 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80148c6:	bf00      	nop
 80148c8:	bf00      	nop
}
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	58000c00 	.word	0x58000c00

080148d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80148d4:	2102      	movs	r1, #2
 80148d6:	4820      	ldr	r0, [pc, #128]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 80148d8:	f7ff ff7a 	bl	80147d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 80148dc:	4603      	mov	r3, r0
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d107      	bne.n	80148f2 <HW_IPCC_Tx_Handler+0x22>
 80148e2:	4b1d      	ldr	r3, [pc, #116]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d101      	bne.n	80148f2 <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80148ee:	f000 f88f 	bl	8014a10 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 80148f2:	2104      	movs	r1, #4
 80148f4:	4818      	ldr	r0, [pc, #96]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 80148f6:	f7ff ff6b 	bl	80147d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 80148fa:	4603      	mov	r3, r0
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d108      	bne.n	8014912 <HW_IPCC_Tx_Handler+0x42>
 8014900:	4b15      	ldr	r3, [pc, #84]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014908:	2b00      	cmp	r3, #0
 801490a:	d102      	bne.n	8014912 <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 801490c:	f000 f8c2 	bl	8014a94 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 8014910:	e01e      	b.n	8014950 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014912:	2108      	movs	r1, #8
 8014914:	4810      	ldr	r0, [pc, #64]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 8014916:	f7ff ff5b 	bl	80147d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 801491a:	4603      	mov	r3, r0
 801491c:	2b00      	cmp	r3, #0
 801491e:	d108      	bne.n	8014932 <HW_IPCC_Tx_Handler+0x62>
 8014920:	4b0d      	ldr	r3, [pc, #52]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014928:	2b00      	cmp	r3, #0
 801492a:	d102      	bne.n	8014932 <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 801492c:	f000 f906 	bl	8014b3c <HW_IPCC_MM_FreeBufHandler>
 8014930:	e00e      	b.n	8014950 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014932:	2120      	movs	r1, #32
 8014934:	4808      	ldr	r0, [pc, #32]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 8014936:	f7ff ff4b 	bl	80147d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d108      	bne.n	8014952 <HW_IPCC_Tx_Handler+0x82>
 8014940:	4b05      	ldr	r3, [pc, #20]	; (8014958 <HW_IPCC_Tx_Handler+0x88>)
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014948:	2b00      	cmp	r3, #0
 801494a:	d102      	bne.n	8014952 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801494c:	f000 f83c 	bl	80149c8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8014950:	bf00      	nop
 8014952:	bf00      	nop
}
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	58000c00 	.word	0x58000c00

0801495c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8014960:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014964:	f7ff fe93 	bl	801468e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8014968:	f44f 7000 	mov.w	r0, #512	; 0x200
 801496c:	f7ff fe64 	bl	8014638 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8014970:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014974:	f7ff fe4c 	bl	8014610 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8014978:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801497a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801497c:	f7ff fe38 	bl	80145f0 <LL_PWR_EnableBootC2>

  return;
 8014980:	bf00      	nop
}
 8014982:	bd80      	pop	{r7, pc}

08014984 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8014984:	b580      	push	{r7, lr}
 8014986:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8014988:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801498c:	f7ff fe66 	bl	801465c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8014990:	4806      	ldr	r0, [pc, #24]	; (80149ac <HW_IPCC_Init+0x28>)
 8014992:	f7ff fea8 	bl	80146e6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8014996:	4805      	ldr	r0, [pc, #20]	; (80149ac <HW_IPCC_Init+0x28>)
 8014998:	f7ff fe95 	bl	80146c6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801499c:	202c      	movs	r0, #44	; 0x2c
 801499e:	f7f4 ff08 	bl	80097b2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80149a2:	202d      	movs	r0, #45	; 0x2d
 80149a4:	f7f4 ff05 	bl	80097b2 <HAL_NVIC_EnableIRQ>

  return;
 80149a8:	bf00      	nop
}
 80149aa:	bd80      	pop	{r7, pc}
 80149ac:	58000c00 	.word	0x58000c00

080149b0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80149b4:	f7fb fec2 	bl	801073c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80149b8:	2101      	movs	r1, #1
 80149ba:	4802      	ldr	r0, [pc, #8]	; (80149c4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80149bc:	f7ff feeb 	bl	8014796 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80149c0:	bf00      	nop
}
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	58000c00 	.word	0x58000c00

080149c8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80149cc:	2120      	movs	r1, #32
 80149ce:	4803      	ldr	r0, [pc, #12]	; (80149dc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80149d0:	f7ff feac 	bl	801472c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80149d4:	f7fb fee2 	bl	801079c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80149d8:	bf00      	nop
}
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	58000c00 	.word	0x58000c00

080149e0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80149e4:	2102      	movs	r1, #2
 80149e6:	4802      	ldr	r0, [pc, #8]	; (80149f0 <HW_IPCC_SYS_Init+0x10>)
 80149e8:	f7ff feb2 	bl	8014750 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80149ec:	bf00      	nop
}
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	58000c00 	.word	0x58000c00

080149f4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80149f8:	2102      	movs	r1, #2
 80149fa:	4804      	ldr	r0, [pc, #16]	; (8014a0c <HW_IPCC_SYS_SendCmd+0x18>)
 80149fc:	f7ff fed9 	bl	80147b2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014a00:	2102      	movs	r1, #2
 8014a02:	4802      	ldr	r0, [pc, #8]	; (8014a0c <HW_IPCC_SYS_SendCmd+0x18>)
 8014a04:	f7ff fe7f 	bl	8014706 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014a08:	bf00      	nop
}
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	58000c00 	.word	0x58000c00

08014a10 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014a14:	2102      	movs	r1, #2
 8014a16:	4803      	ldr	r0, [pc, #12]	; (8014a24 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014a18:	f7ff fe88 	bl	801472c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014a1c:	f7fb ff0e 	bl	801083c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014a20:	bf00      	nop
}
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	58000c00 	.word	0x58000c00

08014a28 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014a2c:	f7fb ff1c 	bl	8010868 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014a30:	2102      	movs	r1, #2
 8014a32:	4802      	ldr	r0, [pc, #8]	; (8014a3c <HW_IPCC_SYS_EvtHandler+0x14>)
 8014a34:	f7ff feaf 	bl	8014796 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014a38:	bf00      	nop
}
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	58000c00 	.word	0x58000c00

08014a40 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014a44:	2104      	movs	r1, #4
 8014a46:	4804      	ldr	r0, [pc, #16]	; (8014a58 <HW_IPCC_ZIGBEE_Init+0x18>)
 8014a48:	f7ff fe82 	bl	8014750 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014a4c:	2110      	movs	r1, #16
 8014a4e:	4802      	ldr	r0, [pc, #8]	; (8014a58 <HW_IPCC_ZIGBEE_Init+0x18>)
 8014a50:	f7ff fe7e 	bl	8014750 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014a54:	bf00      	nop
}
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	58000c00 	.word	0x58000c00

08014a5c <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8014a60:	2104      	movs	r1, #4
 8014a62:	4804      	ldr	r0, [pc, #16]	; (8014a74 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8014a64:	f7ff fea5 	bl	80147b2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8014a68:	2104      	movs	r1, #4
 8014a6a:	4802      	ldr	r0, [pc, #8]	; (8014a74 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8014a6c:	f7ff fe4b 	bl	8014706 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014a70:	bf00      	nop
}
 8014a72:	bd80      	pop	{r7, pc}
 8014a74:	58000c00 	.word	0x58000c00

08014a78 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014a7c:	2104      	movs	r1, #4
 8014a7e:	4804      	ldr	r0, [pc, #16]	; (8014a90 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8014a80:	f7ff fe89 	bl	8014796 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014a84:	2104      	movs	r1, #4
 8014a86:	4802      	ldr	r0, [pc, #8]	; (8014a90 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8014a88:	f7ff fe62 	bl	8014750 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014a8c:	bf00      	nop
}
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	58000c00 	.word	0x58000c00

08014a94 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8014a98:	2104      	movs	r1, #4
 8014a9a:	4803      	ldr	r0, [pc, #12]	; (8014aa8 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 8014a9c:	f7ff fe46 	bl	801472c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 8014aa0:	f7fb ff2e 	bl	8010900 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 8014aa4:	bf00      	nop
}
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	58000c00 	.word	0x58000c00

08014aac <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014ab0:	2104      	movs	r1, #4
 8014ab2:	4803      	ldr	r0, [pc, #12]	; (8014ac0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 8014ab4:	f7ff fe5e 	bl	8014774 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 8014ab8:	f7fb ff2e 	bl	8010918 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 8014abc:	bf00      	nop
}
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	58000c00 	.word	0x58000c00

08014ac4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014ac8:	2110      	movs	r1, #16
 8014aca:	4803      	ldr	r0, [pc, #12]	; (8014ad8 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 8014acc:	f7ff fe52 	bl	8014774 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 8014ad0:	f7fb ff3c 	bl	801094c <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 8014ad4:	bf00      	nop
}
 8014ad6:	bd80      	pop	{r7, pc}
 8014ad8:	58000c00 	.word	0x58000c00

08014adc <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014ae0:	2110      	movs	r1, #16
 8014ae2:	4804      	ldr	r0, [pc, #16]	; (8014af4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8014ae4:	f7ff fe57 	bl	8014796 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014ae8:	2110      	movs	r1, #16
 8014aea:	4802      	ldr	r0, [pc, #8]	; (8014af4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8014aec:	f7ff fe30 	bl	8014750 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014af0:	bf00      	nop
}
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	58000c00 	.word	0x58000c00

08014af8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8014b00:	2108      	movs	r1, #8
 8014b02:	480c      	ldr	r0, [pc, #48]	; (8014b34 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014b04:	f7ff fe64 	bl	80147d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d007      	beq.n	8014b1e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8014b0e:	4a0a      	ldr	r2, [pc, #40]	; (8014b38 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014b14:	2108      	movs	r1, #8
 8014b16:	4807      	ldr	r0, [pc, #28]	; (8014b34 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014b18:	f7ff fdf5 	bl	8014706 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8014b1c:	e006      	b.n	8014b2c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014b22:	2108      	movs	r1, #8
 8014b24:	4803      	ldr	r0, [pc, #12]	; (8014b34 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014b26:	f7ff fe44 	bl	80147b2 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8014b2a:	bf00      	nop
}
 8014b2c:	3708      	adds	r7, #8
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	58000c00 	.word	0x58000c00
 8014b38:	20000830 	.word	0x20000830

08014b3c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014b40:	2108      	movs	r1, #8
 8014b42:	4806      	ldr	r0, [pc, #24]	; (8014b5c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014b44:	f7ff fdf2 	bl	801472c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8014b48:	4b05      	ldr	r3, [pc, #20]	; (8014b60 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014b4e:	2108      	movs	r1, #8
 8014b50:	4802      	ldr	r0, [pc, #8]	; (8014b5c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014b52:	f7ff fe2e 	bl	80147b2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014b56:	bf00      	nop
}
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	58000c00 	.word	0x58000c00
 8014b60:	20000830 	.word	0x20000830

08014b64 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014b68:	2108      	movs	r1, #8
 8014b6a:	4802      	ldr	r0, [pc, #8]	; (8014b74 <HW_IPCC_TRACES_Init+0x10>)
 8014b6c:	f7ff fdf0 	bl	8014750 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014b70:	bf00      	nop
}
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	58000c00 	.word	0x58000c00

08014b78 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8014b7c:	f7fb ff86 	bl	8010a8c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014b80:	2108      	movs	r1, #8
 8014b82:	4802      	ldr	r0, [pc, #8]	; (8014b8c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014b84:	f7ff fe07 	bl	8014796 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014b88:	bf00      	nop
}
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	58000c00 	.word	0x58000c00

08014b90 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8014b90:	b480      	push	{r7}
 8014b92:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8014b94:	4b05      	ldr	r3, [pc, #20]	; (8014bac <UTIL_LPM_Init+0x1c>)
 8014b96:	2200      	movs	r2, #0
 8014b98:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014b9a:	4b05      	ldr	r3, [pc, #20]	; (8014bb0 <UTIL_LPM_Init+0x20>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014ba0:	bf00      	nop
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr
 8014baa:	bf00      	nop
 8014bac:	20000834 	.word	0x20000834
 8014bb0:	20000838 	.word	0x20000838

08014bb4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b087      	sub	sp, #28
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8014bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8014bc6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014bca:	b672      	cpsid	i
}
 8014bcc:	bf00      	nop
  
  switch( state )
 8014bce:	78fb      	ldrb	r3, [r7, #3]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d008      	beq.n	8014be6 <UTIL_LPM_SetStopMode+0x32>
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d10e      	bne.n	8014bf6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8014bd8:	4b0d      	ldr	r3, [pc, #52]	; (8014c10 <UTIL_LPM_SetStopMode+0x5c>)
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	4313      	orrs	r3, r2
 8014be0:	4a0b      	ldr	r2, [pc, #44]	; (8014c10 <UTIL_LPM_SetStopMode+0x5c>)
 8014be2:	6013      	str	r3, [r2, #0]
      break;
 8014be4:	e008      	b.n	8014bf8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	43da      	mvns	r2, r3
 8014bea:	4b09      	ldr	r3, [pc, #36]	; (8014c10 <UTIL_LPM_SetStopMode+0x5c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	4013      	ands	r3, r2
 8014bf0:	4a07      	ldr	r2, [pc, #28]	; (8014c10 <UTIL_LPM_SetStopMode+0x5c>)
 8014bf2:	6013      	str	r3, [r2, #0]
      break;
 8014bf4:	e000      	b.n	8014bf8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8014bf6:	bf00      	nop
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f383 8810 	msr	PRIMASK, r3
}
 8014c02:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014c04:	bf00      	nop
 8014c06:	371c      	adds	r7, #28
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr
 8014c10:	20000834 	.word	0x20000834

08014c14 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8014c14:	b480      	push	{r7}
 8014c16:	b087      	sub	sp, #28
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c20:	f3ef 8310 	mrs	r3, PRIMASK
 8014c24:	613b      	str	r3, [r7, #16]
  return(result);
 8014c26:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014c28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014c2a:	b672      	cpsid	i
}
 8014c2c:	bf00      	nop
  
  switch(state)
 8014c2e:	78fb      	ldrb	r3, [r7, #3]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d008      	beq.n	8014c46 <UTIL_LPM_SetOffMode+0x32>
 8014c34:	2b01      	cmp	r3, #1
 8014c36:	d10e      	bne.n	8014c56 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014c38:	4b0d      	ldr	r3, [pc, #52]	; (8014c70 <UTIL_LPM_SetOffMode+0x5c>)
 8014c3a:	681a      	ldr	r2, [r3, #0]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	4313      	orrs	r3, r2
 8014c40:	4a0b      	ldr	r2, [pc, #44]	; (8014c70 <UTIL_LPM_SetOffMode+0x5c>)
 8014c42:	6013      	str	r3, [r2, #0]
      break;
 8014c44:	e008      	b.n	8014c58 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	43da      	mvns	r2, r3
 8014c4a:	4b09      	ldr	r3, [pc, #36]	; (8014c70 <UTIL_LPM_SetOffMode+0x5c>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	4013      	ands	r3, r2
 8014c50:	4a07      	ldr	r2, [pc, #28]	; (8014c70 <UTIL_LPM_SetOffMode+0x5c>)
 8014c52:	6013      	str	r3, [r2, #0]
      break;
 8014c54:	e000      	b.n	8014c58 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8014c56:	bf00      	nop
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	f383 8810 	msr	PRIMASK, r3
}
 8014c62:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014c64:	bf00      	nop
 8014c66:	371c      	adds	r7, #28
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6e:	4770      	bx	lr
 8014c70:	20000838 	.word	0x20000838

08014c74 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b090      	sub	sp, #64	; 0x40
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8014c7c:	4b73      	ldr	r3, [pc, #460]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8014c82:	4b72      	ldr	r3, [pc, #456]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	4013      	ands	r3, r2
 8014c8a:	4a70      	ldr	r2, [pc, #448]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014c8c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8014c8e:	4b70      	ldr	r3, [pc, #448]	; (8014e50 <UTIL_SEQ_Run+0x1dc>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8014c94:	4b6f      	ldr	r3, [pc, #444]	; (8014e54 <UTIL_SEQ_Run+0x1e0>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8014c9a:	4b6f      	ldr	r3, [pc, #444]	; (8014e58 <UTIL_SEQ_Run+0x1e4>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8014ca0:	4b6e      	ldr	r3, [pc, #440]	; (8014e5c <UTIL_SEQ_Run+0x1e8>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8014ca6:	e08d      	b.n	8014dc4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8014cac:	e002      	b.n	8014cb4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8014cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8014cb4:	4a6a      	ldr	r2, [pc, #424]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cbe:	401a      	ands	r2, r3
 8014cc0:	4b62      	ldr	r3, [pc, #392]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	4013      	ands	r3, r2
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d0f1      	beq.n	8014cae <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8014cca:	4a65      	ldr	r2, [pc, #404]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd4:	401a      	ands	r2, r3
 8014cd6:	4b5d      	ldr	r3, [pc, #372]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	4013      	ands	r3, r2
 8014cdc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8014cde:	4a60      	ldr	r2, [pc, #384]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ce2:	00db      	lsls	r3, r3, #3
 8014ce4:	4413      	add	r3, r2
 8014ce6:	685a      	ldr	r2, [r3, #4]
 8014ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cea:	4013      	ands	r3, r2
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d106      	bne.n	8014cfe <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8014cf0:	4a5b      	ldr	r2, [pc, #364]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cf4:	00db      	lsls	r3, r3, #3
 8014cf6:	4413      	add	r3, r2
 8014cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014cfc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8014cfe:	4a58      	ldr	r2, [pc, #352]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d02:	00db      	lsls	r3, r3, #3
 8014d04:	4413      	add	r3, r2
 8014d06:	685a      	ldr	r2, [r3, #4]
 8014d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0a:	4013      	ands	r3, r2
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f000 f973 	bl	8014ff8 <SEQ_BitPosition>
 8014d12:	4603      	mov	r3, r0
 8014d14:	461a      	mov	r2, r3
 8014d16:	4b53      	ldr	r3, [pc, #332]	; (8014e64 <UTIL_SEQ_Run+0x1f0>)
 8014d18:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8014d1a:	4a51      	ldr	r2, [pc, #324]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d1e:	00db      	lsls	r3, r3, #3
 8014d20:	4413      	add	r3, r2
 8014d22:	685a      	ldr	r2, [r3, #4]
 8014d24:	4b4f      	ldr	r3, [pc, #316]	; (8014e64 <UTIL_SEQ_Run+0x1f0>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	2101      	movs	r1, #1
 8014d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8014d2e:	43db      	mvns	r3, r3
 8014d30:	401a      	ands	r2, r3
 8014d32:	494b      	ldr	r1, [pc, #300]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d36:	00db      	lsls	r3, r3, #3
 8014d38:	440b      	add	r3, r1
 8014d3a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8014d40:	61bb      	str	r3, [r7, #24]
  return(result);
 8014d42:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014d44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8014d46:	b672      	cpsid	i
}
 8014d48:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8014d4a:	4b46      	ldr	r3, [pc, #280]	; (8014e64 <UTIL_SEQ_Run+0x1f0>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2201      	movs	r2, #1
 8014d50:	fa02 f303 	lsl.w	r3, r2, r3
 8014d54:	43da      	mvns	r2, r3
 8014d56:	4b3e      	ldr	r3, [pc, #248]	; (8014e50 <UTIL_SEQ_Run+0x1dc>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4013      	ands	r3, r2
 8014d5c:	4a3c      	ldr	r2, [pc, #240]	; (8014e50 <UTIL_SEQ_Run+0x1dc>)
 8014d5e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8014d60:	2302      	movs	r3, #2
 8014d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014d64:	e013      	b.n	8014d8e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8014d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d68:	3b01      	subs	r3, #1
 8014d6a:	4a3d      	ldr	r2, [pc, #244]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014d6c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8014d70:	4b3c      	ldr	r3, [pc, #240]	; (8014e64 <UTIL_SEQ_Run+0x1f0>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2201      	movs	r2, #1
 8014d76:	fa02 f303 	lsl.w	r3, r2, r3
 8014d7a:	43da      	mvns	r2, r3
 8014d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d7e:	3b01      	subs	r3, #1
 8014d80:	400a      	ands	r2, r1
 8014d82:	4937      	ldr	r1, [pc, #220]	; (8014e60 <UTIL_SEQ_Run+0x1ec>)
 8014d84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8014d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d8a:	3b01      	subs	r3, #1
 8014d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d1e8      	bne.n	8014d66 <UTIL_SEQ_Run+0xf2>
 8014d94:	6a3b      	ldr	r3, [r7, #32]
 8014d96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	f383 8810 	msr	PRIMASK, r3
}
 8014d9e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8014da0:	4b30      	ldr	r3, [pc, #192]	; (8014e64 <UTIL_SEQ_Run+0x1f0>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4a30      	ldr	r2, [pc, #192]	; (8014e68 <UTIL_SEQ_Run+0x1f4>)
 8014da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014daa:	4798      	blx	r3

    local_taskset = TaskSet;
 8014dac:	4b28      	ldr	r3, [pc, #160]	; (8014e50 <UTIL_SEQ_Run+0x1dc>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8014db2:	4b28      	ldr	r3, [pc, #160]	; (8014e54 <UTIL_SEQ_Run+0x1e0>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8014db8:	4b27      	ldr	r3, [pc, #156]	; (8014e58 <UTIL_SEQ_Run+0x1e4>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8014dbe:	4b27      	ldr	r3, [pc, #156]	; (8014e5c <UTIL_SEQ_Run+0x1e8>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8014dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc8:	401a      	ands	r2, r3
 8014dca:	4b20      	ldr	r3, [pc, #128]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	4013      	ands	r3, r2
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d005      	beq.n	8014de0 <UTIL_SEQ_Run+0x16c>
 8014dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd8:	4013      	ands	r3, r2
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	f43f af64 	beq.w	8014ca8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8014de0:	4b20      	ldr	r3, [pc, #128]	; (8014e64 <UTIL_SEQ_Run+0x1f0>)
 8014de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014de6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8014de8:	f000 f8f8 	bl	8014fdc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dec:	f3ef 8310 	mrs	r3, PRIMASK
 8014df0:	613b      	str	r3, [r7, #16]
  return(result);
 8014df2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8014df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8014df6:	b672      	cpsid	i
}
 8014df8:	bf00      	nop
  local_taskset = TaskSet;
 8014dfa:	4b15      	ldr	r3, [pc, #84]	; (8014e50 <UTIL_SEQ_Run+0x1dc>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8014e00:	4b14      	ldr	r3, [pc, #80]	; (8014e54 <UTIL_SEQ_Run+0x1e0>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8014e06:	4b14      	ldr	r3, [pc, #80]	; (8014e58 <UTIL_SEQ_Run+0x1e4>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8014e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e10:	401a      	ands	r2, r3
 8014e12:	4b0e      	ldr	r3, [pc, #56]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	4013      	ands	r3, r2
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d107      	bne.n	8014e2c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8014e1c:	4b0f      	ldr	r3, [pc, #60]	; (8014e5c <UTIL_SEQ_Run+0x1e8>)
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e22:	4013      	ands	r3, r2
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d101      	bne.n	8014e2c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8014e28:	f7f1 ffa9 	bl	8006d7e <UTIL_SEQ_Idle>
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f383 8810 	msr	PRIMASK, r3
}
 8014e36:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8014e38:	f000 f8d7 	bl	8014fea <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8014e3c:	4a03      	ldr	r2, [pc, #12]	; (8014e4c <UTIL_SEQ_Run+0x1d8>)
 8014e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e40:	6013      	str	r3, [r2, #0]

  return;
 8014e42:	bf00      	nop
}
 8014e44:	3740      	adds	r7, #64	; 0x40
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	20000028 	.word	0x20000028
 8014e50:	2000083c 	.word	0x2000083c
 8014e54:	20000840 	.word	0x20000840
 8014e58:	20000024 	.word	0x20000024
 8014e5c:	20000844 	.word	0x20000844
 8014e60:	200008cc 	.word	0x200008cc
 8014e64:	20000848 	.word	0x20000848
 8014e68:	2000084c 	.word	0x2000084c

08014e6c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b088      	sub	sp, #32
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	60b9      	str	r1, [r7, #8]
 8014e76:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e78:	f3ef 8310 	mrs	r3, PRIMASK
 8014e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8014e7e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8014e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8014e82:	b672      	cpsid	i
}
 8014e84:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8014e86:	68f8      	ldr	r0, [r7, #12]
 8014e88:	f000 f8b6 	bl	8014ff8 <SEQ_BitPosition>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	4619      	mov	r1, r3
 8014e90:	4a06      	ldr	r2, [pc, #24]	; (8014eac <UTIL_SEQ_RegTask+0x40>)
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	f383 8810 	msr	PRIMASK, r3
}
 8014ea2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8014ea4:	bf00      	nop
}
 8014ea6:	3720      	adds	r7, #32
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	2000084c 	.word	0x2000084c

08014eb0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b087      	sub	sp, #28
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014eba:	f3ef 8310 	mrs	r3, PRIMASK
 8014ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014ec4:	b672      	cpsid	i
}
 8014ec6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8014ec8:	4b0d      	ldr	r3, [pc, #52]	; (8014f00 <UTIL_SEQ_SetTask+0x50>)
 8014eca:	681a      	ldr	r2, [r3, #0]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	4313      	orrs	r3, r2
 8014ed0:	4a0b      	ldr	r2, [pc, #44]	; (8014f00 <UTIL_SEQ_SetTask+0x50>)
 8014ed2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8014ed4:	4a0b      	ldr	r2, [pc, #44]	; (8014f04 <UTIL_SEQ_SetTask+0x54>)
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	431a      	orrs	r2, r3
 8014ee0:	4908      	ldr	r1, [pc, #32]	; (8014f04 <UTIL_SEQ_SetTask+0x54>)
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	f383 8810 	msr	PRIMASK, r3
}
 8014ef2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014ef4:	bf00      	nop
}
 8014ef6:	371c      	adds	r7, #28
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efe:	4770      	bx	lr
 8014f00:	2000083c 	.word	0x2000083c
 8014f04:	200008cc 	.word	0x200008cc

08014f08 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b087      	sub	sp, #28
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f10:	f3ef 8310 	mrs	r3, PRIMASK
 8014f14:	60fb      	str	r3, [r7, #12]
  return(result);
 8014f16:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014f18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014f1a:	b672      	cpsid	i
}
 8014f1c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8014f1e:	4b09      	ldr	r3, [pc, #36]	; (8014f44 <UTIL_SEQ_SetEvt+0x3c>)
 8014f20:	681a      	ldr	r2, [r3, #0]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	4313      	orrs	r3, r2
 8014f26:	4a07      	ldr	r2, [pc, #28]	; (8014f44 <UTIL_SEQ_SetEvt+0x3c>)
 8014f28:	6013      	str	r3, [r2, #0]
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	f383 8810 	msr	PRIMASK, r3
}
 8014f34:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014f36:	bf00      	nop
}
 8014f38:	371c      	adds	r7, #28
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f40:	4770      	bx	lr
 8014f42:	bf00      	nop
 8014f44:	20000840 	.word	0x20000840

08014f48 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b088      	sub	sp, #32
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8014f50:	4b1f      	ldr	r3, [pc, #124]	; (8014fd0 <UTIL_SEQ_WaitEvt+0x88>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8014f56:	4b1e      	ldr	r3, [pc, #120]	; (8014fd0 <UTIL_SEQ_WaitEvt+0x88>)
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f5e:	d102      	bne.n	8014f66 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8014f60:	2300      	movs	r3, #0
 8014f62:	61fb      	str	r3, [r7, #28]
 8014f64:	e005      	b.n	8014f72 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8014f66:	4b1a      	ldr	r3, [pc, #104]	; (8014fd0 <UTIL_SEQ_WaitEvt+0x88>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8014f70:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8014f72:	4b18      	ldr	r3, [pc, #96]	; (8014fd4 <UTIL_SEQ_WaitEvt+0x8c>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8014f78:	4a16      	ldr	r2, [pc, #88]	; (8014fd4 <UTIL_SEQ_WaitEvt+0x8c>)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8014f7e:	e003      	b.n	8014f88 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8014f80:	6879      	ldr	r1, [r7, #4]
 8014f82:	69f8      	ldr	r0, [r7, #28]
 8014f84:	f7f1 ff02 	bl	8006d8c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8014f88:	4b13      	ldr	r3, [pc, #76]	; (8014fd8 <UTIL_SEQ_WaitEvt+0x90>)
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	4013      	ands	r3, r2
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d0f5      	beq.n	8014f80 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8014f94:	4a0e      	ldr	r2, [pc, #56]	; (8014fd0 <UTIL_SEQ_WaitEvt+0x88>)
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8014f9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8014fa0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014fa4:	b672      	cpsid	i
}
 8014fa6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	43da      	mvns	r2, r3
 8014fac:	4b0a      	ldr	r3, [pc, #40]	; (8014fd8 <UTIL_SEQ_WaitEvt+0x90>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	4013      	ands	r3, r2
 8014fb2:	4a09      	ldr	r2, [pc, #36]	; (8014fd8 <UTIL_SEQ_WaitEvt+0x90>)
 8014fb4:	6013      	str	r3, [r2, #0]
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	f383 8810 	msr	PRIMASK, r3
}
 8014fc0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8014fc2:	4a04      	ldr	r2, [pc, #16]	; (8014fd4 <UTIL_SEQ_WaitEvt+0x8c>)
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	6013      	str	r3, [r2, #0]
  return;
 8014fc8:	bf00      	nop
}
 8014fca:	3720      	adds	r7, #32
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}
 8014fd0:	20000848 	.word	0x20000848
 8014fd4:	20000844 	.word	0x20000844
 8014fd8:	20000840 	.word	0x20000840

08014fdc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8014fdc:	b480      	push	{r7}
 8014fde:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8014fe0:	bf00      	nop
}
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe8:	4770      	bx	lr

08014fea <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8014fea:	b480      	push	{r7}
 8014fec:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8014fee:	bf00      	nop
}
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff6:	4770      	bx	lr

08014ff8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b085      	sub	sp, #20
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8015000:	2300      	movs	r3, #0
 8015002:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	0c1b      	lsrs	r3, r3, #16
 801500c:	041b      	lsls	r3, r3, #16
 801500e:	2b00      	cmp	r3, #0
 8015010:	d104      	bne.n	801501c <SEQ_BitPosition+0x24>
 8015012:	2310      	movs	r3, #16
 8015014:	73fb      	strb	r3, [r7, #15]
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	041b      	lsls	r3, r3, #16
 801501a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015022:	2b00      	cmp	r3, #0
 8015024:	d105      	bne.n	8015032 <SEQ_BitPosition+0x3a>
 8015026:	7bfb      	ldrb	r3, [r7, #15]
 8015028:	3308      	adds	r3, #8
 801502a:	73fb      	strb	r3, [r7, #15]
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	021b      	lsls	r3, r3, #8
 8015030:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015038:	2b00      	cmp	r3, #0
 801503a:	d105      	bne.n	8015048 <SEQ_BitPosition+0x50>
 801503c:	7bfb      	ldrb	r3, [r7, #15]
 801503e:	3304      	adds	r3, #4
 8015040:	73fb      	strb	r3, [r7, #15]
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	011b      	lsls	r3, r3, #4
 8015046:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	0f1b      	lsrs	r3, r3, #28
 801504c:	4a07      	ldr	r2, [pc, #28]	; (801506c <SEQ_BitPosition+0x74>)
 801504e:	5cd2      	ldrb	r2, [r2, r3]
 8015050:	7bfb      	ldrb	r3, [r7, #15]
 8015052:	4413      	add	r3, r2
 8015054:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8015056:	7bfb      	ldrb	r3, [r7, #15]
 8015058:	f1c3 031f 	rsb	r3, r3, #31
 801505c:	b2db      	uxtb	r3, r3
}
 801505e:	4618      	mov	r0, r3
 8015060:	3714      	adds	r7, #20
 8015062:	46bd      	mov	sp, r7
 8015064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015068:	4770      	bx	lr
 801506a:	bf00      	nop
 801506c:	08016de8 	.word	0x08016de8

08015070 <__assert_func>:
 8015070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015072:	4614      	mov	r4, r2
 8015074:	461a      	mov	r2, r3
 8015076:	4b09      	ldr	r3, [pc, #36]	; (801509c <__assert_func+0x2c>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4605      	mov	r5, r0
 801507c:	68d8      	ldr	r0, [r3, #12]
 801507e:	b14c      	cbz	r4, 8015094 <__assert_func+0x24>
 8015080:	4b07      	ldr	r3, [pc, #28]	; (80150a0 <__assert_func+0x30>)
 8015082:	9100      	str	r1, [sp, #0]
 8015084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015088:	4906      	ldr	r1, [pc, #24]	; (80150a4 <__assert_func+0x34>)
 801508a:	462b      	mov	r3, r5
 801508c:	f000 f96e 	bl	801536c <fiprintf>
 8015090:	f000 fb27 	bl	80156e2 <abort>
 8015094:	4b04      	ldr	r3, [pc, #16]	; (80150a8 <__assert_func+0x38>)
 8015096:	461c      	mov	r4, r3
 8015098:	e7f3      	b.n	8015082 <__assert_func+0x12>
 801509a:	bf00      	nop
 801509c:	20000084 	.word	0x20000084
 80150a0:	08016df8 	.word	0x08016df8
 80150a4:	08016e05 	.word	0x08016e05
 80150a8:	08016e33 	.word	0x08016e33

080150ac <malloc>:
 80150ac:	4b02      	ldr	r3, [pc, #8]	; (80150b8 <malloc+0xc>)
 80150ae:	4601      	mov	r1, r0
 80150b0:	6818      	ldr	r0, [r3, #0]
 80150b2:	f000 b82b 	b.w	801510c <_malloc_r>
 80150b6:	bf00      	nop
 80150b8:	20000084 	.word	0x20000084

080150bc <free>:
 80150bc:	4b02      	ldr	r3, [pc, #8]	; (80150c8 <free+0xc>)
 80150be:	4601      	mov	r1, r0
 80150c0:	6818      	ldr	r0, [r3, #0]
 80150c2:	f000 bb15 	b.w	80156f0 <_free_r>
 80150c6:	bf00      	nop
 80150c8:	20000084 	.word	0x20000084

080150cc <sbrk_aligned>:
 80150cc:	b570      	push	{r4, r5, r6, lr}
 80150ce:	4e0e      	ldr	r6, [pc, #56]	; (8015108 <sbrk_aligned+0x3c>)
 80150d0:	460c      	mov	r4, r1
 80150d2:	6831      	ldr	r1, [r6, #0]
 80150d4:	4605      	mov	r5, r0
 80150d6:	b911      	cbnz	r1, 80150de <sbrk_aligned+0x12>
 80150d8:	f000 faa4 	bl	8015624 <_sbrk_r>
 80150dc:	6030      	str	r0, [r6, #0]
 80150de:	4621      	mov	r1, r4
 80150e0:	4628      	mov	r0, r5
 80150e2:	f000 fa9f 	bl	8015624 <_sbrk_r>
 80150e6:	1c43      	adds	r3, r0, #1
 80150e8:	d00a      	beq.n	8015100 <sbrk_aligned+0x34>
 80150ea:	1cc4      	adds	r4, r0, #3
 80150ec:	f024 0403 	bic.w	r4, r4, #3
 80150f0:	42a0      	cmp	r0, r4
 80150f2:	d007      	beq.n	8015104 <sbrk_aligned+0x38>
 80150f4:	1a21      	subs	r1, r4, r0
 80150f6:	4628      	mov	r0, r5
 80150f8:	f000 fa94 	bl	8015624 <_sbrk_r>
 80150fc:	3001      	adds	r0, #1
 80150fe:	d101      	bne.n	8015104 <sbrk_aligned+0x38>
 8015100:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015104:	4620      	mov	r0, r4
 8015106:	bd70      	pop	{r4, r5, r6, pc}
 8015108:	200008e0 	.word	0x200008e0

0801510c <_malloc_r>:
 801510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015110:	1ccd      	adds	r5, r1, #3
 8015112:	f025 0503 	bic.w	r5, r5, #3
 8015116:	3508      	adds	r5, #8
 8015118:	2d0c      	cmp	r5, #12
 801511a:	bf38      	it	cc
 801511c:	250c      	movcc	r5, #12
 801511e:	2d00      	cmp	r5, #0
 8015120:	4607      	mov	r7, r0
 8015122:	db01      	blt.n	8015128 <_malloc_r+0x1c>
 8015124:	42a9      	cmp	r1, r5
 8015126:	d905      	bls.n	8015134 <_malloc_r+0x28>
 8015128:	230c      	movs	r3, #12
 801512a:	603b      	str	r3, [r7, #0]
 801512c:	2600      	movs	r6, #0
 801512e:	4630      	mov	r0, r6
 8015130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015208 <_malloc_r+0xfc>
 8015138:	f000 f868 	bl	801520c <__malloc_lock>
 801513c:	f8d8 3000 	ldr.w	r3, [r8]
 8015140:	461c      	mov	r4, r3
 8015142:	bb5c      	cbnz	r4, 801519c <_malloc_r+0x90>
 8015144:	4629      	mov	r1, r5
 8015146:	4638      	mov	r0, r7
 8015148:	f7ff ffc0 	bl	80150cc <sbrk_aligned>
 801514c:	1c43      	adds	r3, r0, #1
 801514e:	4604      	mov	r4, r0
 8015150:	d155      	bne.n	80151fe <_malloc_r+0xf2>
 8015152:	f8d8 4000 	ldr.w	r4, [r8]
 8015156:	4626      	mov	r6, r4
 8015158:	2e00      	cmp	r6, #0
 801515a:	d145      	bne.n	80151e8 <_malloc_r+0xdc>
 801515c:	2c00      	cmp	r4, #0
 801515e:	d048      	beq.n	80151f2 <_malloc_r+0xe6>
 8015160:	6823      	ldr	r3, [r4, #0]
 8015162:	4631      	mov	r1, r6
 8015164:	4638      	mov	r0, r7
 8015166:	eb04 0903 	add.w	r9, r4, r3
 801516a:	f000 fa5b 	bl	8015624 <_sbrk_r>
 801516e:	4581      	cmp	r9, r0
 8015170:	d13f      	bne.n	80151f2 <_malloc_r+0xe6>
 8015172:	6821      	ldr	r1, [r4, #0]
 8015174:	1a6d      	subs	r5, r5, r1
 8015176:	4629      	mov	r1, r5
 8015178:	4638      	mov	r0, r7
 801517a:	f7ff ffa7 	bl	80150cc <sbrk_aligned>
 801517e:	3001      	adds	r0, #1
 8015180:	d037      	beq.n	80151f2 <_malloc_r+0xe6>
 8015182:	6823      	ldr	r3, [r4, #0]
 8015184:	442b      	add	r3, r5
 8015186:	6023      	str	r3, [r4, #0]
 8015188:	f8d8 3000 	ldr.w	r3, [r8]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d038      	beq.n	8015202 <_malloc_r+0xf6>
 8015190:	685a      	ldr	r2, [r3, #4]
 8015192:	42a2      	cmp	r2, r4
 8015194:	d12b      	bne.n	80151ee <_malloc_r+0xe2>
 8015196:	2200      	movs	r2, #0
 8015198:	605a      	str	r2, [r3, #4]
 801519a:	e00f      	b.n	80151bc <_malloc_r+0xb0>
 801519c:	6822      	ldr	r2, [r4, #0]
 801519e:	1b52      	subs	r2, r2, r5
 80151a0:	d41f      	bmi.n	80151e2 <_malloc_r+0xd6>
 80151a2:	2a0b      	cmp	r2, #11
 80151a4:	d917      	bls.n	80151d6 <_malloc_r+0xca>
 80151a6:	1961      	adds	r1, r4, r5
 80151a8:	42a3      	cmp	r3, r4
 80151aa:	6025      	str	r5, [r4, #0]
 80151ac:	bf18      	it	ne
 80151ae:	6059      	strne	r1, [r3, #4]
 80151b0:	6863      	ldr	r3, [r4, #4]
 80151b2:	bf08      	it	eq
 80151b4:	f8c8 1000 	streq.w	r1, [r8]
 80151b8:	5162      	str	r2, [r4, r5]
 80151ba:	604b      	str	r3, [r1, #4]
 80151bc:	4638      	mov	r0, r7
 80151be:	f104 060b 	add.w	r6, r4, #11
 80151c2:	f000 f829 	bl	8015218 <__malloc_unlock>
 80151c6:	f026 0607 	bic.w	r6, r6, #7
 80151ca:	1d23      	adds	r3, r4, #4
 80151cc:	1af2      	subs	r2, r6, r3
 80151ce:	d0ae      	beq.n	801512e <_malloc_r+0x22>
 80151d0:	1b9b      	subs	r3, r3, r6
 80151d2:	50a3      	str	r3, [r4, r2]
 80151d4:	e7ab      	b.n	801512e <_malloc_r+0x22>
 80151d6:	42a3      	cmp	r3, r4
 80151d8:	6862      	ldr	r2, [r4, #4]
 80151da:	d1dd      	bne.n	8015198 <_malloc_r+0x8c>
 80151dc:	f8c8 2000 	str.w	r2, [r8]
 80151e0:	e7ec      	b.n	80151bc <_malloc_r+0xb0>
 80151e2:	4623      	mov	r3, r4
 80151e4:	6864      	ldr	r4, [r4, #4]
 80151e6:	e7ac      	b.n	8015142 <_malloc_r+0x36>
 80151e8:	4634      	mov	r4, r6
 80151ea:	6876      	ldr	r6, [r6, #4]
 80151ec:	e7b4      	b.n	8015158 <_malloc_r+0x4c>
 80151ee:	4613      	mov	r3, r2
 80151f0:	e7cc      	b.n	801518c <_malloc_r+0x80>
 80151f2:	230c      	movs	r3, #12
 80151f4:	603b      	str	r3, [r7, #0]
 80151f6:	4638      	mov	r0, r7
 80151f8:	f000 f80e 	bl	8015218 <__malloc_unlock>
 80151fc:	e797      	b.n	801512e <_malloc_r+0x22>
 80151fe:	6025      	str	r5, [r4, #0]
 8015200:	e7dc      	b.n	80151bc <_malloc_r+0xb0>
 8015202:	605b      	str	r3, [r3, #4]
 8015204:	deff      	udf	#255	; 0xff
 8015206:	bf00      	nop
 8015208:	200008dc 	.word	0x200008dc

0801520c <__malloc_lock>:
 801520c:	4801      	ldr	r0, [pc, #4]	; (8015214 <__malloc_lock+0x8>)
 801520e:	f000 ba56 	b.w	80156be <__retarget_lock_acquire_recursive>
 8015212:	bf00      	nop
 8015214:	20000a24 	.word	0x20000a24

08015218 <__malloc_unlock>:
 8015218:	4801      	ldr	r0, [pc, #4]	; (8015220 <__malloc_unlock+0x8>)
 801521a:	f000 ba51 	b.w	80156c0 <__retarget_lock_release_recursive>
 801521e:	bf00      	nop
 8015220:	20000a24 	.word	0x20000a24

08015224 <std>:
 8015224:	2300      	movs	r3, #0
 8015226:	b510      	push	{r4, lr}
 8015228:	4604      	mov	r4, r0
 801522a:	e9c0 3300 	strd	r3, r3, [r0]
 801522e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015232:	6083      	str	r3, [r0, #8]
 8015234:	8181      	strh	r1, [r0, #12]
 8015236:	6643      	str	r3, [r0, #100]	; 0x64
 8015238:	81c2      	strh	r2, [r0, #14]
 801523a:	6183      	str	r3, [r0, #24]
 801523c:	4619      	mov	r1, r3
 801523e:	2208      	movs	r2, #8
 8015240:	305c      	adds	r0, #92	; 0x5c
 8015242:	f000 f9a5 	bl	8015590 <memset>
 8015246:	4b0d      	ldr	r3, [pc, #52]	; (801527c <std+0x58>)
 8015248:	6263      	str	r3, [r4, #36]	; 0x24
 801524a:	4b0d      	ldr	r3, [pc, #52]	; (8015280 <std+0x5c>)
 801524c:	62a3      	str	r3, [r4, #40]	; 0x28
 801524e:	4b0d      	ldr	r3, [pc, #52]	; (8015284 <std+0x60>)
 8015250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015252:	4b0d      	ldr	r3, [pc, #52]	; (8015288 <std+0x64>)
 8015254:	6323      	str	r3, [r4, #48]	; 0x30
 8015256:	4b0d      	ldr	r3, [pc, #52]	; (801528c <std+0x68>)
 8015258:	6224      	str	r4, [r4, #32]
 801525a:	429c      	cmp	r4, r3
 801525c:	d006      	beq.n	801526c <std+0x48>
 801525e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015262:	4294      	cmp	r4, r2
 8015264:	d002      	beq.n	801526c <std+0x48>
 8015266:	33d0      	adds	r3, #208	; 0xd0
 8015268:	429c      	cmp	r4, r3
 801526a:	d105      	bne.n	8015278 <std+0x54>
 801526c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015274:	f000 ba22 	b.w	80156bc <__retarget_lock_init_recursive>
 8015278:	bd10      	pop	{r4, pc}
 801527a:	bf00      	nop
 801527c:	08015499 	.word	0x08015499
 8015280:	080154bb 	.word	0x080154bb
 8015284:	080154f3 	.word	0x080154f3
 8015288:	08015517 	.word	0x08015517
 801528c:	200008e4 	.word	0x200008e4

08015290 <stdio_exit_handler>:
 8015290:	4a02      	ldr	r2, [pc, #8]	; (801529c <stdio_exit_handler+0xc>)
 8015292:	4903      	ldr	r1, [pc, #12]	; (80152a0 <stdio_exit_handler+0x10>)
 8015294:	4803      	ldr	r0, [pc, #12]	; (80152a4 <stdio_exit_handler+0x14>)
 8015296:	f000 b87b 	b.w	8015390 <_fwalk_sglue>
 801529a:	bf00      	nop
 801529c:	2000002c 	.word	0x2000002c
 80152a0:	080160ed 	.word	0x080160ed
 80152a4:	20000038 	.word	0x20000038

080152a8 <cleanup_stdio>:
 80152a8:	6841      	ldr	r1, [r0, #4]
 80152aa:	4b0c      	ldr	r3, [pc, #48]	; (80152dc <cleanup_stdio+0x34>)
 80152ac:	4299      	cmp	r1, r3
 80152ae:	b510      	push	{r4, lr}
 80152b0:	4604      	mov	r4, r0
 80152b2:	d001      	beq.n	80152b8 <cleanup_stdio+0x10>
 80152b4:	f000 ff1a 	bl	80160ec <_fflush_r>
 80152b8:	68a1      	ldr	r1, [r4, #8]
 80152ba:	4b09      	ldr	r3, [pc, #36]	; (80152e0 <cleanup_stdio+0x38>)
 80152bc:	4299      	cmp	r1, r3
 80152be:	d002      	beq.n	80152c6 <cleanup_stdio+0x1e>
 80152c0:	4620      	mov	r0, r4
 80152c2:	f000 ff13 	bl	80160ec <_fflush_r>
 80152c6:	68e1      	ldr	r1, [r4, #12]
 80152c8:	4b06      	ldr	r3, [pc, #24]	; (80152e4 <cleanup_stdio+0x3c>)
 80152ca:	4299      	cmp	r1, r3
 80152cc:	d004      	beq.n	80152d8 <cleanup_stdio+0x30>
 80152ce:	4620      	mov	r0, r4
 80152d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152d4:	f000 bf0a 	b.w	80160ec <_fflush_r>
 80152d8:	bd10      	pop	{r4, pc}
 80152da:	bf00      	nop
 80152dc:	200008e4 	.word	0x200008e4
 80152e0:	2000094c 	.word	0x2000094c
 80152e4:	200009b4 	.word	0x200009b4

080152e8 <global_stdio_init.part.0>:
 80152e8:	b510      	push	{r4, lr}
 80152ea:	4b0b      	ldr	r3, [pc, #44]	; (8015318 <global_stdio_init.part.0+0x30>)
 80152ec:	4c0b      	ldr	r4, [pc, #44]	; (801531c <global_stdio_init.part.0+0x34>)
 80152ee:	4a0c      	ldr	r2, [pc, #48]	; (8015320 <global_stdio_init.part.0+0x38>)
 80152f0:	601a      	str	r2, [r3, #0]
 80152f2:	4620      	mov	r0, r4
 80152f4:	2200      	movs	r2, #0
 80152f6:	2104      	movs	r1, #4
 80152f8:	f7ff ff94 	bl	8015224 <std>
 80152fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015300:	2201      	movs	r2, #1
 8015302:	2109      	movs	r1, #9
 8015304:	f7ff ff8e 	bl	8015224 <std>
 8015308:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801530c:	2202      	movs	r2, #2
 801530e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015312:	2112      	movs	r1, #18
 8015314:	f7ff bf86 	b.w	8015224 <std>
 8015318:	20000a1c 	.word	0x20000a1c
 801531c:	200008e4 	.word	0x200008e4
 8015320:	08015291 	.word	0x08015291

08015324 <__sfp_lock_acquire>:
 8015324:	4801      	ldr	r0, [pc, #4]	; (801532c <__sfp_lock_acquire+0x8>)
 8015326:	f000 b9ca 	b.w	80156be <__retarget_lock_acquire_recursive>
 801532a:	bf00      	nop
 801532c:	20000a25 	.word	0x20000a25

08015330 <__sfp_lock_release>:
 8015330:	4801      	ldr	r0, [pc, #4]	; (8015338 <__sfp_lock_release+0x8>)
 8015332:	f000 b9c5 	b.w	80156c0 <__retarget_lock_release_recursive>
 8015336:	bf00      	nop
 8015338:	20000a25 	.word	0x20000a25

0801533c <__sinit>:
 801533c:	b510      	push	{r4, lr}
 801533e:	4604      	mov	r4, r0
 8015340:	f7ff fff0 	bl	8015324 <__sfp_lock_acquire>
 8015344:	6a23      	ldr	r3, [r4, #32]
 8015346:	b11b      	cbz	r3, 8015350 <__sinit+0x14>
 8015348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801534c:	f7ff bff0 	b.w	8015330 <__sfp_lock_release>
 8015350:	4b04      	ldr	r3, [pc, #16]	; (8015364 <__sinit+0x28>)
 8015352:	6223      	str	r3, [r4, #32]
 8015354:	4b04      	ldr	r3, [pc, #16]	; (8015368 <__sinit+0x2c>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d1f5      	bne.n	8015348 <__sinit+0xc>
 801535c:	f7ff ffc4 	bl	80152e8 <global_stdio_init.part.0>
 8015360:	e7f2      	b.n	8015348 <__sinit+0xc>
 8015362:	bf00      	nop
 8015364:	080152a9 	.word	0x080152a9
 8015368:	20000a1c 	.word	0x20000a1c

0801536c <fiprintf>:
 801536c:	b40e      	push	{r1, r2, r3}
 801536e:	b503      	push	{r0, r1, lr}
 8015370:	4601      	mov	r1, r0
 8015372:	ab03      	add	r3, sp, #12
 8015374:	4805      	ldr	r0, [pc, #20]	; (801538c <fiprintf+0x20>)
 8015376:	f853 2b04 	ldr.w	r2, [r3], #4
 801537a:	6800      	ldr	r0, [r0, #0]
 801537c:	9301      	str	r3, [sp, #4]
 801537e:	f000 fb85 	bl	8015a8c <_vfiprintf_r>
 8015382:	b002      	add	sp, #8
 8015384:	f85d eb04 	ldr.w	lr, [sp], #4
 8015388:	b003      	add	sp, #12
 801538a:	4770      	bx	lr
 801538c:	20000084 	.word	0x20000084

08015390 <_fwalk_sglue>:
 8015390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015394:	4607      	mov	r7, r0
 8015396:	4688      	mov	r8, r1
 8015398:	4614      	mov	r4, r2
 801539a:	2600      	movs	r6, #0
 801539c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80153a0:	f1b9 0901 	subs.w	r9, r9, #1
 80153a4:	d505      	bpl.n	80153b2 <_fwalk_sglue+0x22>
 80153a6:	6824      	ldr	r4, [r4, #0]
 80153a8:	2c00      	cmp	r4, #0
 80153aa:	d1f7      	bne.n	801539c <_fwalk_sglue+0xc>
 80153ac:	4630      	mov	r0, r6
 80153ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153b2:	89ab      	ldrh	r3, [r5, #12]
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d907      	bls.n	80153c8 <_fwalk_sglue+0x38>
 80153b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80153bc:	3301      	adds	r3, #1
 80153be:	d003      	beq.n	80153c8 <_fwalk_sglue+0x38>
 80153c0:	4629      	mov	r1, r5
 80153c2:	4638      	mov	r0, r7
 80153c4:	47c0      	blx	r8
 80153c6:	4306      	orrs	r6, r0
 80153c8:	3568      	adds	r5, #104	; 0x68
 80153ca:	e7e9      	b.n	80153a0 <_fwalk_sglue+0x10>

080153cc <iprintf>:
 80153cc:	b40f      	push	{r0, r1, r2, r3}
 80153ce:	b507      	push	{r0, r1, r2, lr}
 80153d0:	4906      	ldr	r1, [pc, #24]	; (80153ec <iprintf+0x20>)
 80153d2:	ab04      	add	r3, sp, #16
 80153d4:	6808      	ldr	r0, [r1, #0]
 80153d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80153da:	6881      	ldr	r1, [r0, #8]
 80153dc:	9301      	str	r3, [sp, #4]
 80153de:	f000 fb55 	bl	8015a8c <_vfiprintf_r>
 80153e2:	b003      	add	sp, #12
 80153e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80153e8:	b004      	add	sp, #16
 80153ea:	4770      	bx	lr
 80153ec:	20000084 	.word	0x20000084

080153f0 <sniprintf>:
 80153f0:	b40c      	push	{r2, r3}
 80153f2:	b530      	push	{r4, r5, lr}
 80153f4:	4b17      	ldr	r3, [pc, #92]	; (8015454 <sniprintf+0x64>)
 80153f6:	1e0c      	subs	r4, r1, #0
 80153f8:	681d      	ldr	r5, [r3, #0]
 80153fa:	b09d      	sub	sp, #116	; 0x74
 80153fc:	da08      	bge.n	8015410 <sniprintf+0x20>
 80153fe:	238b      	movs	r3, #139	; 0x8b
 8015400:	602b      	str	r3, [r5, #0]
 8015402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015406:	b01d      	add	sp, #116	; 0x74
 8015408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801540c:	b002      	add	sp, #8
 801540e:	4770      	bx	lr
 8015410:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015414:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015418:	bf14      	ite	ne
 801541a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801541e:	4623      	moveq	r3, r4
 8015420:	9304      	str	r3, [sp, #16]
 8015422:	9307      	str	r3, [sp, #28]
 8015424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015428:	9002      	str	r0, [sp, #8]
 801542a:	9006      	str	r0, [sp, #24]
 801542c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015430:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015432:	ab21      	add	r3, sp, #132	; 0x84
 8015434:	a902      	add	r1, sp, #8
 8015436:	4628      	mov	r0, r5
 8015438:	9301      	str	r3, [sp, #4]
 801543a:	f000 f9ff 	bl	801583c <_svfiprintf_r>
 801543e:	1c43      	adds	r3, r0, #1
 8015440:	bfbc      	itt	lt
 8015442:	238b      	movlt	r3, #139	; 0x8b
 8015444:	602b      	strlt	r3, [r5, #0]
 8015446:	2c00      	cmp	r4, #0
 8015448:	d0dd      	beq.n	8015406 <sniprintf+0x16>
 801544a:	9b02      	ldr	r3, [sp, #8]
 801544c:	2200      	movs	r2, #0
 801544e:	701a      	strb	r2, [r3, #0]
 8015450:	e7d9      	b.n	8015406 <sniprintf+0x16>
 8015452:	bf00      	nop
 8015454:	20000084 	.word	0x20000084

08015458 <siprintf>:
 8015458:	b40e      	push	{r1, r2, r3}
 801545a:	b500      	push	{lr}
 801545c:	b09c      	sub	sp, #112	; 0x70
 801545e:	ab1d      	add	r3, sp, #116	; 0x74
 8015460:	9002      	str	r0, [sp, #8]
 8015462:	9006      	str	r0, [sp, #24]
 8015464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015468:	4809      	ldr	r0, [pc, #36]	; (8015490 <siprintf+0x38>)
 801546a:	9107      	str	r1, [sp, #28]
 801546c:	9104      	str	r1, [sp, #16]
 801546e:	4909      	ldr	r1, [pc, #36]	; (8015494 <siprintf+0x3c>)
 8015470:	f853 2b04 	ldr.w	r2, [r3], #4
 8015474:	9105      	str	r1, [sp, #20]
 8015476:	6800      	ldr	r0, [r0, #0]
 8015478:	9301      	str	r3, [sp, #4]
 801547a:	a902      	add	r1, sp, #8
 801547c:	f000 f9de 	bl	801583c <_svfiprintf_r>
 8015480:	9b02      	ldr	r3, [sp, #8]
 8015482:	2200      	movs	r2, #0
 8015484:	701a      	strb	r2, [r3, #0]
 8015486:	b01c      	add	sp, #112	; 0x70
 8015488:	f85d eb04 	ldr.w	lr, [sp], #4
 801548c:	b003      	add	sp, #12
 801548e:	4770      	bx	lr
 8015490:	20000084 	.word	0x20000084
 8015494:	ffff0208 	.word	0xffff0208

08015498 <__sread>:
 8015498:	b510      	push	{r4, lr}
 801549a:	460c      	mov	r4, r1
 801549c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154a0:	f000 f8ae 	bl	8015600 <_read_r>
 80154a4:	2800      	cmp	r0, #0
 80154a6:	bfab      	itete	ge
 80154a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80154aa:	89a3      	ldrhlt	r3, [r4, #12]
 80154ac:	181b      	addge	r3, r3, r0
 80154ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80154b2:	bfac      	ite	ge
 80154b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80154b6:	81a3      	strhlt	r3, [r4, #12]
 80154b8:	bd10      	pop	{r4, pc}

080154ba <__swrite>:
 80154ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154be:	461f      	mov	r7, r3
 80154c0:	898b      	ldrh	r3, [r1, #12]
 80154c2:	05db      	lsls	r3, r3, #23
 80154c4:	4605      	mov	r5, r0
 80154c6:	460c      	mov	r4, r1
 80154c8:	4616      	mov	r6, r2
 80154ca:	d505      	bpl.n	80154d8 <__swrite+0x1e>
 80154cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154d0:	2302      	movs	r3, #2
 80154d2:	2200      	movs	r2, #0
 80154d4:	f000 f882 	bl	80155dc <_lseek_r>
 80154d8:	89a3      	ldrh	r3, [r4, #12]
 80154da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80154e2:	81a3      	strh	r3, [r4, #12]
 80154e4:	4632      	mov	r2, r6
 80154e6:	463b      	mov	r3, r7
 80154e8:	4628      	mov	r0, r5
 80154ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154ee:	f000 b8a9 	b.w	8015644 <_write_r>

080154f2 <__sseek>:
 80154f2:	b510      	push	{r4, lr}
 80154f4:	460c      	mov	r4, r1
 80154f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154fa:	f000 f86f 	bl	80155dc <_lseek_r>
 80154fe:	1c43      	adds	r3, r0, #1
 8015500:	89a3      	ldrh	r3, [r4, #12]
 8015502:	bf15      	itete	ne
 8015504:	6560      	strne	r0, [r4, #84]	; 0x54
 8015506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801550a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801550e:	81a3      	strheq	r3, [r4, #12]
 8015510:	bf18      	it	ne
 8015512:	81a3      	strhne	r3, [r4, #12]
 8015514:	bd10      	pop	{r4, pc}

08015516 <__sclose>:
 8015516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801551a:	f000 b84f 	b.w	80155bc <_close_r>

0801551e <_vsniprintf_r>:
 801551e:	b530      	push	{r4, r5, lr}
 8015520:	4614      	mov	r4, r2
 8015522:	2c00      	cmp	r4, #0
 8015524:	b09b      	sub	sp, #108	; 0x6c
 8015526:	4605      	mov	r5, r0
 8015528:	461a      	mov	r2, r3
 801552a:	da05      	bge.n	8015538 <_vsniprintf_r+0x1a>
 801552c:	238b      	movs	r3, #139	; 0x8b
 801552e:	6003      	str	r3, [r0, #0]
 8015530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015534:	b01b      	add	sp, #108	; 0x6c
 8015536:	bd30      	pop	{r4, r5, pc}
 8015538:	f44f 7302 	mov.w	r3, #520	; 0x208
 801553c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015540:	bf14      	ite	ne
 8015542:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015546:	4623      	moveq	r3, r4
 8015548:	9302      	str	r3, [sp, #8]
 801554a:	9305      	str	r3, [sp, #20]
 801554c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015550:	9100      	str	r1, [sp, #0]
 8015552:	9104      	str	r1, [sp, #16]
 8015554:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015558:	4669      	mov	r1, sp
 801555a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801555c:	f000 f96e 	bl	801583c <_svfiprintf_r>
 8015560:	1c43      	adds	r3, r0, #1
 8015562:	bfbc      	itt	lt
 8015564:	238b      	movlt	r3, #139	; 0x8b
 8015566:	602b      	strlt	r3, [r5, #0]
 8015568:	2c00      	cmp	r4, #0
 801556a:	d0e3      	beq.n	8015534 <_vsniprintf_r+0x16>
 801556c:	9b00      	ldr	r3, [sp, #0]
 801556e:	2200      	movs	r2, #0
 8015570:	701a      	strb	r2, [r3, #0]
 8015572:	e7df      	b.n	8015534 <_vsniprintf_r+0x16>

08015574 <vsniprintf>:
 8015574:	b507      	push	{r0, r1, r2, lr}
 8015576:	9300      	str	r3, [sp, #0]
 8015578:	4613      	mov	r3, r2
 801557a:	460a      	mov	r2, r1
 801557c:	4601      	mov	r1, r0
 801557e:	4803      	ldr	r0, [pc, #12]	; (801558c <vsniprintf+0x18>)
 8015580:	6800      	ldr	r0, [r0, #0]
 8015582:	f7ff ffcc 	bl	801551e <_vsniprintf_r>
 8015586:	b003      	add	sp, #12
 8015588:	f85d fb04 	ldr.w	pc, [sp], #4
 801558c:	20000084 	.word	0x20000084

08015590 <memset>:
 8015590:	4402      	add	r2, r0
 8015592:	4603      	mov	r3, r0
 8015594:	4293      	cmp	r3, r2
 8015596:	d100      	bne.n	801559a <memset+0xa>
 8015598:	4770      	bx	lr
 801559a:	f803 1b01 	strb.w	r1, [r3], #1
 801559e:	e7f9      	b.n	8015594 <memset+0x4>

080155a0 <strchr>:
 80155a0:	b2c9      	uxtb	r1, r1
 80155a2:	4603      	mov	r3, r0
 80155a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155a8:	b11a      	cbz	r2, 80155b2 <strchr+0x12>
 80155aa:	428a      	cmp	r2, r1
 80155ac:	d1f9      	bne.n	80155a2 <strchr+0x2>
 80155ae:	4618      	mov	r0, r3
 80155b0:	4770      	bx	lr
 80155b2:	2900      	cmp	r1, #0
 80155b4:	bf18      	it	ne
 80155b6:	2300      	movne	r3, #0
 80155b8:	e7f9      	b.n	80155ae <strchr+0xe>
	...

080155bc <_close_r>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	4d06      	ldr	r5, [pc, #24]	; (80155d8 <_close_r+0x1c>)
 80155c0:	2300      	movs	r3, #0
 80155c2:	4604      	mov	r4, r0
 80155c4:	4608      	mov	r0, r1
 80155c6:	602b      	str	r3, [r5, #0]
 80155c8:	f7f2 fbb9 	bl	8007d3e <_close>
 80155cc:	1c43      	adds	r3, r0, #1
 80155ce:	d102      	bne.n	80155d6 <_close_r+0x1a>
 80155d0:	682b      	ldr	r3, [r5, #0]
 80155d2:	b103      	cbz	r3, 80155d6 <_close_r+0x1a>
 80155d4:	6023      	str	r3, [r4, #0]
 80155d6:	bd38      	pop	{r3, r4, r5, pc}
 80155d8:	20000a20 	.word	0x20000a20

080155dc <_lseek_r>:
 80155dc:	b538      	push	{r3, r4, r5, lr}
 80155de:	4d07      	ldr	r5, [pc, #28]	; (80155fc <_lseek_r+0x20>)
 80155e0:	4604      	mov	r4, r0
 80155e2:	4608      	mov	r0, r1
 80155e4:	4611      	mov	r1, r2
 80155e6:	2200      	movs	r2, #0
 80155e8:	602a      	str	r2, [r5, #0]
 80155ea:	461a      	mov	r2, r3
 80155ec:	f7f2 fbce 	bl	8007d8c <_lseek>
 80155f0:	1c43      	adds	r3, r0, #1
 80155f2:	d102      	bne.n	80155fa <_lseek_r+0x1e>
 80155f4:	682b      	ldr	r3, [r5, #0]
 80155f6:	b103      	cbz	r3, 80155fa <_lseek_r+0x1e>
 80155f8:	6023      	str	r3, [r4, #0]
 80155fa:	bd38      	pop	{r3, r4, r5, pc}
 80155fc:	20000a20 	.word	0x20000a20

08015600 <_read_r>:
 8015600:	b538      	push	{r3, r4, r5, lr}
 8015602:	4d07      	ldr	r5, [pc, #28]	; (8015620 <_read_r+0x20>)
 8015604:	4604      	mov	r4, r0
 8015606:	4608      	mov	r0, r1
 8015608:	4611      	mov	r1, r2
 801560a:	2200      	movs	r2, #0
 801560c:	602a      	str	r2, [r5, #0]
 801560e:	461a      	mov	r2, r3
 8015610:	f7f2 fb78 	bl	8007d04 <_read>
 8015614:	1c43      	adds	r3, r0, #1
 8015616:	d102      	bne.n	801561e <_read_r+0x1e>
 8015618:	682b      	ldr	r3, [r5, #0]
 801561a:	b103      	cbz	r3, 801561e <_read_r+0x1e>
 801561c:	6023      	str	r3, [r4, #0]
 801561e:	bd38      	pop	{r3, r4, r5, pc}
 8015620:	20000a20 	.word	0x20000a20

08015624 <_sbrk_r>:
 8015624:	b538      	push	{r3, r4, r5, lr}
 8015626:	4d06      	ldr	r5, [pc, #24]	; (8015640 <_sbrk_r+0x1c>)
 8015628:	2300      	movs	r3, #0
 801562a:	4604      	mov	r4, r0
 801562c:	4608      	mov	r0, r1
 801562e:	602b      	str	r3, [r5, #0]
 8015630:	f7f2 fbba 	bl	8007da8 <_sbrk>
 8015634:	1c43      	adds	r3, r0, #1
 8015636:	d102      	bne.n	801563e <_sbrk_r+0x1a>
 8015638:	682b      	ldr	r3, [r5, #0]
 801563a:	b103      	cbz	r3, 801563e <_sbrk_r+0x1a>
 801563c:	6023      	str	r3, [r4, #0]
 801563e:	bd38      	pop	{r3, r4, r5, pc}
 8015640:	20000a20 	.word	0x20000a20

08015644 <_write_r>:
 8015644:	b538      	push	{r3, r4, r5, lr}
 8015646:	4d07      	ldr	r5, [pc, #28]	; (8015664 <_write_r+0x20>)
 8015648:	4604      	mov	r4, r0
 801564a:	4608      	mov	r0, r1
 801564c:	4611      	mov	r1, r2
 801564e:	2200      	movs	r2, #0
 8015650:	602a      	str	r2, [r5, #0]
 8015652:	461a      	mov	r2, r3
 8015654:	f7fb faca 	bl	8010bec <_write>
 8015658:	1c43      	adds	r3, r0, #1
 801565a:	d102      	bne.n	8015662 <_write_r+0x1e>
 801565c:	682b      	ldr	r3, [r5, #0]
 801565e:	b103      	cbz	r3, 8015662 <_write_r+0x1e>
 8015660:	6023      	str	r3, [r4, #0]
 8015662:	bd38      	pop	{r3, r4, r5, pc}
 8015664:	20000a20 	.word	0x20000a20

08015668 <__errno>:
 8015668:	4b01      	ldr	r3, [pc, #4]	; (8015670 <__errno+0x8>)
 801566a:	6818      	ldr	r0, [r3, #0]
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	20000084 	.word	0x20000084

08015674 <__libc_init_array>:
 8015674:	b570      	push	{r4, r5, r6, lr}
 8015676:	4d0d      	ldr	r5, [pc, #52]	; (80156ac <__libc_init_array+0x38>)
 8015678:	4c0d      	ldr	r4, [pc, #52]	; (80156b0 <__libc_init_array+0x3c>)
 801567a:	1b64      	subs	r4, r4, r5
 801567c:	10a4      	asrs	r4, r4, #2
 801567e:	2600      	movs	r6, #0
 8015680:	42a6      	cmp	r6, r4
 8015682:	d109      	bne.n	8015698 <__libc_init_array+0x24>
 8015684:	4d0b      	ldr	r5, [pc, #44]	; (80156b4 <__libc_init_array+0x40>)
 8015686:	4c0c      	ldr	r4, [pc, #48]	; (80156b8 <__libc_init_array+0x44>)
 8015688:	f000 ff08 	bl	801649c <_init>
 801568c:	1b64      	subs	r4, r4, r5
 801568e:	10a4      	asrs	r4, r4, #2
 8015690:	2600      	movs	r6, #0
 8015692:	42a6      	cmp	r6, r4
 8015694:	d105      	bne.n	80156a2 <__libc_init_array+0x2e>
 8015696:	bd70      	pop	{r4, r5, r6, pc}
 8015698:	f855 3b04 	ldr.w	r3, [r5], #4
 801569c:	4798      	blx	r3
 801569e:	3601      	adds	r6, #1
 80156a0:	e7ee      	b.n	8015680 <__libc_init_array+0xc>
 80156a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80156a6:	4798      	blx	r3
 80156a8:	3601      	adds	r6, #1
 80156aa:	e7f2      	b.n	8015692 <__libc_init_array+0x1e>
 80156ac:	08016e70 	.word	0x08016e70
 80156b0:	08016e70 	.word	0x08016e70
 80156b4:	08016e70 	.word	0x08016e70
 80156b8:	08016e74 	.word	0x08016e74

080156bc <__retarget_lock_init_recursive>:
 80156bc:	4770      	bx	lr

080156be <__retarget_lock_acquire_recursive>:
 80156be:	4770      	bx	lr

080156c0 <__retarget_lock_release_recursive>:
 80156c0:	4770      	bx	lr

080156c2 <__aeabi_memcpy>:
 80156c2:	f000 b800 	b.w	80156c6 <memcpy>

080156c6 <memcpy>:
 80156c6:	440a      	add	r2, r1
 80156c8:	4291      	cmp	r1, r2
 80156ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80156ce:	d100      	bne.n	80156d2 <memcpy+0xc>
 80156d0:	4770      	bx	lr
 80156d2:	b510      	push	{r4, lr}
 80156d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156dc:	4291      	cmp	r1, r2
 80156de:	d1f9      	bne.n	80156d4 <memcpy+0xe>
 80156e0:	bd10      	pop	{r4, pc}

080156e2 <abort>:
 80156e2:	b508      	push	{r3, lr}
 80156e4:	2006      	movs	r0, #6
 80156e6:	f000 fe01 	bl	80162ec <raise>
 80156ea:	2001      	movs	r0, #1
 80156ec:	f7f2 fb00 	bl	8007cf0 <_exit>

080156f0 <_free_r>:
 80156f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156f2:	2900      	cmp	r1, #0
 80156f4:	d044      	beq.n	8015780 <_free_r+0x90>
 80156f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156fa:	9001      	str	r0, [sp, #4]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	f1a1 0404 	sub.w	r4, r1, #4
 8015702:	bfb8      	it	lt
 8015704:	18e4      	addlt	r4, r4, r3
 8015706:	f7ff fd81 	bl	801520c <__malloc_lock>
 801570a:	4a1e      	ldr	r2, [pc, #120]	; (8015784 <_free_r+0x94>)
 801570c:	9801      	ldr	r0, [sp, #4]
 801570e:	6813      	ldr	r3, [r2, #0]
 8015710:	b933      	cbnz	r3, 8015720 <_free_r+0x30>
 8015712:	6063      	str	r3, [r4, #4]
 8015714:	6014      	str	r4, [r2, #0]
 8015716:	b003      	add	sp, #12
 8015718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801571c:	f7ff bd7c 	b.w	8015218 <__malloc_unlock>
 8015720:	42a3      	cmp	r3, r4
 8015722:	d908      	bls.n	8015736 <_free_r+0x46>
 8015724:	6825      	ldr	r5, [r4, #0]
 8015726:	1961      	adds	r1, r4, r5
 8015728:	428b      	cmp	r3, r1
 801572a:	bf01      	itttt	eq
 801572c:	6819      	ldreq	r1, [r3, #0]
 801572e:	685b      	ldreq	r3, [r3, #4]
 8015730:	1949      	addeq	r1, r1, r5
 8015732:	6021      	streq	r1, [r4, #0]
 8015734:	e7ed      	b.n	8015712 <_free_r+0x22>
 8015736:	461a      	mov	r2, r3
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	b10b      	cbz	r3, 8015740 <_free_r+0x50>
 801573c:	42a3      	cmp	r3, r4
 801573e:	d9fa      	bls.n	8015736 <_free_r+0x46>
 8015740:	6811      	ldr	r1, [r2, #0]
 8015742:	1855      	adds	r5, r2, r1
 8015744:	42a5      	cmp	r5, r4
 8015746:	d10b      	bne.n	8015760 <_free_r+0x70>
 8015748:	6824      	ldr	r4, [r4, #0]
 801574a:	4421      	add	r1, r4
 801574c:	1854      	adds	r4, r2, r1
 801574e:	42a3      	cmp	r3, r4
 8015750:	6011      	str	r1, [r2, #0]
 8015752:	d1e0      	bne.n	8015716 <_free_r+0x26>
 8015754:	681c      	ldr	r4, [r3, #0]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	6053      	str	r3, [r2, #4]
 801575a:	440c      	add	r4, r1
 801575c:	6014      	str	r4, [r2, #0]
 801575e:	e7da      	b.n	8015716 <_free_r+0x26>
 8015760:	d902      	bls.n	8015768 <_free_r+0x78>
 8015762:	230c      	movs	r3, #12
 8015764:	6003      	str	r3, [r0, #0]
 8015766:	e7d6      	b.n	8015716 <_free_r+0x26>
 8015768:	6825      	ldr	r5, [r4, #0]
 801576a:	1961      	adds	r1, r4, r5
 801576c:	428b      	cmp	r3, r1
 801576e:	bf04      	itt	eq
 8015770:	6819      	ldreq	r1, [r3, #0]
 8015772:	685b      	ldreq	r3, [r3, #4]
 8015774:	6063      	str	r3, [r4, #4]
 8015776:	bf04      	itt	eq
 8015778:	1949      	addeq	r1, r1, r5
 801577a:	6021      	streq	r1, [r4, #0]
 801577c:	6054      	str	r4, [r2, #4]
 801577e:	e7ca      	b.n	8015716 <_free_r+0x26>
 8015780:	b003      	add	sp, #12
 8015782:	bd30      	pop	{r4, r5, pc}
 8015784:	200008dc 	.word	0x200008dc

08015788 <__ssputs_r>:
 8015788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801578c:	688e      	ldr	r6, [r1, #8]
 801578e:	461f      	mov	r7, r3
 8015790:	42be      	cmp	r6, r7
 8015792:	680b      	ldr	r3, [r1, #0]
 8015794:	4682      	mov	sl, r0
 8015796:	460c      	mov	r4, r1
 8015798:	4690      	mov	r8, r2
 801579a:	d82c      	bhi.n	80157f6 <__ssputs_r+0x6e>
 801579c:	898a      	ldrh	r2, [r1, #12]
 801579e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80157a2:	d026      	beq.n	80157f2 <__ssputs_r+0x6a>
 80157a4:	6965      	ldr	r5, [r4, #20]
 80157a6:	6909      	ldr	r1, [r1, #16]
 80157a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157ac:	eba3 0901 	sub.w	r9, r3, r1
 80157b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80157b4:	1c7b      	adds	r3, r7, #1
 80157b6:	444b      	add	r3, r9
 80157b8:	106d      	asrs	r5, r5, #1
 80157ba:	429d      	cmp	r5, r3
 80157bc:	bf38      	it	cc
 80157be:	461d      	movcc	r5, r3
 80157c0:	0553      	lsls	r3, r2, #21
 80157c2:	d527      	bpl.n	8015814 <__ssputs_r+0x8c>
 80157c4:	4629      	mov	r1, r5
 80157c6:	f7ff fca1 	bl	801510c <_malloc_r>
 80157ca:	4606      	mov	r6, r0
 80157cc:	b360      	cbz	r0, 8015828 <__ssputs_r+0xa0>
 80157ce:	6921      	ldr	r1, [r4, #16]
 80157d0:	464a      	mov	r2, r9
 80157d2:	f7ff ff78 	bl	80156c6 <memcpy>
 80157d6:	89a3      	ldrh	r3, [r4, #12]
 80157d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80157dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157e0:	81a3      	strh	r3, [r4, #12]
 80157e2:	6126      	str	r6, [r4, #16]
 80157e4:	6165      	str	r5, [r4, #20]
 80157e6:	444e      	add	r6, r9
 80157e8:	eba5 0509 	sub.w	r5, r5, r9
 80157ec:	6026      	str	r6, [r4, #0]
 80157ee:	60a5      	str	r5, [r4, #8]
 80157f0:	463e      	mov	r6, r7
 80157f2:	42be      	cmp	r6, r7
 80157f4:	d900      	bls.n	80157f8 <__ssputs_r+0x70>
 80157f6:	463e      	mov	r6, r7
 80157f8:	6820      	ldr	r0, [r4, #0]
 80157fa:	4632      	mov	r2, r6
 80157fc:	4641      	mov	r1, r8
 80157fe:	f000 fd33 	bl	8016268 <memmove>
 8015802:	68a3      	ldr	r3, [r4, #8]
 8015804:	1b9b      	subs	r3, r3, r6
 8015806:	60a3      	str	r3, [r4, #8]
 8015808:	6823      	ldr	r3, [r4, #0]
 801580a:	4433      	add	r3, r6
 801580c:	6023      	str	r3, [r4, #0]
 801580e:	2000      	movs	r0, #0
 8015810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015814:	462a      	mov	r2, r5
 8015816:	f000 fd85 	bl	8016324 <_realloc_r>
 801581a:	4606      	mov	r6, r0
 801581c:	2800      	cmp	r0, #0
 801581e:	d1e0      	bne.n	80157e2 <__ssputs_r+0x5a>
 8015820:	6921      	ldr	r1, [r4, #16]
 8015822:	4650      	mov	r0, sl
 8015824:	f7ff ff64 	bl	80156f0 <_free_r>
 8015828:	230c      	movs	r3, #12
 801582a:	f8ca 3000 	str.w	r3, [sl]
 801582e:	89a3      	ldrh	r3, [r4, #12]
 8015830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015834:	81a3      	strh	r3, [r4, #12]
 8015836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801583a:	e7e9      	b.n	8015810 <__ssputs_r+0x88>

0801583c <_svfiprintf_r>:
 801583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015840:	4698      	mov	r8, r3
 8015842:	898b      	ldrh	r3, [r1, #12]
 8015844:	061b      	lsls	r3, r3, #24
 8015846:	b09d      	sub	sp, #116	; 0x74
 8015848:	4607      	mov	r7, r0
 801584a:	460d      	mov	r5, r1
 801584c:	4614      	mov	r4, r2
 801584e:	d50e      	bpl.n	801586e <_svfiprintf_r+0x32>
 8015850:	690b      	ldr	r3, [r1, #16]
 8015852:	b963      	cbnz	r3, 801586e <_svfiprintf_r+0x32>
 8015854:	2140      	movs	r1, #64	; 0x40
 8015856:	f7ff fc59 	bl	801510c <_malloc_r>
 801585a:	6028      	str	r0, [r5, #0]
 801585c:	6128      	str	r0, [r5, #16]
 801585e:	b920      	cbnz	r0, 801586a <_svfiprintf_r+0x2e>
 8015860:	230c      	movs	r3, #12
 8015862:	603b      	str	r3, [r7, #0]
 8015864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015868:	e0d0      	b.n	8015a0c <_svfiprintf_r+0x1d0>
 801586a:	2340      	movs	r3, #64	; 0x40
 801586c:	616b      	str	r3, [r5, #20]
 801586e:	2300      	movs	r3, #0
 8015870:	9309      	str	r3, [sp, #36]	; 0x24
 8015872:	2320      	movs	r3, #32
 8015874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015878:	f8cd 800c 	str.w	r8, [sp, #12]
 801587c:	2330      	movs	r3, #48	; 0x30
 801587e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015a24 <_svfiprintf_r+0x1e8>
 8015882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015886:	f04f 0901 	mov.w	r9, #1
 801588a:	4623      	mov	r3, r4
 801588c:	469a      	mov	sl, r3
 801588e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015892:	b10a      	cbz	r2, 8015898 <_svfiprintf_r+0x5c>
 8015894:	2a25      	cmp	r2, #37	; 0x25
 8015896:	d1f9      	bne.n	801588c <_svfiprintf_r+0x50>
 8015898:	ebba 0b04 	subs.w	fp, sl, r4
 801589c:	d00b      	beq.n	80158b6 <_svfiprintf_r+0x7a>
 801589e:	465b      	mov	r3, fp
 80158a0:	4622      	mov	r2, r4
 80158a2:	4629      	mov	r1, r5
 80158a4:	4638      	mov	r0, r7
 80158a6:	f7ff ff6f 	bl	8015788 <__ssputs_r>
 80158aa:	3001      	adds	r0, #1
 80158ac:	f000 80a9 	beq.w	8015a02 <_svfiprintf_r+0x1c6>
 80158b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158b2:	445a      	add	r2, fp
 80158b4:	9209      	str	r2, [sp, #36]	; 0x24
 80158b6:	f89a 3000 	ldrb.w	r3, [sl]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	f000 80a1 	beq.w	8015a02 <_svfiprintf_r+0x1c6>
 80158c0:	2300      	movs	r3, #0
 80158c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158ca:	f10a 0a01 	add.w	sl, sl, #1
 80158ce:	9304      	str	r3, [sp, #16]
 80158d0:	9307      	str	r3, [sp, #28]
 80158d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80158d6:	931a      	str	r3, [sp, #104]	; 0x68
 80158d8:	4654      	mov	r4, sl
 80158da:	2205      	movs	r2, #5
 80158dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158e0:	4850      	ldr	r0, [pc, #320]	; (8015a24 <_svfiprintf_r+0x1e8>)
 80158e2:	f7f0 f9c5 	bl	8005c70 <memchr>
 80158e6:	9a04      	ldr	r2, [sp, #16]
 80158e8:	b9d8      	cbnz	r0, 8015922 <_svfiprintf_r+0xe6>
 80158ea:	06d0      	lsls	r0, r2, #27
 80158ec:	bf44      	itt	mi
 80158ee:	2320      	movmi	r3, #32
 80158f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158f4:	0711      	lsls	r1, r2, #28
 80158f6:	bf44      	itt	mi
 80158f8:	232b      	movmi	r3, #43	; 0x2b
 80158fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158fe:	f89a 3000 	ldrb.w	r3, [sl]
 8015902:	2b2a      	cmp	r3, #42	; 0x2a
 8015904:	d015      	beq.n	8015932 <_svfiprintf_r+0xf6>
 8015906:	9a07      	ldr	r2, [sp, #28]
 8015908:	4654      	mov	r4, sl
 801590a:	2000      	movs	r0, #0
 801590c:	f04f 0c0a 	mov.w	ip, #10
 8015910:	4621      	mov	r1, r4
 8015912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015916:	3b30      	subs	r3, #48	; 0x30
 8015918:	2b09      	cmp	r3, #9
 801591a:	d94d      	bls.n	80159b8 <_svfiprintf_r+0x17c>
 801591c:	b1b0      	cbz	r0, 801594c <_svfiprintf_r+0x110>
 801591e:	9207      	str	r2, [sp, #28]
 8015920:	e014      	b.n	801594c <_svfiprintf_r+0x110>
 8015922:	eba0 0308 	sub.w	r3, r0, r8
 8015926:	fa09 f303 	lsl.w	r3, r9, r3
 801592a:	4313      	orrs	r3, r2
 801592c:	9304      	str	r3, [sp, #16]
 801592e:	46a2      	mov	sl, r4
 8015930:	e7d2      	b.n	80158d8 <_svfiprintf_r+0x9c>
 8015932:	9b03      	ldr	r3, [sp, #12]
 8015934:	1d19      	adds	r1, r3, #4
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	9103      	str	r1, [sp, #12]
 801593a:	2b00      	cmp	r3, #0
 801593c:	bfbb      	ittet	lt
 801593e:	425b      	neglt	r3, r3
 8015940:	f042 0202 	orrlt.w	r2, r2, #2
 8015944:	9307      	strge	r3, [sp, #28]
 8015946:	9307      	strlt	r3, [sp, #28]
 8015948:	bfb8      	it	lt
 801594a:	9204      	strlt	r2, [sp, #16]
 801594c:	7823      	ldrb	r3, [r4, #0]
 801594e:	2b2e      	cmp	r3, #46	; 0x2e
 8015950:	d10c      	bne.n	801596c <_svfiprintf_r+0x130>
 8015952:	7863      	ldrb	r3, [r4, #1]
 8015954:	2b2a      	cmp	r3, #42	; 0x2a
 8015956:	d134      	bne.n	80159c2 <_svfiprintf_r+0x186>
 8015958:	9b03      	ldr	r3, [sp, #12]
 801595a:	1d1a      	adds	r2, r3, #4
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	9203      	str	r2, [sp, #12]
 8015960:	2b00      	cmp	r3, #0
 8015962:	bfb8      	it	lt
 8015964:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015968:	3402      	adds	r4, #2
 801596a:	9305      	str	r3, [sp, #20]
 801596c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015a34 <_svfiprintf_r+0x1f8>
 8015970:	7821      	ldrb	r1, [r4, #0]
 8015972:	2203      	movs	r2, #3
 8015974:	4650      	mov	r0, sl
 8015976:	f7f0 f97b 	bl	8005c70 <memchr>
 801597a:	b138      	cbz	r0, 801598c <_svfiprintf_r+0x150>
 801597c:	9b04      	ldr	r3, [sp, #16]
 801597e:	eba0 000a 	sub.w	r0, r0, sl
 8015982:	2240      	movs	r2, #64	; 0x40
 8015984:	4082      	lsls	r2, r0
 8015986:	4313      	orrs	r3, r2
 8015988:	3401      	adds	r4, #1
 801598a:	9304      	str	r3, [sp, #16]
 801598c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015990:	4825      	ldr	r0, [pc, #148]	; (8015a28 <_svfiprintf_r+0x1ec>)
 8015992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015996:	2206      	movs	r2, #6
 8015998:	f7f0 f96a 	bl	8005c70 <memchr>
 801599c:	2800      	cmp	r0, #0
 801599e:	d038      	beq.n	8015a12 <_svfiprintf_r+0x1d6>
 80159a0:	4b22      	ldr	r3, [pc, #136]	; (8015a2c <_svfiprintf_r+0x1f0>)
 80159a2:	bb1b      	cbnz	r3, 80159ec <_svfiprintf_r+0x1b0>
 80159a4:	9b03      	ldr	r3, [sp, #12]
 80159a6:	3307      	adds	r3, #7
 80159a8:	f023 0307 	bic.w	r3, r3, #7
 80159ac:	3308      	adds	r3, #8
 80159ae:	9303      	str	r3, [sp, #12]
 80159b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159b2:	4433      	add	r3, r6
 80159b4:	9309      	str	r3, [sp, #36]	; 0x24
 80159b6:	e768      	b.n	801588a <_svfiprintf_r+0x4e>
 80159b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80159bc:	460c      	mov	r4, r1
 80159be:	2001      	movs	r0, #1
 80159c0:	e7a6      	b.n	8015910 <_svfiprintf_r+0xd4>
 80159c2:	2300      	movs	r3, #0
 80159c4:	3401      	adds	r4, #1
 80159c6:	9305      	str	r3, [sp, #20]
 80159c8:	4619      	mov	r1, r3
 80159ca:	f04f 0c0a 	mov.w	ip, #10
 80159ce:	4620      	mov	r0, r4
 80159d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159d4:	3a30      	subs	r2, #48	; 0x30
 80159d6:	2a09      	cmp	r2, #9
 80159d8:	d903      	bls.n	80159e2 <_svfiprintf_r+0x1a6>
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d0c6      	beq.n	801596c <_svfiprintf_r+0x130>
 80159de:	9105      	str	r1, [sp, #20]
 80159e0:	e7c4      	b.n	801596c <_svfiprintf_r+0x130>
 80159e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80159e6:	4604      	mov	r4, r0
 80159e8:	2301      	movs	r3, #1
 80159ea:	e7f0      	b.n	80159ce <_svfiprintf_r+0x192>
 80159ec:	ab03      	add	r3, sp, #12
 80159ee:	9300      	str	r3, [sp, #0]
 80159f0:	462a      	mov	r2, r5
 80159f2:	4b0f      	ldr	r3, [pc, #60]	; (8015a30 <_svfiprintf_r+0x1f4>)
 80159f4:	a904      	add	r1, sp, #16
 80159f6:	4638      	mov	r0, r7
 80159f8:	f3af 8000 	nop.w
 80159fc:	1c42      	adds	r2, r0, #1
 80159fe:	4606      	mov	r6, r0
 8015a00:	d1d6      	bne.n	80159b0 <_svfiprintf_r+0x174>
 8015a02:	89ab      	ldrh	r3, [r5, #12]
 8015a04:	065b      	lsls	r3, r3, #25
 8015a06:	f53f af2d 	bmi.w	8015864 <_svfiprintf_r+0x28>
 8015a0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a0c:	b01d      	add	sp, #116	; 0x74
 8015a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a12:	ab03      	add	r3, sp, #12
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	462a      	mov	r2, r5
 8015a18:	4b05      	ldr	r3, [pc, #20]	; (8015a30 <_svfiprintf_r+0x1f4>)
 8015a1a:	a904      	add	r1, sp, #16
 8015a1c:	4638      	mov	r0, r7
 8015a1e:	f000 f9bd 	bl	8015d9c <_printf_i>
 8015a22:	e7eb      	b.n	80159fc <_svfiprintf_r+0x1c0>
 8015a24:	08016e34 	.word	0x08016e34
 8015a28:	08016e3e 	.word	0x08016e3e
 8015a2c:	00000000 	.word	0x00000000
 8015a30:	08015789 	.word	0x08015789
 8015a34:	08016e3a 	.word	0x08016e3a

08015a38 <__sfputc_r>:
 8015a38:	6893      	ldr	r3, [r2, #8]
 8015a3a:	3b01      	subs	r3, #1
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	b410      	push	{r4}
 8015a40:	6093      	str	r3, [r2, #8]
 8015a42:	da08      	bge.n	8015a56 <__sfputc_r+0x1e>
 8015a44:	6994      	ldr	r4, [r2, #24]
 8015a46:	42a3      	cmp	r3, r4
 8015a48:	db01      	blt.n	8015a4e <__sfputc_r+0x16>
 8015a4a:	290a      	cmp	r1, #10
 8015a4c:	d103      	bne.n	8015a56 <__sfputc_r+0x1e>
 8015a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a52:	f000 bb73 	b.w	801613c <__swbuf_r>
 8015a56:	6813      	ldr	r3, [r2, #0]
 8015a58:	1c58      	adds	r0, r3, #1
 8015a5a:	6010      	str	r0, [r2, #0]
 8015a5c:	7019      	strb	r1, [r3, #0]
 8015a5e:	4608      	mov	r0, r1
 8015a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a64:	4770      	bx	lr

08015a66 <__sfputs_r>:
 8015a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a68:	4606      	mov	r6, r0
 8015a6a:	460f      	mov	r7, r1
 8015a6c:	4614      	mov	r4, r2
 8015a6e:	18d5      	adds	r5, r2, r3
 8015a70:	42ac      	cmp	r4, r5
 8015a72:	d101      	bne.n	8015a78 <__sfputs_r+0x12>
 8015a74:	2000      	movs	r0, #0
 8015a76:	e007      	b.n	8015a88 <__sfputs_r+0x22>
 8015a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a7c:	463a      	mov	r2, r7
 8015a7e:	4630      	mov	r0, r6
 8015a80:	f7ff ffda 	bl	8015a38 <__sfputc_r>
 8015a84:	1c43      	adds	r3, r0, #1
 8015a86:	d1f3      	bne.n	8015a70 <__sfputs_r+0xa>
 8015a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a8c <_vfiprintf_r>:
 8015a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a90:	460d      	mov	r5, r1
 8015a92:	b09d      	sub	sp, #116	; 0x74
 8015a94:	4614      	mov	r4, r2
 8015a96:	4698      	mov	r8, r3
 8015a98:	4606      	mov	r6, r0
 8015a9a:	b118      	cbz	r0, 8015aa4 <_vfiprintf_r+0x18>
 8015a9c:	6a03      	ldr	r3, [r0, #32]
 8015a9e:	b90b      	cbnz	r3, 8015aa4 <_vfiprintf_r+0x18>
 8015aa0:	f7ff fc4c 	bl	801533c <__sinit>
 8015aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015aa6:	07d9      	lsls	r1, r3, #31
 8015aa8:	d405      	bmi.n	8015ab6 <_vfiprintf_r+0x2a>
 8015aaa:	89ab      	ldrh	r3, [r5, #12]
 8015aac:	059a      	lsls	r2, r3, #22
 8015aae:	d402      	bmi.n	8015ab6 <_vfiprintf_r+0x2a>
 8015ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ab2:	f7ff fe04 	bl	80156be <__retarget_lock_acquire_recursive>
 8015ab6:	89ab      	ldrh	r3, [r5, #12]
 8015ab8:	071b      	lsls	r3, r3, #28
 8015aba:	d501      	bpl.n	8015ac0 <_vfiprintf_r+0x34>
 8015abc:	692b      	ldr	r3, [r5, #16]
 8015abe:	b99b      	cbnz	r3, 8015ae8 <_vfiprintf_r+0x5c>
 8015ac0:	4629      	mov	r1, r5
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	f000 fb78 	bl	80161b8 <__swsetup_r>
 8015ac8:	b170      	cbz	r0, 8015ae8 <_vfiprintf_r+0x5c>
 8015aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015acc:	07dc      	lsls	r4, r3, #31
 8015ace:	d504      	bpl.n	8015ada <_vfiprintf_r+0x4e>
 8015ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ad4:	b01d      	add	sp, #116	; 0x74
 8015ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ada:	89ab      	ldrh	r3, [r5, #12]
 8015adc:	0598      	lsls	r0, r3, #22
 8015ade:	d4f7      	bmi.n	8015ad0 <_vfiprintf_r+0x44>
 8015ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ae2:	f7ff fded 	bl	80156c0 <__retarget_lock_release_recursive>
 8015ae6:	e7f3      	b.n	8015ad0 <_vfiprintf_r+0x44>
 8015ae8:	2300      	movs	r3, #0
 8015aea:	9309      	str	r3, [sp, #36]	; 0x24
 8015aec:	2320      	movs	r3, #32
 8015aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015af6:	2330      	movs	r3, #48	; 0x30
 8015af8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015cac <_vfiprintf_r+0x220>
 8015afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b00:	f04f 0901 	mov.w	r9, #1
 8015b04:	4623      	mov	r3, r4
 8015b06:	469a      	mov	sl, r3
 8015b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b0c:	b10a      	cbz	r2, 8015b12 <_vfiprintf_r+0x86>
 8015b0e:	2a25      	cmp	r2, #37	; 0x25
 8015b10:	d1f9      	bne.n	8015b06 <_vfiprintf_r+0x7a>
 8015b12:	ebba 0b04 	subs.w	fp, sl, r4
 8015b16:	d00b      	beq.n	8015b30 <_vfiprintf_r+0xa4>
 8015b18:	465b      	mov	r3, fp
 8015b1a:	4622      	mov	r2, r4
 8015b1c:	4629      	mov	r1, r5
 8015b1e:	4630      	mov	r0, r6
 8015b20:	f7ff ffa1 	bl	8015a66 <__sfputs_r>
 8015b24:	3001      	adds	r0, #1
 8015b26:	f000 80a9 	beq.w	8015c7c <_vfiprintf_r+0x1f0>
 8015b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b2c:	445a      	add	r2, fp
 8015b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8015b30:	f89a 3000 	ldrb.w	r3, [sl]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	f000 80a1 	beq.w	8015c7c <_vfiprintf_r+0x1f0>
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b44:	f10a 0a01 	add.w	sl, sl, #1
 8015b48:	9304      	str	r3, [sp, #16]
 8015b4a:	9307      	str	r3, [sp, #28]
 8015b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b50:	931a      	str	r3, [sp, #104]	; 0x68
 8015b52:	4654      	mov	r4, sl
 8015b54:	2205      	movs	r2, #5
 8015b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b5a:	4854      	ldr	r0, [pc, #336]	; (8015cac <_vfiprintf_r+0x220>)
 8015b5c:	f7f0 f888 	bl	8005c70 <memchr>
 8015b60:	9a04      	ldr	r2, [sp, #16]
 8015b62:	b9d8      	cbnz	r0, 8015b9c <_vfiprintf_r+0x110>
 8015b64:	06d1      	lsls	r1, r2, #27
 8015b66:	bf44      	itt	mi
 8015b68:	2320      	movmi	r3, #32
 8015b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b6e:	0713      	lsls	r3, r2, #28
 8015b70:	bf44      	itt	mi
 8015b72:	232b      	movmi	r3, #43	; 0x2b
 8015b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b78:	f89a 3000 	ldrb.w	r3, [sl]
 8015b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8015b7e:	d015      	beq.n	8015bac <_vfiprintf_r+0x120>
 8015b80:	9a07      	ldr	r2, [sp, #28]
 8015b82:	4654      	mov	r4, sl
 8015b84:	2000      	movs	r0, #0
 8015b86:	f04f 0c0a 	mov.w	ip, #10
 8015b8a:	4621      	mov	r1, r4
 8015b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b90:	3b30      	subs	r3, #48	; 0x30
 8015b92:	2b09      	cmp	r3, #9
 8015b94:	d94d      	bls.n	8015c32 <_vfiprintf_r+0x1a6>
 8015b96:	b1b0      	cbz	r0, 8015bc6 <_vfiprintf_r+0x13a>
 8015b98:	9207      	str	r2, [sp, #28]
 8015b9a:	e014      	b.n	8015bc6 <_vfiprintf_r+0x13a>
 8015b9c:	eba0 0308 	sub.w	r3, r0, r8
 8015ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	9304      	str	r3, [sp, #16]
 8015ba8:	46a2      	mov	sl, r4
 8015baa:	e7d2      	b.n	8015b52 <_vfiprintf_r+0xc6>
 8015bac:	9b03      	ldr	r3, [sp, #12]
 8015bae:	1d19      	adds	r1, r3, #4
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	9103      	str	r1, [sp, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	bfbb      	ittet	lt
 8015bb8:	425b      	neglt	r3, r3
 8015bba:	f042 0202 	orrlt.w	r2, r2, #2
 8015bbe:	9307      	strge	r3, [sp, #28]
 8015bc0:	9307      	strlt	r3, [sp, #28]
 8015bc2:	bfb8      	it	lt
 8015bc4:	9204      	strlt	r2, [sp, #16]
 8015bc6:	7823      	ldrb	r3, [r4, #0]
 8015bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8015bca:	d10c      	bne.n	8015be6 <_vfiprintf_r+0x15a>
 8015bcc:	7863      	ldrb	r3, [r4, #1]
 8015bce:	2b2a      	cmp	r3, #42	; 0x2a
 8015bd0:	d134      	bne.n	8015c3c <_vfiprintf_r+0x1b0>
 8015bd2:	9b03      	ldr	r3, [sp, #12]
 8015bd4:	1d1a      	adds	r2, r3, #4
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	9203      	str	r2, [sp, #12]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	bfb8      	it	lt
 8015bde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015be2:	3402      	adds	r4, #2
 8015be4:	9305      	str	r3, [sp, #20]
 8015be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015cbc <_vfiprintf_r+0x230>
 8015bea:	7821      	ldrb	r1, [r4, #0]
 8015bec:	2203      	movs	r2, #3
 8015bee:	4650      	mov	r0, sl
 8015bf0:	f7f0 f83e 	bl	8005c70 <memchr>
 8015bf4:	b138      	cbz	r0, 8015c06 <_vfiprintf_r+0x17a>
 8015bf6:	9b04      	ldr	r3, [sp, #16]
 8015bf8:	eba0 000a 	sub.w	r0, r0, sl
 8015bfc:	2240      	movs	r2, #64	; 0x40
 8015bfe:	4082      	lsls	r2, r0
 8015c00:	4313      	orrs	r3, r2
 8015c02:	3401      	adds	r4, #1
 8015c04:	9304      	str	r3, [sp, #16]
 8015c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c0a:	4829      	ldr	r0, [pc, #164]	; (8015cb0 <_vfiprintf_r+0x224>)
 8015c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c10:	2206      	movs	r2, #6
 8015c12:	f7f0 f82d 	bl	8005c70 <memchr>
 8015c16:	2800      	cmp	r0, #0
 8015c18:	d03f      	beq.n	8015c9a <_vfiprintf_r+0x20e>
 8015c1a:	4b26      	ldr	r3, [pc, #152]	; (8015cb4 <_vfiprintf_r+0x228>)
 8015c1c:	bb1b      	cbnz	r3, 8015c66 <_vfiprintf_r+0x1da>
 8015c1e:	9b03      	ldr	r3, [sp, #12]
 8015c20:	3307      	adds	r3, #7
 8015c22:	f023 0307 	bic.w	r3, r3, #7
 8015c26:	3308      	adds	r3, #8
 8015c28:	9303      	str	r3, [sp, #12]
 8015c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c2c:	443b      	add	r3, r7
 8015c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8015c30:	e768      	b.n	8015b04 <_vfiprintf_r+0x78>
 8015c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c36:	460c      	mov	r4, r1
 8015c38:	2001      	movs	r0, #1
 8015c3a:	e7a6      	b.n	8015b8a <_vfiprintf_r+0xfe>
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	3401      	adds	r4, #1
 8015c40:	9305      	str	r3, [sp, #20]
 8015c42:	4619      	mov	r1, r3
 8015c44:	f04f 0c0a 	mov.w	ip, #10
 8015c48:	4620      	mov	r0, r4
 8015c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c4e:	3a30      	subs	r2, #48	; 0x30
 8015c50:	2a09      	cmp	r2, #9
 8015c52:	d903      	bls.n	8015c5c <_vfiprintf_r+0x1d0>
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d0c6      	beq.n	8015be6 <_vfiprintf_r+0x15a>
 8015c58:	9105      	str	r1, [sp, #20]
 8015c5a:	e7c4      	b.n	8015be6 <_vfiprintf_r+0x15a>
 8015c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c60:	4604      	mov	r4, r0
 8015c62:	2301      	movs	r3, #1
 8015c64:	e7f0      	b.n	8015c48 <_vfiprintf_r+0x1bc>
 8015c66:	ab03      	add	r3, sp, #12
 8015c68:	9300      	str	r3, [sp, #0]
 8015c6a:	462a      	mov	r2, r5
 8015c6c:	4b12      	ldr	r3, [pc, #72]	; (8015cb8 <_vfiprintf_r+0x22c>)
 8015c6e:	a904      	add	r1, sp, #16
 8015c70:	4630      	mov	r0, r6
 8015c72:	f3af 8000 	nop.w
 8015c76:	4607      	mov	r7, r0
 8015c78:	1c78      	adds	r0, r7, #1
 8015c7a:	d1d6      	bne.n	8015c2a <_vfiprintf_r+0x19e>
 8015c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c7e:	07d9      	lsls	r1, r3, #31
 8015c80:	d405      	bmi.n	8015c8e <_vfiprintf_r+0x202>
 8015c82:	89ab      	ldrh	r3, [r5, #12]
 8015c84:	059a      	lsls	r2, r3, #22
 8015c86:	d402      	bmi.n	8015c8e <_vfiprintf_r+0x202>
 8015c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c8a:	f7ff fd19 	bl	80156c0 <__retarget_lock_release_recursive>
 8015c8e:	89ab      	ldrh	r3, [r5, #12]
 8015c90:	065b      	lsls	r3, r3, #25
 8015c92:	f53f af1d 	bmi.w	8015ad0 <_vfiprintf_r+0x44>
 8015c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c98:	e71c      	b.n	8015ad4 <_vfiprintf_r+0x48>
 8015c9a:	ab03      	add	r3, sp, #12
 8015c9c:	9300      	str	r3, [sp, #0]
 8015c9e:	462a      	mov	r2, r5
 8015ca0:	4b05      	ldr	r3, [pc, #20]	; (8015cb8 <_vfiprintf_r+0x22c>)
 8015ca2:	a904      	add	r1, sp, #16
 8015ca4:	4630      	mov	r0, r6
 8015ca6:	f000 f879 	bl	8015d9c <_printf_i>
 8015caa:	e7e4      	b.n	8015c76 <_vfiprintf_r+0x1ea>
 8015cac:	08016e34 	.word	0x08016e34
 8015cb0:	08016e3e 	.word	0x08016e3e
 8015cb4:	00000000 	.word	0x00000000
 8015cb8:	08015a67 	.word	0x08015a67
 8015cbc:	08016e3a 	.word	0x08016e3a

08015cc0 <_printf_common>:
 8015cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc4:	4616      	mov	r6, r2
 8015cc6:	4699      	mov	r9, r3
 8015cc8:	688a      	ldr	r2, [r1, #8]
 8015cca:	690b      	ldr	r3, [r1, #16]
 8015ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015cd0:	4293      	cmp	r3, r2
 8015cd2:	bfb8      	it	lt
 8015cd4:	4613      	movlt	r3, r2
 8015cd6:	6033      	str	r3, [r6, #0]
 8015cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015cdc:	4607      	mov	r7, r0
 8015cde:	460c      	mov	r4, r1
 8015ce0:	b10a      	cbz	r2, 8015ce6 <_printf_common+0x26>
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	6033      	str	r3, [r6, #0]
 8015ce6:	6823      	ldr	r3, [r4, #0]
 8015ce8:	0699      	lsls	r1, r3, #26
 8015cea:	bf42      	ittt	mi
 8015cec:	6833      	ldrmi	r3, [r6, #0]
 8015cee:	3302      	addmi	r3, #2
 8015cf0:	6033      	strmi	r3, [r6, #0]
 8015cf2:	6825      	ldr	r5, [r4, #0]
 8015cf4:	f015 0506 	ands.w	r5, r5, #6
 8015cf8:	d106      	bne.n	8015d08 <_printf_common+0x48>
 8015cfa:	f104 0a19 	add.w	sl, r4, #25
 8015cfe:	68e3      	ldr	r3, [r4, #12]
 8015d00:	6832      	ldr	r2, [r6, #0]
 8015d02:	1a9b      	subs	r3, r3, r2
 8015d04:	42ab      	cmp	r3, r5
 8015d06:	dc26      	bgt.n	8015d56 <_printf_common+0x96>
 8015d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015d0c:	1e13      	subs	r3, r2, #0
 8015d0e:	6822      	ldr	r2, [r4, #0]
 8015d10:	bf18      	it	ne
 8015d12:	2301      	movne	r3, #1
 8015d14:	0692      	lsls	r2, r2, #26
 8015d16:	d42b      	bmi.n	8015d70 <_printf_common+0xb0>
 8015d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d1c:	4649      	mov	r1, r9
 8015d1e:	4638      	mov	r0, r7
 8015d20:	47c0      	blx	r8
 8015d22:	3001      	adds	r0, #1
 8015d24:	d01e      	beq.n	8015d64 <_printf_common+0xa4>
 8015d26:	6823      	ldr	r3, [r4, #0]
 8015d28:	6922      	ldr	r2, [r4, #16]
 8015d2a:	f003 0306 	and.w	r3, r3, #6
 8015d2e:	2b04      	cmp	r3, #4
 8015d30:	bf02      	ittt	eq
 8015d32:	68e5      	ldreq	r5, [r4, #12]
 8015d34:	6833      	ldreq	r3, [r6, #0]
 8015d36:	1aed      	subeq	r5, r5, r3
 8015d38:	68a3      	ldr	r3, [r4, #8]
 8015d3a:	bf0c      	ite	eq
 8015d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d40:	2500      	movne	r5, #0
 8015d42:	4293      	cmp	r3, r2
 8015d44:	bfc4      	itt	gt
 8015d46:	1a9b      	subgt	r3, r3, r2
 8015d48:	18ed      	addgt	r5, r5, r3
 8015d4a:	2600      	movs	r6, #0
 8015d4c:	341a      	adds	r4, #26
 8015d4e:	42b5      	cmp	r5, r6
 8015d50:	d11a      	bne.n	8015d88 <_printf_common+0xc8>
 8015d52:	2000      	movs	r0, #0
 8015d54:	e008      	b.n	8015d68 <_printf_common+0xa8>
 8015d56:	2301      	movs	r3, #1
 8015d58:	4652      	mov	r2, sl
 8015d5a:	4649      	mov	r1, r9
 8015d5c:	4638      	mov	r0, r7
 8015d5e:	47c0      	blx	r8
 8015d60:	3001      	adds	r0, #1
 8015d62:	d103      	bne.n	8015d6c <_printf_common+0xac>
 8015d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d6c:	3501      	adds	r5, #1
 8015d6e:	e7c6      	b.n	8015cfe <_printf_common+0x3e>
 8015d70:	18e1      	adds	r1, r4, r3
 8015d72:	1c5a      	adds	r2, r3, #1
 8015d74:	2030      	movs	r0, #48	; 0x30
 8015d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d7a:	4422      	add	r2, r4
 8015d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d84:	3302      	adds	r3, #2
 8015d86:	e7c7      	b.n	8015d18 <_printf_common+0x58>
 8015d88:	2301      	movs	r3, #1
 8015d8a:	4622      	mov	r2, r4
 8015d8c:	4649      	mov	r1, r9
 8015d8e:	4638      	mov	r0, r7
 8015d90:	47c0      	blx	r8
 8015d92:	3001      	adds	r0, #1
 8015d94:	d0e6      	beq.n	8015d64 <_printf_common+0xa4>
 8015d96:	3601      	adds	r6, #1
 8015d98:	e7d9      	b.n	8015d4e <_printf_common+0x8e>
	...

08015d9c <_printf_i>:
 8015d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015da0:	7e0f      	ldrb	r7, [r1, #24]
 8015da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015da4:	2f78      	cmp	r7, #120	; 0x78
 8015da6:	4691      	mov	r9, r2
 8015da8:	4680      	mov	r8, r0
 8015daa:	460c      	mov	r4, r1
 8015dac:	469a      	mov	sl, r3
 8015dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015db2:	d807      	bhi.n	8015dc4 <_printf_i+0x28>
 8015db4:	2f62      	cmp	r7, #98	; 0x62
 8015db6:	d80a      	bhi.n	8015dce <_printf_i+0x32>
 8015db8:	2f00      	cmp	r7, #0
 8015dba:	f000 80d4 	beq.w	8015f66 <_printf_i+0x1ca>
 8015dbe:	2f58      	cmp	r7, #88	; 0x58
 8015dc0:	f000 80c0 	beq.w	8015f44 <_printf_i+0x1a8>
 8015dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015dcc:	e03a      	b.n	8015e44 <_printf_i+0xa8>
 8015dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015dd2:	2b15      	cmp	r3, #21
 8015dd4:	d8f6      	bhi.n	8015dc4 <_printf_i+0x28>
 8015dd6:	a101      	add	r1, pc, #4	; (adr r1, 8015ddc <_printf_i+0x40>)
 8015dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ddc:	08015e35 	.word	0x08015e35
 8015de0:	08015e49 	.word	0x08015e49
 8015de4:	08015dc5 	.word	0x08015dc5
 8015de8:	08015dc5 	.word	0x08015dc5
 8015dec:	08015dc5 	.word	0x08015dc5
 8015df0:	08015dc5 	.word	0x08015dc5
 8015df4:	08015e49 	.word	0x08015e49
 8015df8:	08015dc5 	.word	0x08015dc5
 8015dfc:	08015dc5 	.word	0x08015dc5
 8015e00:	08015dc5 	.word	0x08015dc5
 8015e04:	08015dc5 	.word	0x08015dc5
 8015e08:	08015f4d 	.word	0x08015f4d
 8015e0c:	08015e75 	.word	0x08015e75
 8015e10:	08015f07 	.word	0x08015f07
 8015e14:	08015dc5 	.word	0x08015dc5
 8015e18:	08015dc5 	.word	0x08015dc5
 8015e1c:	08015f6f 	.word	0x08015f6f
 8015e20:	08015dc5 	.word	0x08015dc5
 8015e24:	08015e75 	.word	0x08015e75
 8015e28:	08015dc5 	.word	0x08015dc5
 8015e2c:	08015dc5 	.word	0x08015dc5
 8015e30:	08015f0f 	.word	0x08015f0f
 8015e34:	682b      	ldr	r3, [r5, #0]
 8015e36:	1d1a      	adds	r2, r3, #4
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	602a      	str	r2, [r5, #0]
 8015e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e44:	2301      	movs	r3, #1
 8015e46:	e09f      	b.n	8015f88 <_printf_i+0x1ec>
 8015e48:	6820      	ldr	r0, [r4, #0]
 8015e4a:	682b      	ldr	r3, [r5, #0]
 8015e4c:	0607      	lsls	r7, r0, #24
 8015e4e:	f103 0104 	add.w	r1, r3, #4
 8015e52:	6029      	str	r1, [r5, #0]
 8015e54:	d501      	bpl.n	8015e5a <_printf_i+0xbe>
 8015e56:	681e      	ldr	r6, [r3, #0]
 8015e58:	e003      	b.n	8015e62 <_printf_i+0xc6>
 8015e5a:	0646      	lsls	r6, r0, #25
 8015e5c:	d5fb      	bpl.n	8015e56 <_printf_i+0xba>
 8015e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015e62:	2e00      	cmp	r6, #0
 8015e64:	da03      	bge.n	8015e6e <_printf_i+0xd2>
 8015e66:	232d      	movs	r3, #45	; 0x2d
 8015e68:	4276      	negs	r6, r6
 8015e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e6e:	485a      	ldr	r0, [pc, #360]	; (8015fd8 <_printf_i+0x23c>)
 8015e70:	230a      	movs	r3, #10
 8015e72:	e012      	b.n	8015e9a <_printf_i+0xfe>
 8015e74:	682b      	ldr	r3, [r5, #0]
 8015e76:	6820      	ldr	r0, [r4, #0]
 8015e78:	1d19      	adds	r1, r3, #4
 8015e7a:	6029      	str	r1, [r5, #0]
 8015e7c:	0605      	lsls	r5, r0, #24
 8015e7e:	d501      	bpl.n	8015e84 <_printf_i+0xe8>
 8015e80:	681e      	ldr	r6, [r3, #0]
 8015e82:	e002      	b.n	8015e8a <_printf_i+0xee>
 8015e84:	0641      	lsls	r1, r0, #25
 8015e86:	d5fb      	bpl.n	8015e80 <_printf_i+0xe4>
 8015e88:	881e      	ldrh	r6, [r3, #0]
 8015e8a:	4853      	ldr	r0, [pc, #332]	; (8015fd8 <_printf_i+0x23c>)
 8015e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8015e8e:	bf0c      	ite	eq
 8015e90:	2308      	moveq	r3, #8
 8015e92:	230a      	movne	r3, #10
 8015e94:	2100      	movs	r1, #0
 8015e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e9a:	6865      	ldr	r5, [r4, #4]
 8015e9c:	60a5      	str	r5, [r4, #8]
 8015e9e:	2d00      	cmp	r5, #0
 8015ea0:	bfa2      	ittt	ge
 8015ea2:	6821      	ldrge	r1, [r4, #0]
 8015ea4:	f021 0104 	bicge.w	r1, r1, #4
 8015ea8:	6021      	strge	r1, [r4, #0]
 8015eaa:	b90e      	cbnz	r6, 8015eb0 <_printf_i+0x114>
 8015eac:	2d00      	cmp	r5, #0
 8015eae:	d04b      	beq.n	8015f48 <_printf_i+0x1ac>
 8015eb0:	4615      	mov	r5, r2
 8015eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8015eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8015eba:	5dc7      	ldrb	r7, [r0, r7]
 8015ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015ec0:	4637      	mov	r7, r6
 8015ec2:	42bb      	cmp	r3, r7
 8015ec4:	460e      	mov	r6, r1
 8015ec6:	d9f4      	bls.n	8015eb2 <_printf_i+0x116>
 8015ec8:	2b08      	cmp	r3, #8
 8015eca:	d10b      	bne.n	8015ee4 <_printf_i+0x148>
 8015ecc:	6823      	ldr	r3, [r4, #0]
 8015ece:	07de      	lsls	r6, r3, #31
 8015ed0:	d508      	bpl.n	8015ee4 <_printf_i+0x148>
 8015ed2:	6923      	ldr	r3, [r4, #16]
 8015ed4:	6861      	ldr	r1, [r4, #4]
 8015ed6:	4299      	cmp	r1, r3
 8015ed8:	bfde      	ittt	le
 8015eda:	2330      	movle	r3, #48	; 0x30
 8015edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ee0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015ee4:	1b52      	subs	r2, r2, r5
 8015ee6:	6122      	str	r2, [r4, #16]
 8015ee8:	f8cd a000 	str.w	sl, [sp]
 8015eec:	464b      	mov	r3, r9
 8015eee:	aa03      	add	r2, sp, #12
 8015ef0:	4621      	mov	r1, r4
 8015ef2:	4640      	mov	r0, r8
 8015ef4:	f7ff fee4 	bl	8015cc0 <_printf_common>
 8015ef8:	3001      	adds	r0, #1
 8015efa:	d14a      	bne.n	8015f92 <_printf_i+0x1f6>
 8015efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f00:	b004      	add	sp, #16
 8015f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f06:	6823      	ldr	r3, [r4, #0]
 8015f08:	f043 0320 	orr.w	r3, r3, #32
 8015f0c:	6023      	str	r3, [r4, #0]
 8015f0e:	4833      	ldr	r0, [pc, #204]	; (8015fdc <_printf_i+0x240>)
 8015f10:	2778      	movs	r7, #120	; 0x78
 8015f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015f16:	6823      	ldr	r3, [r4, #0]
 8015f18:	6829      	ldr	r1, [r5, #0]
 8015f1a:	061f      	lsls	r7, r3, #24
 8015f1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015f20:	d402      	bmi.n	8015f28 <_printf_i+0x18c>
 8015f22:	065f      	lsls	r7, r3, #25
 8015f24:	bf48      	it	mi
 8015f26:	b2b6      	uxthmi	r6, r6
 8015f28:	07df      	lsls	r7, r3, #31
 8015f2a:	bf48      	it	mi
 8015f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8015f30:	6029      	str	r1, [r5, #0]
 8015f32:	bf48      	it	mi
 8015f34:	6023      	strmi	r3, [r4, #0]
 8015f36:	b91e      	cbnz	r6, 8015f40 <_printf_i+0x1a4>
 8015f38:	6823      	ldr	r3, [r4, #0]
 8015f3a:	f023 0320 	bic.w	r3, r3, #32
 8015f3e:	6023      	str	r3, [r4, #0]
 8015f40:	2310      	movs	r3, #16
 8015f42:	e7a7      	b.n	8015e94 <_printf_i+0xf8>
 8015f44:	4824      	ldr	r0, [pc, #144]	; (8015fd8 <_printf_i+0x23c>)
 8015f46:	e7e4      	b.n	8015f12 <_printf_i+0x176>
 8015f48:	4615      	mov	r5, r2
 8015f4a:	e7bd      	b.n	8015ec8 <_printf_i+0x12c>
 8015f4c:	682b      	ldr	r3, [r5, #0]
 8015f4e:	6826      	ldr	r6, [r4, #0]
 8015f50:	6961      	ldr	r1, [r4, #20]
 8015f52:	1d18      	adds	r0, r3, #4
 8015f54:	6028      	str	r0, [r5, #0]
 8015f56:	0635      	lsls	r5, r6, #24
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	d501      	bpl.n	8015f60 <_printf_i+0x1c4>
 8015f5c:	6019      	str	r1, [r3, #0]
 8015f5e:	e002      	b.n	8015f66 <_printf_i+0x1ca>
 8015f60:	0670      	lsls	r0, r6, #25
 8015f62:	d5fb      	bpl.n	8015f5c <_printf_i+0x1c0>
 8015f64:	8019      	strh	r1, [r3, #0]
 8015f66:	2300      	movs	r3, #0
 8015f68:	6123      	str	r3, [r4, #16]
 8015f6a:	4615      	mov	r5, r2
 8015f6c:	e7bc      	b.n	8015ee8 <_printf_i+0x14c>
 8015f6e:	682b      	ldr	r3, [r5, #0]
 8015f70:	1d1a      	adds	r2, r3, #4
 8015f72:	602a      	str	r2, [r5, #0]
 8015f74:	681d      	ldr	r5, [r3, #0]
 8015f76:	6862      	ldr	r2, [r4, #4]
 8015f78:	2100      	movs	r1, #0
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	f7ef fe78 	bl	8005c70 <memchr>
 8015f80:	b108      	cbz	r0, 8015f86 <_printf_i+0x1ea>
 8015f82:	1b40      	subs	r0, r0, r5
 8015f84:	6060      	str	r0, [r4, #4]
 8015f86:	6863      	ldr	r3, [r4, #4]
 8015f88:	6123      	str	r3, [r4, #16]
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f90:	e7aa      	b.n	8015ee8 <_printf_i+0x14c>
 8015f92:	6923      	ldr	r3, [r4, #16]
 8015f94:	462a      	mov	r2, r5
 8015f96:	4649      	mov	r1, r9
 8015f98:	4640      	mov	r0, r8
 8015f9a:	47d0      	blx	sl
 8015f9c:	3001      	adds	r0, #1
 8015f9e:	d0ad      	beq.n	8015efc <_printf_i+0x160>
 8015fa0:	6823      	ldr	r3, [r4, #0]
 8015fa2:	079b      	lsls	r3, r3, #30
 8015fa4:	d413      	bmi.n	8015fce <_printf_i+0x232>
 8015fa6:	68e0      	ldr	r0, [r4, #12]
 8015fa8:	9b03      	ldr	r3, [sp, #12]
 8015faa:	4298      	cmp	r0, r3
 8015fac:	bfb8      	it	lt
 8015fae:	4618      	movlt	r0, r3
 8015fb0:	e7a6      	b.n	8015f00 <_printf_i+0x164>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	4632      	mov	r2, r6
 8015fb6:	4649      	mov	r1, r9
 8015fb8:	4640      	mov	r0, r8
 8015fba:	47d0      	blx	sl
 8015fbc:	3001      	adds	r0, #1
 8015fbe:	d09d      	beq.n	8015efc <_printf_i+0x160>
 8015fc0:	3501      	adds	r5, #1
 8015fc2:	68e3      	ldr	r3, [r4, #12]
 8015fc4:	9903      	ldr	r1, [sp, #12]
 8015fc6:	1a5b      	subs	r3, r3, r1
 8015fc8:	42ab      	cmp	r3, r5
 8015fca:	dcf2      	bgt.n	8015fb2 <_printf_i+0x216>
 8015fcc:	e7eb      	b.n	8015fa6 <_printf_i+0x20a>
 8015fce:	2500      	movs	r5, #0
 8015fd0:	f104 0619 	add.w	r6, r4, #25
 8015fd4:	e7f5      	b.n	8015fc2 <_printf_i+0x226>
 8015fd6:	bf00      	nop
 8015fd8:	08016e45 	.word	0x08016e45
 8015fdc:	08016e56 	.word	0x08016e56

08015fe0 <__sflush_r>:
 8015fe0:	898a      	ldrh	r2, [r1, #12]
 8015fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fe6:	4605      	mov	r5, r0
 8015fe8:	0710      	lsls	r0, r2, #28
 8015fea:	460c      	mov	r4, r1
 8015fec:	d458      	bmi.n	80160a0 <__sflush_r+0xc0>
 8015fee:	684b      	ldr	r3, [r1, #4]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	dc05      	bgt.n	8016000 <__sflush_r+0x20>
 8015ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	dc02      	bgt.n	8016000 <__sflush_r+0x20>
 8015ffa:	2000      	movs	r0, #0
 8015ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016002:	2e00      	cmp	r6, #0
 8016004:	d0f9      	beq.n	8015ffa <__sflush_r+0x1a>
 8016006:	2300      	movs	r3, #0
 8016008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801600c:	682f      	ldr	r7, [r5, #0]
 801600e:	6a21      	ldr	r1, [r4, #32]
 8016010:	602b      	str	r3, [r5, #0]
 8016012:	d032      	beq.n	801607a <__sflush_r+0x9a>
 8016014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016016:	89a3      	ldrh	r3, [r4, #12]
 8016018:	075a      	lsls	r2, r3, #29
 801601a:	d505      	bpl.n	8016028 <__sflush_r+0x48>
 801601c:	6863      	ldr	r3, [r4, #4]
 801601e:	1ac0      	subs	r0, r0, r3
 8016020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016022:	b10b      	cbz	r3, 8016028 <__sflush_r+0x48>
 8016024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016026:	1ac0      	subs	r0, r0, r3
 8016028:	2300      	movs	r3, #0
 801602a:	4602      	mov	r2, r0
 801602c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801602e:	6a21      	ldr	r1, [r4, #32]
 8016030:	4628      	mov	r0, r5
 8016032:	47b0      	blx	r6
 8016034:	1c43      	adds	r3, r0, #1
 8016036:	89a3      	ldrh	r3, [r4, #12]
 8016038:	d106      	bne.n	8016048 <__sflush_r+0x68>
 801603a:	6829      	ldr	r1, [r5, #0]
 801603c:	291d      	cmp	r1, #29
 801603e:	d82b      	bhi.n	8016098 <__sflush_r+0xb8>
 8016040:	4a29      	ldr	r2, [pc, #164]	; (80160e8 <__sflush_r+0x108>)
 8016042:	410a      	asrs	r2, r1
 8016044:	07d6      	lsls	r6, r2, #31
 8016046:	d427      	bmi.n	8016098 <__sflush_r+0xb8>
 8016048:	2200      	movs	r2, #0
 801604a:	6062      	str	r2, [r4, #4]
 801604c:	04d9      	lsls	r1, r3, #19
 801604e:	6922      	ldr	r2, [r4, #16]
 8016050:	6022      	str	r2, [r4, #0]
 8016052:	d504      	bpl.n	801605e <__sflush_r+0x7e>
 8016054:	1c42      	adds	r2, r0, #1
 8016056:	d101      	bne.n	801605c <__sflush_r+0x7c>
 8016058:	682b      	ldr	r3, [r5, #0]
 801605a:	b903      	cbnz	r3, 801605e <__sflush_r+0x7e>
 801605c:	6560      	str	r0, [r4, #84]	; 0x54
 801605e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016060:	602f      	str	r7, [r5, #0]
 8016062:	2900      	cmp	r1, #0
 8016064:	d0c9      	beq.n	8015ffa <__sflush_r+0x1a>
 8016066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801606a:	4299      	cmp	r1, r3
 801606c:	d002      	beq.n	8016074 <__sflush_r+0x94>
 801606e:	4628      	mov	r0, r5
 8016070:	f7ff fb3e 	bl	80156f0 <_free_r>
 8016074:	2000      	movs	r0, #0
 8016076:	6360      	str	r0, [r4, #52]	; 0x34
 8016078:	e7c0      	b.n	8015ffc <__sflush_r+0x1c>
 801607a:	2301      	movs	r3, #1
 801607c:	4628      	mov	r0, r5
 801607e:	47b0      	blx	r6
 8016080:	1c41      	adds	r1, r0, #1
 8016082:	d1c8      	bne.n	8016016 <__sflush_r+0x36>
 8016084:	682b      	ldr	r3, [r5, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d0c5      	beq.n	8016016 <__sflush_r+0x36>
 801608a:	2b1d      	cmp	r3, #29
 801608c:	d001      	beq.n	8016092 <__sflush_r+0xb2>
 801608e:	2b16      	cmp	r3, #22
 8016090:	d101      	bne.n	8016096 <__sflush_r+0xb6>
 8016092:	602f      	str	r7, [r5, #0]
 8016094:	e7b1      	b.n	8015ffa <__sflush_r+0x1a>
 8016096:	89a3      	ldrh	r3, [r4, #12]
 8016098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801609c:	81a3      	strh	r3, [r4, #12]
 801609e:	e7ad      	b.n	8015ffc <__sflush_r+0x1c>
 80160a0:	690f      	ldr	r7, [r1, #16]
 80160a2:	2f00      	cmp	r7, #0
 80160a4:	d0a9      	beq.n	8015ffa <__sflush_r+0x1a>
 80160a6:	0793      	lsls	r3, r2, #30
 80160a8:	680e      	ldr	r6, [r1, #0]
 80160aa:	bf08      	it	eq
 80160ac:	694b      	ldreq	r3, [r1, #20]
 80160ae:	600f      	str	r7, [r1, #0]
 80160b0:	bf18      	it	ne
 80160b2:	2300      	movne	r3, #0
 80160b4:	eba6 0807 	sub.w	r8, r6, r7
 80160b8:	608b      	str	r3, [r1, #8]
 80160ba:	f1b8 0f00 	cmp.w	r8, #0
 80160be:	dd9c      	ble.n	8015ffa <__sflush_r+0x1a>
 80160c0:	6a21      	ldr	r1, [r4, #32]
 80160c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80160c4:	4643      	mov	r3, r8
 80160c6:	463a      	mov	r2, r7
 80160c8:	4628      	mov	r0, r5
 80160ca:	47b0      	blx	r6
 80160cc:	2800      	cmp	r0, #0
 80160ce:	dc06      	bgt.n	80160de <__sflush_r+0xfe>
 80160d0:	89a3      	ldrh	r3, [r4, #12]
 80160d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160d6:	81a3      	strh	r3, [r4, #12]
 80160d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80160dc:	e78e      	b.n	8015ffc <__sflush_r+0x1c>
 80160de:	4407      	add	r7, r0
 80160e0:	eba8 0800 	sub.w	r8, r8, r0
 80160e4:	e7e9      	b.n	80160ba <__sflush_r+0xda>
 80160e6:	bf00      	nop
 80160e8:	dfbffffe 	.word	0xdfbffffe

080160ec <_fflush_r>:
 80160ec:	b538      	push	{r3, r4, r5, lr}
 80160ee:	690b      	ldr	r3, [r1, #16]
 80160f0:	4605      	mov	r5, r0
 80160f2:	460c      	mov	r4, r1
 80160f4:	b913      	cbnz	r3, 80160fc <_fflush_r+0x10>
 80160f6:	2500      	movs	r5, #0
 80160f8:	4628      	mov	r0, r5
 80160fa:	bd38      	pop	{r3, r4, r5, pc}
 80160fc:	b118      	cbz	r0, 8016106 <_fflush_r+0x1a>
 80160fe:	6a03      	ldr	r3, [r0, #32]
 8016100:	b90b      	cbnz	r3, 8016106 <_fflush_r+0x1a>
 8016102:	f7ff f91b 	bl	801533c <__sinit>
 8016106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d0f3      	beq.n	80160f6 <_fflush_r+0xa>
 801610e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016110:	07d0      	lsls	r0, r2, #31
 8016112:	d404      	bmi.n	801611e <_fflush_r+0x32>
 8016114:	0599      	lsls	r1, r3, #22
 8016116:	d402      	bmi.n	801611e <_fflush_r+0x32>
 8016118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801611a:	f7ff fad0 	bl	80156be <__retarget_lock_acquire_recursive>
 801611e:	4628      	mov	r0, r5
 8016120:	4621      	mov	r1, r4
 8016122:	f7ff ff5d 	bl	8015fe0 <__sflush_r>
 8016126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016128:	07da      	lsls	r2, r3, #31
 801612a:	4605      	mov	r5, r0
 801612c:	d4e4      	bmi.n	80160f8 <_fflush_r+0xc>
 801612e:	89a3      	ldrh	r3, [r4, #12]
 8016130:	059b      	lsls	r3, r3, #22
 8016132:	d4e1      	bmi.n	80160f8 <_fflush_r+0xc>
 8016134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016136:	f7ff fac3 	bl	80156c0 <__retarget_lock_release_recursive>
 801613a:	e7dd      	b.n	80160f8 <_fflush_r+0xc>

0801613c <__swbuf_r>:
 801613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801613e:	460e      	mov	r6, r1
 8016140:	4614      	mov	r4, r2
 8016142:	4605      	mov	r5, r0
 8016144:	b118      	cbz	r0, 801614e <__swbuf_r+0x12>
 8016146:	6a03      	ldr	r3, [r0, #32]
 8016148:	b90b      	cbnz	r3, 801614e <__swbuf_r+0x12>
 801614a:	f7ff f8f7 	bl	801533c <__sinit>
 801614e:	69a3      	ldr	r3, [r4, #24]
 8016150:	60a3      	str	r3, [r4, #8]
 8016152:	89a3      	ldrh	r3, [r4, #12]
 8016154:	071a      	lsls	r2, r3, #28
 8016156:	d525      	bpl.n	80161a4 <__swbuf_r+0x68>
 8016158:	6923      	ldr	r3, [r4, #16]
 801615a:	b31b      	cbz	r3, 80161a4 <__swbuf_r+0x68>
 801615c:	6823      	ldr	r3, [r4, #0]
 801615e:	6922      	ldr	r2, [r4, #16]
 8016160:	1a98      	subs	r0, r3, r2
 8016162:	6963      	ldr	r3, [r4, #20]
 8016164:	b2f6      	uxtb	r6, r6
 8016166:	4283      	cmp	r3, r0
 8016168:	4637      	mov	r7, r6
 801616a:	dc04      	bgt.n	8016176 <__swbuf_r+0x3a>
 801616c:	4621      	mov	r1, r4
 801616e:	4628      	mov	r0, r5
 8016170:	f7ff ffbc 	bl	80160ec <_fflush_r>
 8016174:	b9e0      	cbnz	r0, 80161b0 <__swbuf_r+0x74>
 8016176:	68a3      	ldr	r3, [r4, #8]
 8016178:	3b01      	subs	r3, #1
 801617a:	60a3      	str	r3, [r4, #8]
 801617c:	6823      	ldr	r3, [r4, #0]
 801617e:	1c5a      	adds	r2, r3, #1
 8016180:	6022      	str	r2, [r4, #0]
 8016182:	701e      	strb	r6, [r3, #0]
 8016184:	6962      	ldr	r2, [r4, #20]
 8016186:	1c43      	adds	r3, r0, #1
 8016188:	429a      	cmp	r2, r3
 801618a:	d004      	beq.n	8016196 <__swbuf_r+0x5a>
 801618c:	89a3      	ldrh	r3, [r4, #12]
 801618e:	07db      	lsls	r3, r3, #31
 8016190:	d506      	bpl.n	80161a0 <__swbuf_r+0x64>
 8016192:	2e0a      	cmp	r6, #10
 8016194:	d104      	bne.n	80161a0 <__swbuf_r+0x64>
 8016196:	4621      	mov	r1, r4
 8016198:	4628      	mov	r0, r5
 801619a:	f7ff ffa7 	bl	80160ec <_fflush_r>
 801619e:	b938      	cbnz	r0, 80161b0 <__swbuf_r+0x74>
 80161a0:	4638      	mov	r0, r7
 80161a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161a4:	4621      	mov	r1, r4
 80161a6:	4628      	mov	r0, r5
 80161a8:	f000 f806 	bl	80161b8 <__swsetup_r>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d0d5      	beq.n	801615c <__swbuf_r+0x20>
 80161b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80161b4:	e7f4      	b.n	80161a0 <__swbuf_r+0x64>
	...

080161b8 <__swsetup_r>:
 80161b8:	b538      	push	{r3, r4, r5, lr}
 80161ba:	4b2a      	ldr	r3, [pc, #168]	; (8016264 <__swsetup_r+0xac>)
 80161bc:	4605      	mov	r5, r0
 80161be:	6818      	ldr	r0, [r3, #0]
 80161c0:	460c      	mov	r4, r1
 80161c2:	b118      	cbz	r0, 80161cc <__swsetup_r+0x14>
 80161c4:	6a03      	ldr	r3, [r0, #32]
 80161c6:	b90b      	cbnz	r3, 80161cc <__swsetup_r+0x14>
 80161c8:	f7ff f8b8 	bl	801533c <__sinit>
 80161cc:	89a3      	ldrh	r3, [r4, #12]
 80161ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80161d2:	0718      	lsls	r0, r3, #28
 80161d4:	d422      	bmi.n	801621c <__swsetup_r+0x64>
 80161d6:	06d9      	lsls	r1, r3, #27
 80161d8:	d407      	bmi.n	80161ea <__swsetup_r+0x32>
 80161da:	2309      	movs	r3, #9
 80161dc:	602b      	str	r3, [r5, #0]
 80161de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80161e2:	81a3      	strh	r3, [r4, #12]
 80161e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161e8:	e034      	b.n	8016254 <__swsetup_r+0x9c>
 80161ea:	0758      	lsls	r0, r3, #29
 80161ec:	d512      	bpl.n	8016214 <__swsetup_r+0x5c>
 80161ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161f0:	b141      	cbz	r1, 8016204 <__swsetup_r+0x4c>
 80161f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161f6:	4299      	cmp	r1, r3
 80161f8:	d002      	beq.n	8016200 <__swsetup_r+0x48>
 80161fa:	4628      	mov	r0, r5
 80161fc:	f7ff fa78 	bl	80156f0 <_free_r>
 8016200:	2300      	movs	r3, #0
 8016202:	6363      	str	r3, [r4, #52]	; 0x34
 8016204:	89a3      	ldrh	r3, [r4, #12]
 8016206:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801620a:	81a3      	strh	r3, [r4, #12]
 801620c:	2300      	movs	r3, #0
 801620e:	6063      	str	r3, [r4, #4]
 8016210:	6923      	ldr	r3, [r4, #16]
 8016212:	6023      	str	r3, [r4, #0]
 8016214:	89a3      	ldrh	r3, [r4, #12]
 8016216:	f043 0308 	orr.w	r3, r3, #8
 801621a:	81a3      	strh	r3, [r4, #12]
 801621c:	6923      	ldr	r3, [r4, #16]
 801621e:	b94b      	cbnz	r3, 8016234 <__swsetup_r+0x7c>
 8016220:	89a3      	ldrh	r3, [r4, #12]
 8016222:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801622a:	d003      	beq.n	8016234 <__swsetup_r+0x7c>
 801622c:	4621      	mov	r1, r4
 801622e:	4628      	mov	r0, r5
 8016230:	f000 f8cd 	bl	80163ce <__smakebuf_r>
 8016234:	89a0      	ldrh	r0, [r4, #12]
 8016236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801623a:	f010 0301 	ands.w	r3, r0, #1
 801623e:	d00a      	beq.n	8016256 <__swsetup_r+0x9e>
 8016240:	2300      	movs	r3, #0
 8016242:	60a3      	str	r3, [r4, #8]
 8016244:	6963      	ldr	r3, [r4, #20]
 8016246:	425b      	negs	r3, r3
 8016248:	61a3      	str	r3, [r4, #24]
 801624a:	6923      	ldr	r3, [r4, #16]
 801624c:	b943      	cbnz	r3, 8016260 <__swsetup_r+0xa8>
 801624e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016252:	d1c4      	bne.n	80161de <__swsetup_r+0x26>
 8016254:	bd38      	pop	{r3, r4, r5, pc}
 8016256:	0781      	lsls	r1, r0, #30
 8016258:	bf58      	it	pl
 801625a:	6963      	ldrpl	r3, [r4, #20]
 801625c:	60a3      	str	r3, [r4, #8]
 801625e:	e7f4      	b.n	801624a <__swsetup_r+0x92>
 8016260:	2000      	movs	r0, #0
 8016262:	e7f7      	b.n	8016254 <__swsetup_r+0x9c>
 8016264:	20000084 	.word	0x20000084

08016268 <memmove>:
 8016268:	4288      	cmp	r0, r1
 801626a:	b510      	push	{r4, lr}
 801626c:	eb01 0402 	add.w	r4, r1, r2
 8016270:	d902      	bls.n	8016278 <memmove+0x10>
 8016272:	4284      	cmp	r4, r0
 8016274:	4623      	mov	r3, r4
 8016276:	d807      	bhi.n	8016288 <memmove+0x20>
 8016278:	1e43      	subs	r3, r0, #1
 801627a:	42a1      	cmp	r1, r4
 801627c:	d008      	beq.n	8016290 <memmove+0x28>
 801627e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016286:	e7f8      	b.n	801627a <memmove+0x12>
 8016288:	4402      	add	r2, r0
 801628a:	4601      	mov	r1, r0
 801628c:	428a      	cmp	r2, r1
 801628e:	d100      	bne.n	8016292 <memmove+0x2a>
 8016290:	bd10      	pop	{r4, pc}
 8016292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801629a:	e7f7      	b.n	801628c <memmove+0x24>

0801629c <_raise_r>:
 801629c:	291f      	cmp	r1, #31
 801629e:	b538      	push	{r3, r4, r5, lr}
 80162a0:	4604      	mov	r4, r0
 80162a2:	460d      	mov	r5, r1
 80162a4:	d904      	bls.n	80162b0 <_raise_r+0x14>
 80162a6:	2316      	movs	r3, #22
 80162a8:	6003      	str	r3, [r0, #0]
 80162aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162ae:	bd38      	pop	{r3, r4, r5, pc}
 80162b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80162b2:	b112      	cbz	r2, 80162ba <_raise_r+0x1e>
 80162b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80162b8:	b94b      	cbnz	r3, 80162ce <_raise_r+0x32>
 80162ba:	4620      	mov	r0, r4
 80162bc:	f000 f830 	bl	8016320 <_getpid_r>
 80162c0:	462a      	mov	r2, r5
 80162c2:	4601      	mov	r1, r0
 80162c4:	4620      	mov	r0, r4
 80162c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162ca:	f000 b817 	b.w	80162fc <_kill_r>
 80162ce:	2b01      	cmp	r3, #1
 80162d0:	d00a      	beq.n	80162e8 <_raise_r+0x4c>
 80162d2:	1c59      	adds	r1, r3, #1
 80162d4:	d103      	bne.n	80162de <_raise_r+0x42>
 80162d6:	2316      	movs	r3, #22
 80162d8:	6003      	str	r3, [r0, #0]
 80162da:	2001      	movs	r0, #1
 80162dc:	e7e7      	b.n	80162ae <_raise_r+0x12>
 80162de:	2400      	movs	r4, #0
 80162e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80162e4:	4628      	mov	r0, r5
 80162e6:	4798      	blx	r3
 80162e8:	2000      	movs	r0, #0
 80162ea:	e7e0      	b.n	80162ae <_raise_r+0x12>

080162ec <raise>:
 80162ec:	4b02      	ldr	r3, [pc, #8]	; (80162f8 <raise+0xc>)
 80162ee:	4601      	mov	r1, r0
 80162f0:	6818      	ldr	r0, [r3, #0]
 80162f2:	f7ff bfd3 	b.w	801629c <_raise_r>
 80162f6:	bf00      	nop
 80162f8:	20000084 	.word	0x20000084

080162fc <_kill_r>:
 80162fc:	b538      	push	{r3, r4, r5, lr}
 80162fe:	4d07      	ldr	r5, [pc, #28]	; (801631c <_kill_r+0x20>)
 8016300:	2300      	movs	r3, #0
 8016302:	4604      	mov	r4, r0
 8016304:	4608      	mov	r0, r1
 8016306:	4611      	mov	r1, r2
 8016308:	602b      	str	r3, [r5, #0]
 801630a:	f7f1 fce1 	bl	8007cd0 <_kill>
 801630e:	1c43      	adds	r3, r0, #1
 8016310:	d102      	bne.n	8016318 <_kill_r+0x1c>
 8016312:	682b      	ldr	r3, [r5, #0]
 8016314:	b103      	cbz	r3, 8016318 <_kill_r+0x1c>
 8016316:	6023      	str	r3, [r4, #0]
 8016318:	bd38      	pop	{r3, r4, r5, pc}
 801631a:	bf00      	nop
 801631c:	20000a20 	.word	0x20000a20

08016320 <_getpid_r>:
 8016320:	f7f1 bcce 	b.w	8007cc0 <_getpid>

08016324 <_realloc_r>:
 8016324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016328:	4680      	mov	r8, r0
 801632a:	4614      	mov	r4, r2
 801632c:	460e      	mov	r6, r1
 801632e:	b921      	cbnz	r1, 801633a <_realloc_r+0x16>
 8016330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016334:	4611      	mov	r1, r2
 8016336:	f7fe bee9 	b.w	801510c <_malloc_r>
 801633a:	b92a      	cbnz	r2, 8016348 <_realloc_r+0x24>
 801633c:	f7ff f9d8 	bl	80156f0 <_free_r>
 8016340:	4625      	mov	r5, r4
 8016342:	4628      	mov	r0, r5
 8016344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016348:	f000 f8a0 	bl	801648c <_malloc_usable_size_r>
 801634c:	4284      	cmp	r4, r0
 801634e:	4607      	mov	r7, r0
 8016350:	d802      	bhi.n	8016358 <_realloc_r+0x34>
 8016352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016356:	d812      	bhi.n	801637e <_realloc_r+0x5a>
 8016358:	4621      	mov	r1, r4
 801635a:	4640      	mov	r0, r8
 801635c:	f7fe fed6 	bl	801510c <_malloc_r>
 8016360:	4605      	mov	r5, r0
 8016362:	2800      	cmp	r0, #0
 8016364:	d0ed      	beq.n	8016342 <_realloc_r+0x1e>
 8016366:	42bc      	cmp	r4, r7
 8016368:	4622      	mov	r2, r4
 801636a:	4631      	mov	r1, r6
 801636c:	bf28      	it	cs
 801636e:	463a      	movcs	r2, r7
 8016370:	f7ff f9a9 	bl	80156c6 <memcpy>
 8016374:	4631      	mov	r1, r6
 8016376:	4640      	mov	r0, r8
 8016378:	f7ff f9ba 	bl	80156f0 <_free_r>
 801637c:	e7e1      	b.n	8016342 <_realloc_r+0x1e>
 801637e:	4635      	mov	r5, r6
 8016380:	e7df      	b.n	8016342 <_realloc_r+0x1e>

08016382 <__swhatbuf_r>:
 8016382:	b570      	push	{r4, r5, r6, lr}
 8016384:	460c      	mov	r4, r1
 8016386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801638a:	2900      	cmp	r1, #0
 801638c:	b096      	sub	sp, #88	; 0x58
 801638e:	4615      	mov	r5, r2
 8016390:	461e      	mov	r6, r3
 8016392:	da0d      	bge.n	80163b0 <__swhatbuf_r+0x2e>
 8016394:	89a3      	ldrh	r3, [r4, #12]
 8016396:	f013 0f80 	tst.w	r3, #128	; 0x80
 801639a:	f04f 0100 	mov.w	r1, #0
 801639e:	bf0c      	ite	eq
 80163a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80163a4:	2340      	movne	r3, #64	; 0x40
 80163a6:	2000      	movs	r0, #0
 80163a8:	6031      	str	r1, [r6, #0]
 80163aa:	602b      	str	r3, [r5, #0]
 80163ac:	b016      	add	sp, #88	; 0x58
 80163ae:	bd70      	pop	{r4, r5, r6, pc}
 80163b0:	466a      	mov	r2, sp
 80163b2:	f000 f849 	bl	8016448 <_fstat_r>
 80163b6:	2800      	cmp	r0, #0
 80163b8:	dbec      	blt.n	8016394 <__swhatbuf_r+0x12>
 80163ba:	9901      	ldr	r1, [sp, #4]
 80163bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80163c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80163c4:	4259      	negs	r1, r3
 80163c6:	4159      	adcs	r1, r3
 80163c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163cc:	e7eb      	b.n	80163a6 <__swhatbuf_r+0x24>

080163ce <__smakebuf_r>:
 80163ce:	898b      	ldrh	r3, [r1, #12]
 80163d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80163d2:	079d      	lsls	r5, r3, #30
 80163d4:	4606      	mov	r6, r0
 80163d6:	460c      	mov	r4, r1
 80163d8:	d507      	bpl.n	80163ea <__smakebuf_r+0x1c>
 80163da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80163de:	6023      	str	r3, [r4, #0]
 80163e0:	6123      	str	r3, [r4, #16]
 80163e2:	2301      	movs	r3, #1
 80163e4:	6163      	str	r3, [r4, #20]
 80163e6:	b002      	add	sp, #8
 80163e8:	bd70      	pop	{r4, r5, r6, pc}
 80163ea:	ab01      	add	r3, sp, #4
 80163ec:	466a      	mov	r2, sp
 80163ee:	f7ff ffc8 	bl	8016382 <__swhatbuf_r>
 80163f2:	9900      	ldr	r1, [sp, #0]
 80163f4:	4605      	mov	r5, r0
 80163f6:	4630      	mov	r0, r6
 80163f8:	f7fe fe88 	bl	801510c <_malloc_r>
 80163fc:	b948      	cbnz	r0, 8016412 <__smakebuf_r+0x44>
 80163fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016402:	059a      	lsls	r2, r3, #22
 8016404:	d4ef      	bmi.n	80163e6 <__smakebuf_r+0x18>
 8016406:	f023 0303 	bic.w	r3, r3, #3
 801640a:	f043 0302 	orr.w	r3, r3, #2
 801640e:	81a3      	strh	r3, [r4, #12]
 8016410:	e7e3      	b.n	80163da <__smakebuf_r+0xc>
 8016412:	89a3      	ldrh	r3, [r4, #12]
 8016414:	6020      	str	r0, [r4, #0]
 8016416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801641a:	81a3      	strh	r3, [r4, #12]
 801641c:	9b00      	ldr	r3, [sp, #0]
 801641e:	6163      	str	r3, [r4, #20]
 8016420:	9b01      	ldr	r3, [sp, #4]
 8016422:	6120      	str	r0, [r4, #16]
 8016424:	b15b      	cbz	r3, 801643e <__smakebuf_r+0x70>
 8016426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801642a:	4630      	mov	r0, r6
 801642c:	f000 f81e 	bl	801646c <_isatty_r>
 8016430:	b128      	cbz	r0, 801643e <__smakebuf_r+0x70>
 8016432:	89a3      	ldrh	r3, [r4, #12]
 8016434:	f023 0303 	bic.w	r3, r3, #3
 8016438:	f043 0301 	orr.w	r3, r3, #1
 801643c:	81a3      	strh	r3, [r4, #12]
 801643e:	89a3      	ldrh	r3, [r4, #12]
 8016440:	431d      	orrs	r5, r3
 8016442:	81a5      	strh	r5, [r4, #12]
 8016444:	e7cf      	b.n	80163e6 <__smakebuf_r+0x18>
	...

08016448 <_fstat_r>:
 8016448:	b538      	push	{r3, r4, r5, lr}
 801644a:	4d07      	ldr	r5, [pc, #28]	; (8016468 <_fstat_r+0x20>)
 801644c:	2300      	movs	r3, #0
 801644e:	4604      	mov	r4, r0
 8016450:	4608      	mov	r0, r1
 8016452:	4611      	mov	r1, r2
 8016454:	602b      	str	r3, [r5, #0]
 8016456:	f7f1 fc7e 	bl	8007d56 <_fstat>
 801645a:	1c43      	adds	r3, r0, #1
 801645c:	d102      	bne.n	8016464 <_fstat_r+0x1c>
 801645e:	682b      	ldr	r3, [r5, #0]
 8016460:	b103      	cbz	r3, 8016464 <_fstat_r+0x1c>
 8016462:	6023      	str	r3, [r4, #0]
 8016464:	bd38      	pop	{r3, r4, r5, pc}
 8016466:	bf00      	nop
 8016468:	20000a20 	.word	0x20000a20

0801646c <_isatty_r>:
 801646c:	b538      	push	{r3, r4, r5, lr}
 801646e:	4d06      	ldr	r5, [pc, #24]	; (8016488 <_isatty_r+0x1c>)
 8016470:	2300      	movs	r3, #0
 8016472:	4604      	mov	r4, r0
 8016474:	4608      	mov	r0, r1
 8016476:	602b      	str	r3, [r5, #0]
 8016478:	f7f1 fc7d 	bl	8007d76 <_isatty>
 801647c:	1c43      	adds	r3, r0, #1
 801647e:	d102      	bne.n	8016486 <_isatty_r+0x1a>
 8016480:	682b      	ldr	r3, [r5, #0]
 8016482:	b103      	cbz	r3, 8016486 <_isatty_r+0x1a>
 8016484:	6023      	str	r3, [r4, #0]
 8016486:	bd38      	pop	{r3, r4, r5, pc}
 8016488:	20000a20 	.word	0x20000a20

0801648c <_malloc_usable_size_r>:
 801648c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016490:	1f18      	subs	r0, r3, #4
 8016492:	2b00      	cmp	r3, #0
 8016494:	bfbc      	itt	lt
 8016496:	580b      	ldrlt	r3, [r1, r0]
 8016498:	18c0      	addlt	r0, r0, r3
 801649a:	4770      	bx	lr

0801649c <_init>:
 801649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801649e:	bf00      	nop
 80164a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80164a2:	bc08      	pop	{r3}
 80164a4:	469e      	mov	lr, r3
 80164a6:	4770      	bx	lr

080164a8 <_fini>:
 80164a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164aa:	bf00      	nop
 80164ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80164ae:	bc08      	pop	{r3}
 80164b0:	469e      	mov	lr, r3
 80164b2:	4770      	bx	lr
